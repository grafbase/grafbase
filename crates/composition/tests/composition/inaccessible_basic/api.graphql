type Ungulate {
    id: ID!
    name: String!
}

type Movie {
    director: String!
    id: ID!
    releaseYear: Int
    title: String!
}

type Series {
    id: ID!
    seasons: Int
    title: String!
}

type New {
    other: String!
}

type Book {
    author: String!
    genre: String
    id: ID!
    publishedYear: Int
    title: String!
}

type Quadratic {
    coefficients: [Float]
    degree: Int
    discriminant: Float
}

type Cubic {
    coefficients: [Float]
    degree: Int
    inflectionPoint: Float
}

type Query {
    getBook(id: ID!): Book
    getNew(name: String!): New
    getUngulate(id: ID!): Ungulate
}

type Mutation {
    addBook(input: BookInput!): Book
    updateBook(id: ID!, input: BookInput!): Book
}
