[package]
name = "grafbase-sdk"
version = "0.16.1"
description = "An SDK to implement extensions for the Grafbase Gateway"
edition = "2024"
license.workspace = true
homepage.workspace = true
keywords.workspace = true
repository.workspace = true

[package.metadata.docs.rs]
all-features = true

[features]
## Test utilities to write integration tests for your extension. The [Grafbase CLI](https://grafbase.com/docs/reference/grafbase-cli)
## will automatically generate an example test with the `grafbase extension init` command. You can also check out Grafbase's [extension](https://github.com/grafbase/extensions/tree/main/extensions) repository for examples
test-utils = [
    "dep:duct",
    "dep:fslock",
    "dep:indoc",
    "dep:reqwest",
    "dep:tempfile",
    "dep:toml",
    "dep:which",
    "dep:futures-util",
    "dep:graphql-composition",
    "dep:graphql-federated-graph",
    "dep:grafbase-sdk-mock",
    "dep:graphql-ws-client",
    "dep:async-tungstenite",
    "dep:tokio",
    "dep:tungstenite",
    "dep:anyhow",
]
## Utilities to use `jq`-like selection to process data in your extension like the [rest](https://grafbase.com/extensions/rest) extension.
jq-selection = [
    "dep:jaq-core",
    "dep:jaq-json",
    "dep:jaq-std",
    "dep:hashbrown",
]

[dependencies]
document-features = { version = "0.2" }
fxhash = "0.2"
grafbase-sdk-derive = { version = "0.4.0", path = "derive" }
http = "1"
minicbor-serde = { version = "0.4.1", features = ["alloc"] }
postcard = { version = "1", features = ["use-std"] }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
serde_path_to_error = "0.1"
serde_urlencoded = "0.7"
thiserror = "2"
url = "2"
wit-bindgen.workspace = true

# jq selection
jaq-core = { version = "2.1.1", optional = true }
jaq-json = { version = "1.1.1", features = ["serde_json"], optional = true }
jaq-std = { version = "2.1.0", optional = true }

# test-utils
anyhow = { workspace = true, optional = true }
async-tungstenite = { workspace = true, optional = true, features = ["tokio-runtime"] }
chrono.workspace = true
duct = { workspace = true, optional = true }
fslock = { workspace = true, optional = true }
futures-util = { workspace = true, optional = true }
grafbase-sdk-mock = { version = "0.1.2", path = "mock", optional = true }
graphql-composition = { version = "0.8.0", features = [
    "grafbase-extensions",
], optional = true, path = "../graphql-composition" }
graphql-federated-graph = { version = "0.8.0", optional = true, path = "../graphql-federated-graph" }
graphql-ws-client = { workspace = true, optional = true }
hashbrown = { workspace = true, optional = true }
indoc = { workspace = true, optional = true }
reqwest = { workspace = true, features = ["json"], optional = true }
rust_decimal.workspace = true
tempfile = { workspace = true, optional = true }
time.workspace = true
tokio = { workspace = true, features = ["net"], optional = true }
toml = { workspace = true, optional = true }
tungstenite = { workspace = true, optional = true }
uuid.workspace = true
which = { workspace = true, optional = true }
zerocopy = { workspace = true, features = ["std"] }

[dev-dependencies]
insta.workspace = true

[lints]
workspace = true

[build-dependencies]
semver.workspace = true
