package grafbase:sdk;

interface types {
    use directive.{directive-site, field-definition-directive};

    // The context as a read-only object.
    resource shared-context {
        // Fetches a context value with the given name, if existing.
        get: func(name: string) -> option<string>;
        // Gets the current trace-id.
        trace-id: func() -> string;
    }

    // An HTTP error response.
    record error-response {
        // HTTP status code. Must be a valid status code. If not, the status code will be 500.
        status-code: u16,
        // List of GraphQL errors.
        errors: list<error>,
    }

    // An error response can be used to inject an error to the GraphQL response.
    record error {
        // Adds the given extensions to the response extensions. The first item in
        // the tuple is the extension key, and the second item is the extension value encoded in CBOR
        extensions: list<tuple<string, list<u8>>>,
        // The error message.
        message: string,
    }

    record field-output {
      // list in the same order as input.edges with data serialized in CBOR
      outputs: list<result<list<u8>, error>>
    }

    // A sender for the system access log.
    resource access-log {
        // Sends the data to the access log.
        send: static func(data: list<u8>) -> result<_, log-error>;
    }

    // Error variant sent if failing to write to access log.
    variant log-error {
        // The log channel is over capacity. The data is returned to the caller.
        channel-full(list<u8>),
        // The channel is closed.
        channel-closed,
    }

    variant nats-auth {
        // Username and password authentication
        username-password(tuple<string, string>),
        // Token authentication
        token(string),
        // Credentials authentication
        credentials(string),
    }

    // Represents a NATS message.
    record nats-message {
        // The subject or channel name of the NATS message
        subject: string,
        // The raw payload data of the message as bytes
        payload: list<u8>,
    }

    record nats-stream-config {
        // Name that identifies the stream
        stream-name: string,
        // Name to identify a specific consumer
        consumer-name: string,
        // Optional name to identify a durable subscription
        durable-name: option<string>,
        // Optional description for the stream configuration
        description: option<string>,
        // Policy that determines which messages to deliver
        deliver-policy: nats-stream-deliver-policy,
        // Threshold in milliseconds for considering a consumer inactive
        inactive-threshold-ms: u64,
    }

    variant nats-stream-deliver-policy {
        // All causes the consumer to receive the oldest messages still present in the system.
        // This is the default.
        all,
        // Last will start the consumer with the last sequence received.
        last,
        // New will only deliver new messages that are received by the JetStream server after
        // the consumer is created.
        new,
        // ByStartSeq will look for a defined starting sequence to the consumer’s configured
        // opt_start_seq parameter.
        by-start-sequence(u64),
        // ByStartTime will select the first message with a timestamp >= to the consumer’s
        // configured opt_start_time parameter.
        by-start-time-ms(u64),
        // LastPerSubject will start the consumer with the last message for all subjects received.
        last-per-subject
    }

    // A NATS client
    resource nats-client {
        // Creates a new NATS client.
        connect: static func(servers: list<string>, auth: option<nats-auth>) -> result<nats-client, string>;
        // Publishes a message to a subject.
        publish: func(subject: string, message: list<u8>) -> result<_, string>;
        // Subscribes to a subject.
        subscribe: func(subject: string, stream-config: option<nats-stream-config>) -> result<nats-subscriber, string>;
        // Sends a request to a subject and waits for a response
        request: func(subject: string, message: list<u8>, timeout-ms: option<u64>) -> result<nats-message, string>;
        // Creates a key-value store instance for a specific bucket
        key-value: func(bucket: string) -> result<nats-key-value, string>;
    }

    // A NATS key-value store
    resource nats-key-value {
        // Creates a new key-value pair in the bucket
        // Returns the sequence number upon success, or an error string if creation fails
        // Will return an error if the key already exists
        create: func(key: string, value: list<u8>) -> result<u64, string>;

        // Updates or creates a key-value pair in the bucket
        // Returns the sequence number upon success, or an error string if the operation fails
        // Will create the key if it doesn't exist or update it if it already exists
        put: func(key: string, value: list<u8>) -> result<u64, string>;

        // Retrieves the value associated with the specified key
        // Returns an error if the key doesn't exist or another error occurs
        get: func(key: string) -> result<option<list<u8>>, string>;

        // Deletes the specified key-value pair from the bucket
        // Returns an error if the key doesn't exist or another error occurs
        delete: func(key: string) -> result<_, string>;
    }

    // A NATS subscriber resource for receiving messages from a subject
    resource nats-subscriber {
        // Retrieves the next message from the subscription
        next: func() -> result<option<nats-message>, string>;
    }

    // A HTTP client.
    resource http-client {
        // Executes a request and returns the response, yielding the current future until finished.
        execute: static func(request: http-request) -> result<http-response, http-error>;
        // Executes multiple requests in parallel, yielding the current future until all requests are done.
        execute-many: static func(requests: list<http-request>) -> list<result<http-response, http-error>>;
    }

    // A HTTP request.
    record http-request {
        // The HTTP method.
        method: http-method,
        // The URL to send the request to.
        url: string,
        // The headers to send with the request. Keys and values must be ASCII strings.
        headers: list<tuple<string, string>>,
        // The body of the request. If the body is set, the Content-Type header must be set.
        body: list<u8>,
        // The timeout in milliseconds for the request. If not set, no timeout is used.
        timeout-ms: option<u64>,
    }

    // The HTTP method.
    enum http-method {
        // The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
        get,
        // The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.
        post,
        // The PUT method replaces all current representations of the target resource with the request payload.
        put,
        // The DELETE method deletes the specified resource.
        delete,
        // The PATCH method is used to apply partial modifications to a resource.
        patch,
        // The HEAD method asks for a response identical to that of a GET request, but without the response body.
        head,
        // The OPTIONS method is used to describe the communication options for the target resource.
        options,
        // The CONNECT method establishes a tunnel to the server identified by the target resource.
        connect,
        // The TRACE method performs a message loop-back test along the path to the target resource.
        trace,
    }

    // An HTTP response.
    record http-response {
        // The HTTP status code.
        status: u16,
        // The HTTP version.
        version: http-version,
        // The headers of the response.
        headers: list<tuple<string, string>>,
        // The body of the response.
        body: list<u8>,
    }

    // The HTTP version.
    enum http-version {
        // The HTTP/0.9 version.
        http09,
        // The HTTP/1.0 version.
        http10,
        // The HTTP/1.1 version.
        http11,
        // The HTTP/2.0 version.
        http20,
        // The HTTP/3.0 version.
        http30,
    }

    // An HTTP error.
    variant http-error {
        // The request timed out.
        timeout,
        // The request failed due to an error (invalid user data).
        request(string),
        // The request failed due to an error (server connection failed).
        connect(string),
    }

    // A resource for accessing HTTP headers.
    resource headers {
        // Retrieves the value of a header by name.
        // Returns None if the header does not exist.
        get: func(name: string) -> option<string>;
        // Return all headers as a list of tuples.
        entries: func() -> list<tuple<string, string>>;
    }

    // A token represents an authenticated user identity.
    record token {
        // The raw binary token data
        raw: list<u8>,
    }

    // A resource for caching data with optional expiration.
    resource cache {
        // Retrieves a value from the cache by key.
        // Returns None if the key does not exist or has expired.
        get: static func(key: string) -> option<list<u8>>;
        // Sets a value in the cache with the specified key.
        // Optional ttl-ms parameter sets the time-to-live in milliseconds after which the value expires.
        // If ttl-ms is None, the value will not expire automatically.
        set: static func(key: string, value: list<u8>, ttl-ms: option<u64>) -> ();
    }

    record query-elements {
        // Tuple of directive name and a range over the `elements` list it's associated with.
        directive-names: list<tuple<string, u32, u32>>,
        // Represents an element of the query associated with the directive
        elements: list<directive-site>
    }

    variant authorization-decisions {
        grant-all,
        deny-all(error),
        sparse-deny(sparse-deny-authorization-decisions)
    }

    record sparse-deny-authorization-decisions {
        // For elements
        element-to-error: list<tuple<u32, u32>>,
        errors: list<error>
    }
}

interface directive {
    record schema-directive {
        subgraph-name: string,
        name: string,
        // encoded in CBOR.
        arguments: list<u8>
    }

    record field-definition-directive {
        name: string,
        site: field-definition-directive-site
    }

    // Where and how the directive is applied
    // Each variant matches a GraphQL directive location
    variant directive-site {
        scalar(scalar-directive-site),
        object(object-directive-site),
        field-definition(field-definition-directive-site),
        %interface(interface-directive-site),
        union(union-directive-site),
        %enum(enum-directive-site)
    }

    // Site for a directive applied on a OBJECT location
    record object-directive-site {
        object-name: string,
        // serialized in CBOR
        arguments: list<u8>
    }

    // Site for a directive applied on a FIELD_DEFINITION location
    record field-definition-directive-site {
        parent-type-name: string,
        field-name: string,
        // serialized in CBOR
        arguments: list<u8>
    }

    // Site for a directive applied on a UNION location
    record union-directive-site {
        union-name: string,
        // serialized in CBOR
        arguments: list<u8>
    }

    // Site for a directive applied on a INTERFACE location
    record interface-directive-site {
        interface-name: string,
        // serialized in CBOR
        arguments: list<u8>
    }

    // Site for a directive applied on a ENUM location
    record enum-directive-site {
        enum-name: string,
        // serialized in CBOR
        arguments: list<u8>
    }

    // Site for a directive applied on a SCALAR location
    record scalar-directive-site {
        scalar-name: string,
        // serialized in CBOR
        arguments: list<u8>
    }
}

interface extension {
    use directive.{schema-directive, field-definition-directive};
    use types.{shared-context, error-response, error, field-output, access-log, log-error, nats-auth, nats-client, http-client, http-request, http-response, http-method, http-version, http-error, headers, token, cache, query-elements, authorization-decisions};

    // initialization function called to set up the wasm extension
    // if an error happens here, the gateway will refuse to continue.
    // Receives a list of schema directives associated with the extension
    init-gateway-extension: func(
        schema-directives: list<schema-directive>,
        configuration: list<u8>,
    ) -> result<_, string>;

    // for each input and each edges inside we return a result<list<u8>, error>,
    // serialized data with an error.
    resolve-field: func(
       headers: headers,
       subgraph-name: string,
       directive: field-definition-directive,
       inputs: list<list<u8>>
    ) -> result<field-output, error>;

    // initializes a new subscription stream
    resolve-subscription: func(
        headers: headers,
        subgraph-name: string,
        directive: field-definition-directive,
    ) -> result<_, error>;

    // resolves the next item in a subscription stream. must be called after resolve-field-subscription
    resolve-next-subscription-item: func() -> result<option<field-output>, error>;

    authenticate: func(
        headers: headers,
    ) -> result<token, error-response>;

    authorize-query: func(
        context: shared-context,
        elements: query-elements
    ) -> result<authorization-decisions, error-response>;
}

world sdk {
    export extension;

    // The extension registration function. Must be called before initialization.
    export register-extension: func();
}
