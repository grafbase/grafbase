package component:grafbase-sdk;

world sdk {
    record directive {
        name: string,
        // serialized in CBOR
        arguments: list<u8>
    }

    // The context as a read-only object.
    resource shared-context {
        // Fetches a context value with the given name, if existing.
        get: func(name: string) -> option<string>;
        // Gets the current trace-id.
        trace-id: func() -> string;
    }

    // An error response can be used to inject an error to the GraphQL response.
    record error {
        // Adds the given extensions to the response extensions. The first item in
        // the tuple is the extension key, and the second item is the extension value.
        // The extension value can be string-encoded JSON, which will be converted as
        // JSON in the response. It can also be just a string, which will be converted as
        // a JSON string in the response.
        extensions: list<tuple<string, string>>,
        // The error message.
        message: string,
    }

    record field-definition {
        type-name: string,
        name: string,
    }

    record field-output {
      // list in the same order as input.edges with data serialized in CBOR
      outputs: list<result<list<u8>, error>>
    }

    enum extension-type {
        resolver
    }

    // A HTTP client.
    resource http-client {
        // Executes a request and returns the response, yielding the current future until finished.
        execute: static func(request: http-request) -> result<http-response, http-error>;
        // Executes multiple requests in parallel, yielding the current future until all requests are done.
        execute-many: static func(requests: list<http-request>) -> list<result<http-response, http-error>>;
    }

    // A HTTP request.
    record http-request {
        // The HTTP method.
        method: http-method,
        // The URL to send the request to.
        url: string,
        // The headers to send with the request. Keys and values must be ASCII strings.
        headers: list<tuple<string, string>>,
        // The body of the request. If the body is set, the Content-Type header must be set.
        body: list<u8>,
        // The timeout in milliseconds for the request. If not set, no timeout is used.
        timeout-ms: option<u64>,
    }

    // The HTTP method.
    enum http-method {
        // The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
        get,
        // The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.
        post,
        // The PUT method replaces all current representations of the target resource with the request payload.
        put,
        // The DELETE method deletes the specified resource.
        delete,
        // The PATCH method is used to apply partial modifications to a resource.
        patch,
        // The HEAD method asks for a response identical to that of a GET request, but without the response body.
        head,
        // The OPTIONS method is used to describe the communication options for the target resource.
        options,
        // The CONNECT method establishes a tunnel to the server identified by the target resource.
        connect,
        // The TRACE method performs a message loop-back test along the path to the target resource.
        trace,
    }

    // An HTTP response.
    record http-response {
        // The HTTP status code.
        status: u16,
        // The HTTP version.
        version: http-version,
        // The headers of the response.
        headers: list<tuple<string, string>>,
        // The body of the response.
        body: list<u8>,
    }

    // The HTTP version.
    enum http-version {
        // The HTTP/0.9 version.
        http09,
        // The HTTP/1.0 version.
        http10,
        // The HTTP/1.1 version.
        http11,
        // The HTTP/2.0 version.
        http20,
        // The HTTP/3.0 version.
        http30,
    }

    // An HTTP error.
    variant http-error {
        // The request timed out.
        timeout,
        // The request failed due to an error (invalid user data).
        request(string),
        // The request failed due to an error (server connection failed).
        connect(string),
    }

    // initialization function called to set up the wasm extension
    // if an error happens here, the gateway will refuse to continue.
    // Receives a list of schema directives associated with the extension
    export init-gateway-extension: func(
        extension-type: extension-type,
        schema-directives: list<directive>
    ) -> result<_, string>;

    // for each input and each edges inside we return a result<list<u8>, error>,
    // serialized data with an error.
    export resolve-field: func(
       context: shared-context,
       directive: directive,
       definition: field-definition,
       inputs: list<list<u8>>
    ) -> result<field-output, error>;

    // The extension registration function. Must be called before initialization.
    export register-extension: func(host-version: u32) -> s32;
}
