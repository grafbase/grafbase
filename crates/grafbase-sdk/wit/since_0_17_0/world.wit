package grafbase:sdk;

world sdk {
    import access-log;
    import cache;
    import error;
    import grpc;
    import headers;
    import http-client;
    import kafka-client;
    import nats-client;
    import postgres;
    import token;
    import directive;
    import schema;
    import authorization-types;
    import resolver-types;
    import field-resolver-types;
    import selection-set-resolver-types;
    import event-queue;

    export authentication;
    export authorization;
    export field-resolver;
    export selection-set-resolver;
    export hooks;

    use schema.{schema};
    use event-queue.{event-queue};

    // The extension registration function. Must be called before initialization.
    export register-extension: func();

    // initialization function called to set up the wasm extension
    // if an error happens here, the gateway will refuse to continue.
    // Receives a list of schema directives associated with the extension
    export init: func(
        // Schema for each subgraph, with relevant data for each extension type.
        schema: list<tuple<string, schema>>,
        configuration: list<u8>,
        event-queue: event-queue,
    ) -> result<_, string>;
}
