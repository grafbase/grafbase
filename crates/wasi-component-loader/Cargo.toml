[package]
name = "wasi-component-loader"
edition.workspace = true
license.workspace = true
homepage.workspace = true
keywords.workspace = true
repository.workspace = true

[dependencies]
anyhow.workspace = true
async-nats.workspace = true
bytes.workspace = true # for gRPC
crossbeam = { workspace = true, features = ["crossbeam-channel"] }
dashmap.workspace = true
deadpool.workspace = true
either.workspace = true
engine-error.workspace = true
engine-schema.workspace = true
enumflags2.workspace = true
extension-catalog.workspace = true
futures.workspace = true
futures-util.workspace = true
gateway-config.workspace = true
grafbase-telemetry.workspace = true
grafbase-workspace-hack.workspace = true
http.workspace = true
minicbor-serde = { workspace = true, features = ["alloc"] }
reqwest.workspace = true
rskafka = { workspace = true, features = ["full"] }
runtime.workspace = true
rustls.workspace = true
rustls-pemfile.workspace = true
semver.workspace = true
serde.workspace = true
serde_json.workspace = true
sqlx = { workspace = true, default-features = false, features = [
    "sqlx-postgres",
    "json",
    "runtime-tokio",
    "tls-rustls-aws-lc-rs",
    "tls-rustls-ring-native-roots",
    "postgres",
] }
strum = { workspace = true, features = ["derive"] }
thiserror.workspace = true
time.workspace = true
tokio = { workspace = true, features = ["time", "rt"] }
tokio-stream.workspace = true
toml.workspace = true
tonic13 = { workspace = true, features = [
    "channel",
    "tls-native-roots",
    "tls-aws-lc",
] }
tracing.workspace = true
ulid.workspace = true
url.workspace = true
uuid.workspace = true
wasmtime.workspace = true
wasmtime-wasi.workspace = true
wasmtime-wasi-http.workspace = true
webpki-roots.workspace = true

[lints]
workspace = true

[dev-dependencies]
base64.workspace = true
expect-test.workspace = true
indoc.workspace = true
insta.workspace = true
tempfile.workspace = true
tokio = { workspace = true, features = ["rt-multi-thread", "macros"] }
toml.workspace = true
wiremock.workspace = true
