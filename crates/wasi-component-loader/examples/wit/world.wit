package component:grafbase;

interface types {
    enum header-error {
        invalid-header-value,
        invalid-header-name,
    }

    // Error variant sent if failing to write to access log.
    variant log-error {
        // The log channel is over capacity. The data is returned to the caller.
        channel-full(list<u8>),
        // The channel is closed.
        channel-closed,
    }

    resource context {
        get: func(name: string) -> option<string>;
        set: func(name: string, value: string);
        delete: func(name: string) -> option<string>;
    }

    resource shared-context {
        get: func(name: string) -> option<string>;

        // Sends the data to the access log.
        log-access: func(data: list<u8>) -> result<_, log-error>;
    }

    resource headers {
        get: func(name: string) -> option<string>;
        set: func(name: string, value: string) -> result<_, header-error>;
        delete: func(name: string) -> option<string>;
        entries: func() -> list<tuple<string, string>>;
    }

    record edge-definition {
        parent-type-name: string,
        field-name: string,
    }

    record node-definition {
        type-name: string,
    }

    record error-response {
        status-code: u16,
        errors: list<error>,
    }

    record error {
        extensions: list<tuple<string, string>>,
        message: string,
    }

    // A HTTP client.
    resource http-client {
        // Executes a request and returns the response, yielding the current future until finished.
        execute: static func(request: http-request) -> result<http-response, http-error>;
        // Executes multiple requests in parallel, yielding the current future until all requests are done.
        execute-many: static func(requests: list<http-request>) -> list<result<http-response, http-error>>;
    }

    // A HTTP request.
    record http-request {
        // The HTTP method.
        method: http-method,
        // The URL to send the request to.
        url: string,
        // The headers to send with the request. Keys and values must be ASCII strings.
        headers: list<tuple<string, string>>,
        // The body of the request. If the body is set, the Content-Type header must be set.
        body: list<u8>,
        // The timeout in milliseconds for the request. If not set, no timeout is used.
        timeout-ms: option<u64>,
    }

    // The HTTP method.
    enum http-method {
        // The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
        get,
        // The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.
        post,
        // The PUT method replaces all current representations of the target resource with the request payload.
        put,
        // The DELETE method deletes the specified resource.
        delete,
        // The PATCH method is used to apply partial modifications to a resource.
        patch,
        // The HEAD method asks for a response identical to that of a GET request, but without the response body.
        head,
        // The OPTIONS method is used to describe the communication options for the target resource.
        options,
        // The CONNECT method establishes a tunnel to the server identified by the target resource.
        connect,
        // The TRACE method performs a message loop-back test along the path to the target resource.
        trace,
    }

    // An HTTP response.
    record http-response {
        // The HTTP status code.
        status: u16,
        // The HTTP version.
        version: http-version,
        // The headers of the response.
        headers: list<tuple<string, string>>,
        // The body of the response.
        body: list<u8>,
    }

    // The HTTP version.
    enum http-version {
        // The HTTP/0.9 version.
        http09,
        // The HTTP/1.0 version.
        http10,
        // The HTTP/1.1 version.
        http11,
        // The HTTP/2.0 version.
        http20,
        // The HTTP/3.0 version.
        http30,
    }

    // An HTTP error.
    variant http-error {
        // The request timed out.
        timeout,
        // The request failed due to an error (invalid user data).
        request(string),
        // The request failed due to an error (server connection failed).
        connect(string),
    }
}

interface gateway-request {
    use types.{headers, error-response, context};

    on-gateway-request: func(context: context, headers: headers) -> result<_, error-response>;
}

interface subgraph-request {
    use types.{shared-context, headers, error};

    on-subgraph-request: func(context: shared-context, subgraph-name: string, method: string, url: string, headers: headers) -> result<_, error>;
}

interface authorization {
    use types.{error, shared-context, edge-definition, node-definition};

    authorize-edge-pre-execution: func(
        context: shared-context,
        definition: edge-definition,
        arguments: string,
        metadata: string
    ) -> result<_, error>;

    authorize-node-pre-execution: func(
        context: shared-context,
        definition: node-definition,
        metadata: string
    ) -> result<_, error>;

    authorize-parent-edge-post-execution: func(
        context: shared-context,
        definition: edge-definition,
        parents: list<string>,
        metadata: string
    ) -> list<result<_, error>>;

    authorize-edge-node-post-execution: func(
        context: shared-context,
        definition: edge-definition,
        nodes: list<string>,
        metadata: string
    ) -> list<result<_, error>>;

    authorize-edge-post-execution: func(
        context: shared-context,
        definition: edge-definition,
        edges: list<tuple<string, list<string>>>,
        metadata: string
    ) -> list<result<_, error>>;
}

world hooks {
    export gateway-request;
}
