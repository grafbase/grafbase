---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/interfaces_single_subgraph/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Organization implements Account
    @join__type(graph: MAIN)
    @join__implements(graph: MAIN, interface: "Account")
{
    foos(filter: String): String!
}

type Query
{
    account: Account! @join__field(graph: MAIN)
}

interface Account
    @join__type(graph: MAIN)
{
    foos(filter: String): String!
}

enum join__Graph
{
    MAIN @join__graph(name: "main", url: "http://example.com/main")
}
