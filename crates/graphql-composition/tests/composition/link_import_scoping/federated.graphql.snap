---
source: crates/graphql-composition/tests/composition_tests.rs
expression: "Check that `@link` imports are only valid for the subgraph that define the import. The import for the composite schemas spec `@key` should lead to `resolvable: false` only in the subgraph where it is imported."
input_file: crates/graphql-composition/tests/composition/link_import_scoping/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @composite__lookup on FIELD_DEFINITION

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Product
  @join__type(graph: EXT, key: "id", resolvable: false)
  @join__type(graph: GQL, key: "id ab")
{
  ab: String @join__field(graph: GQL)
  code: String! @join__field(graph: EXT)
  id: ID!
}

type Query
{
  productBatch(ids: [ID!]!): [Product!] @composite__lookup(graph: EXT) @join__field(graph: EXT)
  products: [Product!]! @join__field(graph: GQL)
}

enum join__Graph
{
  EXT @join__graph(name: "ext", url: "http://example.com/ext")
  GQL @join__graph(name: "gql", url: "http://example.com/gql")
}
