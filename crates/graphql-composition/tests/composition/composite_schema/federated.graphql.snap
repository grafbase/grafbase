---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/composite_schema/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

directive @composite__lookup on FIELD_DEFINITION

directive @composite__require(field: composite__FieldSelectionMap!) on ARGUMENT_DEFINITION

scalar join__FieldSet

scalar composite__FieldSelectionMap

type User
  @join__type(graph: A, key: "id", resolvable: false)
{
  id: ID!
  name: String
}

type Account
  @join__type(graph: B, key: "id", resolvable: false)
{
  id: ID!
  name: String @composite__require(graph: B, field: "ploop")
}

type Query
{
  accountById(id: ID!): Account @composite__lookup(graph: B) @join__field(graph: B)
  userById(id: ID!): User @composite__lookup(graph: A) @join__field(graph: A)
}

enum join__Graph
{
  A @join__graph(name: "a", url: "http://example.com/a")
  B @join__graph(name: "b", url: "http://example.com/b")
}
