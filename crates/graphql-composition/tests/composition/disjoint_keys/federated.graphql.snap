---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/disjoint_keys/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
  mutation: Mutation
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__enumValue(graph: join__Graph!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Author
  @join__type(graph: ACADEMIA, key: "name")
  @join__type(graph: NOVELISTS, key: "id")
{
  age: Int @join__field(graph: NOVELISTS)
  articles: [Article] @join__field(graph: ACADEMIA)
  books: [Book] @join__field(graph: NOVELISTS)
  id: ID!
  name: String!
}

type Article
  @join__type(graph: ACADEMIA)
{
  author: Author
  content: String
  id: ID!
  title: String!
}

type Book
  @join__type(graph: NOVELISTS)
{
  author: Author
  genre: Genre
  id: ID!
  publisher: Publisher
  title: String!
}

type Publisher
  @join__type(graph: NOVELISTS)
{
  books: [Book]
  id: ID!
  location: String
  name: String!
}

type Query
{
  articleById(id: ID!): Article @join__field(graph: ACADEMIA)
  articles: [Article] @join__field(graph: ACADEMIA)
  authorById(id: ID!): Author @join__field(graph: ACADEMIA)
  authors: [Author] @join__field(graph: ACADEMIA)
}

type Mutation
{
  addArticle(title: String!, content: String, authorId: ID!): Article @join__field(graph: ACADEMIA)
  addAuthor(name: String!, age: Int): Author @join__field(graph: ACADEMIA)
}

enum Genre
  @join__type(graph: NOVELISTS)
{
  FICTION @join__enumValue(graph: NOVELISTS)
  NONFICTION @join__enumValue(graph: NOVELISTS)
  SCIFI @join__enumValue(graph: NOVELISTS)
  FANTASY @join__enumValue(graph: NOVELISTS)
  MYSTERY @join__enumValue(graph: NOVELISTS)
  BIOGRAPHY @join__enumValue(graph: NOVELISTS)
}

enum join__Graph
{
  ACADEMIA @join__graph(name: "academia", url: "http://example.com/academia")
  NOVELISTS @join__graph(name: "novelists", url: "http://example.com/novelists")
}
