enum AccountType {
  SAVINGS
  CHECKING
}

type User {
  id: ID!
  name: String!
  email: String!
  accounts: [Account!]!
}

type Account {
  id: ID!
  type: AccountType!
  # Simple authorized, not part of the parent type.
  balance: Float! @authorized(fields: "userId")
  user: User!
  transactions: [Transaction!]! @authorized(fields: "user { accounts { accountLevel } }")
}

type Transaction {
  id: ID!
  amount: Float!
  date: String!
  description: String
  account: Account!
}

type Query {
  users: [User!]!
  user(id: ID!): User
  accounts: [Account!]!
  account(id: ID!): Account
  transactions: [Transaction!]! @authorized(node: "doesNotExist")
  transaction(id: ID!): Transaction
}

# Define the Mutation type
type Mutation {
  createUser(name: String!, email: String!): User! @authorized(arguments: "not-a-selection")
  createAccount(userId: ID!, type: AccountType!, initialBalance: Float!): Account!
  createTransaction(accountId: ID!, amount: Float!, description: String): Transaction!
  updateUser(id: ID!, name: String, email: String): User!
  # Simple input path
  deleteUser(id: ID!): User! @authorized(arguments: "userId")
  deleteAccount(id: ID!): Account!
  deleteTransaction(id: ID!): Transaction!
}
