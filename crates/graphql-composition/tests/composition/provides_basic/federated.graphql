directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Product
    @join__type(graph: PRODUCTS, key: "id")
{
    id: ID!
    name: String
    reviews: [Review]
}

type Review
    @join__type(graph: PRODUCTS, key: "id")
{
    author: User @join__field(graph: PRODUCTS, provides: "name")
    content: String
    id: ID!
}

type User
    @join__type(graph: PRODUCTS, key: "id")
    @join__type(graph: USERS, key: "id")
{
    email: String @join__field(graph: USERS)
    id: ID!
    name: String @join__field(graph: USERS)
}

type Query
{
    product(id: ID!): Product @join__field(graph: PRODUCTS)
    user(id: ID!): User @join__field(graph: USERS)
}

enum join__Graph
{
    PRODUCTS @join__graph(name: "products", url: "http://example.com/products")
    USERS @join__graph(name: "users", url: "http://example.com/users")
}
