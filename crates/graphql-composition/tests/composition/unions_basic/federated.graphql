directive @core(feature: String!) repeatable on SCHEMA

directive @join__owner(graph: join__Graph!) on OBJECT

directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    resolvable: Boolean = true
) repeatable on OBJECT | INTERFACE

directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

scalar join__FieldSet

enum join__Graph {
    PIZZA @join__graph(name: "pizza", url: "http://example.com/pizza")
    SUSHI @join__graph(name: "sushi", url: "http://example.com/sushi")
}

type Pizza
    @join__type(graph: PIZZA)
{
    id: ID!
    nameEn: String
    nameIt: String!
    toppings: [Topping!]!
}

type Onion
    @join__type(graph: PIZZA)
{
    variety: String
}

type Cheese
    @join__type(graph: PIZZA)
{
    quantity: Int!
    type: String!
}

type Pineapple
    @join__type(graph: PIZZA)
{
    isAnanas: Boolean!
}

type Sushi
    @join__type(graph: SUSHI)
{
    id: ID!
    topping: Topping
}

type Salmon
    @join__type(graph: SUSHI)
{
    id: ID!
    raw: Boolean
}

type Omelet
    @join__type(graph: SUSHI)
{
    isRectangular: Boolean
}

type Query
{
    pizza(id: ID!): Pizza @join__field(graph: PIZZA)
}

union Topping
    @join__unionMember(graph: PIZZA, member: "Onion")
    @join__unionMember(graph: PIZZA, member: "Cheese")
    @join__unionMember(graph: PIZZA, member: "Pineapple")
    @join__unionMember(graph: SUSHI, member: "Salmon")
    @join__unionMember(graph: SUSHI, member: "Omelet")
 = Onion | Cheese | Pineapple | Salmon | Omelet
