---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/namespaced_directives_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Alert
    @join__type(graph: ALERTS, key: "id")
{
    id: ID!
    message: String!
    severity: Severity!
}

type Review
    @join__type(graph: REVIEWS, key: "id")
{
    author: ID!
    id: ID!
    message: String!
}

type Query
{
    alert(id: ID!): Alert @join__field(graph: ALERTS)
}

type Mutation
{
    createAlert(message: String!, severity: Severity!): Alert @join__field(graph: ALERTS)
    createReview(message: String!, author: ID!): Alert @join__field(graph: REVIEWS)
}

type Subscription
{
    alert(id: ID!): Alert @join__field(graph: ALERTS)
}

enum Severity
    @join__type(graph: ALERTS)
{
    FINE
    OK
    GOOD
}

enum join__Graph
{
    ALERTS @join__graph(name: "alerts", url: "http://example.com/alerts")
    REVIEWS @join__graph(name: "reviews", url: "http://example.com/reviews")
}
