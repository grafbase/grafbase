directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Product
    @join__type(graph: PRODUCTS, key: "id")
    @join__type(graph: REVIEWS, key: "id")
{
    id: ID!
    name: String @join__field(graph: PRODUCTS)
    reviews: [Review] @join__field(graph: REVIEWS)
}

type Review
    @join__type(graph: REVIEWS)
{
    id: ID!
    text: String!
}

type Query
{
    foo: String! @join__field(graph: REVIEWS)
}

type Subscription
{
    topProducts: Product @join__field(graph: PRODUCTS)
}

enum join__Graph
{
    PRODUCTS @join__graph(name: "products", url: "http://example.com/products")
    REVIEWS @join__graph(name: "reviews", url: "http://example.com/reviews")
}
