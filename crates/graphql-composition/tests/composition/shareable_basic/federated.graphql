directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Customer
    @join__type(graph: ACCOUNTS)
    @join__type(graph: MARKETING)
    @join__type(graph: SUBSCRIPTIONS)
{
    id: ID!
    name: String
    newsletterSubscribed: Boolean @inaccessible @join__field(graph: MARKETING)
    other: Int @inaccessible @join__field(graph: ACCOUNTS)
    subscriptionPlan: Plan! @inaccessible @join__field(graph: SUBSCRIPTIONS)
}

type Query
{
    customer(id: ID!): Customer @join__field(graph: ACCOUNTS)
}

enum Plan
    @join__type(graph: SUBSCRIPTIONS)
{
    Hobby
    Pro
}

enum join__Graph
{
    ACCOUNTS @join__graph(name: "accounts", url: "http://example.com/accounts")
    MARKETING @join__graph(name: "marketing", url: "http://example.com/marketing")
    SUBSCRIPTIONS @join__graph(name: "subscriptions", url: "http://example.com/subscriptions")
}
