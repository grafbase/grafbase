---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/tag_directive_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__enumValue(graph: join__Graph!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar Texture
  @tag(name: "appleTexture")
  @tag(name: "orangeTexture")

scalar join__FieldSet

type Apple implements HasId
  @tag(name: "appleType")
  @join__type(graph: APPLE)
  @join__implements(graph: APPLE, interface: "HasId")
{
  id: ID!
  texture: Texture
  variety: AppleVariety
}

type Orange implements HasId
  @tag(name: "orangeType")
  @join__type(graph: ORANGE)
  @join__implements(graph: ORANGE, interface: "HasId")
{
  id: ID!
  texture: Texture
  variety: String
}

type Query
  @tag(name: "appleQuery")
  @tag(name: "orangeQuery")
{
  tags(filter: String @tag(name: "appleTagsFilter") @tag(name: "orangeTagsFilter")): [String] @tag(name: "appleField") @tag(name: "orangeField") @join__field(graph: APPLE) @join__field(graph: ORANGE)
}

interface HasId
  @tag(name: "appleInterface")
  @tag(name: "orangeInterface")
  @join__type(graph: APPLE)
  @join__type(graph: ORANGE)
{
  id: ID! @tag(name: "appleField") @tag(name: "orangeField")
}

enum AppleVariety
  @tag(name: "appleEnum")
  @join__type(graph: APPLE)
{
  FUJI @join__enumValue(graph: APPLE)
  GRANNY_SMITH @join__enumValue(graph: APPLE)
  HONEYCRISP @tag(name: "appleEnumValue") @join__enumValue(graph: APPLE)
}

enum join__Graph
{
  APPLE @join__graph(name: "apple", url: "http://example.com/apple")
  ORANGE @join__graph(name: "orange", url: "http://example.com/orange")
}

input Filter
  @tag(name: "appleInput")
  @tag(name: "orangeInput")
  @join__type(graph: APPLE)
  @join__type(graph: ORANGE)
{
  value: String @tag(name: "appleInputField") @tag(name: "orangeInputField")
}
