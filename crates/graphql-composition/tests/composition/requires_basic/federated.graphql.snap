---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/requires_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Farm
    @join__type(graph: CHILIES, key: "id")
    @join__type(graph: FARMS, key: "id")
{
    chiliDetails: ChiliVariety @join__field(graph: CHILIES, requires: "chiliId")
    chiliId: ID! @join__field(graph: FARMS)
    id: ID!
    location: String! @join__field(graph: FARMS)
    name: String! @join__field(graph: FARMS)
}

type ChiliVariety
    @join__type(graph: CHILIES)
{
    description: String
    id: ID!
    name: String!
    spicinessScale: Int!
}

type Query
{
    chiliVarieties: [ChiliVariety] @join__field(graph: CHILIES)
    chiliVariety(id: ID!): ChiliVariety @join__field(graph: CHILIES)
    farm(id: ID!): Farm @join__field(graph: FARMS)
    farms: [Farm] @join__field(graph: FARMS)
}

enum join__Graph
{
    CHILIES @join__graph(name: "chilies", url: "http://example.com/chilies")
    FARMS @join__graph(name: "farms", url: "http://example.com/farms")
}
