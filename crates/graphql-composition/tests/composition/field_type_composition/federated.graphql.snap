---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/field_type_composition/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type FidgetSpinner implements Spinner
    @join__type(graph: SPINNERS_A)
    @join__type(graph: SPINNERS_B)
    @join__implements(graph: SPINNERS_A, interface: "Spinner")
    @join__implements(graph: SPINNERS_B, interface: "Spinner")
{
    buttonDescriptions: [String!] @join__field(graph: SPINNERS_A, type: "[String!]!") @join__field(graph: SPINNERS_B)
    id: ID!
    manufacturer: Manufacturer @join__field(graph: SPINNERS_A, type: "Manufacturer!") @join__field(graph: SPINNERS_B)
    model: String
}

type Manufacturer
    @join__type(graph: SPINNERS_A)
    @join__type(graph: SPINNERS_B)
{
    location: String
    name: String!
}

type Query
{
    fidgetSpinners(filter: SpinnerFilter!): [FidgetSpinner] @join__field(graph: SPINNERS_A) @join__field(graph: SPINNERS_B)
}

interface Spinner
    @join__type(graph: SPINNERS_A)
    @join__type(graph: SPINNERS_B)
{
    id: ID!
    model: String @join__field(graph: SPINNERS_A) @join__field(graph: SPINNERS_B, type: "String!")
}

enum join__Graph
{
    SPINNERS_A @join__graph(name: "spinners-a", url: "http://example.com/spinners-a")
    SPINNERS_B @join__graph(name: "spinners-b", url: "http://example.com/spinners-b")
}

input SpinnerFilter
    @join__type(graph: SPINNERS_A)
    @join__type(graph: SPINNERS_B)
{
    manufacturer: String
    maxPrice: Float! @join__field(graph: SPINNERS_A, type: "Float") @join__field(graph: SPINNERS_B)
}
