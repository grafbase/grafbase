---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Test for @oneOf input objects
input_file: crates/graphql-composition/tests/composition/input_object_oneof_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type User
  @join__type(graph: SEARCH, key: "id")
{
  email: String!
  id: ID!
  name: String!
}

type Product
  @join__type(graph: SEARCH, key: "id")
{
  id: ID!
  name: String!
  price: Float!
}

type Query
{
  search(filter: SearchFilter!): [SearchResult!]! @join__field(graph: SEARCH)
}

enum Status
  @join__type(graph: SEARCH)
{
  ACTIVE
  INACTIVE
  PENDING
}

enum join__Graph
{
  SEARCH @join__graph(name: "search", url: "http://example.com/search")
}

union SearchResult
  @join__unionMember(graph: SEARCH, member: "User")
  @join__unionMember(graph: SEARCH, member: "Product")
 = User | Product

input SearchFilter
  @oneOf
  @join__type(graph: SEARCH)
{
  byId: ID
  byName: String
  byDateRange: DateRangeFilter
  byStatus: Status
}

input DateRangeFilter
  @join__type(graph: SEARCH)
{
  start: String!
  end: String!
}
