---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/requires_with_arguments/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type WasabiPlant
    @join__type(graph: WASABI)
{
    cultivationArea: String
    harvestTime: String @join__field(graph: WASABI, requires: "variety name(language: \"latin\")")
    id: ID!
    name(language: String!): String!
    variety: String!
}

type WasabiProduct
    @join__type(graph: WASABI)
{
    description: String
    id: ID!
    name: String!
    price: Float
    type: ProductType!
}

type Query
{
    wasabiPlants: [WasabiPlant] @join__field(graph: WASABI)
    wasabiProduct(id: ID!): WasabiProduct @join__field(graph: WASABI)
}

enum ProductType
    @join__type(graph: WASABI)
{
    FRESH
    PASTE
    POWDER
    DRIED
}

enum join__Graph
{
    WASABI @join__graph(name: "wasabi", url: "http://example.com/wasabi")
}
