---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/inaccessible_in_one_subgraph_is_enough/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Color
    @join__type(graph: ONE)
    @join__type(graph: THREE)
    @join__type(graph: TWO)
{
    alpha: Int @inaccessible @join__field(graph: THREE) @join__field(graph: TWO)
    blue: Int
    green: Int
    red: Int
}

type Query
{
    colors: [Color] @join__field(graph: ONE)
}

enum join__Graph
{
    ONE @join__graph(name: "one", url: "http://example.com/one")
    THREE @join__graph(name: "three", url: "http://example.com/three")
    TWO @join__graph(name: "two", url: "http://example.com/two")
}
