---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/custom_scalars_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar Yan

scalar Tan

scalar Texture

scalar Tethera

scalar join__FieldSet

type Sheep
    @join__type(graph: BAZ)
    @join__type(graph: FOO)
{
    sheepIdx: Tethera @join__field(graph: FOO)
    texture: Texture! @join__field(graph: BAZ)
}

type Query
{
    sheep: Sheep @join__field(graph: FOO)
}

enum join__Graph
{
    BAR @join__graph(name: "bar", url: "http://example.com/bar")
    BAZ @join__graph(name: "baz", url: "http://example.com/baz")
    FOO @join__graph(name: "foo", url: "http://example.com/foo")
}
