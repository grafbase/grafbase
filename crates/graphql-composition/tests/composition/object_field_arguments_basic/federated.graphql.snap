---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/object_field_arguments_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type RollerCoaster
    @join__type(graph: HISTORY)
    @join__type(graph: INVENTORY)
    @join__type(graph: PERFORMANCE)
{
    height: Float!
    historicalData: [HistoricalData] @inaccessible @join__field(graph: HISTORY)
    id: ID!
    manufacturer: String!
    name: String!
    numberOfInversions: Int! @inaccessible @join__field(graph: PERFORMANCE)
    speed: Float!
}

type HistoricalData
    @join__type(graph: HISTORY)
{
    incidents: Int!
    visitors: Int!
    year: Int!
}

type Query
{
    getRollerCoaster(id: ID!): RollerCoaster @join__field(graph: HISTORY) @join__field(graph: INVENTORY) @join__field(graph: PERFORMANCE)
}

enum join__Graph
{
    HISTORY @join__graph(name: "history", url: "http://example.com/history")
    INVENTORY @join__graph(name: "inventory", url: "http://example.com/inventory")
    PERFORMANCE @join__graph(name: "performance", url: "http://example.com/performance")
}
