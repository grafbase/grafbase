directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type A
    @join__type(graph: FIRST, key: "b { id } c")
{
    b: B!
    c: String!
}

type B
    @join__type(graph: FIRST, key: "id")
    @join__type(graph: SECOND, key: "id")
{
    bar: String @join__field(graph: SECOND)
    foo: String @join__field(graph: FIRST)
    id: ID!
}

type Query
{
    as: [A] @join__field(graph: FIRST)
    bs: [B] @join__field(graph: SECOND)
}

enum join__Graph
{
    FIRST @join__graph(name: "first", url: "http://example.com/first")
    SECOND @join__graph(name: "second", url: "http://example.com/second")
}
