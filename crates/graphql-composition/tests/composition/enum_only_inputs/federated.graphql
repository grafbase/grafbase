directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Query
{
    searchFood(filterName: FilterName, filterValue: String): [String!] @join__field(graph: FOODSEARCH)
    searchProduct(filterName: FilterName, filterValue: String): [String!] @join__field(graph: PRODUCTSEARCH)
    searchUser(filterName: FilterName, filterValue: String): [String!] @join__field(graph: USERSEARCH)
}

enum FilterName
    @join__type(graph: FOODSEARCH)
    @join__type(graph: PRODUCTSEARCH)
    @join__type(graph: USERSEARCH)
{
    NAME
    CREATED_AT
}

enum join__Graph
{
    FOODSEARCH @join__graph(name: "foodSearch", url: "http://example.com/foodSearch")
    PRODUCTSEARCH @join__graph(name: "productSearch", url: "http://example.com/productSearch")
    USERSEARCH @join__graph(name: "userSearch", url: "http://example.com/userSearch")
}
