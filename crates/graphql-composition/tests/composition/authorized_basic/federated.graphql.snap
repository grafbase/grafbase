---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/authorized_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type User
    @join__type(graph: BANK_ACCOUNT)
{
    accounts: [Account!]! @authorized(fields: "userId name", metadata: {stuff: true})
    email: String!
    name: String!
    userId: ID!
}

type Account
    @authorized(fields: "user { userId }")
    @join__type(graph: BANK_ACCOUNT)
{
    balance: Float! @authorized(fields: "id")
    id: ID!
    transactions: [Transaction!]!
    type: AccountType!
    user: User!
}

type Query
{
    account(id: ID!): Account @authorized(node: "id") @join__field(graph: BANK_ACCOUNT)
    accounts: [Account!]! @join__field(graph: BANK_ACCOUNT)
    transaction(id: ID!): Transaction @join__field(graph: BANK_ACCOUNT)
    transactions: [Transaction!]! @authorized(node: "account { id }") @join__field(graph: BANK_ACCOUNT)
    user(id: ID!): User @join__field(graph: BANK_ACCOUNT)
    users: [User!]! @join__field(graph: BANK_ACCOUNT)
}

type Mutation
{
    createAccount(userId: ID!, type: AccountType!, initialBalance: Float!, input: CreateAccountInput, included: Boolean, notIncluded: String): Account @authorized(arguments: "input { userId nested { name } } included", metadata: ["a", "b", "c", {d: E}]) @join__field(graph: BANK_ACCOUNT)
    createTransaction(amount: Float!, description: String, accountId: ID!): Transaction! @join__field(graph: BANK_ACCOUNT)
    createUser(name: String!, email: String!): User! @join__field(graph: BANK_ACCOUNT)
    deleteAccount(id: ID!): Account! @join__field(graph: BANK_ACCOUNT)
    deleteTransaction(id: ID!): Transaction! @join__field(graph: BANK_ACCOUNT)
    deleteUser(id: ID!, soft: Boolean): User! @authorized(arguments: "id") @join__field(graph: BANK_ACCOUNT)
    updateUser(id: ID!, name: String, email: String): User! @join__field(graph: BANK_ACCOUNT)
}

interface Transaction
    @authorized(fields: "id amount date account { id }")
    @join__type(graph: BANK_ACCOUNT)
{
    account: Account!
    amount: Float!
    date: String!
    description: String @authorized(fields: "account { id }")
    id: ID!
}

enum AccountType
    @join__type(graph: BANK_ACCOUNT)
{
    SAVINGS
    CHECKING
}

enum join__Graph
{
    BANK_ACCOUNT @join__graph(name: "bank-account", url: "http://example.com/bank-account")
}

input CreateAccountInput
    @join__type(graph: BANK_ACCOUNT)
{
    userId: ID!
    nested: NestedThing
    accountType: AccountType
}

input NestedThing
    @join__type(graph: BANK_ACCOUNT)
{
    name: String!
}
