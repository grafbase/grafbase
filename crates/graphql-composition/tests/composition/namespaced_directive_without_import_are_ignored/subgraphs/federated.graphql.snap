---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/namespaced_directive_without_import_are_ignored/subgraphs/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
  mutation: Mutation
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__enumValue(graph: join__Graph!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Alert
  @join__type(graph: ALERTS, key: "id")
{
  id: ID!
  message: String!
  severity: Severity!
}

type Review
  @join__type(graph: REVIEWS, key: "id")
{
  author: ID!
  id: ID!
  message: String!
}

type Query
{
  alert(id: ID!): Alert @join__field(graph: ALERTS)
}

type Mutation
{
  createAlert(message: String!, severity: Severity!): Alert @join__field(graph: ALERTS)
  createReview(message: String!, author: ID!): Alert @join__field(graph: REVIEWS)
}

enum Severity
  @join__type(graph: ALERTS)
{
  OK @join__enumValue(graph: ALERTS)
  FINE @join__enumValue(graph: ALERTS)
  GREAT @join__enumValue(graph: ALERTS)
}

enum join__Graph
{
  ALERTS @join__graph(name: "alerts", url: "http://example.com/alerts")
  REVIEWS @join__graph(name: "reviews", url: "http://example.com/reviews")
}
