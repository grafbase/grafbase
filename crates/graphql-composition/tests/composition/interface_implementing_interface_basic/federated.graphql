directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Product implements Node
    @join__type(graph: PRODUCT)
    @join__implements(graph: PRODUCT, interface: "Node")
{
    description: String
    id: ID!
    name: String!
    price: Float!
}

type User implements Timestamped
    @join__type(graph: USER)
    @join__implements(graph: USER, interface: "Timestamped")
{
    createdAt: String!
    email: String!
    id: ID!
    updatedAt: String!
    username: String!
}

type Query
{
    user(id: ID!): User @join__field(graph: USER)
}

interface Node
    @join__type(graph: PRODUCT)
    @join__type(graph: USER)
{
    id: ID!
}

interface Timestamped implements Node
    @join__type(graph: USER)
    @join__implements(graph: USER, interface: "Node")
{
    createdAt: String!
    id: ID!
    updatedAt: String!
}

enum join__Graph
{
    PRODUCT @join__graph(name: "product", url: "http://example.com/product")
    USER @join__graph(name: "user", url: "http://example.com/user")
}
