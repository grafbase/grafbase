---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/authenticated_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Car
    @join__type(graph: CARS, key: "id")
    @join__type(graph: INVENTORY, key: "id")
{
    id: String! @authenticated
    km: Int! @join__field(graph: CARS)
    spareParts: [String!] @authenticated @join__field(graph: INVENTORY)
    year: Int! @join__field(graph: CARS)
}

type Query
{
    cars: [Car!]! @authenticated @join__field(graph: CARS)
}

enum join__Graph
{
    CARS @join__graph(name: "cars", url: "http://example.com/cars")
    INVENTORY @join__graph(name: "inventory", url: "http://example.com/inventory")
}
