---
source: crates/graphql-composition/tests/composition_tests.rs
expression: "The `@link`s should be carried over from the subgraphs to the federated schema, with the correct imports."
input_file: crates/graphql-composition/tests/composition/federation_v2/compose_directive/compose_directive_link_composition/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
  @link(url: "https://example.com/monitoring/v1.0", import: ["@retry", "@log"])
  @link(url: "https://example.com/lifecycle/v2.0", import: ["@deprecated"])
  @link(url: "https://example.com/directives/v1.0", import: ["@rateLimit"])
{
  query: Query
  mutation: Mutation
}

directive @audit(action: String!) on FIELD_DEFINITION

directive @retry(attempts: Int = 3, delay: Int = 1000) on FIELD_DEFINITION

directive @deprecated(reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

directive @rateLimit(max: Int!, window: String!) on FIELD_DEFINITION

directive @cached(ttl: Int = 300) on FIELD_DEFINITION

directive @validate(regex: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @custom__rateLimit(max: Int!, window: String!) on FIELD_DEFINITION

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__enumValue(graph: join__Graph!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Product
  @join__type(graph: SHIPPING, key: "id")
  @join__type(graph: STORAGE, key: "id")
{
  id: ID!
  name: String! @join__field(graph: SHIPPING, external: true) @join__field(graph: STORAGE)
  shippingCost: Float @join__field(graph: SHIPPING, requires: "weight")
  stock: Int! @join__field(graph: STORAGE)
  warehouse: Warehouse! @join__field(graph: STORAGE)
  weight: Float @join__field(graph: SHIPPING, external: true)
}

type Shipment
  @join__type(graph: SHIPPING, key: "id")
{
  carrier: Carrier!
  estimatedDelivery: String @retry(attempts: 5, delay: 2000)
  id: ID!
  products: [Product!]!
  status: ShipmentStatus!
  trackingNumber: String!
}

type Carrier
  @join__type(graph: SHIPPING)
{
  id: ID!
  name: String!
  serviceLevel: ServiceLevel!
}

type Warehouse
  @join__type(graph: STORAGE, key: "id")
{
  capacity: Int!
  id: ID!
  inventory: [Product!]!
  location: String!
}

type Query
{
  product(id: ID!): Product @join__field(graph: STORAGE)
  shipment(id: ID!): Shipment @log(action: "SHIPMENT_LOOKUP") @rateLimit(max: 100, window: "1m") @join__field(graph: SHIPPING)
  trackShipment(trackingNumber: String!): Shipment @retry @join__field(graph: SHIPPING)
  warehouses: [Warehouse!]! @join__field(graph: STORAGE)
}

type Mutation
{
  cancelShipment(id: ID!): Shipment @log(action: "SHIPMENT_CANCEL") @deprecated(reason: "Use requestRefund instead") @join__field(graph: SHIPPING)
  createShipment(input: ShipmentInput!): Shipment @log(action: "SHIPMENT_CREATE") @rateLimit(max: 10, window: "1m") @join__field(graph: SHIPPING)
  requestRefund(id: ID!): Shipment @log(action: "REFUND_REQUEST") @rateLimit(max: 5, window: "1m") @join__field(graph: SHIPPING)
  updateStock(productId: ID!, quantity: Int!): Product @join__field(graph: STORAGE)
}

enum ShipmentStatus
  @join__type(graph: SHIPPING)
{
  PENDING @join__enumValue(graph: SHIPPING)
  IN_TRANSIT @join__enumValue(graph: SHIPPING)
  DELIVERED @join__enumValue(graph: SHIPPING)
  CANCELLED @deprecated(reason: "Use REFUND_REQUESTED instead") @join__enumValue(graph: SHIPPING)
  REFUND_REQUESTED @join__enumValue(graph: SHIPPING)
}

enum ServiceLevel
  @join__type(graph: SHIPPING)
{
  STANDARD @join__enumValue(graph: SHIPPING)
  EXPRESS @join__enumValue(graph: SHIPPING)
  OVERNIGHT @join__enumValue(graph: SHIPPING)
  ECONOMY @deprecated @join__enumValue(graph: SHIPPING)
}

enum join__Graph
{
  SHIPPING @join__graph(name: "shipping", url: "http://example.com/shipping")
  STORAGE @join__graph(name: "storage", url: "http://example.com/storage")
}

input ShipmentInput
  @join__type(graph: SHIPPING)
{
  serviceLevel: ServiceLevel!
  productIds: [ID!]!
  carrierId: ID!
}
