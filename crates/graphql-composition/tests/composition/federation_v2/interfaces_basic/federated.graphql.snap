---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/interfaces_basic/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Furby implements FurbyType & SocialFurby
  @join__type(graph: SOCIAL)
  @join__implements(graph: SOCIAL, interface: "FurbyType")
  @join__implements(graph: SOCIAL, interface: "SocialFurby")
{
  batteryType: String!
  canDance: Boolean!
  canSing: Boolean!
  color: String!
  connectivity: String
  friends: [Furby!]
  height: Float!
  id: ID!
  languages: [String!]
  sensorTypes: [String!]
  weight: Float!
}

type Query
{
  furby: Furby @join__field(graph: SOCIAL)
}

interface FurbyType
  @join__type(graph: ELECTRONICS)
  @join__type(graph: PHYSICAL)
  @join__type(graph: SOCIAL)
{
  batteryType: String! @join__field(graph: ELECTRONICS)
  canDance: Boolean! @join__field(graph: SOCIAL)
  canSing: Boolean! @join__field(graph: SOCIAL)
  color: String! @join__field(graph: PHYSICAL)
  connectivity: String @join__field(graph: ELECTRONICS)
  height: Float! @join__field(graph: PHYSICAL)
  id: ID!
  languages: [String!] @join__field(graph: SOCIAL)
  sensorTypes: [String!] @join__field(graph: ELECTRONICS)
  weight: Float! @join__field(graph: PHYSICAL)
}

interface SocialFurby
  @join__type(graph: SOCIAL)
{
  friends: [Furby!]
}

enum join__Graph
{
  ELECTRONICS @join__graph(name: "electronics", url: "http://example.com/electronics")
  PHYSICAL @join__graph(name: "physical", url: "http://example.com/physical")
  SOCIAL @join__graph(name: "social", url: "http://example.com/social")
}
