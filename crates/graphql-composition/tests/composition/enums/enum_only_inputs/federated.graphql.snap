---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/enums/enum_only_inputs/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__enumValue(graph: join__Graph!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Query
{
  searchFood(filterName: FilterName, filterValue: String): [String!] @join__field(graph: FOODSEARCH)
  searchProduct(filterName: FilterName, filterValue: String): [String!] @join__field(graph: PRODUCTSEARCH)
  searchUser(filterName: FilterName, filterValue: String): [String!] @join__field(graph: USERSEARCH)
}

enum FilterName
  @join__type(graph: FOODSEARCH)
  @join__type(graph: PRODUCTSEARCH)
  @join__type(graph: USERSEARCH)
{
  NAME @join__enumValue(graph: FOODSEARCH) @join__enumValue(graph: PRODUCTSEARCH) @join__enumValue(graph: USERSEARCH)
  CREATED_AT @join__enumValue(graph: FOODSEARCH) @join__enumValue(graph: PRODUCTSEARCH) @join__enumValue(graph: USERSEARCH)
}

enum join__Graph
{
  FOODSEARCH @join__graph(name: "foodSearch", url: "http://example.com/foodSearch")
  PRODUCTSEARCH @join__graph(name: "productSearch", url: "http://example.com/productSearch")
  USERSEARCH @join__graph(name: "userSearch", url: "http://example.com/userSearch")
}
