---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/enums/enum_only_outputs/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__enumValue(graph: join__Graph!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Activity
  @join__type(graph: ACTIVITIES)
{
  description: String!
  name: String!
  participatingTeletubby: Teletubby!
}

type Teletubby
  @join__type(graph: ACTIVITIES, key: "name")
  @join__type(graph: EPISODES, key: "name")
  @join__type(graph: TELETUBBYREPOSITORY, key: "name")
{
  activities: [Activity] @join__field(graph: ACTIVITIES)
  color: String! @join__field(graph: TELETUBBYREPOSITORY)
  episodesFeatured: [Episode] @join__field(graph: EPISODES)
  favoriteToy: FavoriteToy
  mood: Mood @join__field(graph: TELETUBBYREPOSITORY)
  name: String!
}

type Episode
  @join__type(graph: EPISODES)
{
  duration: Int!
  featuredTeletubby: Teletubby!
  featuredToys: [FavoriteToy!]
  title: String!
}

type Query
{
  getActivity(name: String!): Activity @join__field(graph: ACTIVITIES)
  getEpisode(title: String!): Episode @join__field(graph: EPISODES)
  getTeletubby(name: String!): Teletubby @join__field(graph: TELETUBBYREPOSITORY)
}

enum FavoriteToy
  @join__type(graph: ACTIVITIES)
  @join__type(graph: EPISODES)
  @join__type(graph: TELETUBBYREPOSITORY)
{
  PLUSHTOY @join__enumValue(graph: ACTIVITIES)
  TOBOGGAN @join__enumValue(graph: ACTIVITIES)
  SCOOTER @join__enumValue(graph: EPISODES)
  BAG @join__enumValue(graph: EPISODES) @join__enumValue(graph: TELETUBBYREPOSITORY)
  HAT @join__enumValue(graph: EPISODES) @join__enumValue(graph: TELETUBBYREPOSITORY)
  BALL @join__enumValue(graph: TELETUBBYREPOSITORY)
}

enum Mood
  @join__type(graph: TELETUBBYREPOSITORY)
{
  HAPPY @join__enumValue(graph: TELETUBBYREPOSITORY)
  SAD @join__enumValue(graph: TELETUBBYREPOSITORY)
}

enum join__Graph
{
  ACTIVITIES @join__graph(name: "activities", url: "http://example.com/activities")
  EPISODES @join__graph(name: "episodes", url: "http://example.com/episodes")
  TELETUBBYREPOSITORY @join__graph(name: "teletubbyRepository", url: "http://example.com/teletubbyRepository")
}
