---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/default_values/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type Book
    @join__type(graph: SCHEMA)
{
    author: String!
    id: ID!
    title: String!
    yearPublished: Int
}

type Query
{
    books(limit: Int = 10): [Book!]! @join__field(graph: OTHER_SCHEMA) @join__field(graph: SCHEMA)
}

type Mutation
{
    addBook(input: AddBookInput!): Book @join__field(graph: SCHEMA)
}

enum join__Graph
{
    OTHER_SCHEMA @join__graph(name: "other-schema", url: "http://example.com/other-schema")
    SCHEMA @join__graph(name: "schema", url: "http://example.com/schema")
}

input AddBookInput
    @join__type(graph: OTHER_SCHEMA)
    @join__type(graph: SCHEMA)
{
    title: String!
    author: String!
    yearPublished: Int = 2023
}
