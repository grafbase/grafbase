---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/policy_basic/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type B
  @join__type(graph: FST, key: "id")
  @join__type(graph: SND, key: "id")
{
  foo: String @policy(policies: [["yolo"], ["wolo"], ["scope:1", "scope:2"]])
  id: ID!
}

type A
  @join__type(graph: FST, key: "id")
  @join__type(graph: SND, key: "id")
{
  id: ID!
  names: String! @policy(policies: [["read:others", "and:yetanother"], ["read:profiles", "read:profiles2", "read:others"]])
}

type User
  @join__type(graph: FST, key: "id")
{
  id: ID!
  name: String @deprecated(reason: "we have no name")
}

type Query
{
  oneA: A @join__field(graph: FST)
  oneB: B @join__field(graph: FST)
}

enum join__Graph
{
  FST @join__graph(name: "fst", url: "http://example.com/fst")
  SND @join__graph(name: "snd", url: "http://example.com/snd")
}
