---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/entity_multiple_keys_basic/test.md
---
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, overrideLabel: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, extension: Boolean = false, resolvable: Boolean = true, isInterfaceObject: Boolean = false) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type User
  @join__type(graph: MULTI_KEY, key: "id")
  @join__type(graph: MULTI_KEY, key: "name email")
  @join__type(graph: SINGLE_KEY, key: "id")
{
  comments: [Comment!]! @join__field(graph: MULTI_KEY)
  email: String! @join__field(graph: MULTI_KEY)
  id: ID!
  name: String! @join__field(graph: MULTI_KEY)
  posts: [Post!]! @join__field(graph: SINGLE_KEY)
}

type Comment
  @join__type(graph: MULTI_KEY)
{
  id: ID!
  text: String!
}

type Post
  @join__type(graph: SINGLE_KEY)
{
  body: String!
  id: ID!
  published: Boolean!
  title: String!
}

type Query
{
  getUser(id: ID!): User @join__field(graph: SINGLE_KEY)
  getUserComments(name: String!, email: String!): User @join__field(graph: MULTI_KEY)
}

enum join__Graph
{
  MULTI_KEY @join__graph(name: "multi-key", url: "http://example.com/multi-key")
  SINGLE_KEY @join__graph(name: "single-key", url: "http://example.com/single-key")
}
