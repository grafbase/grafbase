---
source: crates/graphql-composition/tests/composition_tests.rs
expression: Federated SDL
input_file: crates/graphql-composition/tests/composition/entity_multiple_keys_basic/test.md
---
directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph, key: join__FieldSet, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT

scalar join__FieldSet

type User
    @join__type(graph: MULTI_KEY, key: "id")
    @join__type(graph: MULTI_KEY, key: "name email")
    @join__type(graph: SINGLE_KEY, key: "id")
{
    comments: [Comment!]! @join__field(graph: MULTI_KEY)
    email: String! @join__field(graph: MULTI_KEY)
    id: ID!
    name: String! @join__field(graph: MULTI_KEY)
    posts: [Post!]! @join__field(graph: SINGLE_KEY)
}

type Comment
    @join__type(graph: MULTI_KEY)
{
    id: ID!
    text: String!
}

type Post
    @join__type(graph: SINGLE_KEY)
{
    body: String!
    id: ID!
    published: Boolean!
    title: String!
}

type Query
{
    getUser(id: ID!): User @join__field(graph: SINGLE_KEY)
    getUserComments(name: String!, email: String!): User @join__field(graph: MULTI_KEY)
}

enum join__Graph
{
    MULTI_KEY @join__graph(name: "multi-key", url: "http://example.com/multi-key")
    SINGLE_KEY @join__graph(name: "single-key", url: "http://example.com/single-key")
}
