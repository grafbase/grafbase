---
source: common/parser/src/tests.rs
expression: sdl
---
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
input IDCollectionFilterInput {
	in: [ID!]
}
type Mutation {
	"""
	Create a TodoList
	"""
	todoListCreate(input: TodoListCreateInput!): TodoListCreatePayload
	"""
	Create multiple TodoList
	"""
	todoListCreateMany(input: [TodoListCreateManyInput!]!): TodoListCreateManyPayload
	"""
	Update a TodoList
	"""
	todoListUpdate(by: TodoListByInput!, input: TodoListUpdateInput!): TodoListUpdatePayload
	"""
	Update multiple TodoList
	"""
	todoListUpdateMany(input: [TodoListUpdateManyInput!]!): TodoListUpdateManyPayload
	"""
	Delete a TodoList by ID or unique field
	"""
	todoListDelete(by: TodoListByInput!): TodoListDeletePayload
	"""
	Delete multiple TodoList
	"""
	todoListDeleteMany(input: [TodoListDeleteManyInput!]!): TodoListDeleteManyPayload
	"""
	Create a Todo
	"""
	todoCreate(input: TodoCreateInput!): TodoCreatePayload
	"""
	Create multiple Todo
	"""
	todoCreateMany(input: [TodoCreateManyInput!]!): TodoCreateManyPayload
	"""
	Update a Todo
	"""
	todoUpdate(by: TodoByInput!, input: TodoUpdateInput!): TodoUpdatePayload
	"""
	Update multiple Todo
	"""
	todoUpdateMany(input: [TodoUpdateManyInput!]!): TodoUpdateManyPayload
	"""
	Delete a Todo by ID or unique field
	"""
	todoDelete(by: TodoByInput!): TodoDeletePayload
	"""
	Delete multiple Todo
	"""
	todoDeleteMany(input: [TodoDeleteManyInput!]!): TodoDeleteManyPayload
}
enum OrderByDirection {
	ASC
	DESC
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Query {
	"""
	Query a single TodoList by an ID or a unique field
	"""
	todoList(by: TodoListByInput!): TodoList
	"""
	Paginated query to fetch the whole list of `TodoList`.
	"""
	todoListCollection(after: String, before: String, first: Int, last: Int, orderBy: TodoListOrderByInput, filter: TodoListCollectionFilterInput): TodoListConnection
	"""
	Query a single Todo by an ID or a unique field
	"""
	todo(by: TodoByInput!): Todo
	"""
	Paginated query to fetch the whole list of `Todo`.
	"""
	todoCollection(after: String, before: String, first: Int, last: Int, orderBy: TodoOrderByInput, filter: TodoCollectionFilterInput): TodoConnection
}
type Todo {
	title: String!
	complete: Boolean
	list: TodoList
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input TodoByInput {
	id: ID
}
input TodoCollectionFilterInput {
	id: IDCollectionFilterInput
}
type TodoConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [TodoEdge]
}
"""
Input to create a Todo
"""
input TodoCreateInput {
	title: String!
	complete: Boolean
	list: TodoToTodoListCreateTodoListRelation
}
input TodoCreateManyInput {
	input: TodoCreateInput!
}
type TodoCreateManyPayload {
	todoCollection: [Todo!]!
}
type TodoCreatePayload {
	todo: Todo
}
input TodoDeleteManyInput {
	by: TodoByInput!
}
type TodoDeleteManyPayload {
	deletedIds: [ID!]!
}
type TodoDeletePayload {
	deletedId: ID!
}
type TodoEdge {
	node: Todo!
	cursor: String!
}
type TodoList {
	title: String!
	todos(after: String, before: String, first: Int, last: Int, orderBy: TodoListOrderByInput): TodoConnection
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input TodoListByInput {
	id: ID
}
input TodoListCollectionFilterInput {
	id: IDCollectionFilterInput
}
type TodoListConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [TodoListEdge]
}
"""
Input to create a TodoList
"""
input TodoListCreateInput {
	title: String!
	todos: [TodoToTodoListCreateTodoRelation]
}
input TodoListCreateManyInput {
	input: TodoListCreateInput!
}
type TodoListCreateManyPayload {
	todoListCollection: [TodoList!]!
}
type TodoListCreatePayload {
	todoList: TodoList
}
input TodoListDeleteManyInput {
	by: TodoListByInput!
}
type TodoListDeleteManyPayload {
	deletedIds: [ID!]!
}
type TodoListDeletePayload {
	deletedId: ID!
}
type TodoListEdge {
	node: TodoList!
	cursor: String!
}
input TodoListOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a TodoList
"""
input TodoListUpdateInput {
	title: String
	todos: [TodoToTodoListUpdateTodoRelation]
}
input TodoListUpdateManyInput {
	by: TodoListByInput!
	input: TodoListUpdateInput!
}
type TodoListUpdateManyPayload {
	todoListCollection: [TodoList!]!
}
type TodoListUpdatePayload {
	todoList: TodoList
}
input TodoOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to create a Todo for the TodoToTodoList relation of TodoList
"""
input TodoToTodoListCreateTodo {
	title: String!
	complete: Boolean
}
"""
Input to create a TodoList for the TodoToTodoList relation of Todo
"""
input TodoToTodoListCreateTodoList {
	title: String!
	todos: [TodoToTodoListCreateTodoRelation]
}
"""
Input to link to or create a TodoList for the TodoToTodoList relation of Todo
"""
input TodoToTodoListCreateTodoListRelation {
	create: TodoToTodoListCreateTodoList
	link: ID
}
"""
Input to link to or create a Todo for the TodoToTodoList relation of TodoList
"""
input TodoToTodoListCreateTodoRelation {
	create: TodoToTodoListCreateTodo
	link: ID
}
"""
Input to link/unlink to or create a TodoList for the TodoToTodoList relation of Todo
"""
input TodoToTodoListUpdateTodoListRelation {
	create: TodoToTodoListCreateTodoList
	link: ID
	unlink: ID
}
"""
Input to link/unlink to or create a Todo for the TodoToTodoList relation of TodoList
"""
input TodoToTodoListUpdateTodoRelation {
	create: TodoToTodoListCreateTodo
	link: ID
	unlink: ID
}
"""
Input to update a Todo
"""
input TodoUpdateInput {
	title: String
	complete: Boolean
	list: TodoToTodoListUpdateTodoListRelation
}
input TodoUpdateManyInput {
	by: TodoByInput!
	input: TodoUpdateInput!
}
type TodoUpdateManyPayload {
	todoCollection: [Todo!]!
}
type TodoUpdatePayload {
	todo: Todo
}
schema {
	query: Query
	mutation: Mutation
}

