---
source: common/parser/src/tests.rs
expression: sdl
---
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
input IDCollectionFilterInput {
	in: [ID!]
}
type Mutation {
	"""
	Create a User
	"""
	userCreate(input: UserCreateInput!): UserCreatePayload
	"""
	Create multiple User
	"""
	userCreateMany(input: [UserCreateManyInput!]!): UserCreateManyPayload
	"""
	Update a User
	"""
	userUpdate(by: UserByInput!, input: UserUpdateInput!): UserUpdatePayload
	"""
	Update multiple User
	"""
	userUpdateMany(input: [UserUpdateManyInput!]!): UserUpdateManyPayload
	"""
	Delete a User by ID or unique field
	"""
	userDelete(by: UserByInput!): UserDeletePayload
	"""
	Delete multiple User
	"""
	userDeleteMany(input: [UserDeleteManyInput!]!): UserDeleteManyPayload
	"""
	Create a Organization
	"""
	organizationCreate(input: OrganizationCreateInput!): OrganizationCreatePayload
	"""
	Create multiple Organization
	"""
	organizationCreateMany(input: [OrganizationCreateManyInput!]!): OrganizationCreateManyPayload
	"""
	Update a Organization
	"""
	organizationUpdate(by: OrganizationByInput!, input: OrganizationUpdateInput!): OrganizationUpdatePayload
	"""
	Update multiple Organization
	"""
	organizationUpdateMany(input: [OrganizationUpdateManyInput!]!): OrganizationUpdateManyPayload
	"""
	Delete a Organization by ID or unique field
	"""
	organizationDelete(by: OrganizationByInput!): OrganizationDeletePayload
	"""
	Delete multiple Organization
	"""
	organizationDeleteMany(input: [OrganizationDeleteManyInput!]!): OrganizationDeleteManyPayload
}
enum OrderByDirection {
	ASC
	DESC
}
type Organization {
	name: String!
	users(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput): UserConnection
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input OrganizationByInput {
	id: ID
}
input OrganizationCollectionFilterInput {
	id: IDCollectionFilterInput
}
type OrganizationConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [OrganizationEdge]
}
"""
Input to create a Organization
"""
input OrganizationCreateInput {
	name: String!
	users: [OrganizationToUserCreateUserRelation!]
}
input OrganizationCreateManyInput {
	input: OrganizationCreateInput!
}
type OrganizationCreateManyPayload {
	organizationCollection: [Organization!]!
}
type OrganizationCreatePayload {
	organization: Organization
}
input OrganizationDeleteManyInput {
	by: OrganizationByInput!
}
type OrganizationDeleteManyPayload {
	deletedIds: [ID!]!
}
type OrganizationDeletePayload {
	deletedId: ID!
}
type OrganizationEdge {
	node: Organization!
	cursor: String!
}
input OrganizationOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to create a Organization for the OrganizationToUser relation of User
"""
input OrganizationToUserCreateOrganization {
	name: String!
	users: [OrganizationToUserCreateUserRelation!]
}
"""
Input to link to or create a Organization for the OrganizationToUser relation of User
"""
input OrganizationToUserCreateOrganizationRelation {
	create: OrganizationToUserCreateOrganization
	link: ID
}
"""
Input to create a User for the OrganizationToUser relation of Organization
"""
input OrganizationToUserCreateUser {
	name: String!
	organizations: [OrganizationToUserCreateOrganizationRelation!]
}
"""
Input to link to or create a User for the OrganizationToUser relation of Organization
"""
input OrganizationToUserCreateUserRelation {
	create: OrganizationToUserCreateUser
	link: ID
}
"""
Input to link/unlink to or create a Organization for the OrganizationToUser relation of User
"""
input OrganizationToUserUpdateOrganizationRelation {
	create: OrganizationToUserCreateOrganization
	link: ID
	unlink: ID
}
"""
Input to link/unlink to or create a User for the OrganizationToUser relation of Organization
"""
input OrganizationToUserUpdateUserRelation {
	create: OrganizationToUserCreateUser
	link: ID
	unlink: ID
}
"""
Input to update a Organization
"""
input OrganizationUpdateInput {
	name: String
	users: [OrganizationToUserUpdateUserRelation!]
}
input OrganizationUpdateManyInput {
	by: OrganizationByInput!
	input: OrganizationUpdateInput!
}
type OrganizationUpdateManyPayload {
	organizationCollection: [Organization!]!
}
type OrganizationUpdatePayload {
	organization: Organization
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Query {
	"""
	Query a single User by an ID or a unique field
	"""
	user(by: UserByInput!): User
	"""
	Paginated query to fetch the whole list of `User`.
	"""
	userCollection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, filter: UserCollectionFilterInput): UserConnection
	"""
	Query a single Organization by an ID or a unique field
	"""
	organization(by: OrganizationByInput!): Organization
	"""
	Paginated query to fetch the whole list of `Organization`.
	"""
	organizationCollection(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput, filter: OrganizationCollectionFilterInput): OrganizationConnection
}
type User {
	name: String!
	organizations(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput): OrganizationConnection
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input UserByInput {
	id: ID
}
input UserCollectionFilterInput {
	id: IDCollectionFilterInput
}
type UserConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [UserEdge]
}
"""
Input to create a User
"""
input UserCreateInput {
	name: String!
	organizations: [OrganizationToUserCreateOrganizationRelation!]
}
input UserCreateManyInput {
	input: UserCreateInput!
}
type UserCreateManyPayload {
	userCollection: [User!]!
}
type UserCreatePayload {
	user: User
}
input UserDeleteManyInput {
	by: UserByInput!
}
type UserDeleteManyPayload {
	deletedIds: [ID!]!
}
type UserDeletePayload {
	deletedId: ID!
}
type UserEdge {
	node: User!
	cursor: String!
}
input UserOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a User
"""
input UserUpdateInput {
	name: String
	organizations: [OrganizationToUserUpdateOrganizationRelation!]
}
input UserUpdateManyInput {
	by: UserByInput!
	input: UserUpdateInput!
}
type UserUpdateManyPayload {
	userCollection: [User!]!
}
type UserUpdatePayload {
	user: User
}
schema {
	query: Query
	mutation: Mutation
}

