package component:grafbase;

interface types {
    enum header-error {
        invalid-header-value,
        invalid-header-name,
    }

    // Error variant sent if failing to write to access log.
    variant log-error {
        // The log channel is over capacity. The data is returned to the caller.
        channel-full(list<u8>),
        // The channel is closed.
        channel-closed,
    }

    resource context {
        get: func(name: string) -> option<string>;
        set: func(name: string, value: string);
        delete: func(name: string) -> option<string>;
    }

    resource shared-context {
        get: func(name: string) -> option<string>;
        // Sends the data to the access log.
        log-access: func(data: list<u8>) -> result<_, log-error>;
    }

    resource headers {
        get: func(name: string) -> option<string>;
        set: func(name: string, value: string) -> result<_, header-error>;
        delete: func(name: string) -> option<string>;
    }

    record edge-definition {
        parent-type-name: string,
        field-name: string,
    }

    record node-definition {
        type-name: string,
    }

    record error-response {
        status-code: u16,
        errors: list<error>,
    }

    record error {
        message: string,
        extensions: list<tuple<string,string>>,
    }
}

interface gateway-request {
    use types.{headers, error-response, context};

    on-gateway-request: func(context: context, headers: headers) -> result<_, error-response>;
}

interface authorization {
    use types.{error, shared-context, edge-definition, node-definition};

    authorize-edge-pre-execution: func(
        context: shared-context,
        definition: edge-definition,
        arguments: string,
        metadata: string
    ) -> result<_, error>;

    authorize-node-pre-execution: func(
        context: shared-context,
        definition: node-definition,
        metadata: string
    ) -> result<_, error>;

    authorize-parent-edge-post-execution: func(
        context: shared-context,
        definition: edge-definition,
        parents: list<string>,
        metadata: string
    ) -> list<result<_, error>>;

    authorize-edge-node-post-execution: func(
        context: shared-context,
        definition: edge-definition,
        nodes: list<string>,
        metadata: string
    ) -> list<result<_, error>>;

    authorize-edge-post-execution: func(
        context: shared-context,
        definition: edge-definition,
        edges: list<tuple<string, list<string>>>,
        metadata: string
    ) -> list<result<_, error>>;
}

world hooks {
    export authorization;
}
