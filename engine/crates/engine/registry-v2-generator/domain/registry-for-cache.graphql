union MetaType @distinct @file(name: "metatype") @variant(names: ["Object", "Interface", "Other"]) =
    ObjectType
  | InterfaceType
  | OtherType

type ObjectType @file(name: "objects") @distinct {
  name: String!
  fields: [MetaField!]!
  cache_control: CacheControl
}

type MetaField @file(name: "field") {
  name: String!
  ty: MetaFieldTypeRecord! @noreader
  cache_control: CacheControl
}

scalar CacheControl @box @inline
scalar MetaFieldTypeRecord @inline

scalar ConstValue @inline @box

type InterfaceType @file(name: "interface") @distinct {
  name: String!
  fields: [MetaField!]!
  cache_control: CacheControl
  possible_types: [MetaType] @inline
}

# We do still need to reference scalar etc. types in this schema
# so here's a catch all
type OtherType @file(name: "others") @distinct {
  name: String!
}

# String is built in, but easier to implement stuff if its just in the .graphql file
# It is also special cased a bit in the rust code
scalar String
scalar bool @inline
