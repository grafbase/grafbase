union MetaType
  @distinct
  @file(name: "metatype")
  @variant(names: ["Object", "Interface", "Union", "Enum", "InputObject", "Scalar"]) =
    ObjectType
  | InterfaceType
  | UnionType
  | EnumType
  | InputObjectType
  | ScalarType

type ObjectType @file(name: "objects") @distinct {
  name: String!
  description: String
  fields: [MetaField!]!
  cache_control: CacheControl
  external: bool!
  shareable: bool!
}

type MetaField @file(name: "field") {
  name: String!
  mapped_name: String
  description: String
  args: [MetaInputValue!]!
  ty: MetaFieldTypeRecord! @noreader
  deprecation: Deprecation
  cache_control: CacheControl
  requires: FieldSet
  federation: FederationProperties
  resolver: Resolver!
  required_operation: Operations
  auth: AuthConfig
}

scalar Deprecation @box @inline
scalar CacheControl @box @inline
scalar FieldSet @box @inline
scalar FederationProperties @box @inline
scalar Resolver @inline @ref
scalar Operations @box @inline
scalar AuthConfig @box @inline
scalar MetaFieldTypeRecord @inline

scalar ConstValue @inline @box

type MetaInputValue @file(name: "inputs") {
  name: String!
  description: String
  ty: MetaInputValueTypeRecord! @noreader
  default_value: ConstValue
  rename: String
  validators: [InputValidator!]!
}

scalar MetaInputValueTypeRecord @inline

type ScalarType @file(name: "scalar") @distinct {
  name: String!
  description: String
  specified_by_url: String
  parser: ScalarParser!
}

scalar ScalarParser @inline

type InterfaceType @file(name: "interface") @distinct {
  name: String!
  description: String
  fields: [MetaField!]!
  cache_control: CacheControl
  possible_types: [MetaType] @inline
}

type UnionType @file(name: "union") @distinct {
  name: String!
  description: String
  possible_types: [MetaType] @inline
  discriminators: UnionDiscriminators!
}

scalar UnionDiscriminators @inline @ref

type EnumType @file(name: "enums") @distinct {
  name: String!
  description: String
  values: [MetaEnumValue!]!
}

type MetaEnumValue @file(name: "enums") {
  name: String!
  description: String
  deprecation: Deprecation
  value: String
}

type InputObjectType @file(name: "inputs") @distinct {
  name: String!
  description: String
  input_fields: [MetaInputValue!]!
  oneof: bool!
}

type MetaDirective @file(name: "directives") @distinct {
  name: String!
  description: String
  locations: [DirectiveLocation!]!
  args: [MetaInputValue!]!
  is_repeatable: bool!
}

scalar DirectiveLocation @inline

type InputValidator @file(name: "inputs") {
  validator: DynValidator!
}

scalar DynValidator @inline @ref

# String is built in, but easier to implement stuff if its just in the .graphql file
# It is also special cased a bit in the rust code
scalar String
scalar bool @inline

scalar WrapperTypes
