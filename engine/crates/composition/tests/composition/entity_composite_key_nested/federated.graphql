directive @core(feature: String!) repeatable on SCHEMA

directive @join__owner(graph: join__Graph!) on OBJECT

directive @join__type(
    graph: join__Graph!
    key: String!
) repeatable on OBJECT | INTERFACE

directive @join__field(
    graph: join__Graph
    requires: String
    provides: String
) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

enum join__Graph {
    PATIENT_INFO @join__graph(name: "patient_info", url: "http://example.com/patient_info")
    PATIENT_RECORD @join__graph(name: "patient_record", url: "http://example.com/patient_record")
}

type Query {
    patient(id: ID!): Patient @join__field(graph: PATIENT_INFO)
    patients: [Patient] @join__field(graph: PATIENT_INFO)
    patientRecord(patientId: ID!, recordId: ID!): PatientRecord @join__field(graph: PATIENT_RECORD)
    patientRecords: [PatientRecord] @join__field(graph: PATIENT_RECORD)
}

type Patient
    @join__type(graph: PATIENT_INFO, key: "id")
    @join__type(graph: PATIENT_RECORD, key: "id")
{
    id: ID!
    name: String @join__field(graph: PATIENT_INFO)
    dateOfBirth: String @join__field(graph: PATIENT_INFO)
    medicalRecords: [PatientRecord] @join__field(graph: PATIENT_RECORD, requires: "id")
}

type PatientRecord
    @join__type(graph: PATIENT_INFO, key: "patient { id } recordId")
    @join__type(graph: PATIENT_RECORD, key: "patient { id } recordId")
{
    patient: Patient
    recordId: ID!
    admissionDate: String @join__field(graph: PATIENT_INFO)
    extendPatientRecord: PatientRecord @join__field(graph: PATIENT_INFO, requires: "patient { id } recordId")
    diagnosis: String @join__field(graph: PATIENT_RECORD)
    treatmentPlan: String @join__field(graph: PATIENT_RECORD)
}
