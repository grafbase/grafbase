enum AccountType {
    SAVINGS
    CHECKING
}

type User {
    accounts: [Account!]!
    email: String!
    name: String!
    userId: ID!
}

type Account {
    balance: Float!
    id: ID!
    transactions: [Transaction!]!
    type: AccountType!
    user: User!
}

type Transaction {
    account: Account!
    amount: Float!
    date: String!
    description: String
    id: ID!
}

type Query {
    account(id: ID!): Account
    accounts: [Account!]!
    transaction(id: ID!): Transaction
    transactions: [Transaction!]!
    user(id: ID!): User
    users: [User!]!
}

type Mutation {
    createAccount(userId: ID!, type: AccountType!, initialBalance: Float!, input: CreateAccountInput, included: Boolean, notIncluded: String): Account
    createTransaction(amount: Float!, description: String, accountId: ID!): Transaction!
    createUser(name: String!, email: String!): User!
    deleteAccount(id: ID!): Account!
    deleteTransaction(id: ID!): Transaction!
    deleteUser(id: ID!, soft: Boolean): User!
    updateUser(name: String, email: String, id: ID!): User!
}

input CreateAccountInput {
    userId: ID!
    nested: NestedThing
    accountType: AccountType
}

input NestedThing {
    name: String!
}
