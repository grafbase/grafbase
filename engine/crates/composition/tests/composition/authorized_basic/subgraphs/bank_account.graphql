enum AccountType {
  SAVINGS
  CHECKING
}

type User {
  userId: ID!
  name: String!
  email: String!
  accounts: [Account!]! @authorized(fields: "userId name", metadata: "{\"stuff\": true}")
}

type Account @authorized(fields: "user { userId }") {
  id: ID!
  type: AccountType!
  # Simple fields
  balance: Float! @authorized(fields: "id")
  user: User!
  transactions: [Transaction!]!
}

type Transaction {
  id: ID!
  amount: Float!
  date: String!
  description: String
  account: Account!
}

type Query {
  users: [User!]!
  user(id: ID!): User
  accounts: [Account!]!
  account(id: ID!): Account
  transactions: [Transaction!]!
  transaction(id: ID!): Transaction
}

type Mutation {
  createUser( name: String!, email: String!): User!
  createAccount(userId: ID!, type: AccountType!, initialBalance: Float!): Account!
  createTransaction(accountId: ID!, amount: Float!, description: String): Transaction!
  updateUser(id: ID!, name: String, email: String): User!
  # Simple input path
  deleteUser(id: ID!, soft: Boolean): User! @authorized(arguments: "id")
  deleteAccount(id: ID!): Account!
  deleteTransaction(id: ID!): Transaction!
  createAccount(input: CreateAccountInput, included: Boolean, notIncluded: String): Account @authorized(arguments: "input { userId nested { name } } included", metadata: ["a", "b", "c"])
}

input CreateAccountInput {
  userId: ID!
  accountType: AccountType
  nested: NestedThing
}

input NestedThing {
  name: String!
}
