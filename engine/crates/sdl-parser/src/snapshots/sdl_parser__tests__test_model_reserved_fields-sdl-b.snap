---
source: common/parser/src/tests.rs
expression: sdl_b
---
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
input IDCollectionFilterInput {
	in: [ID!]
}
type Mutation {
	"""
	Create a Product
	"""
	productCreate(input: ProductCreateInput!): ProductCreatePayload
	"""
	Create multiple Product
	"""
	productCreateMany(input: [ProductCreateManyInput!]!): ProductCreateManyPayload
	"""
	Update a Product
	"""
	productUpdate(by: ProductByInput!, input: ProductUpdateInput!): ProductUpdatePayload
	"""
	Update multiple Product
	"""
	productUpdateMany(input: [ProductUpdateManyInput!]!): ProductUpdateManyPayload
	"""
	Delete a Product by ID or unique field
	"""
	productDelete(by: ProductByInput!): ProductDeletePayload
	"""
	Delete multiple Product
	"""
	productDeleteMany(input: [ProductDeleteManyInput!]!): ProductDeleteManyPayload
}
enum OrderByDirection {
	ASC
	DESC
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Product {
	title: String
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input ProductByInput {
	id: ID
}
input ProductCollectionFilterInput {
	id: IDCollectionFilterInput
}
type ProductConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [ProductEdge]
}
"""
Input to create a Product
"""
input ProductCreateInput {
	title: String
}
input ProductCreateManyInput {
	input: ProductCreateInput!
}
type ProductCreateManyPayload {
	productCollection: [Product!]!
}
type ProductCreatePayload {
	product: Product
}
input ProductDeleteManyInput {
	by: ProductByInput!
}
type ProductDeleteManyPayload {
	deletedIds: [ID!]!
}
type ProductDeletePayload {
	deletedId: ID!
}
type ProductEdge {
	node: Product!
	cursor: String!
}
input ProductOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a Product
"""
input ProductUpdateInput {
	title: String
}
input ProductUpdateManyInput {
	by: ProductByInput!
	input: ProductUpdateInput!
}
type ProductUpdateManyPayload {
	productCollection: [Product!]!
}
type ProductUpdatePayload {
	product: Product
}
type Query {
	"""
	Query a single Product by an ID or a unique field
	"""
	product(by: ProductByInput!): Product
	"""
	Paginated query to fetch the whole list of `Product`.
	"""
	productCollection(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, filter: ProductCollectionFilterInput): ProductConnection
}
schema {
	query: Query
	mutation: Mutation
}

