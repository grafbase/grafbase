---
source: common/parser/src/tests.rs
expression: sdl
---
type Author {
	lastname: String!
	published(after: String, before: String, first: Int, last: Int, orderBy: AuthorOrderByInput): PostConnection
	commented(after: String, before: String, first: Int, last: Int, orderBy: AuthorOrderByInput): CommentConnection
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input AuthorByInput {
	id: ID
}
input AuthorCollectionFilterInput {
	id: IDCollectionFilterInput
}
type AuthorConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [AuthorEdge]
}
"""
Input to create a Author
"""
input AuthorCreateInput {
	lastname: String!
	published: [PublishedCreatePostRelation]
	commented: [CommentedCreateCommentRelation]
}
input AuthorCreateManyInput {
	input: AuthorCreateInput!
}
type AuthorCreateManyPayload {
	authorCollection: [Author!]!
}
type AuthorCreatePayload {
	author: Author
}
input AuthorDeleteManyInput {
	by: AuthorByInput!
}
type AuthorDeleteManyPayload {
	deletedIds: [ID!]!
}
type AuthorDeletePayload {
	deletedId: ID!
}
type AuthorEdge {
	node: Author!
	cursor: String!
}
input AuthorOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a Author
"""
input AuthorUpdateInput {
	lastname: String
	published: [PublishedUpdatePostRelation]
	commented: [CommentedUpdateCommentRelation]
}
input AuthorUpdateManyInput {
	by: AuthorByInput!
	input: AuthorUpdateInput!
}
type AuthorUpdateManyPayload {
	authorCollection: [Author!]!
}
type AuthorUpdatePayload {
	author: Author
}
type Comment {
	author: Author!
	post: Post
	comment: String!
	like: Int!
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input CommentByInput {
	id: ID
}
input CommentCollectionFilterInput {
	id: IDCollectionFilterInput
}
type CommentConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [CommentEdge]
}
"""
Input to create a Comment
"""
input CommentCreateInput {
	author: CommentedCreateAuthorRelation!
	post: CommentsCreatePostRelation
	comment: String!
	like: Int!
}
input CommentCreateManyInput {
	input: CommentCreateInput!
}
type CommentCreateManyPayload {
	commentCollection: [Comment!]!
}
type CommentCreatePayload {
	comment: Comment
}
input CommentDeleteManyInput {
	by: CommentByInput!
}
type CommentDeleteManyPayload {
	deletedIds: [ID!]!
}
type CommentDeletePayload {
	deletedId: ID!
}
type CommentEdge {
	node: Comment!
	cursor: String!
}
input CommentOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a Comment
"""
input CommentUpdateInput {
	author: CommentedUpdateAuthorRelation
	post: CommentsUpdatePostRelation
	comment: String
	like: IntOperationsInput
}
input CommentUpdateManyInput {
	by: CommentByInput!
	input: CommentUpdateInput!
}
type CommentUpdateManyPayload {
	commentCollection: [Comment!]!
}
type CommentUpdatePayload {
	comment: Comment
}
"""
Input to create a Author for the commented relation of Comment
"""
input CommentedCreateAuthor {
	lastname: String!
	published: [PublishedCreatePostRelation]
	commented: [CommentedCreateCommentRelation]
}
"""
Input to link to or create a Author for the commented relation of Comment
"""
input CommentedCreateAuthorRelation {
	create: CommentedCreateAuthor
	link: ID
}
"""
Input to create a Comment for the commented relation of Author
"""
input CommentedCreateComment {
	post: CommentsCreatePostRelation
	comment: String!
	like: Int!
}
"""
Input to link to or create a Comment for the commented relation of Author
"""
input CommentedCreateCommentRelation {
	create: CommentedCreateComment
	link: ID
}
"""
Input to link/unlink to or create a Author for the commented relation of Comment
"""
input CommentedUpdateAuthorRelation {
	create: CommentedCreateAuthor
	link: ID
	unlink: ID
}
"""
Input to link/unlink to or create a Comment for the commented relation of Author
"""
input CommentedUpdateCommentRelation {
	create: CommentedCreateComment
	link: ID
	unlink: ID
}
"""
Input to create a Comment for the comments relation of Post
"""
input CommentsCreateComment {
	author: CommentedCreateAuthorRelation!
	comment: String!
	like: Int!
}
"""
Input to link to or create a Comment for the comments relation of Post
"""
input CommentsCreateCommentRelation {
	create: CommentsCreateComment
	link: ID
}
"""
Input to create a Post for the comments relation of Comment
"""
input CommentsCreatePost {
	content: String!
	author: PublishedCreateAuthorRelation
	comments: [CommentsCreateCommentRelation]
}
"""
Input to link to or create a Post for the comments relation of Comment
"""
input CommentsCreatePostRelation {
	create: CommentsCreatePost
	link: ID
}
"""
Input to link/unlink to or create a Comment for the comments relation of Post
"""
input CommentsUpdateCommentRelation {
	create: CommentsCreateComment
	link: ID
	unlink: ID
}
"""
Input to link/unlink to or create a Post for the comments relation of Comment
"""
input CommentsUpdatePostRelation {
	create: CommentsCreatePost
	link: ID
	unlink: ID
}
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
input IDCollectionFilterInput {
	in: [ID!]
}
"""
Possible operations for an Int field
"""
input IntOperationsInput {
	set: Int
	increment: Int
	decrement: Int
}
type Mutation {
	"""
	Create a Author
	"""
	authorCreate(input: AuthorCreateInput!): AuthorCreatePayload
	"""
	Create multiple Author
	"""
	authorCreateMany(input: [AuthorCreateManyInput!]!): AuthorCreateManyPayload
	"""
	Update a Author
	"""
	authorUpdate(by: AuthorByInput!, input: AuthorUpdateInput!): AuthorUpdatePayload
	"""
	Update multiple Author
	"""
	authorUpdateMany(input: [AuthorUpdateManyInput!]!): AuthorUpdateManyPayload
	"""
	Delete a Author by ID or unique field
	"""
	authorDelete(by: AuthorByInput!): AuthorDeletePayload
	"""
	Delete multiple Author
	"""
	authorDeleteMany(input: [AuthorDeleteManyInput!]!): AuthorDeleteManyPayload
	"""
	Create a Post
	"""
	postCreate(input: PostCreateInput!): PostCreatePayload
	"""
	Create multiple Post
	"""
	postCreateMany(input: [PostCreateManyInput!]!): PostCreateManyPayload
	"""
	Update a Post
	"""
	postUpdate(by: PostByInput!, input: PostUpdateInput!): PostUpdatePayload
	"""
	Update multiple Post
	"""
	postUpdateMany(input: [PostUpdateManyInput!]!): PostUpdateManyPayload
	"""
	Delete a Post by ID or unique field
	"""
	postDelete(by: PostByInput!): PostDeletePayload
	"""
	Delete multiple Post
	"""
	postDeleteMany(input: [PostDeleteManyInput!]!): PostDeleteManyPayload
	"""
	Create a Comment
	"""
	commentCreate(input: CommentCreateInput!): CommentCreatePayload
	"""
	Create multiple Comment
	"""
	commentCreateMany(input: [CommentCreateManyInput!]!): CommentCreateManyPayload
	"""
	Update a Comment
	"""
	commentUpdate(by: CommentByInput!, input: CommentUpdateInput!): CommentUpdatePayload
	"""
	Update multiple Comment
	"""
	commentUpdateMany(input: [CommentUpdateManyInput!]!): CommentUpdateManyPayload
	"""
	Delete a Comment by ID or unique field
	"""
	commentDelete(by: CommentByInput!): CommentDeletePayload
	"""
	Delete multiple Comment
	"""
	commentDeleteMany(input: [CommentDeleteManyInput!]!): CommentDeleteManyPayload
}
enum OrderByDirection {
	ASC
	DESC
}
type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}
type Post {
	content: String!
	author: Author
	comments(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput): CommentConnection
	"""
	Unique identifier
	"""
	id: ID!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
	"""
	when the model was created
	"""
	createdAt: DateTime!
}
input PostByInput {
	id: ID
}
input PostCollectionFilterInput {
	id: IDCollectionFilterInput
}
type PostConnection {
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
	edges: [PostEdge]
}
"""
Input to create a Post
"""
input PostCreateInput {
	content: String!
	author: PublishedCreateAuthorRelation
	comments: [CommentsCreateCommentRelation]
}
input PostCreateManyInput {
	input: PostCreateInput!
}
type PostCreateManyPayload {
	postCollection: [Post!]!
}
type PostCreatePayload {
	post: Post
}
input PostDeleteManyInput {
	by: PostByInput!
}
type PostDeleteManyPayload {
	deletedIds: [ID!]!
}
type PostDeletePayload {
	deletedId: ID!
}
type PostEdge {
	node: Post!
	cursor: String!
}
input PostOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a Post
"""
input PostUpdateInput {
	content: String
	author: PublishedUpdateAuthorRelation
	comments: [CommentsUpdateCommentRelation]
}
input PostUpdateManyInput {
	by: PostByInput!
	input: PostUpdateInput!
}
type PostUpdateManyPayload {
	postCollection: [Post!]!
}
type PostUpdatePayload {
	post: Post
}
"""
Input to create a Author for the published relation of Post
"""
input PublishedCreateAuthor {
	lastname: String!
	published: [PublishedCreatePostRelation]
	commented: [CommentedCreateCommentRelation]
}
"""
Input to link to or create a Author for the published relation of Post
"""
input PublishedCreateAuthorRelation {
	create: PublishedCreateAuthor
	link: ID
}
"""
Input to create a Post for the published relation of Author
"""
input PublishedCreatePost {
	content: String!
	comments: [CommentsCreateCommentRelation]
}
"""
Input to link to or create a Post for the published relation of Author
"""
input PublishedCreatePostRelation {
	create: PublishedCreatePost
	link: ID
}
"""
Input to link/unlink to or create a Author for the published relation of Post
"""
input PublishedUpdateAuthorRelation {
	create: PublishedCreateAuthor
	link: ID
	unlink: ID
}
"""
Input to link/unlink to or create a Post for the published relation of Author
"""
input PublishedUpdatePostRelation {
	create: PublishedCreatePost
	link: ID
	unlink: ID
}
type Query {
	"""
	Query a single Author by an ID or a unique field
	"""
	author(by: AuthorByInput!): Author
	"""
	Paginated query to fetch the whole list of `Author`.
	"""
	authorCollection(after: String, before: String, first: Int, last: Int, orderBy: AuthorOrderByInput, filter: AuthorCollectionFilterInput): AuthorConnection
	"""
	Query a single Post by an ID or a unique field
	"""
	post(by: PostByInput!): Post
	"""
	Paginated query to fetch the whole list of `Post`.
	"""
	postCollection(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, filter: PostCollectionFilterInput): PostConnection
	"""
	Query a single Comment by an ID or a unique field
	"""
	comment(by: CommentByInput!): Comment
	"""
	Paginated query to fetch the whole list of `Comment`.
	"""
	commentCollection(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, filter: CommentCollectionFilterInput): CommentConnection
}
schema {
	query: Query
	mutation: Mutation
}

