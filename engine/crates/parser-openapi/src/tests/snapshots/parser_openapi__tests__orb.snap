---
source: engine/crates/parser-openapi/src/tests/mod.rs
expression: "build_registry(\"test_data/orb.json\", Format::Json,\n            ApiMetadata {\n                url: None,\n                ..metadata(\"orb\", true)\n            }).unwrap().export_sdl(false)"
---
type Mutation {
	orb: OrbMutation!
}
type OrbBackfill {
	timeframeStart: String!
	timeframeEnd: String!
	status: OrbBackfillStatus!
	revertedAt: String
	id: String!
	customerId: String
	createdAt: String!
	closeTime: String!
}
enum OrbBackfillStatus {
	REVERTED
	PENDING_REVERT
	REFLECTED
	PENDING
}
type OrbCoupon {
	timesRedeemed: Int
	redemptionCode: String!
	maxRedemptions: Int
	id: String
	durationInMonths: Int
	discount: OrbDiscount!
	archivedAt: String
}
type OrbCreditLedgerEntry {
	startingBalance: Float!
	priceId: String
	newBlockExpiryDate: String
	metadata: JSON!
	ledgerSequenceNumber: Float!
	id: String!
	eventId: String
	entryType: OrbCreditLedgerEntryEntryType!
	entryStatus: OrbCreditLedgerEntryEntryStatus!
	endingBalance: Float!
	description: String!
	customer: OrbCreditLedgerEntryCustomer!
	creditBlock: OrbCreditLedgerEntryCreditBlock!
	createdAt: String!
	amount: Float
}
type OrbCreditLedgerEntryCreditBlock {
	perUnitCostBasis: String!
	id: String!
	expiryDate: String!
}
type OrbCreditLedgerEntryCustomer {
	id: String!
	externalCustomerId: String!
}
enum OrbCreditLedgerEntryEntryStatus {
	PENDING
	COMMITTED
}
enum OrbCreditLedgerEntryEntryType {
	CREDIT_BLOCK_EXPIRY
	EXPIRATION_CHANGE
	DECREMENT
	INCREMENT
}
type OrbCreditNote {
	voidedAt: String!
	type: OrbCreditNoteType!
	total: String!
	subtotal: String!
	reason: OrbCreditNoteReason!
	minimumAmountRefunded: String!
	memo: String!
	maximumAmountAdjustment: String
	lineItems: [OrbCreditNoteLineItem!]!
	invoiceId: String!
	id: String!
	discounts: [OrbDiscount!]!
	customer: OrbCreditNoteCustomer!
	creditNotePdf: String!
	creditNoteNumber: String!
	createdAt: String!
}
type OrbCreditNoteCustomer {
	id: String!
	externalCustomerId: String!
}
type OrbCreditNoteLineItem {
	taxAmounts: [OrbCreditNoteLineItemTaxAmounts!]!
	subtotal: String!
	subLineItems: [OrbCreditNoteLineItemSubLineItems!]!
	quantity: Float!
	name: String!
	id: String!
	discounts: OrbDiscount!
	amount: String!
}
type OrbCreditNoteLineItemSubLineItems {
	quantity: Float!
	name: String!
	amount: String!
}
type OrbCreditNoteLineItemTaxAmounts {
	taxRatePercentage: String!
	taxRateDescription: String!
	amount: String!
}
enum OrbCreditNoteReason {
	PRODUCT_UNSATISFACTORY
	ORDER_CHANGE
	FRAUDULENT
	DUPLICATE
}
enum OrbCreditNoteType {
	ADJUSTMENT
	REFUND
}
type OrbCustomer {
	timezone: String!
	taxId: OrbCustomerTaxId!
	shippingAddress: OrbCustomerShippingAddress
	portalUrl: String
	paymentProviderId: String!
	paymentProvider: OrbCustomerPaymentProvider!
	name: String!
	metadata: JSON!
	id: String!
	externalCustomerId: String
	emailDelivery: Boolean
	email: String!
	currency: String!
	createdAt: String!
	billingAddress: OrbCustomerBillingAddress
	balance: String!
	autoCollection: Boolean
}
type OrbCustomerBalanceTransaction {
	type: OrbCustomerBalanceTransactionType!
	startingBalance: String!
	invoice: OrbCustomerBalanceTransactionInvoice!
	id: String!
	endingBalance: String!
	description: String!
	creditNote: OrbCustomerBalanceTransactionCreditNote
	createdAt: String!
	amount: String!
	action: OrbCustomerBalanceTransactionAction!
}
enum OrbCustomerBalanceTransactionAction {
	MANUAL_ADJUSTMENT
	PRORATED_REFUND
	APPLIED_TO_INVOICE
}
type OrbCustomerBalanceTransactionCreditNote {
	id: String!
}
type OrbCustomerBalanceTransactionInvoice {
	id: String!
}
enum OrbCustomerBalanceTransactionType {
	DECREMENT
	INCREMENT
}
type OrbCustomerBillingAddress {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
enum OrbCustomerPaymentProvider {
	STRIPE_INVOICE
	STRIPE_CHARGE
	BILL_COM
	QUICKBOOKS
	STRIPE
}
type OrbCustomerShippingAddress {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
type OrbCustomerTaxId {
	value: String!
	type: String!
	country: String!
}
input OrbCustomerTaxIdInput {
	value: String!
	type: String!
	country: String!
}
type OrbDiscount {
	usageDiscount: Float
	trialAmountDiscount: String
	percentageDiscount: Float
	discountType: OrbDiscountDiscountType!
	appliesToPriceIds: [String!]
	amountDiscount: String
}
enum OrbDiscountDiscountType {
	AMOUNT
	USAGE
	TRIAL
	PERCENTAGE
}
input OrbDiscountInput {
	usageDiscount: Float
	trialAmountDiscount: String
	percentageDiscount: Float
	discountType: OrbDiscountDiscountType!
	appliesToPriceIds: [String!]
	amountDiscount: String
}
type OrbEvent {
	timestamp: String!
	properties: JSON!
	id: String!
	externalCustomerId: String
	eventName: String!
	customerId: String!
}
type OrbGetCoupons {
	paginationMetadata: JSON
	nodes: [OrbCoupon!]
}
type OrbGetCreditNote {
	paginationMetadata: JSON
	nodes: [OrbCreditNote!]
}
type OrbGetCustomerCosts {
	paginationMetadata: JSON!
	data: [OrbGetCustomerCostsData!]!
}
type OrbGetCustomerCostsData {
	total: String!
	timeframeStart: String!
	timeframeEnd: String!
	subtotal: String!
	perPriceCosts: [OrbGetCustomerCostsPerPriceCostsData!]!
}
type OrbGetCustomerCostsPerPriceCostsData {
	total: String
	subtotal: String
	priceGroups: [OrbGetCustomerCostsPriceGroupsPerPriceCostsData!]!
	price: OrbPrice
}
type OrbGetCustomerCostsPriceGroupsPerPriceCostsData {
	total: String!
	secondaryGroupingValue: String
	secondaryGroupingKey: String
	groupingValue: String!
	groupingKey: String!
}
enum OrbGetCustomerCostsViewMode {
	CUMULATIVE
	PERIODIC
}
type OrbGetCustomers {
	paginationMetadata: OrbGetCustomersPaginationMetadata!
	nodes: [OrbCustomer!]!
}
type OrbGetCustomersCustomerIdBalanceTransactions {
	paginationMetadata: JSON
	nodes: [OrbCustomerBalanceTransaction!]
}
type OrbGetCustomersCustomerIdCredits {
	paginationMetadata: OrbGetCustomersCustomerIdCreditsPaginationMetadata!
	data: [OrbGetCustomersCustomerIdCreditsData!]!
}
type OrbGetCustomersCustomerIdCreditsData {
	perUnitCostBasis: String!
	id: String!
	expiryDate: String!
	balance: Float!
}
type OrbGetCustomersCustomerIdCreditsLedger {
	paginationMetadata: OrbGetCustomersCustomerIdCreditsLedgerPaginationMetadata!
	nodes: [OrbCreditLedgerEntry!]!
}
enum OrbGetCustomersCustomerIdCreditsLedgerEntryStatus {
	PENDING
	COMMITTED
}
enum OrbGetCustomersCustomerIdCreditsLedgerEntryType {
	CREDIT_BLOCK_EXPIRY
	EXPIRATION_CHANGE
	DECREMENT
	INCREMENT
}
type OrbGetCustomersCustomerIdCreditsLedgerPaginationMetadata {
	nextCursor: String!
	hasMore: Boolean!
}
type OrbGetCustomersCustomerIdCreditsPaginationMetadata {
	nextCursor: String
	hasMore: Boolean!
}
type OrbGetCustomersExternalCustomerIdCredits {
	paginationMetadata: OrbGetCustomersExternalCustomerIdCreditsPaginationMetadata!
	data: [OrbGetCustomersExternalCustomerIdCreditsData!]!
}
type OrbGetCustomersExternalCustomerIdCreditsData {
	perUnitCostBasis: String!
	id: String!
	expiryDate: String!
	balance: Float!
}
type OrbGetCustomersExternalCustomerIdCreditsLedger {
	paginationMetadata: OrbGetCustomersExternalCustomerIdCreditsLedgerPaginationMetadata!
	nodes: [OrbCreditLedgerEntry!]!
}
enum OrbGetCustomersExternalCustomerIdCreditsLedgerEntryStatus {
	PENDING
	COMMITTED
}
enum OrbGetCustomersExternalCustomerIdCreditsLedgerEntryType {
	CREDIT_BLOCK_EXPIRY
	EXPIRATION_CHANGE
	DECREMENT
	INCREMENT
}
type OrbGetCustomersExternalCustomerIdCreditsLedgerPaginationMetadata {
	nextCursor: String!
	hasMore: Boolean!
}
type OrbGetCustomersExternalCustomerIdCreditsPaginationMetadata {
	nextCursor: String
	hasMore: Boolean!
}
type OrbGetCustomersPaginationMetadata {
	nextCursor: String!
	hasMore: Boolean!
}
type OrbGetEventsBackfills {
	paginationMetadata: JSON
	nodes: [OrbBackfill!]
}
type OrbGetInvoices {
	paginationMetadata: JSON
	nodes: [OrbInvoice!]
}
type OrbGetPing {
	response: String!
}
type OrbGetPlans {
	paginationMetadata: JSON
	nodes: [OrbPlan!]
}
type OrbGetSubscriptions {
	paginationMetadata: JSON
	nodes: [OrbSubscription!]
}
type OrbGetSubscriptionsSubscriptionIdSchedule {
	paginationMetadata: JSON
	data: [OrbGetSubscriptionsSubscriptionIdScheduleData!]
}
type OrbGetSubscriptionsSubscriptionIdScheduleData {
	startDate: String
	plan: OrbGetSubscriptionsSubscriptionIdSchedulePlanData
	endDate: String
}
type OrbGetSubscriptionsSubscriptionIdSchedulePlanData {
	name: String
	id: String
}
type OrbGetSubscriptionsSubscriptionIdUsage {
	paginationMetadata: JSON!
	data: [OrbGetSubscriptionsSubscriptionIdUsageData!]!
}
type OrbGetSubscriptionsSubscriptionIdUsageData {
	total: String!
	timeframeStart: String!
	timeframeEnd: String!
	subtotal: String!
	perPriceCosts: [OrbGetSubscriptionsSubscriptionIdUsagePerPriceCostsData!]!
}
type OrbGetSubscriptionsSubscriptionIdUsagePerPriceCostsData {
	total: String
	subtotal: String
	priceGroups: [OrbGetSubscriptionsSubscriptionIdUsagePriceGroupsPerPriceCostsData!]!
	price: OrbPrice
}
type OrbGetSubscriptionsSubscriptionIdUsagePriceGroupsPerPriceCostsData {
	total: String!
	secondaryGroupingValue: String
	secondaryGroupingKey: String
	groupingValue: String!
	groupingKey: String!
}
type OrbInvoice {
	willAutoIssue: Boolean!
	voidedAt: String
	total: String!
	syncFailedAt: String
	subtotal: String!
	subscription: OrbInvoiceSubscription!
	status: OrbInvoiceStatus!
	scheduledIssueAt: String
	paymentStartedAt: String
	paymentFailedAt: String
	paidAt: String
	minimum: OrbMinimumAmount!
	memo: String
	maximum: OrbMaximumAmount
	lineItems: [OrbInvoiceLineItem!]!
	issuedAt: String
	issueFailedAt: String
	invoicePdf: String!
	invoiceDate: String!
	id: String!
	hostedInvoiceUrl: String
	eligibleForIssueAt: String
	dueDate: String!
	discount: OrbDiscount!
	customerTaxId: OrbCustomerTaxId
	customerBalanceTransactions: [OrbCustomerBalanceTransaction!]!
	customer: OrbInvoiceCustomer!
	currency: String!
	creditNotes: [OrbInvoiceCreditNotes!]
	createdAt: String!
	autoCollection: OrbInvoiceAutoCollection
	amountDue: String!
}
type OrbInvoiceAutoCollection {
	previouslyAttemptedAt: String
	nextAttemptAt: String
	enabled: Boolean
}
type OrbInvoiceCreditNotes {
	voidedAt: String
	type: String
	total: String
	reason: String
	id: String
	creditNoteNumber: String
}
type OrbInvoiceCustomer {
	id: String!
	externalCustomerId: String!
}
type OrbInvoiceLineItem {
	taxAmounts: [OrbInvoiceLineItemTaxAmounts!]!
	subtotal: String!
	subLineItems: [OrbInvoiceLineItemSubLineItems!]!
	startDate: String!
	quantity: Float!
	price: OrbPrice!
	name: String!
	minimum: OrbMinimumAmount!
	maximumAmount: OrbMaximumAmount
	id: String!
	grouping: String!
	endDate: String!
	discount: OrbDiscount!
	amount: String!
}
type OrbInvoiceLineItemGroupingSubLineItems {
	value: String
	key: String
}
type OrbInvoiceLineItemMatrixConfigSubLineItems {
	dimensionValues: [String]!
}
type OrbInvoiceLineItemSubLineItems {
	type: OrbInvoiceLineItemTypeSubLineItems!
	tierConfig: OrbInvoiceLineItemTierConfigSubLineItems
	quantity: Float!
	name: String!
	matrixConfig: OrbInvoiceLineItemMatrixConfigSubLineItems
	grouping: OrbInvoiceLineItemGroupingSubLineItems!
	amount: String!
}
type OrbInvoiceLineItemTaxAmounts {
	taxRatePercentage: String!
	taxRateDescription: String!
	amount: String!
}
type OrbInvoiceLineItemTierConfigSubLineItems {
	unitAmount: String!
	lastUnit: Float!
	firstUnit: Float!
}
enum OrbInvoiceLineItemTypeSubLineItems {
	TIER
	MATRIX
}
enum OrbInvoiceStatus {
	DRAFT
	VOID
	SYNCED
	PAID
	ISSUED
}
type OrbInvoiceSubscription {
	id: String!
}
type OrbMaximumAmount {
	maximumAmount: String!
	appliesToPriceIds: [String!]!
}
type OrbMinimumAmount {
	minimumAmount: String!
	appliesToPriceIds: [String!]!
}
type OrbMutation {
	postIngest(backfillId: String, debug: OrbPostIngestDebug = FALSE, input: OrbPostIngestInput): OrbPostIngest
	postCustomers(input: OrbPostCustomersInput): OrbCustomer
	putCustomersCustomerId(customerId: String!, input: OrbPutCustomersCustomerIdInput): OrbCustomer
	postCustomersCustomerIdCreditsLedgerEntry(customerId: String!, input: OrbPostCustomersCustomerIdCreditsLedgerEntryInput): OrbCreditLedgerEntry
	postCustomersExternalCustomerIdCreditsLedgerEntry(externalCustomerId: String!, input: OrbPostCustomersExternalCustomerIdCreditsLedgerEntryInput): OrbCreditLedgerEntry
	postSubscriptions(input: OrbPostSubscriptionsInput): OrbSubscription
	postSubscriptionsSubscriptionIdCancel(subscriptionId: String!, input: OrbPostSubscriptionsSubscriptionIdCancelInput): OrbSubscription
	postSubscriptionsSubscriptionIdSchedulePlanChange(subscriptionId: String!, input: OrbPostSubscriptionsSubscriptionIdSchedulePlanChangeInput): OrbSubscription
	postSubscriptionsSubscriptionIdUnschedulePendingPlanChanges(subscriptionId: String!): OrbSubscription
	postSubscriptionsSubscriptionIdUnschedulePendingCancellation(subscriptionId: String!): OrbSubscription
	postSubscriptionsSubscriptionIdUpdateFixedFeeQuantity(subscriptionId: String!, input: OrbPostSubscriptionsSubscriptionIdUpdateFixedFeeQuantityInput): OrbSubscription
	patchCustomersCustomerIdUsage(externalCustomerId: String!, timeframeEnd: String!, timeframeStart: String!, input: OrbPatchCustomersCustomerIdUsageInput): OrbPatchCustomersCustomerIdUsage
	postEventsSearch(input: OrbPostEventsSearchInput): OrbPostEventsSearch
	putCustomersExternalCustomerIdExternalCustomerId(externalCustomerId: String!, input: OrbPutCustomersExternalCustomerIdExternalCustomerIdInput): OrbCustomer
	putEventsEventId(eventId: String!): OrbPutEventsEventId
	postCustomersCustomerIdBalanceTransactions(customerId: String!, input: OrbPostCustomersCustomerIdBalanceTransactionsInput): OrbCustomerBalanceTransaction
	postInvoicesInvoiceIdVoid(invoiceId: String!): OrbInvoice
	postInvoicesInvoiceIdIssue(invoiceId: String!): OrbInvoice
	postCouponsCouponIdArchive(couponId: String!): OrbCoupon
	postInvoiceLineItems(input: OrbPostInvoiceLineItemsInput): OrbInvoiceLineItem
	postEventsBackfills(input: OrbPostEventsBackfillsInput): OrbBackfill
	postEventsBackfillsBackfillIdClose(backfillId: String!): OrbBackfill
	postEventsBackfillsBackfillIdRevert(backfillId: String!): OrbBackfill
}
type OrbPatchCustomersCustomerIdUsage {
	validationErrors: [OrbPatchCustomersCustomerIdUsageValidationErrors!]!
	type: String!
	title: String!
	status: Int!
}
input OrbPatchCustomersCustomerIdUsageEventsInput {
	timestamp: String!
	properties: JSON!
	eventName: String!
}
input OrbPatchCustomersCustomerIdUsageInput {
	events: [OrbPatchCustomersCustomerIdUsageEventsInput!]!
}
type OrbPatchCustomersCustomerIdUsageValidationErrors {
	validationErrors: [String!]
	idempotencyKey: String
}
type OrbPlan {
	trialConfig: OrbPlanTrialConfig
	product: OrbPlanProduct!
	prices: [OrbPrice!]!
	planPhases: [OrbPlanPhase!]
	netTerms: Int
	name: String!
	minimum: OrbMinimumAmount!
	maximum: OrbMaximumAmount
	invoicingCurrency: String!
	id: String!
	externalPlanId: String
	discount: OrbDiscount!
	description: String!
	defaultInvoiceMemo: String
	currency: String!
	createdAt: String!
	basePlanId: String
	basePlan: OrbPlanBasePlan
}
type OrbPlanBasePlan {
	name: String
	id: String
	externalPlanId: String
}
type OrbPlanPhase {
	order: Int
	name: String
	minimum: OrbMinimumAmount!
	durationUnit: OrbPlanPhaseDurationUnit!
	duration: Int
	discount: OrbDiscount!
	description: String
}
enum OrbPlanPhaseDurationUnit {
	ANNUAL
	QUARTERLY
	MONTHLY
}
type OrbPlanProduct {
	name: String!
	id: String!
	createdAt: String!
}
type OrbPlanTrialConfig {
	trialPeriodUnit: OrbPlanTrialPeriodUnitTrialConfig!
	trialPeriod: Float
}
enum OrbPlanTrialPeriodUnitTrialConfig {
	DAYS
}
input OrbPostCustomersBillingAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input OrbPostCustomersCustomerIdBalanceTransactionsInput {
	type: OrbPostCustomersCustomerIdBalanceTransactionsType!
	description: String
	amount: String!
}
enum OrbPostCustomersCustomerIdBalanceTransactionsType {
	DECREMENT
	INCREMENT
}
enum OrbPostCustomersCustomerIdCreditsLedgerEntryEntryType {
	EXPIRATION_CHANGE
	DECREMENT
	INCREMENT
}
input OrbPostCustomersCustomerIdCreditsLedgerEntryInput {
	targetExpiryDate: String
	perUnitCostBasis: String
	metadata: JSON
	invoiceSettings: OrbPostCustomersCustomerIdCreditsLedgerEntryInvoiceSettingsInput
	expiryDate: String
	entryType: OrbPostCustomersCustomerIdCreditsLedgerEntryEntryType!
	description: String
	blockId: String
	amount: Float
}
input OrbPostCustomersCustomerIdCreditsLedgerEntryInvoiceSettingsInput {
	netTerms: Float!
	memo: String
	autoCollection: Boolean!
}
enum OrbPostCustomersExternalCustomerIdCreditsLedgerEntryEntryType {
	EXPIRATION_CHANGE
	DECREMENT
	INCREMENT
}
input OrbPostCustomersExternalCustomerIdCreditsLedgerEntryInput {
	targetExpiryDate: String
	perUnitCostBasis: String
	metadata: JSON
	invoiceSettings: OrbPostCustomersExternalCustomerIdCreditsLedgerEntryInvoiceSettingsInput
	expiryDate: String
	entryType: OrbPostCustomersExternalCustomerIdCreditsLedgerEntryEntryType!
	description: String
	blockId: String
	amount: Float
}
input OrbPostCustomersExternalCustomerIdCreditsLedgerEntryInvoiceSettingsInput {
	netTerms: Float!
	memo: String
	autoCollection: Boolean!
}
input OrbPostCustomersInput {
	timezone: String = "UTC"
	taxId: OrbCustomerTaxIdInput
	shippingAddress: OrbPostCustomersShippingAddressInput
	paymentProviderId: String
	paymentProvider: OrbPostCustomersPaymentProvider = null
	name: String!
	metadata: JSON
	externalCustomerId: String
	email: String!
	currency: String
	billingAddress: OrbPostCustomersBillingAddressInput
	autoCollection: Boolean
}
enum OrbPostCustomersPaymentProvider {
	STRIPE_INVOICE
	STRIPE_CHARGE
	BILL_COM
	QUICKBOOKS
}
input OrbPostCustomersShippingAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input OrbPostEventsBackfillsInput {
	timeframeStart: String!
	timeframeEnd: String!
	replaceExistingEvents: Boolean!
	externalCustomerId: String
	customerId: String
	closeTime: String
}
type OrbPostEventsSearch {
	paginationMetadata: JSON
	nodes: [OrbEvent!]
}
input OrbPostEventsSearchInput {
	invoiceId: String
	eventIds: [String!]
}
type OrbPostIngest {
	validationFailed: [OrbPostIngestValidationFailed!]!
	debug: OrbPostIngestDebug
}
enum OrbPostIngestDebug {
	FALSE
	TRUE
}
input OrbPostIngestEventsInput {
	timestamp: String!
	properties: JSON!
	idempotencyKey: String!
	externalCustomerId: String
	eventName: String!
	customerId: String
}
input OrbPostIngestInput {
	events: [OrbPostIngestEventsInput!]!
}
type OrbPostIngestValidationFailed {
	validationErrors: [String!]
	idempotencyKey: String
}
input OrbPostInvoiceLineItemsInput {
	startDate: String!
	quantity: Float!
	name: String!
	invoiceId: String!
	endDate: String!
	amount: String!
}
enum OrbPostSubscriptionsExternalMarketplace {
	AZURE
	AWS
	GOOGLE
}
input OrbPostSubscriptionsInput {
	startDate: String
	priceOverrides: [JSON!]
	planId: String
	phaseOverrides: [OrbPostSubscriptionsPhaseOverridesInput!]
	netTerms: Int
	minimumAmount: String
	metadata: JSON
	maximumAmount: String
	externalPlanId: String
	externalMarketplaceReportingId: String
	externalMarketplace: OrbPostSubscriptionsExternalMarketplace
	externalCustomerId: String
	defaultInvoiceMemo: String
	customerId: String
	couponRedemptionCode: String
	autoCollection: Boolean
	alignBillingWithSubscriptionStartDate: Boolean
}
input OrbPostSubscriptionsPhaseOverridesInput {
	order: Float
	minimumAmount: String
	maximumAmount: String
	discount: OrbDiscountInput
}
enum OrbPostSubscriptionsSubscriptionIdCancelCancelOption {
	REQUESTED_DATE
	END_OF_SUBSCRIPTION_TERM
	IMMEDIATE
}
input OrbPostSubscriptionsSubscriptionIdCancelInput {
	cancellationDate: String
	cancelOption: OrbPostSubscriptionsSubscriptionIdCancelCancelOption!
}
enum OrbPostSubscriptionsSubscriptionIdSchedulePlanChangeChangeOption {
	IMMEDIATE
	END_OF_SUBSCRIPTION_TERM
	REQUESTED_DATE
}
input OrbPostSubscriptionsSubscriptionIdSchedulePlanChangeInput {
	priceOverrides: [JSON!]
	planId: String
	minimumAmount: String
	maximumAmount: String
	externalPlanId: String
	couponRedemptionCode: String
	changeOption: OrbPostSubscriptionsSubscriptionIdSchedulePlanChangeChangeOption!
	changeDate: String
	alignBillingWithPlanChangeDate: Boolean
}
enum OrbPostSubscriptionsSubscriptionIdUpdateFixedFeeQuantityChangeOption {
	EFFECTIVE_DATE
	UPCOMING_INVOICE
	IMMEDIATE
}
input OrbPostSubscriptionsSubscriptionIdUpdateFixedFeeQuantityInput {
	quantity: Float!
	priceId: String!
	effectiveDate: String
	changeOption: OrbPostSubscriptionsSubscriptionIdUpdateFixedFeeQuantityChangeOption
}
type OrbPrice {
	unitConfig: OrbPriceUnitConfig
	tieredConfig: OrbPriceTieredConfig
	tieredBpsConfig: OrbPriceTieredBpsConfig
	planPhaseOrder: Float!
	packageConfig: OrbPricePackageConfig
	name: String
	modelType: OrbPriceModelType
	minimum: OrbMinimumAmount!
	maximum: OrbMaximumAmount
	matrixConfig: OrbPriceMatrixConfig
	id: String
	fixedPriceQuantity: Float
	discount: OrbDiscount!
	currency: String!
	createdAt: String
	cadence: OrbPriceCadence
	bulkConfig: OrbPriceBulkConfig
	bulkBpsConfig: OrbPriceBulkBpsConfig
	bpsConfig: OrbPriceBpsConfig
	billableMetric: OrbPriceBillableMetric
}
type OrbPriceBillableMetric {
	id: String
}
type OrbPriceBpsConfig {
	perUnitMaximum: String
	bps: Float
}
type OrbPriceBulkBpsConfig {
	tiers: [OrbPriceTiersBulkBpsConfig!]
}
type OrbPriceBulkConfig {
	tiers: [OrbPriceTiersBulkConfig!]
}
enum OrbPriceCadence {
	QUARTERLY
	MONTHLY
	ANNUAL
}
type OrbPriceMatrixConfig {
	matrixValues: [OrbPriceMatrixValuesMatrixConfig!]
	dimensions: [String!]
	defaultUnitAmount: String
}
type OrbPriceMatrixValuesMatrixConfig {
	unitAmount: String
	dimensionValues: [String!]
}
enum OrbPriceModelType {
	MATRIX
	BULK_BPS
	TIERED_BPS
	BPS
	PACKAGE
	BULK
	TIERED
	UNIT
}
type OrbPricePackageConfig {
	packageSize: Float
	packageAmount: String
}
type OrbPriceTieredBpsConfig {
	tiers: [OrbPriceTiersTieredBpsConfig!]
}
type OrbPriceTieredConfig {
	tiers: [OrbPriceTiersTieredConfig!]
}
type OrbPriceTiersBulkBpsConfig {
	perUnitMaximum: String
	maximumAmount: String
	bps: Float
}
type OrbPriceTiersBulkConfig {
	unitAmount: String
	maximumUnits: String
}
type OrbPriceTiersTieredBpsConfig {
	perUnitMaximum: String
	minimumAmount: String
	maximumAmount: String
	bps: Float
}
type OrbPriceTiersTieredConfig {
	unitAmount: String
	lastUnit: String
	firstUnit: String
}
type OrbPriceUnitConfig {
	unitAmount: String
}
input OrbPutCustomersCustomerIdBillingAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input OrbPutCustomersCustomerIdInput {
	taxId: OrbCustomerTaxIdInput
	shippingAddress: OrbPutCustomersCustomerIdShippingAddressInput
	paymentProviderId: String
	paymentProvider: OrbPutCustomersCustomerIdPaymentProvider
	name: String
	metadata: JSON
	emailDelivery: Boolean
	email: String
	billingAddress: OrbPutCustomersCustomerIdBillingAddressInput
	autoCollection: Boolean
}
enum OrbPutCustomersCustomerIdPaymentProvider {
	STRIPE_CHARGE
	BILL_COM
	QUICKBOOKS
	STRIPE_INVOICE
}
input OrbPutCustomersCustomerIdShippingAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input OrbPutCustomersExternalCustomerIdExternalCustomerIdBillingAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input OrbPutCustomersExternalCustomerIdExternalCustomerIdInput {
	shippingAddress: OrbPutCustomersExternalCustomerIdExternalCustomerIdShippingAddressInput
	paymentProviderId: String
	paymentProvider: OrbPutCustomersExternalCustomerIdExternalCustomerIdPaymentProvider
	name: String
	email: String
	billingAddress: OrbPutCustomersExternalCustomerIdExternalCustomerIdBillingAddressInput
}
enum OrbPutCustomersExternalCustomerIdExternalCustomerIdPaymentProvider {
	BILL_COM
	STRIPE_INVOICE
	STRIPE_CHARGE
	QUICKBOOKS
}
input OrbPutCustomersExternalCustomerIdExternalCustomerIdShippingAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
type OrbPutEventsEventId {
	validationErrors: [String!]
	type: String
	title: String
	status: Int
}
type OrbQuery {
	customers: OrbGetCustomers
	customersCustomerId(customerId: String!): OrbCustomer
	ping: OrbGetPing
	customersCustomerIdCredits(customerId: String!): OrbGetCustomersCustomerIdCredits
	customersExternalCustomerIdCredits(externalCustomerId: String!): OrbGetCustomersExternalCustomerIdCredits
	customerCosts(externalCustomerId: String!, groupBy: String, viewMode: OrbGetCustomerCostsViewMode = CUMULATIVE, timeframeEnd: String, timeframeStart: String): OrbGetCustomerCosts
	customersCustomerIdCreditsLedger(customerId: String!, entryStatus: OrbGetCustomersCustomerIdCreditsLedgerEntryStatus, minimumAmount: Float, entryType: OrbGetCustomersCustomerIdCreditsLedgerEntryType): OrbGetCustomersCustomerIdCreditsLedger
	customersExternalCustomerIdCreditsLedger(externalCustomerId: String!, entryStatus: OrbGetCustomersExternalCustomerIdCreditsLedgerEntryStatus, minimumAmount: Float, entryType: OrbGetCustomersExternalCustomerIdCreditsLedgerEntryType): OrbGetCustomersExternalCustomerIdCreditsLedger
	invoices(status: JSON, externalCustomerId: String, customerId: String, subscriptionId: String): OrbGetInvoices
	invoice(invoiceId: String!): OrbInvoice
	upcomingInvoice(subscriptionId: String!): OrbUpcomingInvoice
	subscriptions(couponId: String!): OrbGetSubscriptions
	subscriptionsSubscriptionIdUsage(subscriptionId: String!, groupBy: String, viewMode: String, timeframeEnd: String, timeframeStart: String): OrbGetSubscriptionsSubscriptionIdUsage
	subscriptionsSubscriptionIdSchedule(subscriptionId: String!): OrbGetSubscriptionsSubscriptionIdSchedule
	plan(planId: String!): OrbPlan
	plans: OrbGetPlans
	customersExternalCustomerIdExternalCustomerId(externalCustomerId: String!): OrbCustomer
	customerBalanceTransactions(customerId: String!): OrbGetCustomersCustomerIdBalanceTransactions
	subscription(subscriptionId: String!): OrbSubscription
	coupons(redemptionCode: String, showArchived: Boolean = "false"): OrbGetCoupons
	coupon(couponId: String!): OrbCoupon
	backfills: OrbGetEventsBackfills
	creditNotes(externalCustomerId: String, customerId: String, subscriptionId: String): OrbGetCreditNote
}
type OrbSubscription {
	status: OrbSubscriptionStatus!
	startDate: String!
	redeemedCoupon: OrbSubscriptionRedeemedCoupon
	plan: OrbPlan!
	netTerms: Int
	metadata: JSON!
	id: String!
	fixedFeeQuantitySchedule: [OrbSubscriptionFixedFeeQuantitySchedule!]!
	endDate: String!
	defaultInvoiceMemo: String
	customer: OrbCustomer!
	currentBillingPeriodStartDate: String
	currentBillingPeriodEndDate: String
	createdAt: String!
	billingCycleDay: Float!
	autoCollection: Boolean
	activePlanPhaseOrder: Float
}
type OrbSubscriptionFixedFeeQuantitySchedule {
	startDate: String
	quantity: Float
	priceId: String
	endDate: String
}
type OrbSubscriptionRedeemedCoupon {
	startDate: String
	endDate: String
	couponId: String
}
enum OrbSubscriptionStatus {
	UPCOMING
	ENDED
	ACTIVE
}
type OrbUpcomingInvoice {
	willAutoIssue: Boolean!
	targetDate: String!
	subtotal: String!
	subscription: OrbUpcomingInvoiceSubscription!
	minimum: OrbMinimumAmount!
	lineItems: [OrbUpcomingInvoiceLineItems!]!
	hostedInvoiceUrl: String!
	eligibleForIssueAt: String
	discount: OrbDiscount!
	customer: OrbUpcomingInvoiceCustomer!
	currency: String!
	amountDue: String!
}
type OrbUpcomingInvoiceCustomer {
	id: String!
	externalCustomerId: String!
}
type OrbUpcomingInvoiceGroupingLineItems {
	value: String!
	key: String!
}
type OrbUpcomingInvoiceLineItems {
	subtotal: String!
	subLineItems: [OrbUpcomingInvoiceSubLineItemsLineItems!]!
	startDate: String!
	quantity: Float!
	name: String!
	minimum: OrbMinimumAmount!
	grouping: OrbUpcomingInvoiceGroupingLineItems!
	endDate: String!
	discount: OrbDiscount!
	amount: String!
}
type OrbUpcomingInvoiceMatrixConfigSubLineItemsLineItems {
	dimensionValues: [String]!
}
type OrbUpcomingInvoiceSubLineItemsLineItems {
	type: OrbUpcomingInvoiceTypeSubLineItemsLineItems!
	tierConfig: OrbUpcomingInvoiceTierConfigSubLineItemsLineItems
	quantity: Float!
	name: String!
	matrixConfig: OrbUpcomingInvoiceMatrixConfigSubLineItemsLineItems
	amount: String!
}
type OrbUpcomingInvoiceSubscription {
	id: String!
}
type OrbUpcomingInvoiceTierConfigSubLineItemsLineItems {
	unitAmount: String!
	lastUnit: Float!
	firstUnit: Float!
}
enum OrbUpcomingInvoiceTypeSubLineItemsLineItems {
	TIER
	MATRIX
}
type Query {
	orb: OrbQuery!
}
schema {
	query: Query
	mutation: Mutation
}
