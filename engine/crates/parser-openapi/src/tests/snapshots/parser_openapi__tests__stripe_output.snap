---
source: engine/crates/parser-openapi/src/tests/mod.rs
expression: "build_registry(\"test_data/stripe.openapi.json\", Format::Json,\n            metadata).unwrap().export_sdl(false)"
---
type Mutation {
	stripe: StripeMutation!
}
type Query {
	stripe: StripeQuery!
}
type StripeAccount {
	type: StripeAccountType
	tosAcceptance: StripeAccountTosAcceptance
	settings: StripeAccountSettings
	requirements: StripeAccountRequirements
	payoutsEnabled: Boolean
	object: StripeAccountObject!
	metadata: JSON
	individual: StripePerson
	id: String!
	futureRequirements: StripeAccountFutureRequirements
	externalAccounts: StripeAccountExternalAccounts
	email: String
	detailsSubmitted: Boolean
	defaultCurrency: String
	created: Int
	country: String
	controller: StripeAccountUnificationAccountController
	company: StripeLegalEntityCompany
	chargesEnabled: Boolean
	capabilities: StripeAccountCapabilities
	businessType: StripeAccountBusinessType
	businessProfile: StripeAccountBusinessProfile
}
type StripeAccountBacsDebitPaymentsSettings {
	displayName: String
}
type StripeAccountBrandingSettings {
	secondaryColor: String
	primaryColor: String
	logo: StripeStringOrFileUnion
	icon: StripeStringOrFileUnion
}
type StripeAccountBusinessProfile {
	url: String
	supportUrl: String
	supportPhone: String
	supportEmail: String
	supportAddress: StripeAddress
	productDescription: String
	name: String
	mcc: String
}
enum StripeAccountBusinessType {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
type StripeAccountCapabilities {
	usBankAccountAchPayments: StripeAccountCapabilitiesUsBankAccountAchPayments
	treasury: StripeAccountCapabilitiesTreasury
	transfers: StripeAccountCapabilitiesTransfers
	taxReportingUs1099Misc: StripeAccountCapabilitiesTaxReportingUs1099Misc
	taxReportingUs1099K: StripeAccountCapabilitiesTaxReportingUs1099K
	sofortPayments: StripeAccountCapabilitiesSofortPayments
	sepaDebitPayments: StripeAccountCapabilitiesSepaDebitPayments
	promptpayPayments: StripeAccountCapabilitiesPromptpayPayments
	paynowPayments: StripeAccountCapabilitiesPaynowPayments
	p24Payments: StripeAccountCapabilitiesP24Payments
	oxxoPayments: StripeAccountCapabilitiesOxxoPayments
	linkPayments: StripeAccountCapabilitiesLinkPayments
	legacyPayments: StripeAccountCapabilitiesLegacyPayments
	konbiniPayments: StripeAccountCapabilitiesKonbiniPayments
	klarnaPayments: StripeAccountCapabilitiesKlarnaPayments
	jcbPayments: StripeAccountCapabilitiesJcbPayments
	indiaInternationalPayments: StripeAccountCapabilitiesIndiaInternationalPayments
	idealPayments: StripeAccountCapabilitiesIdealPayments
	grabpayPayments: StripeAccountCapabilitiesGrabpayPayments
	giropayPayments: StripeAccountCapabilitiesGiropayPayments
	fpxPayments: StripeAccountCapabilitiesFpxPayments
	epsPayments: StripeAccountCapabilitiesEpsPayments
	cartesBancairesPayments: StripeAccountCapabilitiesCartesBancairesPayments
	cardPayments: StripeAccountCapabilitiesCardPayments
	cardIssuing: StripeAccountCapabilitiesCardIssuing
	boletoPayments: StripeAccountCapabilitiesBoletoPayments
	blikPayments: StripeAccountCapabilitiesBlikPayments
	bankTransferPayments: StripeAccountCapabilitiesBankTransferPayments
	bancontactPayments: StripeAccountCapabilitiesBancontactPayments
	bacsDebitPayments: StripeAccountCapabilitiesBacsDebitPayments
	auBecsDebitPayments: StripeAccountCapabilitiesAuBecsDebitPayments
	afterpayClearpayPayments: StripeAccountCapabilitiesAfterpayClearpayPayments
	affirmPayments: StripeAccountCapabilitiesAffirmPayments
	acssDebitPayments: StripeAccountCapabilitiesAcssDebitPayments
}
enum StripeAccountCapabilitiesAcssDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesAffirmPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesAfterpayClearpayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesAuBecsDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesBacsDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesBancontactPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesBankTransferPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesBlikPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesBoletoPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesCardIssuing {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesCardPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesCartesBancairesPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesEpsPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesFpxPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesGiropayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesGrabpayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesIdealPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesIndiaInternationalPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesJcbPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesKlarnaPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesKonbiniPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesLegacyPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesLinkPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesOxxoPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesP24Payments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesPaynowPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesPromptpayPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesSepaDebitPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesSofortPayments {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesTaxReportingUs1099K {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesTaxReportingUs1099Misc {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesTransfers {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesTreasury {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeAccountCapabilitiesUsBankAccountAchPayments {
	ACTIVE
	INACTIVE
	PENDING
}
type StripeAccountCapabilityFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [StripeAccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [StripeAccountRequirementsAlternative!]
}
type StripeAccountCapabilityRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [StripeAccountRequirementsError!]!
	disabledReason: String
	currentlyDue: [String!]!
	currentDeadline: Int
	alternatives: [StripeAccountRequirementsAlternative!]
}
type StripeAccountCardIssuingSettings {
	tosAcceptance: StripeCardIssuingAccountTermsOfService
}
type StripeAccountCardPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorPrefix: String
	declineOn: StripeAccountDeclineChargeOn
}
type StripeAccountDashboardSettings {
	timezone: String
	displayName: String
}
type StripeAccountDeclineChargeOn {
	cvcFailure: Boolean!
	avsFailure: Boolean!
}
type StripeAccountExternalAccounts {
	url: String!
	object: StripeAccountObjectExternalAccounts!
	hasMore: Boolean!
	data: [StripeCardOrBankAccountUnion!]!
}
type StripeAccountFutureRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [StripeAccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [StripeAccountRequirementsAlternative!]
}
type StripeAccountLink {
	url: String!
	object: StripeAccountLinkObject!
	expiresAt: Int!
	created: Int!
}
enum StripeAccountLinkObject {
	ACCOUNT_LINK
}
enum StripeAccountObject {
	ACCOUNT
}
enum StripeAccountObjectExternalAccounts {
	LIST
}
type StripeAccountPaymentsSettings {
	statementDescriptorPrefixKanji: String
	statementDescriptorPrefixKana: String
	statementDescriptorKanji: String
	statementDescriptorKana: String
	statementDescriptor: String
}
type StripeAccountPayoutSettings {
	statementDescriptor: String
	schedule: StripeTransferSchedule!
	debitNegativeBalances: Boolean!
}
type StripeAccountRequirements {
	pendingVerification: [String!]
	pastDue: [String!]
	eventuallyDue: [String!]
	errors: [StripeAccountRequirementsError!]
	disabledReason: String
	currentlyDue: [String!]
	currentDeadline: Int
	alternatives: [StripeAccountRequirementsAlternative!]
}
type StripeAccountRequirementsAlternative {
	originalFieldsDue: [String!]!
	alternativeFieldsDue: [String!]!
}
type StripeAccountRequirementsError {
	requirement: String!
	reason: String!
	code: StripeAccountRequirementsErrorCode!
}
enum StripeAccountRequirementsErrorCode {
	INVALID_ADDRESS_CITY_STATE_POSTAL_CODE
	INVALID_DOB_AGE_UNDER_18
	INVALID_REPRESENTATIVE_COUNTRY
	INVALID_STREET_ADDRESS
	INVALID_TOS_ACCEPTANCE
	INVALID_VALUE_OTHER
	VERIFICATION_DOCUMENT_ADDRESS_MISMATCH
	VERIFICATION_DOCUMENT_ADDRESS_MISSING
	VERIFICATION_DOCUMENT_CORRUPT
	VERIFICATION_DOCUMENT_COUNTRY_NOT_SUPPORTED
	VERIFICATION_DOCUMENT_DOB_MISMATCH
	VERIFICATION_DOCUMENT_DUPLICATE_TYPE
	VERIFICATION_DOCUMENT_EXPIRED
	VERIFICATION_DOCUMENT_FAILED_COPY
	VERIFICATION_DOCUMENT_FAILED_GREYSCALE
	VERIFICATION_DOCUMENT_FAILED_OTHER
	VERIFICATION_DOCUMENT_FAILED_TEST_MODE
	VERIFICATION_DOCUMENT_FRAUDULENT
	VERIFICATION_DOCUMENT_ID_NUMBER_MISMATCH
	VERIFICATION_DOCUMENT_ID_NUMBER_MISSING
	VERIFICATION_DOCUMENT_INCOMPLETE
	VERIFICATION_DOCUMENT_INVALID
	VERIFICATION_DOCUMENT_ISSUE_OR_EXPIRY_DATE_MISSING
	VERIFICATION_DOCUMENT_MANIPULATED
	VERIFICATION_DOCUMENT_MISSING_BACK
	VERIFICATION_DOCUMENT_MISSING_FRONT
	VERIFICATION_DOCUMENT_NAME_MISMATCH
	VERIFICATION_DOCUMENT_NAME_MISSING
	VERIFICATION_DOCUMENT_NATIONALITY_MISMATCH
	VERIFICATION_DOCUMENT_NOT_READABLE
	VERIFICATION_DOCUMENT_NOT_SIGNED
	VERIFICATION_DOCUMENT_NOT_UPLOADED
	VERIFICATION_DOCUMENT_PHOTO_MISMATCH
	VERIFICATION_DOCUMENT_TOO_LARGE
	VERIFICATION_DOCUMENT_TYPE_NOT_SUPPORTED
	VERIFICATION_FAILED_ADDRESS_MATCH
	VERIFICATION_FAILED_BUSINESS_IEC_NUMBER
	VERIFICATION_FAILED_DOCUMENT_MATCH
	VERIFICATION_FAILED_ID_NUMBER_MATCH
	VERIFICATION_FAILED_KEYED_IDENTITY
	VERIFICATION_FAILED_KEYED_MATCH
	VERIFICATION_FAILED_NAME_MATCH
	VERIFICATION_FAILED_OTHER
	VERIFICATION_FAILED_RESIDENTIAL_ADDRESS
	VERIFICATION_FAILED_TAX_ID_MATCH
	VERIFICATION_FAILED_TAX_ID_NOT_ISSUED
	VERIFICATION_MISSING_EXECUTIVES
	VERIFICATION_MISSING_OWNERS
	VERIFICATION_REQUIRES_ADDITIONAL_MEMORANDUM_OF_ASSOCIATIONS
}
type StripeAccountSepaDebitPaymentsSettings {
	creditorId: String
}
type StripeAccountSettings {
	treasury: StripeAccountTreasurySettings
	sepaDebitPayments: StripeAccountSepaDebitPaymentsSettings
	payouts: StripeAccountPayoutSettings
	payments: StripeAccountPaymentsSettings!
	dashboard: StripeAccountDashboardSettings!
	cardPayments: StripeAccountCardPaymentsSettings!
	cardIssuing: StripeAccountCardIssuingSettings
	branding: StripeAccountBrandingSettings!
	bacsDebitPayments: StripeAccountBacsDebitPaymentsSettings
}
type StripeAccountTermsOfService {
	userAgent: String
	ip: String
	date: Int
}
type StripeAccountTosAcceptance {
	userAgent: String
	serviceAgreement: String
	ip: String
	date: Int
}
type StripeAccountTreasurySettings {
	tosAcceptance: StripeAccountTermsOfService
}
enum StripeAccountType {
	CUSTOM
	EXPRESS
	STANDARD
}
type StripeAccountUnificationAccountController {
	type: StripeAccountUnificationAccountControllerType!
	isController: Boolean
}
enum StripeAccountUnificationAccountControllerType {
	ACCOUNT
	APPLICATION
}
type StripeAddress {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
type StripeApiErrors {
	type: StripeApiErrorsType!
	source: StripeSourceOrCardOrBankAccountUnion
	setupIntent: StripeSetupIntent
	requestLogUrl: String
	paymentMethodType: String
	paymentMethod: StripePaymentMethod
	paymentIntent: StripePaymentIntent
	param: String
	message: String
	docUrl: String
	declineCode: String
	code: String
	charge: String
}
enum StripeApiErrorsType {
	API_ERROR
	CARD_ERROR
	IDEMPOTENCY_ERROR
	INVALID_REQUEST_ERROR
}
type StripeApplePayDomain {
	object: StripeApplePayDomainObject!
	livemode: Boolean!
	id: String!
	domainName: String!
	created: Int!
}
enum StripeApplePayDomainObject {
	APPLE_PAY_DOMAIN
}
type StripeApplication {
	object: StripeApplicationObject!
	name: String
	id: String!
}
type StripeApplicationFee {
	refunds: StripeApplicationFeeRefunds!
	refunded: Boolean!
	originatingTransaction: StripeStringOrChargeUnion
	object: StripeApplicationFeeObject!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	charge: StripeStringOrChargeUnion!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	application: StripeStringOrApplicationUnion!
	amountRefunded: Int!
	amount: Int!
	account: StripeStringOrAccountUnion!
}
enum StripeApplicationFeeObject {
	APPLICATION_FEE
}
enum StripeApplicationFeeObjectRefunds {
	LIST
}
type StripeApplicationFeeRefunds {
	url: String!
	object: StripeApplicationFeeObjectRefunds!
	hasMore: Boolean!
	nodes: [StripeFeeRefund!]!
}
enum StripeApplicationObject {
	APPLICATION
}
type StripeAppsSecret {
	scope: StripeSecretServiceResourceScope!
	payload: String
	object: StripeAppsSecretObject!
	name: String!
	livemode: Boolean!
	id: String!
	expiresAt: Int
	deleted: Boolean
	created: Int!
}
enum StripeAppsSecretObject {
	APPS_SECRET
}
type StripeAutomaticTax {
	status: StripeAutomaticTaxStatus
	enabled: Boolean!
}
enum StripeAutomaticTaxStatus {
	COMPLETE
	FAILED
	REQUIRES_LOCATION_INPUTS
}
type StripeBalance {
	pending: [StripeBalanceAmount!]!
	object: StripeBalanceObject!
	livemode: Boolean!
	issuing: StripeBalanceDetail
	instantAvailable: [StripeBalanceAmount!]
	connectReserved: [StripeBalanceAmount!]
	available: [StripeBalanceAmount!]!
}
type StripeBalanceAmount {
	sourceTypes: StripeBalanceAmountBySourceType
	currency: String!
	amount: Int!
}
type StripeBalanceAmountBySourceType {
	fpx: Int
	card: Int
	bankAccount: Int
}
type StripeBalanceDetail {
	available: [StripeBalanceAmount!]!
}
enum StripeBalanceObject {
	BALANCE
}
type StripeBalanceTransaction {
	type: StripeBalanceTransactionType!
	status: String!
	source: StripeStringOrTransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion
	reportingCategory: String!
	object: StripeBalanceTransactionObject!
	net: Int!
	id: String!
	feeDetails: [StripeFee!]!
	fee: Int!
	exchangeRate: Float
	description: String
	currency: String!
	created: Int!
	availableOn: Int!
	amount: Int!
}
enum StripeBalanceTransactionObject {
	BALANCE_TRANSACTION
}
enum StripeBalanceTransactionType {
	ADJUSTMENT
	ADVANCE
	ADVANCE_FUNDING
	ANTICIPATION_REPAYMENT
	APPLICATION_FEE
	APPLICATION_FEE_REFUND
	CHARGE
	CONNECT_COLLECTION_TRANSFER
	CONTRIBUTION
	ISSUING_AUTHORIZATION_HOLD
	ISSUING_AUTHORIZATION_RELEASE
	ISSUING_DISPUTE
	ISSUING_TRANSACTION
	PAYMENT
	PAYMENT_FAILURE_REFUND
	PAYMENT_REFUND
	PAYOUT
	PAYOUT_CANCEL
	PAYOUT_FAILURE
	REFUND
	REFUND_FAILURE
	RESERVE_TRANSACTION
	RESERVED_FUNDS
	STRIPE_FEE
	STRIPE_FX_FEE
	TAX_FEE
	TOPUP
	TOPUP_REVERSAL
	TRANSFER
	TRANSFER_CANCEL
	TRANSFER_FAILURE
	TRANSFER_REFUND
}
type StripeBankAccount {
	status: String!
	routingNumber: String
	object: StripeBankAccountObject!
	metadata: JSON
	last4: String!
	id: String!
	fingerprint: String
	defaultForCurrency: Boolean
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	currency: String!
	country: String!
	bankName: String
	availablePayoutMethods: [StripeBankAccountAvailablePayoutMethods!]
	accountType: String
	accountHolderType: String
	accountHolderName: String
	account: StripeStringOrAccountUnion
}
enum StripeBankAccountAvailablePayoutMethods {
	INSTANT
	STANDARD
}
enum StripeBankAccountObject {
	BANK_ACCOUNT
}
type StripeBankConnectionsResourceAccountholder {
	type: StripeBankConnectionsResourceAccountholderType!
	customer: StripeStringOrCustomerUnion
	account: StripeStringOrAccountUnion
}
enum StripeBankConnectionsResourceAccountholderType {
	ACCOUNT
	CUSTOMER
}
type StripeBankConnectionsResourceBalance {
	type: StripeBankConnectionsResourceBalanceType!
	current: JSON!
	credit: StripeBankConnectionsResourceBalanceApiResourceCreditBalance
	cash: StripeBankConnectionsResourceBalanceApiResourceCashBalance
	asOf: Int!
}
type StripeBankConnectionsResourceBalanceApiResourceCashBalance {
	available: JSON
}
type StripeBankConnectionsResourceBalanceApiResourceCreditBalance {
	used: JSON
}
type StripeBankConnectionsResourceBalanceRefresh {
	status: StripeBankConnectionsResourceBalanceRefreshStatus!
	lastAttemptedAt: Int!
}
enum StripeBankConnectionsResourceBalanceRefreshStatus {
	FAILED
	PENDING
	SUCCEEDED
}
enum StripeBankConnectionsResourceBalanceType {
	CASH
	CREDIT
}
type StripeBankConnectionsResourceLinkAccountSessionFilters {
	countries: [String!]
}
type StripeBankConnectionsResourceOwnershipRefresh {
	status: StripeBankConnectionsResourceOwnershipRefreshStatus!
	lastAttemptedAt: Int!
}
enum StripeBankConnectionsResourceOwnershipRefreshStatus {
	FAILED
	PENDING
	SUCCEEDED
}
type StripeBillingDetails {
	phone: String
	name: String
	email: String
	address: StripeAddress
}
type StripeBillingPortalConfiguration {
	updated: Int!
	object: StripeBillingPortalConfigurationObject!
	metadata: JSON
	loginPage: StripePortalLoginPage!
	livemode: Boolean!
	isDefault: Boolean!
	id: String!
	features: StripePortalFeatures!
	defaultReturnUrl: String
	created: Int!
	businessProfile: StripePortalBusinessProfile!
	application: StripeStringOrDeletedApplicationOrApplicationUnion
	active: Boolean!
}
enum StripeBillingPortalConfigurationObject {
	BILLING_PORTAL_CONFIGURATION
}
type StripeBillingPortalSession {
	url: String!
	returnUrl: String
	onBehalfOf: String
	object: StripeBillingPortalSessionObject!
	locale: StripeBillingPortalSessionLocale
	livemode: Boolean!
	id: String!
	flow: StripePortalFlowsFlow
	customer: String!
	created: Int!
	configuration: StripeStringOrBillingPortalConfigurationUnion!
}
enum StripeBillingPortalSessionLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_AU
	EN_CA
	EN_GB
	EN_IE
	EN_IN
	EN_NZ
	EN_SG
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
enum StripeBillingPortalSessionObject {
	BILLING_PORTAL_SESSION
}
type StripeCapability {
	status: StripeCapabilityStatus!
	requirements: StripeAccountCapabilityRequirements
	requestedAt: Int
	requested: Boolean!
	object: StripeCapabilityObject!
	id: String!
	futureRequirements: StripeAccountCapabilityFutureRequirements
	account: StripeStringOrAccountUnion!
}
enum StripeCapabilityObject {
	CAPABILITY
}
enum StripeCapabilityStatus {
	ACTIVE
	DISABLED
	INACTIVE
	PENDING
	UNREQUESTED
}
type StripeCard {
	tokenizationMethod: String
	status: String
	object: StripeCardObject!
	name: String
	metadata: JSON
	last4: String!
	id: String!
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	dynamicLast4: String
	defaultForCurrency: Boolean
	cvcCheck: String
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	currency: String
	country: String
	brand: String!
	availablePayoutMethods: [StripeCardAvailablePayoutMethods!]
	addressZipCheck: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1Check: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	account: StripeStringOrAccountUnion
}
enum StripeCardAvailablePayoutMethods {
	INSTANT
	STANDARD
}
type StripeCardGeneratedFromPaymentMethodDetails {
	type: String!
	cardPresent: StripePaymentMethodDetailsCardPresent
}
type StripeCardIssuingAccountTermsOfService {
	userAgent: String
	ip: String
	date: Int
}
enum StripeCardObject {
	CARD
}
union StripeCardOrBankAccountUnion = StripeCard | StripeBankAccount
type StripeCashBalance {
	settings: StripeCustomerBalanceCustomerBalanceSettings!
	object: StripeCashBalanceObject!
	livemode: Boolean!
	customer: String!
	available: JSON
}
enum StripeCashBalanceObject {
	CASH_BALANCE
}
type StripeCharge {
	transferGroup: String
	transferData: StripeChargeTransferData
	transfer: StripeStringOrTransferUnion
	status: StripeChargeStatus!
	statementDescriptorSuffix: String
	statementDescriptor: String
	sourceTransfer: StripeStringOrTransferUnion
	shipping: StripeShipping
	review: StripeStringOrReviewUnion
	refunds: StripeChargeRefunds
	refunded: Boolean!
	receiptUrl: String
	receiptNumber: String
	receiptEmail: String
	radarOptions: StripeRadarRadarOptions
	paymentMethodDetails: StripePaymentMethodDetails
	paymentMethod: String
	paymentIntent: StripeStringOrPaymentIntentUnion
	paid: Boolean!
	outcome: StripeChargeOutcome
	onBehalfOf: StripeStringOrAccountUnion
	object: StripeChargeObject!
	metadata: JSON!
	livemode: Boolean!
	invoice: StripeStringOrInvoiceUnion
	id: String!
	fraudDetails: StripeChargeFraudDetails
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: StripeStringOrBalanceTransactionUnion
	disputed: Boolean!
	description: String
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	captured: Boolean!
	calculatedStatementDescriptor: String
	billingDetails: StripeBillingDetails!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	applicationFeeAmount: Int
	applicationFee: StripeStringOrApplicationFeeUnion
	application: StripeStringOrApplicationUnion
	amountRefunded: Int!
	amountCaptured: Int!
	amount: Int!
}
type StripeChargeFraudDetails {
	userReport: String
	stripeReport: String
}
enum StripeChargeObject {
	CHARGE
}
enum StripeChargeObjectRefunds {
	LIST
}
type StripeChargeOutcome {
	type: String!
	sellerMessage: String
	rule: StripeStringOrRuleUnion
	riskScore: Int
	riskLevel: String
	reason: String
	networkStatus: String
}
type StripeChargeRefunds {
	url: String!
	object: StripeChargeObjectRefunds!
	hasMore: Boolean!
	nodes: [StripeRefund!]!
}
enum StripeChargeStatus {
	FAILED
	PENDING
	SUCCEEDED
}
type StripeChargeTransferData {
	destination: StripeStringOrAccountUnion!
	amount: Int
}
type StripeCheckoutAcssDebitMandateOptions {
	transactionType: StripeCheckoutAcssDebitMandateOptionsTransactionType
	paymentSchedule: StripeCheckoutAcssDebitMandateOptionsPaymentSchedule
	intervalDescription: String
	defaultFor: [StripeCheckoutAcssDebitMandateOptionsDefaultFor!]
	customMandateUrl: String
}
enum StripeCheckoutAcssDebitMandateOptionsDefaultFor {
	INVOICE
	SUBSCRIPTION
}
enum StripeCheckoutAcssDebitMandateOptionsPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripeCheckoutAcssDebitMandateOptionsTransactionType {
	BUSINESS
	PERSONAL
}
type StripeCheckoutAcssDebitPaymentMethodOptions {
	verificationMethod: StripeCheckoutAcssDebitPaymentMethodOptionsVerificationMethod
	setupFutureUsage: StripeCheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage
	mandateOptions: StripeCheckoutAcssDebitMandateOptions
	currency: StripeCheckoutAcssDebitPaymentMethodOptionsCurrency
}
enum StripeCheckoutAcssDebitPaymentMethodOptionsCurrency {
	CAD
	USD
}
enum StripeCheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripeCheckoutAcssDebitPaymentMethodOptionsVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripeCheckoutAffirmPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutAffirmPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutAffirmPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutAfterpayClearpayPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutAlipayPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutAlipayPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutAlipayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutAuBecsDebitPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutBacsDebitPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripeCheckoutBancontactPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutBancontactPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutBancontactPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutBoletoPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutBoletoPaymentMethodOptionsSetupFutureUsage
	expiresAfterDays: Int!
}
enum StripeCheckoutBoletoPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripeCheckoutCardInstallmentsOptions {
	enabled: Boolean
}
type StripeCheckoutCardPaymentMethodOptions {
	statementDescriptorSuffixKanji: String
	statementDescriptorSuffixKana: String
	setupFutureUsage: StripeCheckoutCardPaymentMethodOptionsSetupFutureUsage
	installments: StripeCheckoutCardInstallmentsOptions
}
enum StripeCheckoutCardPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptions {
	type: StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsType
	requestedAddressTypes: [StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes!]
	euBankTransfer: StripePaymentMethodOptionsCustomerBalanceEuBankAccount
}
enum StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type StripeCheckoutCustomerBalancePaymentMethodOptions {
	setupFutureUsage: StripeCheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage
	fundingType: StripeCheckoutCustomerBalancePaymentMethodOptionsFundingType
	bankTransfer: StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptions
}
enum StripeCheckoutCustomerBalancePaymentMethodOptionsFundingType {
	BANK_TRANSFER
}
enum StripeCheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutEpsPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutEpsPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutEpsPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutFpxPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutFpxPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutFpxPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutGiropayPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutGiropayPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutGiropayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutGrabPayPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutGrabPayPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutGrabPayPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutIdealPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutIdealPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutIdealPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutKlarnaPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutKlarnaPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutKlarnaPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripeCheckoutKonbiniPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutKonbiniPaymentMethodOptionsSetupFutureUsage
	expiresAfterDays: Int
}
enum StripeCheckoutKonbiniPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutOxxoPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutOxxoPaymentMethodOptionsSetupFutureUsage
	expiresAfterDays: Int!
}
enum StripeCheckoutOxxoPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutP24PaymentMethodOptions {
	setupFutureUsage: StripeCheckoutP24PaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutP24PaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutPaynowPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutPaynowPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutPaynowPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutPixPaymentMethodOptions {
	expiresAfterSeconds: Int
}
type StripeCheckoutSepaDebitPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripeCheckoutSession {
	url: String
	totalDetails: StripePaymentPagesCheckoutSessionTotalDetails
	taxIdCollection: StripePaymentPagesCheckoutSessionTaxIdCollection
	successUrl: String!
	subscription: StripeStringOrSubscriptionUnion
	submitType: StripeCheckoutSessionSubmitType
	status: StripeCheckoutSessionStatus
	shippingOptions: [StripePaymentPagesCheckoutSessionShippingOption!]!
	shippingDetails: StripeShipping
	shippingCost: StripePaymentPagesCheckoutSessionShippingCost
	shippingAddressCollection: StripePaymentPagesCheckoutSessionShippingAddressCollection
	setupIntent: StripeStringOrSetupIntentUnion
	recoveredFrom: String
	phoneNumberCollection: StripePaymentPagesCheckoutSessionPhoneNumberCollection
	paymentStatus: StripeCheckoutSessionPaymentStatus!
	paymentMethodTypes: [String!]!
	paymentMethodOptions: StripeCheckoutSessionPaymentMethodOptions
	paymentMethodCollection: StripeCheckoutSessionPaymentMethodCollection
	paymentLink: StripeStringOrPaymentLinkUnion
	paymentIntent: StripeStringOrPaymentIntentUnion
	object: StripeCheckoutSessionObject!
	mode: StripeCheckoutSessionMode!
	metadata: JSON
	locale: StripeCheckoutSessionLocale
	livemode: Boolean!
	lineItems: StripeCheckoutSessionLineItems
	invoiceCreation: StripePaymentPagesCheckoutSessionInvoiceCreation
	invoice: StripeStringOrInvoiceUnion
	id: String!
	expiresAt: Int!
	customerEmail: String
	customerDetails: StripePaymentPagesCheckoutSessionCustomerDetails
	customerCreation: StripeCheckoutSessionCustomerCreation
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	customText: StripePaymentPagesCheckoutSessionCustomText!
	currency: String
	created: Int!
	consentCollection: StripePaymentPagesCheckoutSessionConsentCollection
	consent: StripePaymentPagesCheckoutSessionConsent
	clientReferenceId: String
	cancelUrl: String
	billingAddressCollection: StripeCheckoutSessionBillingAddressCollection
	automaticTax: StripePaymentPagesCheckoutSessionAutomaticTax!
	amountTotal: Int
	amountSubtotal: Int
	allowPromotionCodes: Boolean
	afterExpiration: StripePaymentPagesCheckoutSessionAfterExpiration
}
enum StripeCheckoutSessionBillingAddressCollection {
	AUTO
	REQUIRED
}
enum StripeCheckoutSessionCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
type StripeCheckoutSessionLineItems {
	url: String!
	object: StripeCheckoutSessionObjectLineItems!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeCheckoutSessionLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_GB
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
enum StripeCheckoutSessionMode {
	PAYMENT
	SETUP
	SUBSCRIPTION
}
enum StripeCheckoutSessionObject {
	CHECKOUT_SESSION
}
enum StripeCheckoutSessionObjectLineItems {
	LIST
}
enum StripeCheckoutSessionPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
type StripeCheckoutSessionPaymentMethodOptions {
	usBankAccount: StripeCheckoutUsBankAccountPaymentMethodOptions
	sofort: StripeCheckoutSofortPaymentMethodOptions
	sepaDebit: StripeCheckoutSepaDebitPaymentMethodOptions
	pix: StripeCheckoutPixPaymentMethodOptions
	paynow: StripeCheckoutPaynowPaymentMethodOptions
	p24: StripeCheckoutP24PaymentMethodOptions
	oxxo: StripeCheckoutOxxoPaymentMethodOptions
	konbini: StripeCheckoutKonbiniPaymentMethodOptions
	klarna: StripeCheckoutKlarnaPaymentMethodOptions
	ideal: StripeCheckoutIdealPaymentMethodOptions
	grabpay: StripeCheckoutGrabPayPaymentMethodOptions
	giropay: StripeCheckoutGiropayPaymentMethodOptions
	fpx: StripeCheckoutFpxPaymentMethodOptions
	eps: StripeCheckoutEpsPaymentMethodOptions
	customerBalance: StripeCheckoutCustomerBalancePaymentMethodOptions
	card: StripeCheckoutCardPaymentMethodOptions
	boleto: StripeCheckoutBoletoPaymentMethodOptions
	bancontact: StripeCheckoutBancontactPaymentMethodOptions
	bacsDebit: StripeCheckoutBacsDebitPaymentMethodOptions
	auBecsDebit: StripeCheckoutAuBecsDebitPaymentMethodOptions
	alipay: StripeCheckoutAlipayPaymentMethodOptions
	afterpayClearpay: StripeCheckoutAfterpayClearpayPaymentMethodOptions
	affirm: StripeCheckoutAffirmPaymentMethodOptions
	acssDebit: StripeCheckoutAcssDebitPaymentMethodOptions
}
enum StripeCheckoutSessionPaymentStatus {
	NO_PAYMENT_REQUIRED
	PAID
	UNPAID
}
enum StripeCheckoutSessionStatus {
	COMPLETE
	EXPIRED
	OPEN
}
enum StripeCheckoutSessionSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
type StripeCheckoutSofortPaymentMethodOptions {
	setupFutureUsage: StripeCheckoutSofortPaymentMethodOptionsSetupFutureUsage
}
enum StripeCheckoutSofortPaymentMethodOptionsSetupFutureUsage {
	NONE
}
type StripeCheckoutUsBankAccountPaymentMethodOptions {
	verificationMethod: StripeCheckoutUsBankAccountPaymentMethodOptionsVerificationMethod
	setupFutureUsage: StripeCheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage
	financialConnections: StripeLinkedAccountOptionsUsBankAccount
}
enum StripeCheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripeCheckoutUsBankAccountPaymentMethodOptionsVerificationMethod {
	AUTOMATIC
	INSTANT
}
type StripeConnectCollectionTransfer {
	object: StripeConnectCollectionTransferObject!
	livemode: Boolean!
	id: String!
	destination: StripeStringOrAccountUnion!
	currency: String!
	amount: Int!
}
enum StripeConnectCollectionTransferObject {
	CONNECT_COLLECTION_TRANSFER
}
type StripeCountrySpec {
	verificationFields: StripeCountrySpecVerificationFields!
	supportedTransferCountries: [String!]!
	supportedPaymentMethods: [String!]!
	supportedPaymentCurrencies: [String!]!
	supportedBankAccountCurrencies: JSON!
	object: StripeCountrySpecObject!
	id: String!
	defaultCurrency: String!
}
enum StripeCountrySpecObject {
	COUNTRY_SPEC
}
type StripeCountrySpecVerificationFieldDetails {
	minimum: [String!]!
	additional: [String!]!
}
type StripeCountrySpecVerificationFields {
	individual: StripeCountrySpecVerificationFieldDetails!
	company: StripeCountrySpecVerificationFieldDetails!
}
type StripeCoupon {
	valid: Boolean!
	timesRedeemed: Int!
	redeemBy: Int
	percentOff: Float
	object: StripeCouponObject!
	name: String
	metadata: JSON
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	durationInMonths: Int
	duration: StripeCouponDuration!
	currencyOptions: JSON
	currency: String
	created: Int!
	appliesTo: StripeCouponAppliesTo
	amountOff: Int
}
type StripeCouponAppliesTo {
	products: [String!]!
}
enum StripeCouponDuration {
	FOREVER
	ONCE
	REPEATING
}
enum StripeCouponObject {
	COUPON
}
type StripeCreditNote {
	voidedAt: Int
	type: StripeCreditNoteType!
	totalExcludingTax: Int
	total: Int!
	taxAmounts: [StripeCreditNoteTaxAmount!]!
	subtotalExcludingTax: Int
	subtotal: Int!
	status: StripeCreditNoteStatus!
	shippingCost: StripeInvoicesShippingCost
	refund: StripeStringOrRefundUnion
	reason: StripeCreditNoteReason
	pdf: String!
	outOfBandAmount: Int
	object: StripeCreditNoteObject!
	number: String!
	metadata: JSON
	memo: String
	livemode: Boolean!
	lines: StripeCreditNoteLines!
	invoice: StripeStringOrInvoiceUnion!
	id: String!
	discountAmounts: [StripeDiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	customerBalanceTransaction: StripeStringOrCustomerBalanceTransactionUnion
	customer: StripeStringOrDeletedCustomerOrCustomerUnion!
	currency: String!
	created: Int!
	amountShipping: Int!
	amount: Int!
}
type StripeCreditNoteLineItem {
	unitAmountExcludingTax: String
	unitAmountDecimal: String
	unitAmount: Int
	type: StripeCreditNoteLineItemType!
	taxRates: [StripeTaxRate!]!
	taxAmounts: [StripeCreditNoteTaxAmount!]!
	quantity: Int
	object: StripeCreditNoteLineItemObject!
	livemode: Boolean!
	invoiceLineItem: String
	id: String!
	discountAmounts: [StripeDiscountsResourceDiscountAmount!]!
	discountAmount: Int!
	description: String
	amountExcludingTax: Int
	amount: Int!
}
enum StripeCreditNoteLineItemObject {
	CREDIT_NOTE_LINE_ITEM
}
enum StripeCreditNoteLineItemType {
	CUSTOM_LINE_ITEM
	INVOICE_LINE_ITEM
}
type StripeCreditNoteLines {
	url: String!
	object: StripeCreditNoteObjectLines!
	hasMore: Boolean!
	nodes: [StripeCreditNoteLineItem!]!
}
enum StripeCreditNoteObject {
	CREDIT_NOTE
}
enum StripeCreditNoteObjectLines {
	LIST
}
enum StripeCreditNoteReason {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
enum StripeCreditNoteStatus {
	ISSUED
	VOID
}
type StripeCreditNoteTaxAmount {
	taxRate: StripeStringOrTaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
enum StripeCreditNoteType {
	POST_PAYMENT
	PRE_PAYMENT
}
type StripeCustomUnitAmount {
	preset: Int
	minimum: Int
	maximum: Int
}
type StripeCustomer {
	testClock: StripeStringOrTestHelpersTestClockUnion
	taxIds: StripeCustomerTaxIds
	taxExempt: StripeCustomerTaxExempt
	tax: StripeCustomerTax
	subscriptions: StripeCustomerSubscriptions
	sources: StripeCustomerSources
	shipping: StripeShipping
	preferredLocales: [String!]
	phone: String
	object: StripeCustomerObject!
	nextInvoiceSequence: Int
	name: String
	metadata: JSON
	livemode: Boolean!
	invoiceSettings: StripeInvoiceSettingCustomerSetting
	invoicePrefix: String
	invoiceCreditBalance: JSON
	id: String!
	email: String
	discount: StripeDiscount
	description: String
	delinquent: Boolean
	defaultSource: StripeStringOrSourceOrCardOrBankAccountUnion
	currency: String
	created: Int!
	cashBalance: StripeCashBalance
	balance: Int
	address: StripeAddress
}
type StripeCustomerAcceptance {
	type: StripeCustomerAcceptanceType!
	online: StripeOnlineAcceptance
	offline: JSON
	acceptedAt: Int
}
enum StripeCustomerAcceptanceType {
	OFFLINE
	ONLINE
}
type StripeCustomerBalanceCustomerBalanceSettings {
	usingMerchantDefault: Boolean!
	reconciliationMode: StripeCustomerBalanceCustomerBalanceSettingsReconciliationMode!
}
enum StripeCustomerBalanceCustomerBalanceSettingsReconciliationMode {
	AUTOMATIC
	MANUAL
}
type StripeCustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction {
	paymentIntent: StripeStringOrPaymentIntentUnion!
}
type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction {
	bankTransfer: StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer!
}
type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer {
	type: StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType!
	reference: String
	euBankTransfer: StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
}
type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer {
	senderName: String
	ibanLast4: String
	bic: String
}
enum StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type StripeCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {
	refund: StripeStringOrRefundUnion!
}
type StripeCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {
	paymentIntent: StripeStringOrPaymentIntentUnion!
}
type StripeCustomerBalanceTransaction {
	type: StripeCustomerBalanceTransactionType!
	object: StripeCustomerBalanceTransactionObject!
	metadata: JSON
	livemode: Boolean!
	invoice: StripeStringOrInvoiceUnion
	id: String!
	endingBalance: Int!
	description: String
	customer: StripeStringOrCustomerUnion!
	currency: String!
	creditNote: StripeStringOrCreditNoteUnion
	created: Int!
	amount: Int!
}
enum StripeCustomerBalanceTransactionObject {
	CUSTOMER_BALANCE_TRANSACTION
}
enum StripeCustomerBalanceTransactionType {
	ADJUSTMENT
	APPLIED_TO_INVOICE
	CREDIT_NOTE
	INITIAL
	INVOICE_OVERPAID
	INVOICE_TOO_LARGE
	INVOICE_TOO_SMALL
	MIGRATION
	UNAPPLIED_FROM_INVOICE
	UNSPENT_RECEIVER_CREDIT
}
type StripeCustomerCashBalanceTransaction {
	unappliedFromPayment: StripeCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
	type: StripeCustomerCashBalanceTransactionType!
	refundedFromPayment: StripeCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
	object: StripeCustomerCashBalanceTransactionObject!
	netAmount: Int!
	livemode: Boolean!
	id: String!
	funded: StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction
	endingBalance: Int!
	customer: StripeStringOrCustomerUnion!
	currency: String!
	created: Int!
	appliedToPayment: StripeCustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction
}
enum StripeCustomerCashBalanceTransactionObject {
	CUSTOMER_CASH_BALANCE_TRANSACTION
}
enum StripeCustomerCashBalanceTransactionType {
	APPLIED_TO_PAYMENT
	FUNDED
	FUNDING_REVERSED
	REFUNDED_FROM_PAYMENT
	RETURN_CANCELED
	RETURN_INITIATED
	UNAPPLIED_FROM_PAYMENT
}
enum StripeCustomerObject {
	CUSTOMER
}
enum StripeCustomerObjectSources {
	LIST
}
enum StripeCustomerObjectSubscriptions {
	LIST
}
enum StripeCustomerObjectTaxIds {
	LIST
}
type StripeCustomerSources {
	url: String!
	object: StripeCustomerObjectSources!
	hasMore: Boolean!
	data: [StripeSourceOrCardOrBankAccountUnion!]!
}
type StripeCustomerSubscriptions {
	url: String!
	object: StripeCustomerObjectSubscriptions!
	hasMore: Boolean!
	nodes: [StripeSubscription!]!
}
type StripeCustomerTax {
	location: StripeCustomerTaxLocation
	ipAddress: String
	automaticTax: StripeCustomerTaxAutomaticTax!
}
enum StripeCustomerTaxAutomaticTax {
	FAILED
	NOT_COLLECTING
	SUPPORTED
	UNRECOGNIZED_LOCATION
}
enum StripeCustomerTaxExempt {
	EXEMPT
	NONE
	REVERSE
}
type StripeCustomerTaxIds {
	url: String!
	object: StripeCustomerObjectTaxIds!
	hasMore: Boolean!
	nodes: [StripeTaxId!]!
}
type StripeCustomerTaxLocation {
	state: String
	source: StripeCustomerTaxLocationSource!
	country: String!
}
enum StripeCustomerTaxLocationSource {
	BILLING_ADDRESS
	IP_ADDRESS
	PAYMENT_METHOD
	SHIPPING_DESTINATION
}
input StripeDeleteCustomersCustomerBankAccountsIdInput {
	expand: [String!]
}
input StripeDeleteCustomersCustomerCardsIdInput {
	expand: [String!]
}
input StripeDeleteCustomersCustomerSourcesIdInput {
	expand: [String!]
}
input StripeDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdInput {
	prorate: Boolean
	invoiceNow: Boolean
	expand: [String!]
}
input StripeDeleteEphemeralKeysKeyInput {
	expand: [String!]
}
input StripeDeleteSubscriptionItemsItemInput {
	prorationDate: Int
	prorationBehavior: StripeDeleteSubscriptionItemsItemProrationBehavior
	clearUsage: Boolean
}
enum StripeDeleteSubscriptionItemsItemProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripeDeleteSubscriptionsSubscriptionExposedIdInput {
	prorate: Boolean
	invoiceNow: Boolean
	expand: [String!]
}
type StripeDeletedAccount {
	object: StripeDeletedAccountObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedAccountObject {
	ACCOUNT
}
type StripeDeletedApplePayDomain {
	object: StripeDeletedApplePayDomainObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedApplePayDomainObject {
	APPLE_PAY_DOMAIN
}
type StripeDeletedApplication {
	object: StripeDeletedApplicationObject!
	name: String
	id: String!
	deleted: Boolean!
}
enum StripeDeletedApplicationObject {
	APPLICATION
}
type StripeDeletedBankAccount {
	object: StripeDeletedBankAccountObject!
	id: String!
	deleted: Boolean!
	currency: String
}
enum StripeDeletedBankAccountObject {
	BANK_ACCOUNT
}
type StripeDeletedCard {
	object: StripeDeletedCardObject!
	id: String!
	deleted: Boolean!
	currency: String
}
enum StripeDeletedCardObject {
	CARD
}
type StripeDeletedCoupon {
	object: StripeDeletedCouponObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedCouponObject {
	COUPON
}
type StripeDeletedCustomer {
	object: StripeDeletedCustomerObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedCustomerObject {
	CUSTOMER
}
union StripeDeletedCustomerOrCustomerUnion = StripeDeletedCustomer | StripeCustomer
type StripeDeletedDiscount {
	subscription: String
	start: Int!
	promotionCode: StripeStringOrPromotionCodeUnion
	object: StripeDeletedDiscountObject!
	invoiceItem: String
	invoice: String
	id: String!
	deleted: Boolean!
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	coupon: StripeCoupon!
	checkoutSession: String
}
enum StripeDeletedDiscountObject {
	DISCOUNT
}
union StripeDeletedExternalAccount = StripeDeletedCard | StripeDeletedBankAccount
type StripeDeletedInvoice {
	object: StripeDeletedInvoiceObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedInvoiceObject {
	INVOICE
}
type StripeDeletedInvoiceitem {
	object: StripeDeletedInvoiceitemObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedInvoiceitemObject {
	INVOICEITEM
}
union StripeDeletedPaymentSourceOrPaymentSourceUnion = StripeDeletedCard | StripeDeletedBankAccount | StripeSource | StripeCard | StripeBankAccount | StripeAccount
type StripeDeletedPerson {
	object: StripeDeletedPersonObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedPersonObject {
	PERSON
}
type StripeDeletedPlan {
	object: StripeDeletedPlanObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedPlanObject {
	PLAN
}
type StripeDeletedPrice {
	object: StripeDeletedPriceObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedPriceObject {
	PRICE
}
type StripeDeletedProduct {
	object: StripeDeletedProductObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedProductObject {
	PRODUCT
}
type StripeDeletedRadarValueList {
	object: StripeDeletedRadarValueListObject!
	id: String!
	deleted: Boolean!
}
type StripeDeletedRadarValueListItem {
	object: StripeDeletedRadarValueListItemObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedRadarValueListItemObject {
	RADAR_VALUE_LIST_ITEM
}
enum StripeDeletedRadarValueListObject {
	RADAR_VALUE_LIST
}
type StripeDeletedSubscriptionItem {
	object: StripeDeletedSubscriptionItemObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedSubscriptionItemObject {
	SUBSCRIPTION_ITEM
}
type StripeDeletedTaxId {
	object: StripeDeletedTaxIdObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedTaxIdObject {
	TAX_ID
}
type StripeDeletedTerminalConfiguration {
	object: StripeDeletedTerminalConfigurationObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedTerminalConfigurationObject {
	TERMINAL_CONFIGURATION
}
union StripeDeletedTerminalConfigurationOrTerminalConfigurationUnion = StripeDeletedTerminalConfiguration | StripeTerminalConfiguration
type StripeDeletedTerminalLocation {
	object: StripeDeletedTerminalLocationObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedTerminalLocationObject {
	TERMINAL_LOCATION
}
union StripeDeletedTerminalLocationOrTerminalLocationUnion = StripeDeletedTerminalLocation | StripeTerminalLocation
type StripeDeletedTerminalReader {
	object: StripeDeletedTerminalReaderObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedTerminalReaderObject {
	TERMINAL_READER
}
union StripeDeletedTerminalReaderOrTerminalReaderUnion = StripeDeletedTerminalReader | StripeTerminalReader
type StripeDeletedTestHelpersTestClock {
	object: StripeDeletedTestHelpersTestClockObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedTestHelpersTestClockObject {
	TEST_HELPERS_TEST_CLOCK
}
type StripeDeletedWebhookEndpoint {
	object: StripeDeletedWebhookEndpointObject!
	id: String!
	deleted: Boolean!
}
enum StripeDeletedWebhookEndpointObject {
	WEBHOOK_ENDPOINT
}
type StripeDiscount {
	subscription: String
	start: Int!
	promotionCode: StripeStringOrPromotionCodeUnion
	object: StripeDiscountObject!
	invoiceItem: String
	invoice: String
	id: String!
	end: Int
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	coupon: StripeCoupon!
	checkoutSession: String
}
enum StripeDiscountObject {
	DISCOUNT
}
type StripeDiscountsResourceDiscountAmount {
	discount: StripeStringOrDeletedDiscountOrDiscountUnion!
	amount: Int!
}
type StripeDispute {
	status: StripeDisputeStatus!
	reason: String!
	paymentIntent: StripeStringOrPaymentIntentUnion
	object: StripeDisputeObject!
	metadata: JSON!
	livemode: Boolean!
	isChargeRefundable: Boolean!
	id: String!
	evidenceDetails: StripeDisputeEvidenceDetails!
	evidence: StripeDisputeEvidence!
	currency: String!
	created: Int!
	charge: StripeStringOrChargeUnion!
	balanceTransactions: [StripeBalanceTransaction!]!
	amount: Int!
}
type StripeDisputeEvidence {
	uncategorizedText: String
	uncategorizedFile: StripeStringOrFileUnion
	shippingTrackingNumber: String
	shippingDocumentation: StripeStringOrFileUnion
	shippingDate: String
	shippingCarrier: String
	shippingAddress: String
	serviceDocumentation: StripeStringOrFileUnion
	serviceDate: String
	refundRefusalExplanation: String
	refundPolicyDisclosure: String
	refundPolicy: StripeStringOrFileUnion
	receipt: StripeStringOrFileUnion
	productDescription: String
	duplicateChargeId: String
	duplicateChargeExplanation: String
	duplicateChargeDocumentation: StripeStringOrFileUnion
	customerSignature: StripeStringOrFileUnion
	customerPurchaseIp: String
	customerName: String
	customerEmailAddress: String
	customerCommunication: StripeStringOrFileUnion
	cancellationRebuttal: String
	cancellationPolicyDisclosure: String
	cancellationPolicy: StripeStringOrFileUnion
	billingAddress: String
	accessActivityLog: String
}
type StripeDisputeEvidenceDetails {
	submissionCount: Int!
	pastDue: Boolean!
	hasEvidence: Boolean!
	dueBy: Int
}
enum StripeDisputeObject {
	DISPUTE
}
enum StripeDisputeStatus {
	CHARGE_REFUNDED
	LOST
	NEEDS_RESPONSE
	UNDER_REVIEW
	WARNING_CLOSED
	WARNING_NEEDS_RESPONSE
	WARNING_UNDER_REVIEW
	WON
}
type StripeEmailSent {
	emailSentTo: String!
	emailSentAt: Int!
}
type StripeEphemeralKey {
	secret: String
	object: StripeEphemeralKeyObject!
	livemode: Boolean!
	id: String!
	expires: Int!
	created: Int!
}
enum StripeEphemeralKeyObject {
	EPHEMERAL_KEY
}
type StripeEvent {
	type: String!
	request: StripeNotificationEventRequest
	pendingWebhooks: Int!
	object: StripeEventObject!
	livemode: Boolean!
	id: String!
	data: StripeNotificationEventData!
	created: Int!
	apiVersion: String
	account: String
}
enum StripeEventObject {
	EVENT
}
type StripeExchangeRate {
	rates: JSON!
	object: StripeExchangeRateObject!
	id: String!
}
enum StripeExchangeRateObject {
	EXCHANGE_RATE
}
union StripeExternalAccount = StripeCard | StripeBankAccount
type StripeFee {
	type: String!
	description: String
	currency: String!
	application: String
	amount: Int!
}
type StripeFeeRefund {
	object: StripeFeeRefundObject!
	metadata: JSON
	id: String!
	fee: StripeStringOrApplicationFeeUnion!
	currency: String!
	created: Int!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	amount: Int!
}
enum StripeFeeRefundObject {
	FEE_REFUND
}
type StripeFile {
	url: String
	type: String
	title: String
	size: Int!
	purpose: StripeFilePurpose!
	object: StripeFileObject!
	links: StripeFileLinks
	id: String!
	filename: String
	expiresAt: Int
	created: Int!
}
type StripeFileLink {
	url: String
	object: StripeFileLinkObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	file: StripeStringOrFileUnion!
	expiresAt: Int
	expired: Boolean!
	created: Int!
}
enum StripeFileLinkObject {
	FILE_LINK
}
type StripeFileLinks {
	url: String!
	object: StripeFileObjectLinks!
	hasMore: Boolean!
	nodes: [StripeFileLink!]!
}
enum StripeFileObject {
	FILE
}
enum StripeFileObjectLinks {
	LIST
}
enum StripeFilePurpose {
	ACCOUNT_REQUIREMENT
	ADDITIONAL_VERIFICATION
	BUSINESS_ICON
	BUSINESS_LOGO
	CUSTOMER_SIGNATURE
	DISPUTE_EVIDENCE
	DOCUMENT_PROVIDER_IDENTITY_DOCUMENT
	FINANCE_REPORT_RUN
	IDENTITY_DOCUMENT
	IDENTITY_DOCUMENT_DOWNLOADABLE
	PCI_DOCUMENT
	SELFIE
	SIGMA_SCHEDULED_QUERY
	TAX_DOCUMENT_USER_UPLOAD
	TERMINAL_READER_SPLASHSCREEN
}
type StripeFinancialConnectionsAccount {
	supportedPaymentMethodTypes: [StripeFinancialConnectionsAccountSupportedPaymentMethodTypes!]!
	subcategory: StripeFinancialConnectionsAccountSubcategory!
	status: StripeFinancialConnectionsAccountStatus!
	permissions: [StripeFinancialConnectionsAccountPermissions!]
	ownershipRefresh: StripeBankConnectionsResourceOwnershipRefresh
	ownership: StripeStringOrFinancialConnectionsAccountOwnershipUnion
	object: StripeFinancialConnectionsAccountObject!
	livemode: Boolean!
	last4: String
	institutionName: String!
	id: String!
	displayName: String
	created: Int!
	category: StripeFinancialConnectionsAccountCategory!
	balanceRefresh: StripeBankConnectionsResourceBalanceRefresh
	balance: StripeBankConnectionsResourceBalance
	accountHolder: StripeBankConnectionsResourceAccountholder
}
enum StripeFinancialConnectionsAccountCategory {
	CASH
	CREDIT
	INVESTMENT
	OTHER
}
enum StripeFinancialConnectionsAccountObject {
	FINANCIAL_CONNECTIONS_ACCOUNT
}
type StripeFinancialConnectionsAccountOwner {
	refreshedAt: Int
	rawAddress: String
	phone: String
	ownership: String!
	object: StripeFinancialConnectionsAccountOwnerObject!
	name: String!
	id: String!
	email: String
}
enum StripeFinancialConnectionsAccountOwnerObject {
	FINANCIAL_CONNECTIONS_ACCOUNT_OWNER
}
type StripeFinancialConnectionsAccountOwnership {
	owners: StripeFinancialConnectionsAccountOwnershipOwners!
	object: StripeFinancialConnectionsAccountOwnershipObject!
	id: String!
	created: Int!
}
enum StripeFinancialConnectionsAccountOwnershipObject {
	FINANCIAL_CONNECTIONS_ACCOUNT_OWNERSHIP
}
enum StripeFinancialConnectionsAccountOwnershipObjectOwners {
	LIST
}
type StripeFinancialConnectionsAccountOwnershipOwners {
	url: String!
	object: StripeFinancialConnectionsAccountOwnershipObjectOwners!
	hasMore: Boolean!
	nodes: [StripeFinancialConnectionsAccountOwner!]!
}
enum StripeFinancialConnectionsAccountPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripeFinancialConnectionsAccountStatus {
	ACTIVE
	DISCONNECTED
	INACTIVE
}
enum StripeFinancialConnectionsAccountSubcategory {
	CHECKING
	CREDIT_CARD
	LINE_OF_CREDIT
	MORTGAGE
	OTHER
	SAVINGS
}
enum StripeFinancialConnectionsAccountSupportedPaymentMethodTypes {
	LINK
	US_BANK_ACCOUNT
}
type StripeFinancialConnectionsSession {
	returnUrl: String
	permissions: [StripeFinancialConnectionsSessionPermissions!]!
	object: StripeFinancialConnectionsSessionObject!
	livemode: Boolean!
	id: String!
	filters: StripeBankConnectionsResourceLinkAccountSessionFilters
	clientSecret: String!
	accounts: StripeFinancialConnectionsSessionAccounts!
	accountHolder: StripeBankConnectionsResourceAccountholder
}
type StripeFinancialConnectionsSessionAccounts {
	url: String!
	object: StripeFinancialConnectionsSessionObjectAccounts!
	hasMore: Boolean!
	nodes: [StripeFinancialConnectionsAccount!]!
}
enum StripeFinancialConnectionsSessionObject {
	FINANCIAL_CONNECTIONS_SESSION
}
enum StripeFinancialConnectionsSessionObjectAccounts {
	LIST
}
enum StripeFinancialConnectionsSessionPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
type StripeFinancialReportingFinanceReportRunRunParameters {
	timezone: String
	reportingCategory: String
	payout: String
	intervalStart: Int
	intervalEnd: Int
	currency: String
	connectedAccount: String
	columns: [String!]
}
type StripeFundingInstructions {
	object: StripeFundingInstructionsObject!
	livemode: Boolean!
	fundingType: StripeFundingInstructionsFundingType!
	currency: String!
	bankTransfer: StripeFundingInstructionsBankTransfer!
}
type StripeFundingInstructionsBankTransfer {
	type: StripeFundingInstructionsBankTransferType!
	financialAddresses: [StripeFundingInstructionsBankTransferFinancialAddress!]!
	country: String!
}
type StripeFundingInstructionsBankTransferFinancialAddress {
	zengin: StripeFundingInstructionsBankTransferZenginRecord
	type: StripeFundingInstructionsBankTransferFinancialAddressType!
	supportedNetworks: [StripeFundingInstructionsBankTransferFinancialAddressSupportedNetworks!]
	spei: StripeFundingInstructionsBankTransferSpeiRecord
	sortCode: StripeFundingInstructionsBankTransferSortCodeRecord
	iban: StripeFundingInstructionsBankTransferIbanRecord
}
enum StripeFundingInstructionsBankTransferFinancialAddressSupportedNetworks {
	BACS
	FPS
	SEPA
	SPEI
	ZENGIN
}
enum StripeFundingInstructionsBankTransferFinancialAddressType {
	IBAN
	SORT_CODE
	SPEI
	ZENGIN
}
type StripeFundingInstructionsBankTransferIbanRecord {
	iban: String!
	country: String!
	bic: String!
	accountHolderName: String!
}
type StripeFundingInstructionsBankTransferSortCodeRecord {
	sortCode: String!
	accountNumber: String!
	accountHolderName: String!
}
type StripeFundingInstructionsBankTransferSpeiRecord {
	clabe: String!
	bankName: String!
	bankCode: String!
}
enum StripeFundingInstructionsBankTransferType {
	EU_BANK_TRANSFER
	JP_BANK_TRANSFER
}
type StripeFundingInstructionsBankTransferZenginRecord {
	branchName: String
	branchCode: String
	bankName: String
	bankCode: String
	accountType: String
	accountNumber: String
	accountHolderName: String
}
enum StripeFundingInstructionsFundingType {
	BANK_TRANSFER
}
enum StripeFundingInstructionsObject {
	FUNDING_INSTRUCTIONS
}
type StripeGelatoDataDocumentReportDateOfBirth {
	year: Int
	month: Int
	day: Int
}
type StripeGelatoDataDocumentReportExpirationDate {
	year: Int
	month: Int
	day: Int
}
type StripeGelatoDataDocumentReportIssuedDate {
	year: Int
	month: Int
	day: Int
}
type StripeGelatoDataIdNumberReportDate {
	year: Int
	month: Int
	day: Int
}
type StripeGelatoDataVerifiedOutputsDate {
	year: Int
	month: Int
	day: Int
}
type StripeGelatoDocumentReport {
	type: StripeGelatoDocumentReportType
	status: StripeGelatoDocumentReportStatus!
	number: String
	lastName: String
	issuingCountry: String
	issuedDate: StripeGelatoDataDocumentReportIssuedDate
	firstName: String
	files: [String!]
	expirationDate: StripeGelatoDataDocumentReportExpirationDate
	error: StripeGelatoDocumentReportError
	dob: StripeGelatoDataDocumentReportDateOfBirth
	address: StripeAddress
}
type StripeGelatoDocumentReportError {
	reason: String
	code: StripeGelatoDocumentReportErrorCode
}
enum StripeGelatoDocumentReportErrorCode {
	DOCUMENT_EXPIRED
	DOCUMENT_TYPE_NOT_SUPPORTED
	DOCUMENT_UNVERIFIED_OTHER
}
enum StripeGelatoDocumentReportStatus {
	UNVERIFIED
	VERIFIED
}
enum StripeGelatoDocumentReportType {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
type StripeGelatoIdNumberReport {
	status: StripeGelatoIdNumberReportStatus!
	lastName: String
	idNumberType: StripeGelatoIdNumberReportIdNumberType
	idNumber: String
	firstName: String
	error: StripeGelatoIdNumberReportError
	dob: StripeGelatoDataIdNumberReportDate
}
type StripeGelatoIdNumberReportError {
	reason: String
	code: StripeGelatoIdNumberReportErrorCode
}
enum StripeGelatoIdNumberReportErrorCode {
	ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA
	ID_NUMBER_MISMATCH
	ID_NUMBER_UNVERIFIED_OTHER
}
enum StripeGelatoIdNumberReportIdNumberType {
	BR_CPF
	SG_NRIC
	US_SSN
}
enum StripeGelatoIdNumberReportStatus {
	UNVERIFIED
	VERIFIED
}
type StripeGelatoReportDocumentOptions {
	requireMatchingSelfie: Boolean
	requireLiveCapture: Boolean
	requireIdNumber: Boolean
	allowedTypes: [StripeGelatoReportDocumentOptionsAllowedTypes!]
}
enum StripeGelatoReportDocumentOptionsAllowedTypes {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
type StripeGelatoSelfieReport {
	status: StripeGelatoSelfieReportStatus!
	selfie: String
	error: StripeGelatoSelfieReportError
	document: String
}
type StripeGelatoSelfieReportError {
	reason: String
	code: StripeGelatoSelfieReportErrorCode
}
enum StripeGelatoSelfieReportErrorCode {
	SELFIE_DOCUMENT_MISSING_PHOTO
	SELFIE_FACE_MISMATCH
	SELFIE_MANIPULATED
	SELFIE_UNVERIFIED_OTHER
}
enum StripeGelatoSelfieReportStatus {
	UNVERIFIED
	VERIFIED
}
type StripeGelatoSessionDocumentOptions {
	requireMatchingSelfie: Boolean
	requireLiveCapture: Boolean
	requireIdNumber: Boolean
	allowedTypes: [StripeGelatoSessionDocumentOptionsAllowedTypes!]
}
enum StripeGelatoSessionDocumentOptionsAllowedTypes {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
type StripeGelatoSessionLastError {
	reason: String
	code: StripeGelatoSessionLastErrorCode
}
enum StripeGelatoSessionLastErrorCode {
	ABANDONED
	CONSENT_DECLINED
	COUNTRY_NOT_SUPPORTED
	DEVICE_NOT_SUPPORTED
	DOCUMENT_EXPIRED
	DOCUMENT_TYPE_NOT_SUPPORTED
	DOCUMENT_UNVERIFIED_OTHER
	ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA
	ID_NUMBER_MISMATCH
	ID_NUMBER_UNVERIFIED_OTHER
	SELFIE_DOCUMENT_MISSING_PHOTO
	SELFIE_FACE_MISMATCH
	SELFIE_MANIPULATED
	SELFIE_UNVERIFIED_OTHER
	UNDER_SUPPORTED_AGE
}
type StripeGelatoVerificationReportOptions {
	idNumber: JSON
	document: StripeGelatoReportDocumentOptions
}
type StripeGelatoVerificationSessionOptions {
	idNumber: JSON
	document: StripeGelatoSessionDocumentOptions
}
type StripeGelatoVerifiedOutputs {
	lastName: String
	idNumberType: StripeGelatoVerifiedOutputsIdNumberType
	idNumber: String
	firstName: String
	dob: StripeGelatoDataVerifiedOutputsDate
	address: StripeAddress
}
enum StripeGelatoVerifiedOutputsIdNumberType {
	BR_CPF
	SG_NRIC
	US_SSN
}
type StripeGetAccounts {
	url: String!
	object: StripeGetAccountsObject!
	hasMore: Boolean!
	nodes: [StripeAccount!]!
}
type StripeGetAccountsAccountCapabilities {
	url: String!
	object: StripeGetAccountsAccountCapabilitiesObject!
	hasMore: Boolean!
	nodes: [StripeCapability!]!
}
enum StripeGetAccountsAccountCapabilitiesObject {
	LIST
}
type StripeGetAccountsAccountExternalAccounts {
	url: String!
	object: StripeGetAccountsAccountExternalAccountsObject!
	hasMore: Boolean!
	data: [StripeCardOrBankAccountUnion!]!
}
enum StripeGetAccountsAccountExternalAccountsObject {
	LIST
}
type StripeGetAccountsAccountPeople {
	url: String!
	object: StripeGetAccountsAccountPeopleObject!
	hasMore: Boolean!
	nodes: [StripePerson!]!
}
enum StripeGetAccountsAccountPeopleObject {
	LIST
}
input StripeGetAccountsAccountPeopleRelationshipInput {
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
type StripeGetAccountsAccountPersons {
	url: String!
	object: StripeGetAccountsAccountPersonsObject!
	hasMore: Boolean!
	nodes: [StripePerson!]!
}
enum StripeGetAccountsAccountPersonsObject {
	LIST
}
input StripeGetAccountsAccountPersonsRelationshipInput {
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
input StripeGetAccountsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetAccountsObject {
	LIST
}
type StripeGetApplePayDomains {
	url: String!
	object: StripeGetApplePayDomainsObject!
	hasMore: Boolean!
	nodes: [StripeApplePayDomain!]!
}
enum StripeGetApplePayDomainsObject {
	LIST
}
type StripeGetApplicationFees {
	url: String!
	object: StripeGetApplicationFeesObject!
	hasMore: Boolean!
	nodes: [StripeApplicationFee!]!
}
input StripeGetApplicationFeesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
type StripeGetApplicationFeesIdRefunds {
	url: String!
	object: StripeGetApplicationFeesIdRefundsObject!
	hasMore: Boolean!
	nodes: [StripeFeeRefund!]!
}
enum StripeGetApplicationFeesIdRefundsObject {
	LIST
}
enum StripeGetApplicationFeesObject {
	LIST
}
type StripeGetAppsSecrets {
	url: String!
	object: StripeGetAppsSecretsObject!
	hasMore: Boolean!
	nodes: [StripeAppsSecret!]!
}
input StripeGetAppsSecretsFindScopeInput {
	user: String
	type: StripeGetAppsSecretsFindTypeScope!
}
enum StripeGetAppsSecretsFindTypeScope {
	ACCOUNT
	USER
}
enum StripeGetAppsSecretsObject {
	LIST
}
input StripeGetAppsSecretsScopeInput {
	user: String
	type: StripeGetAppsSecretsTypeScope!
}
enum StripeGetAppsSecretsTypeScope {
	ACCOUNT
	USER
}
type StripeGetBalanceHistory {
	url: String!
	object: StripeGetBalanceHistoryObject!
	hasMore: Boolean!
	nodes: [StripeBalanceTransaction!]!
}
input StripeGetBalanceHistoryCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetBalanceHistoryObject {
	LIST
}
type StripeGetBalanceTransactions {
	url: String!
	object: StripeGetBalanceTransactionsObject!
	hasMore: Boolean!
	nodes: [StripeBalanceTransaction!]!
}
input StripeGetBalanceTransactionsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetBalanceTransactionsObject {
	LIST
}
type StripeGetBillingPortalConfigurations {
	url: String!
	object: StripeGetBillingPortalConfigurationsObject!
	hasMore: Boolean!
	nodes: [StripeBillingPortalConfiguration!]!
}
enum StripeGetBillingPortalConfigurationsObject {
	LIST
}
type StripeGetCharges {
	url: String!
	object: StripeGetChargesObject!
	hasMore: Boolean!
	nodes: [StripeCharge!]!
}
type StripeGetChargesChargeRefunds {
	url: String!
	object: StripeGetChargesChargeRefundsObject!
	hasMore: Boolean!
	nodes: [StripeRefund!]!
}
enum StripeGetChargesChargeRefundsObject {
	LIST
}
input StripeGetChargesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetChargesObject {
	LIST
}
type StripeGetChargesSearch {
	url: String!
	totalCount: Int
	object: StripeGetChargesSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripeCharge!]!
}
enum StripeGetChargesSearchObject {
	SEARCH_RESULT
}
type StripeGetCheckoutSessions {
	url: String!
	object: StripeGetCheckoutSessionsObject!
	hasMore: Boolean!
	nodes: [StripeCheckoutSession!]!
}
input StripeGetCheckoutSessionsCustomerDetailsInput {
	email: String!
}
enum StripeGetCheckoutSessionsObject {
	LIST
}
type StripeGetCheckoutSessionsSessionLineItems {
	url: String!
	object: StripeGetCheckoutSessionsSessionLineItemsObject!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeGetCheckoutSessionsSessionLineItemsObject {
	LIST
}
type StripeGetCountrySpecs {
	url: String!
	object: StripeGetCountrySpecsObject!
	hasMore: Boolean!
	nodes: [StripeCountrySpec!]!
}
enum StripeGetCountrySpecsObject {
	LIST
}
type StripeGetCoupons {
	url: String!
	object: StripeGetCouponsObject!
	hasMore: Boolean!
	nodes: [StripeCoupon!]!
}
input StripeGetCouponsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetCouponsObject {
	LIST
}
type StripeGetCreditNotes {
	url: String!
	object: StripeGetCreditNotesObject!
	hasMore: Boolean!
	nodes: [StripeCreditNote!]!
}
type StripeGetCreditNotesCreditNoteLines {
	url: String!
	object: StripeGetCreditNotesCreditNoteLinesObject!
	hasMore: Boolean!
	nodes: [StripeCreditNoteLineItem!]!
}
enum StripeGetCreditNotesCreditNoteLinesObject {
	LIST
}
enum StripeGetCreditNotesObject {
	LIST
}
type StripeGetCreditNotesPreviewLines {
	url: String!
	object: StripeGetCreditNotesPreviewLinesObject!
	hasMore: Boolean!
	nodes: [StripeCreditNoteLineItem!]!
}
input StripeGetCreditNotesPreviewLinesInput {
	taxRates: JSON
	unitAmountDecimal: String
	unitAmount: Int
	type: StripeGetCreditNotesPreviewTypeLines!
	quantity: Int
	invoiceLineItem: String
	description: String
	amount: Int
}
input StripeGetCreditNotesPreviewLinesLinesInput {
	taxRates: JSON
	unitAmountDecimal: String
	unitAmount: Int
	type: StripeGetCreditNotesPreviewLinesTypeLines!
	quantity: Int
	invoiceLineItem: String
	description: String
	amount: Int
}
enum StripeGetCreditNotesPreviewLinesObject {
	LIST
}
enum StripeGetCreditNotesPreviewLinesReason {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
input StripeGetCreditNotesPreviewLinesShippingCostInput {
	shippingRate: String
}
enum StripeGetCreditNotesPreviewLinesTypeLines {
	CUSTOM_LINE_ITEM
	INVOICE_LINE_ITEM
}
enum StripeGetCreditNotesPreviewReason {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
input StripeGetCreditNotesPreviewShippingCostInput {
	shippingRate: String
}
enum StripeGetCreditNotesPreviewTypeLines {
	CUSTOM_LINE_ITEM
	INVOICE_LINE_ITEM
}
type StripeGetCustomers {
	url: String!
	object: StripeGetCustomersObject!
	hasMore: Boolean!
	nodes: [StripeCustomer!]!
}
input StripeGetCustomersCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
type StripeGetCustomersCustomerBalanceTransactions {
	url: String!
	object: StripeGetCustomersCustomerBalanceTransactionsObject!
	hasMore: Boolean!
	nodes: [StripeCustomerBalanceTransaction!]!
}
enum StripeGetCustomersCustomerBalanceTransactionsObject {
	LIST
}
type StripeGetCustomersCustomerBankAccounts {
	url: String!
	object: StripeGetCustomersCustomerBankAccountsObject!
	hasMore: Boolean!
	nodes: [StripeBankAccount!]!
}
enum StripeGetCustomersCustomerBankAccountsObject {
	LIST
}
type StripeGetCustomersCustomerCards {
	url: String!
	object: StripeGetCustomersCustomerCardsObject!
	hasMore: Boolean!
	nodes: [StripeCard!]!
}
enum StripeGetCustomersCustomerCardsObject {
	LIST
}
type StripeGetCustomersCustomerCashBalanceTransactions {
	url: String!
	object: StripeGetCustomersCustomerCashBalanceTransactionsObject!
	hasMore: Boolean!
	nodes: [StripeCustomerCashBalanceTransaction!]!
}
enum StripeGetCustomersCustomerCashBalanceTransactionsObject {
	LIST
}
type StripeGetCustomersCustomerPaymentMethods {
	url: String!
	object: StripeGetCustomersCustomerPaymentMethodsObject!
	hasMore: Boolean!
	nodes: [StripePaymentMethod!]!
}
enum StripeGetCustomersCustomerPaymentMethodsObject {
	LIST
}
enum StripeGetCustomersCustomerPaymentMethodsType {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type StripeGetCustomersCustomerSources {
	url: String!
	object: StripeGetCustomersCustomerSourcesObject!
	hasMore: Boolean!
	data: [StripeSourceOrCardOrBankAccountUnion!]!
}
enum StripeGetCustomersCustomerSourcesObject {
	LIST
}
type StripeGetCustomersCustomerSubscriptions {
	url: String!
	object: StripeGetCustomersCustomerSubscriptionsObject!
	hasMore: Boolean!
	nodes: [StripeSubscription!]!
}
enum StripeGetCustomersCustomerSubscriptionsObject {
	LIST
}
type StripeGetCustomersCustomerTaxIds {
	url: String!
	object: StripeGetCustomersCustomerTaxIdsObject!
	hasMore: Boolean!
	nodes: [StripeTaxId!]!
}
enum StripeGetCustomersCustomerTaxIdsObject {
	LIST
}
enum StripeGetCustomersObject {
	LIST
}
type StripeGetCustomersSearch {
	url: String!
	totalCount: Int
	object: StripeGetCustomersSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripeCustomer!]!
}
enum StripeGetCustomersSearchObject {
	SEARCH_RESULT
}
type StripeGetDisputes {
	url: String!
	object: StripeGetDisputesObject!
	hasMore: Boolean!
	nodes: [StripeDispute!]!
}
input StripeGetDisputesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetDisputesObject {
	LIST
}
type StripeGetEvents {
	url: String!
	object: StripeGetEventsObject!
	hasMore: Boolean!
	nodes: [StripeEvent!]!
}
input StripeGetEventsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetEventsObject {
	LIST
}
type StripeGetExchangeRates {
	url: String!
	object: StripeGetExchangeRatesObject!
	hasMore: Boolean!
	nodes: [StripeExchangeRate!]!
}
enum StripeGetExchangeRatesObject {
	LIST
}
type StripeGetFileLinks {
	url: String!
	object: StripeGetFileLinksObject!
	hasMore: Boolean!
	nodes: [StripeFileLink!]!
}
input StripeGetFileLinksCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetFileLinksObject {
	LIST
}
type StripeGetFiles {
	url: String!
	object: StripeGetFilesObject!
	hasMore: Boolean!
	nodes: [StripeFile!]!
}
input StripeGetFilesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetFilesObject {
	LIST
}
enum StripeGetFilesPurpose {
	ACCOUNT_REQUIREMENT
	ADDITIONAL_VERIFICATION
	BUSINESS_ICON
	BUSINESS_LOGO
	CUSTOMER_SIGNATURE
	DISPUTE_EVIDENCE
	DOCUMENT_PROVIDER_IDENTITY_DOCUMENT
	FINANCE_REPORT_RUN
	IDENTITY_DOCUMENT
	IDENTITY_DOCUMENT_DOWNLOADABLE
	PCI_DOCUMENT
	SELFIE
	SIGMA_SCHEDULED_QUERY
	TAX_DOCUMENT_USER_UPLOAD
	TERMINAL_READER_SPLASHSCREEN
}
type StripeGetFinancialConnectionsAccounts {
	url: String!
	object: StripeGetFinancialConnectionsAccountsObject!
	hasMore: Boolean!
	nodes: [StripeFinancialConnectionsAccount!]!
}
input StripeGetFinancialConnectionsAccountsAccountHolderInput {
	customer: String
	account: String
}
type StripeGetFinancialConnectionsAccountsAccountOwners {
	url: String!
	object: StripeGetFinancialConnectionsAccountsAccountOwnersObject!
	hasMore: Boolean!
	nodes: [StripeFinancialConnectionsAccountOwner!]!
}
enum StripeGetFinancialConnectionsAccountsAccountOwnersObject {
	LIST
}
enum StripeGetFinancialConnectionsAccountsObject {
	LIST
}
type StripeGetIdentityVerificationReports {
	url: String!
	object: StripeGetIdentityVerificationReportsObject!
	hasMore: Boolean!
	nodes: [StripeIdentityVerificationReport!]!
}
input StripeGetIdentityVerificationReportsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIdentityVerificationReportsObject {
	LIST
}
enum StripeGetIdentityVerificationReportsType {
	DOCUMENT
	ID_NUMBER
}
type StripeGetIdentityVerificationSessions {
	url: String!
	object: StripeGetIdentityVerificationSessionsObject!
	hasMore: Boolean!
	nodes: [StripeIdentityVerificationSession!]!
}
input StripeGetIdentityVerificationSessionsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIdentityVerificationSessionsObject {
	LIST
}
enum StripeGetIdentityVerificationSessionsStatus {
	CANCELED
	PROCESSING
	REQUIRES_INPUT
	VERIFIED
}
type StripeGetInvoiceitems {
	url: String!
	object: StripeGetInvoiceitemsObject!
	hasMore: Boolean!
	nodes: [StripeInvoiceitem!]!
}
input StripeGetInvoiceitemsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetInvoiceitemsObject {
	LIST
}
type StripeGetInvoices {
	url: String!
	object: StripeGetInvoicesObject!
	hasMore: Boolean!
	nodes: [StripeInvoice!]!
}
enum StripeGetInvoicesCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripeGetInvoicesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetInvoicesDueDateInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
type StripeGetInvoicesInvoiceLines {
	url: String!
	object: StripeGetInvoicesInvoiceLinesObject!
	hasMore: Boolean!
	nodes: [StripeLineItem!]!
}
enum StripeGetInvoicesInvoiceLinesObject {
	LIST
}
enum StripeGetInvoicesObject {
	LIST
}
type StripeGetInvoicesSearch {
	url: String!
	totalCount: Int
	object: StripeGetInvoicesSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripeInvoice!]!
}
enum StripeGetInvoicesSearchObject {
	SEARCH_RESULT
}
enum StripeGetInvoicesStatus {
	DRAFT
	OPEN
	PAID
	UNCOLLECTIBLE
	VOID
}
input StripeGetInvoicesUpcomingAddressCustomerDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripeGetInvoicesUpcomingAddressShippingCustomerDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripeGetInvoicesUpcomingAutomaticTaxInput {
	enabled: Boolean!
}
input StripeGetInvoicesUpcomingBillingThresholdsSubscriptionItemsInput {
	usageGte: Int!
}
input StripeGetInvoicesUpcomingCustomerDetailsInput {
	taxIds: [StripeGetInvoicesUpcomingTaxIdsCustomerDetailsInput!]
	taxExempt: String
	tax: StripeGetInvoicesUpcomingTaxCustomerDetailsInput
	shipping: StripeStringOrGetInvoicesUpcomingShippingCustomerDetailsUnionInput
	address: StripeStringOrGetInvoicesUpcomingAddressCustomerDetailsUnionInput
}
input StripeGetInvoicesUpcomingDiscountsInput {
	discount: String
	coupon: String
}
input StripeGetInvoicesUpcomingDiscountsInvoiceItemsInput {
	discount: String
	coupon: String
}
enum StripeGetInvoicesUpcomingIntervalRecurringPriceDataSubscriptionItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripeGetInvoicesUpcomingInvoiceItemsInput {
	taxRates: JSON
	taxCode: JSON
	metadata: JSON
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripeGetInvoicesUpcomingTaxBehaviorInvoiceItems
	quantity: Int
	priceData: StripeGetInvoicesUpcomingPriceDataInvoiceItemsInput
	price: String
	period: StripeGetInvoicesUpcomingPeriodInvoiceItemsInput
	invoiceitem: String
	discounts: StripeStringOrGetInvoicesUpcomingDiscountsInvoiceItemsUnionInput
	discountable: Boolean
	description: String
	currency: String
	amount: Int
}
type StripeGetInvoicesUpcomingLines {
	url: String!
	object: StripeGetInvoicesUpcomingLinesObject!
	hasMore: Boolean!
	nodes: [StripeLineItem!]!
}
input StripeGetInvoicesUpcomingLinesAddressCustomerDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripeGetInvoicesUpcomingLinesAddressShippingCustomerDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripeGetInvoicesUpcomingLinesAutomaticTaxInput {
	enabled: Boolean!
}
input StripeGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsInput {
	usageGte: Int!
}
input StripeGetInvoicesUpcomingLinesCustomerDetailsInput {
	taxIds: [StripeGetInvoicesUpcomingLinesTaxIdsCustomerDetailsInput!]
	taxExempt: String
	tax: StripeGetInvoicesUpcomingLinesTaxCustomerDetailsInput
	shipping: StripeStringOrGetInvoicesUpcomingLinesShippingCustomerDetailsUnionInput
	address: StripeStringOrGetInvoicesUpcomingLinesAddressCustomerDetailsUnionInput
}
input StripeGetInvoicesUpcomingLinesDiscountsInput {
	discount: String
	coupon: String
}
input StripeGetInvoicesUpcomingLinesDiscountsInvoiceItemsInput {
	discount: String
	coupon: String
}
enum StripeGetInvoicesUpcomingLinesIntervalRecurringPriceDataSubscriptionItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripeGetInvoicesUpcomingLinesInvoiceItemsInput {
	taxRates: JSON
	taxCode: JSON
	metadata: JSON
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripeGetInvoicesUpcomingLinesTaxBehaviorInvoiceItems
	quantity: Int
	priceData: StripeGetInvoicesUpcomingLinesPriceDataInvoiceItemsInput
	price: String
	period: StripeGetInvoicesUpcomingLinesPeriodInvoiceItemsInput
	invoiceitem: String
	discounts: StripeStringOrGetInvoicesUpcomingLinesDiscountsInvoiceItemsUnionInput
	discountable: Boolean
	description: String
	currency: String
	amount: Int
}
enum StripeGetInvoicesUpcomingLinesObject {
	LIST
}
input StripeGetInvoicesUpcomingLinesPeriodInvoiceItemsInput {
	start: Int!
	end: Int!
}
input StripeGetInvoicesUpcomingLinesPriceDataInvoiceItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataInvoiceItems
	product: String!
	currency: String!
}
input StripeGetInvoicesUpcomingLinesPriceDataSubscriptionItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataSubscriptionItems
	recurring: StripeGetInvoicesUpcomingLinesRecurringPriceDataSubscriptionItemsInput!
	product: String!
	currency: String!
}
input StripeGetInvoicesUpcomingLinesRecurringPriceDataSubscriptionItemsInput {
	intervalCount: Int
	interval: StripeGetInvoicesUpcomingLinesIntervalRecurringPriceDataSubscriptionItems!
}
input StripeGetInvoicesUpcomingLinesShippingCustomerDetailsInput {
	phone: String
	name: String!
	address: StripeGetInvoicesUpcomingLinesAddressShippingCustomerDetailsInput!
}
input StripeGetInvoicesUpcomingLinesSubscriptionItemsInput {
	taxRates: JSON
	metadata: JSON
	quantity: Int
	priceData: StripeGetInvoicesUpcomingLinesPriceDataSubscriptionItemsInput
	price: String
	id: String
	deleted: Boolean
	clearUsage: Boolean
	billingThresholds: StripeStringOrGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsUnionInput
}
enum StripeGetInvoicesUpcomingLinesSubscriptionProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripeGetInvoicesUpcomingLinesSubscriptionResumeAt {
	NOW
}
enum StripeGetInvoicesUpcomingLinesTaxBehaviorInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataSubscriptionItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripeGetInvoicesUpcomingLinesTaxCustomerDetailsInput {
	ipAddress: JSON
}
input StripeGetInvoicesUpcomingLinesTaxIdsCustomerDetailsInput {
	value: String!
	type: StripeGetInvoicesUpcomingLinesTypeTaxIdsCustomerDetails!
}
enum StripeGetInvoicesUpcomingLinesTypeTaxIdsCustomerDetails {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	US_EIN
	ZA_VAT
}
input StripeGetInvoicesUpcomingPeriodInvoiceItemsInput {
	start: Int!
	end: Int!
}
input StripeGetInvoicesUpcomingPriceDataInvoiceItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripeGetInvoicesUpcomingTaxBehaviorPriceDataInvoiceItems
	product: String!
	currency: String!
}
input StripeGetInvoicesUpcomingPriceDataSubscriptionItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripeGetInvoicesUpcomingTaxBehaviorPriceDataSubscriptionItems
	recurring: StripeGetInvoicesUpcomingRecurringPriceDataSubscriptionItemsInput!
	product: String!
	currency: String!
}
input StripeGetInvoicesUpcomingRecurringPriceDataSubscriptionItemsInput {
	intervalCount: Int
	interval: StripeGetInvoicesUpcomingIntervalRecurringPriceDataSubscriptionItems!
}
input StripeGetInvoicesUpcomingShippingCustomerDetailsInput {
	phone: String
	name: String!
	address: StripeGetInvoicesUpcomingAddressShippingCustomerDetailsInput!
}
input StripeGetInvoicesUpcomingSubscriptionItemsInput {
	taxRates: JSON
	metadata: JSON
	quantity: Int
	priceData: StripeGetInvoicesUpcomingPriceDataSubscriptionItemsInput
	price: String
	id: String
	deleted: Boolean
	clearUsage: Boolean
	billingThresholds: StripeStringOrGetInvoicesUpcomingBillingThresholdsSubscriptionItemsUnionInput
}
enum StripeGetInvoicesUpcomingSubscriptionProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripeGetInvoicesUpcomingSubscriptionResumeAt {
	NOW
}
enum StripeGetInvoicesUpcomingSubscriptionTrialEnd {
	NOW
}
enum StripeGetInvoicesUpcomingTaxBehaviorInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripeGetInvoicesUpcomingTaxBehaviorPriceDataInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripeGetInvoicesUpcomingTaxBehaviorPriceDataSubscriptionItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripeGetInvoicesUpcomingTaxCustomerDetailsInput {
	ipAddress: JSON
}
input StripeGetInvoicesUpcomingTaxIdsCustomerDetailsInput {
	value: String!
	type: StripeGetInvoicesUpcomingTypeTaxIdsCustomerDetails!
}
enum StripeGetInvoicesUpcomingTypeTaxIdsCustomerDetails {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	US_EIN
	ZA_VAT
}
type StripeGetIssuingAuthorizations {
	url: String!
	object: StripeGetIssuingAuthorizationsObject!
	hasMore: Boolean!
	nodes: [StripeIssuingAuthorization!]!
}
input StripeGetIssuingAuthorizationsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIssuingAuthorizationsObject {
	LIST
}
enum StripeGetIssuingAuthorizationsStatus {
	CLOSED
	PENDING
	REVERSED
}
type StripeGetIssuingCardholders {
	url: String!
	object: StripeGetIssuingCardholdersObject!
	hasMore: Boolean!
	nodes: [StripeIssuingCardholder!]!
}
input StripeGetIssuingCardholdersCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIssuingCardholdersObject {
	LIST
}
enum StripeGetIssuingCardholdersStatus {
	ACTIVE
	BLOCKED
	INACTIVE
}
enum StripeGetIssuingCardholdersType {
	COMPANY
	INDIVIDUAL
}
type StripeGetIssuingCards {
	url: String!
	object: StripeGetIssuingCardsObject!
	hasMore: Boolean!
	nodes: [StripeIssuingCard!]!
}
input StripeGetIssuingCardsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIssuingCardsObject {
	LIST
}
enum StripeGetIssuingCardsStatus {
	ACTIVE
	CANCELED
	INACTIVE
}
enum StripeGetIssuingCardsType {
	PHYSICAL
	VIRTUAL
}
type StripeGetIssuingDisputes {
	url: String!
	object: StripeGetIssuingDisputesObject!
	hasMore: Boolean!
	nodes: [StripeIssuingDispute!]!
}
input StripeGetIssuingDisputesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIssuingDisputesObject {
	LIST
}
enum StripeGetIssuingDisputesStatus {
	EXPIRED
	LOST
	SUBMITTED
	UNSUBMITTED
	WON
}
type StripeGetIssuingSettlements {
	url: String!
	object: StripeGetIssuingSettlementsObject!
	hasMore: Boolean!
	nodes: [StripeIssuingSettlement!]!
}
input StripeGetIssuingSettlementsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIssuingSettlementsObject {
	LIST
}
type StripeGetIssuingTransactions {
	url: String!
	object: StripeGetIssuingTransactionsObject!
	hasMore: Boolean!
	nodes: [StripeIssuingTransaction!]!
}
input StripeGetIssuingTransactionsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetIssuingTransactionsObject {
	LIST
}
enum StripeGetIssuingTransactionsType {
	CAPTURE
	REFUND
}
type StripeGetLinkedAccounts {
	url: String!
	object: StripeGetLinkedAccountsObject!
	hasMore: Boolean!
	nodes: [StripeFinancialConnectionsAccount!]!
}
input StripeGetLinkedAccountsAccountHolderInput {
	customer: String
	account: String
}
type StripeGetLinkedAccountsAccountOwners {
	url: String!
	object: StripeGetLinkedAccountsAccountOwnersObject!
	hasMore: Boolean!
	nodes: [StripeFinancialConnectionsAccountOwner!]!
}
enum StripeGetLinkedAccountsAccountOwnersObject {
	LIST
}
enum StripeGetLinkedAccountsObject {
	LIST
}
type StripeGetPaymentIntents {
	url: String!
	object: StripeGetPaymentIntentsObject!
	hasMore: Boolean!
	nodes: [StripePaymentIntent!]!
}
input StripeGetPaymentIntentsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetPaymentIntentsObject {
	LIST
}
type StripeGetPaymentIntentsSearch {
	url: String!
	totalCount: Int
	object: StripeGetPaymentIntentsSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripePaymentIntent!]!
}
enum StripeGetPaymentIntentsSearchObject {
	SEARCH_RESULT
}
type StripeGetPaymentLinks {
	url: String!
	object: StripeGetPaymentLinksObject!
	hasMore: Boolean!
	nodes: [StripePaymentLink!]!
}
enum StripeGetPaymentLinksObject {
	LIST
}
type StripeGetPaymentLinksPaymentLinkLineItems {
	url: String!
	object: StripeGetPaymentLinksPaymentLinkLineItemsObject!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeGetPaymentLinksPaymentLinkLineItemsObject {
	LIST
}
type StripeGetPaymentMethods {
	url: String!
	object: StripeGetPaymentMethodsObject!
	hasMore: Boolean!
	nodes: [StripePaymentMethod!]!
}
enum StripeGetPaymentMethodsObject {
	LIST
}
enum StripeGetPaymentMethodsType {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type StripeGetPayouts {
	url: String!
	object: StripeGetPayoutsObject!
	hasMore: Boolean!
	nodes: [StripePayout!]!
}
input StripeGetPayoutsArrivalDateInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetPayoutsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetPayoutsObject {
	LIST
}
type StripeGetPlans {
	url: String!
	object: StripeGetPlansObject!
	hasMore: Boolean!
	nodes: [StripePlan!]!
}
input StripeGetPlansCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetPlansObject {
	LIST
}
type StripeGetPrices {
	url: String!
	object: StripeGetPricesObject!
	hasMore: Boolean!
	nodes: [StripePrice!]!
}
input StripeGetPricesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetPricesIntervalRecurring {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripeGetPricesObject {
	LIST
}
input StripeGetPricesRecurringInput {
	usageType: StripeGetPricesUsageTypeRecurring
	interval: StripeGetPricesIntervalRecurring
}
type StripeGetPricesSearch {
	url: String!
	totalCount: Int
	object: StripeGetPricesSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripePrice!]!
}
enum StripeGetPricesSearchObject {
	SEARCH_RESULT
}
enum StripeGetPricesType {
	ONE_TIME
	RECURRING
}
enum StripeGetPricesUsageTypeRecurring {
	LICENSED
	METERED
}
type StripeGetProducts {
	url: String!
	object: StripeGetProductsObject!
	hasMore: Boolean!
	nodes: [StripeProduct!]!
}
input StripeGetProductsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetProductsObject {
	LIST
}
type StripeGetProductsSearch {
	url: String!
	totalCount: Int
	object: StripeGetProductsSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripeProduct!]!
}
enum StripeGetProductsSearchObject {
	SEARCH_RESULT
}
type StripeGetPromotionCodes {
	url: String!
	object: StripeGetPromotionCodesObject!
	hasMore: Boolean!
	nodes: [StripePromotionCode!]!
}
input StripeGetPromotionCodesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetPromotionCodesObject {
	LIST
}
type StripeGetQuotes {
	url: String!
	object: StripeGetQuotesObject!
	hasMore: Boolean!
	nodes: [StripeQuote!]!
}
enum StripeGetQuotesObject {
	LIST
}
type StripeGetQuotesQuoteComputedUpfrontLineItems {
	url: String!
	object: StripeGetQuotesQuoteComputedUpfrontLineItemsObject!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeGetQuotesQuoteComputedUpfrontLineItemsObject {
	LIST
}
type StripeGetQuotesQuoteLineItems {
	url: String!
	object: StripeGetQuotesQuoteLineItemsObject!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeGetQuotesQuoteLineItemsObject {
	LIST
}
enum StripeGetQuotesStatus {
	ACCEPTED
	CANCELED
	DRAFT
	OPEN
}
type StripeGetRadarEarlyFraudWarnings {
	url: String!
	object: StripeGetRadarEarlyFraudWarningsObject!
	hasMore: Boolean!
	nodes: [StripeRadarEarlyFraudWarning!]!
}
enum StripeGetRadarEarlyFraudWarningsObject {
	LIST
}
type StripeGetRadarValueListItems {
	url: String!
	object: StripeGetRadarValueListItemsObject!
	hasMore: Boolean!
	nodes: [StripeRadarValueListItem!]!
}
input StripeGetRadarValueListItemsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetRadarValueListItemsObject {
	LIST
}
type StripeGetRadarValueLists {
	url: String!
	object: StripeGetRadarValueListsObject!
	hasMore: Boolean!
	nodes: [StripeRadarValueList!]!
}
input StripeGetRadarValueListsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetRadarValueListsObject {
	LIST
}
type StripeGetRefunds {
	url: String!
	object: StripeGetRefundsObject!
	hasMore: Boolean!
	nodes: [StripeRefund!]!
}
input StripeGetRefundsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetRefundsObject {
	LIST
}
type StripeGetReportingReportRuns {
	url: String!
	object: StripeGetReportingReportRunsObject!
	hasMore: Boolean!
	nodes: [StripeReportingReportRun!]!
}
input StripeGetReportingReportRunsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetReportingReportRunsObject {
	LIST
}
type StripeGetReportingReportTypes {
	url: String!
	object: StripeGetReportingReportTypesObject!
	hasMore: Boolean!
	nodes: [StripeReportingReportType!]!
}
enum StripeGetReportingReportTypesObject {
	LIST
}
type StripeGetReviews {
	url: String!
	object: StripeGetReviewsObject!
	hasMore: Boolean!
	nodes: [StripeReview!]!
}
input StripeGetReviewsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetReviewsObject {
	LIST
}
type StripeGetSetupAttempts {
	url: String!
	object: StripeGetSetupAttemptsObject!
	hasMore: Boolean!
	nodes: [StripeSetupAttempt!]!
}
input StripeGetSetupAttemptsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetSetupAttemptsObject {
	LIST
}
type StripeGetSetupIntents {
	url: String!
	object: StripeGetSetupIntentsObject!
	hasMore: Boolean!
	nodes: [StripeSetupIntent!]!
}
input StripeGetSetupIntentsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetSetupIntentsObject {
	LIST
}
type StripeGetShippingRates {
	url: String!
	object: StripeGetShippingRatesObject!
	hasMore: Boolean!
	nodes: [StripeShippingRate!]!
}
input StripeGetShippingRatesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetShippingRatesObject {
	LIST
}
type StripeGetSigmaScheduledQueryRuns {
	url: String!
	object: StripeGetSigmaScheduledQueryRunsObject!
	hasMore: Boolean!
	nodes: [StripeScheduledQueryRun!]!
}
enum StripeGetSigmaScheduledQueryRunsObject {
	LIST
}
type StripeGetSourcesSourceSourceTransactions {
	url: String!
	object: StripeGetSourcesSourceSourceTransactionsObject!
	hasMore: Boolean!
	nodes: [StripeSourceTransaction!]!
}
enum StripeGetSourcesSourceSourceTransactionsObject {
	LIST
}
type StripeGetSubscriptionItems {
	url: String!
	object: StripeGetSubscriptionItemsObject!
	hasMore: Boolean!
	nodes: [StripeSubscriptionItem!]!
}
enum StripeGetSubscriptionItemsObject {
	LIST
}
type StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummaries {
	url: String!
	object: StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject!
	hasMore: Boolean!
	nodes: [StripeUsageRecordSummary!]!
}
enum StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject {
	LIST
}
type StripeGetSubscriptionSchedules {
	url: String!
	object: StripeGetSubscriptionSchedulesObject!
	hasMore: Boolean!
	nodes: [StripeSubscriptionSchedule!]!
}
input StripeGetSubscriptionSchedulesCanceledAtInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetSubscriptionSchedulesCompletedAtInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetSubscriptionSchedulesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetSubscriptionSchedulesObject {
	LIST
}
input StripeGetSubscriptionSchedulesReleasedAtInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
type StripeGetSubscriptions {
	url: String!
	object: StripeGetSubscriptionsObject!
	hasMore: Boolean!
	nodes: [StripeSubscription!]!
}
enum StripeGetSubscriptionsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripeGetSubscriptionsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetSubscriptionsCurrentPeriodEndInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetSubscriptionsCurrentPeriodStartInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetSubscriptionsObject {
	LIST
}
type StripeGetSubscriptionsSearch {
	url: String!
	totalCount: Int
	object: StripeGetSubscriptionsSearchObject!
	nextPage: String
	hasMore: Boolean!
	nodes: [StripeSubscription!]!
}
enum StripeGetSubscriptionsSearchObject {
	SEARCH_RESULT
}
enum StripeGetSubscriptionsStatus {
	ACTIVE
	ALL
	CANCELED
	ENDED
	INCOMPLETE
	INCOMPLETE_EXPIRED
	PAST_DUE
	PAUSED
	TRIALING
	UNPAID
}
type StripeGetTaxCodes {
	url: String!
	object: StripeGetTaxCodesObject!
	hasMore: Boolean!
	nodes: [StripeTaxCode!]!
}
enum StripeGetTaxCodesObject {
	LIST
}
type StripeGetTaxRates {
	url: String!
	object: StripeGetTaxRatesObject!
	hasMore: Boolean!
	nodes: [StripeTaxRate!]!
}
input StripeGetTaxRatesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetTaxRatesObject {
	LIST
}
type StripeGetTerminalConfigurations {
	url: String!
	object: StripeGetTerminalConfigurationsObject!
	hasMore: Boolean!
	nodes: [StripeTerminalConfiguration!]!
}
enum StripeGetTerminalConfigurationsObject {
	LIST
}
type StripeGetTerminalLocations {
	url: String!
	object: StripeGetTerminalLocationsObject!
	hasMore: Boolean!
	nodes: [StripeTerminalLocation!]!
}
enum StripeGetTerminalLocationsObject {
	LIST
}
type StripeGetTerminalReaders {
	url: String!
	object: StripeGetTerminalReadersObject!
	hasMore: Boolean!
	nodes: [StripeTerminalReader!]!
}
enum StripeGetTerminalReadersDeviceType {
	BBPOS_CHIPPER_2X
	BBPOS_WISEPAD_3
	BBPOS_WISEPOS_E
	SIMULATED_WISEPOS_E
	STRIPE_M_2
	VERIFONE_P400
}
enum StripeGetTerminalReadersObject {
	LIST
}
enum StripeGetTerminalReadersStatus {
	OFFLINE
	ONLINE
}
type StripeGetTestHelpersTestClocks {
	url: String!
	object: StripeGetTestHelpersTestClocksObject!
	hasMore: Boolean!
	nodes: [StripeTestHelpersTestClock!]!
}
enum StripeGetTestHelpersTestClocksObject {
	LIST
}
type StripeGetTopups {
	url: String!
	object: StripeGetTopupsObject!
	hasMore: Boolean!
	nodes: [StripeTopup!]!
}
input StripeGetTopupsAmountInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetTopupsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetTopupsObject {
	LIST
}
enum StripeGetTopupsStatus {
	CANCELED
	FAILED
	PENDING
	SUCCEEDED
}
type StripeGetTransfers {
	url: String!
	object: StripeGetTransfersObject!
	hasMore: Boolean!
	nodes: [StripeTransfer!]!
}
input StripeGetTransfersCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
type StripeGetTransfersIdReversals {
	url: String!
	object: StripeGetTransfersIdReversalsObject!
	hasMore: Boolean!
	nodes: [StripeTransferReversal!]!
}
enum StripeGetTransfersIdReversalsObject {
	LIST
}
enum StripeGetTransfersObject {
	LIST
}
type StripeGetTreasuryCreditReversals {
	url: String!
	object: StripeGetTreasuryCreditReversalsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryCreditReversal!]!
}
enum StripeGetTreasuryCreditReversalsObject {
	LIST
}
enum StripeGetTreasuryCreditReversalsStatus {
	CANCELED
	POSTED
	PROCESSING
}
type StripeGetTreasuryDebitReversals {
	url: String!
	object: StripeGetTreasuryDebitReversalsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryDebitReversal!]!
}
enum StripeGetTreasuryDebitReversalsObject {
	LIST
}
enum StripeGetTreasuryDebitReversalsResolution {
	LOST
	WON
}
enum StripeGetTreasuryDebitReversalsStatus {
	CANCELED
	COMPLETED
	PROCESSING
}
type StripeGetTreasuryFinancialAccounts {
	url: String!
	object: StripeGetTreasuryFinancialAccountsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryFinancialAccount!]!
}
input StripeGetTreasuryFinancialAccountsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetTreasuryFinancialAccountsObject {
	LIST
}
type StripeGetTreasuryInboundTransfers {
	url: String!
	object: StripeGetTreasuryInboundTransfersObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryInboundTransfer!]!
}
enum StripeGetTreasuryInboundTransfersObject {
	LIST
}
enum StripeGetTreasuryInboundTransfersStatus {
	CANCELED
	FAILED
	PROCESSING
	SUCCEEDED
}
type StripeGetTreasuryOutboundPayments {
	url: String!
	object: StripeGetTreasuryOutboundPaymentsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryOutboundPayment!]!
}
enum StripeGetTreasuryOutboundPaymentsObject {
	LIST
}
enum StripeGetTreasuryOutboundPaymentsStatus {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
type StripeGetTreasuryOutboundTransfers {
	url: String!
	object: StripeGetTreasuryOutboundTransfersObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryOutboundTransfer!]!
}
enum StripeGetTreasuryOutboundTransfersObject {
	LIST
}
enum StripeGetTreasuryOutboundTransfersStatus {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
type StripeGetTreasuryReceivedCredits {
	url: String!
	object: StripeGetTreasuryReceivedCreditsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryReceivedCredit!]!
}
input StripeGetTreasuryReceivedCreditsLinkedFlowsInput {
	sourceFlowType: StripeGetTreasuryReceivedCreditsSourceFlowTypeLinkedFlows!
}
enum StripeGetTreasuryReceivedCreditsObject {
	LIST
}
enum StripeGetTreasuryReceivedCreditsSourceFlowTypeLinkedFlows {
	CREDIT_REVERSAL
	OTHER
	OUTBOUND_PAYMENT
	PAYOUT
}
enum StripeGetTreasuryReceivedCreditsStatus {
	FAILED
	SUCCEEDED
}
type StripeGetTreasuryReceivedDebits {
	url: String!
	object: StripeGetTreasuryReceivedDebitsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryReceivedDebit!]!
}
enum StripeGetTreasuryReceivedDebitsObject {
	LIST
}
enum StripeGetTreasuryReceivedDebitsStatus {
	FAILED
	SUCCEEDED
}
type StripeGetTreasuryTransactionEntries {
	url: String!
	object: StripeGetTreasuryTransactionEntriesObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryTransactionEntry!]!
}
input StripeGetTreasuryTransactionEntriesCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
input StripeGetTreasuryTransactionEntriesEffectiveAtInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetTreasuryTransactionEntriesObject {
	LIST
}
enum StripeGetTreasuryTransactionEntriesOrderBy {
	CREATED
	EFFECTIVE_AT
}
type StripeGetTreasuryTransactions {
	url: String!
	object: StripeGetTreasuryTransactionsObject!
	hasMore: Boolean!
	nodes: [StripeTreasuryTransaction!]!
}
input StripeGetTreasuryTransactionsCreatedInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetTreasuryTransactionsObject {
	LIST
}
enum StripeGetTreasuryTransactionsOrderBy {
	CREATED
	POSTED_AT
}
input StripeGetTreasuryTransactionsPostedAtStatusTransitionsInput {
	lte: Int
	lt: Int
	gte: Int
	gt: Int
}
enum StripeGetTreasuryTransactionsStatus {
	OPEN
	POSTED
	VOID
}
input StripeGetTreasuryTransactionsStatusTransitionsInput {
	postedAt: StripeIntOrGetTreasuryTransactionsPostedAtStatusTransitionsUnionInput
}
type StripeGetWebhookEndpoints {
	url: String!
	object: StripeGetWebhookEndpointsObject!
	hasMore: Boolean!
	nodes: [StripeWebhookEndpoint!]!
}
enum StripeGetWebhookEndpointsObject {
	LIST
}
type StripeIdentityVerificationReport {
	verificationSession: String
	type: StripeIdentityVerificationReportType!
	selfie: StripeGelatoSelfieReport
	options: StripeGelatoVerificationReportOptions!
	object: StripeIdentityVerificationReportObject!
	livemode: Boolean!
	idNumber: StripeGelatoIdNumberReport
	id: String!
	document: StripeGelatoDocumentReport
	created: Int!
}
enum StripeIdentityVerificationReportObject {
	IDENTITY_VERIFICATION_REPORT
}
enum StripeIdentityVerificationReportType {
	DOCUMENT
	ID_NUMBER
}
type StripeIdentityVerificationSession {
	verifiedOutputs: StripeGelatoVerifiedOutputs
	url: String
	type: StripeIdentityVerificationSessionType!
	status: StripeIdentityVerificationSessionStatus!
	redaction: StripeVerificationSessionRedaction
	options: StripeGelatoVerificationSessionOptions!
	object: StripeIdentityVerificationSessionObject!
	metadata: JSON!
	livemode: Boolean!
	lastVerificationReport: StripeStringOrIdentityVerificationReportUnion
	lastError: StripeGelatoSessionLastError
	id: String!
	created: Int!
	clientSecret: String
}
enum StripeIdentityVerificationSessionObject {
	IDENTITY_VERIFICATION_SESSION
}
enum StripeIdentityVerificationSessionStatus {
	CANCELED
	PROCESSING
	REQUIRES_INPUT
	VERIFIED
}
enum StripeIdentityVerificationSessionType {
	DOCUMENT
	ID_NUMBER
}
type StripeInboundTransfers {
	usBankAccount: StripeInboundTransfersPaymentMethodDetailsUsBankAccount
	type: StripeInboundTransfersType!
	billingDetails: StripeTreasurySharedResourceBillingDetails!
}
type StripeInboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: StripeInboundTransfersPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
enum StripeInboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
	ACH
}
enum StripeInboundTransfersType {
	US_BANK_ACCOUNT
}
input StripeIntOrGetAccountsCreatedUnionInput {
	int: Int
	stripeGetAccountsCreatedInput: StripeGetAccountsCreatedInput
}
input StripeIntOrGetApplicationFeesCreatedUnionInput {
	int: Int
	stripeGetApplicationFeesCreatedInput: StripeGetApplicationFeesCreatedInput
}
input StripeIntOrGetBalanceHistoryCreatedUnionInput {
	int: Int
	stripeGetBalanceHistoryCreatedInput: StripeGetBalanceHistoryCreatedInput
}
input StripeIntOrGetBalanceTransactionsCreatedUnionInput {
	int: Int
	stripeGetBalanceTransactionsCreatedInput: StripeGetBalanceTransactionsCreatedInput
}
input StripeIntOrGetChargesCreatedUnionInput {
	int: Int
	stripeGetChargesCreatedInput: StripeGetChargesCreatedInput
}
input StripeIntOrGetCouponsCreatedUnionInput {
	int: Int
	stripeGetCouponsCreatedInput: StripeGetCouponsCreatedInput
}
input StripeIntOrGetCustomersCreatedUnionInput {
	int: Int
	stripeGetCustomersCreatedInput: StripeGetCustomersCreatedInput
}
input StripeIntOrGetDisputesCreatedUnionInput {
	int: Int
	stripeGetDisputesCreatedInput: StripeGetDisputesCreatedInput
}
input StripeIntOrGetEventsCreatedUnionInput {
	int: Int
	stripeGetEventsCreatedInput: StripeGetEventsCreatedInput
}
input StripeIntOrGetFileLinksCreatedUnionInput {
	int: Int
	stripeGetFileLinksCreatedInput: StripeGetFileLinksCreatedInput
}
input StripeIntOrGetFilesCreatedUnionInput {
	int: Int
	stripeGetFilesCreatedInput: StripeGetFilesCreatedInput
}
input StripeIntOrGetIdentityVerificationReportsCreatedUnionInput {
	int: Int
	stripeGetIdentityVerificationReportsCreatedInput: StripeGetIdentityVerificationReportsCreatedInput
}
input StripeIntOrGetIdentityVerificationSessionsCreatedUnionInput {
	int: Int
	stripeGetIdentityVerificationSessionsCreatedInput: StripeGetIdentityVerificationSessionsCreatedInput
}
input StripeIntOrGetInvoiceitemsCreatedUnionInput {
	int: Int
	stripeGetInvoiceitemsCreatedInput: StripeGetInvoiceitemsCreatedInput
}
input StripeIntOrGetInvoicesCreatedUnionInput {
	int: Int
	stripeGetInvoicesCreatedInput: StripeGetInvoicesCreatedInput
}
input StripeIntOrGetInvoicesDueDateUnionInput {
	int: Int
	stripeGetInvoicesDueDateInput: StripeGetInvoicesDueDateInput
}
input StripeIntOrGetIssuingAuthorizationsCreatedUnionInput {
	int: Int
	stripeGetIssuingAuthorizationsCreatedInput: StripeGetIssuingAuthorizationsCreatedInput
}
input StripeIntOrGetIssuingCardholdersCreatedUnionInput {
	int: Int
	stripeGetIssuingCardholdersCreatedInput: StripeGetIssuingCardholdersCreatedInput
}
input StripeIntOrGetIssuingCardsCreatedUnionInput {
	int: Int
	stripeGetIssuingCardsCreatedInput: StripeGetIssuingCardsCreatedInput
}
input StripeIntOrGetIssuingDisputesCreatedUnionInput {
	int: Int
	stripeGetIssuingDisputesCreatedInput: StripeGetIssuingDisputesCreatedInput
}
input StripeIntOrGetIssuingSettlementsCreatedUnionInput {
	int: Int
	stripeGetIssuingSettlementsCreatedInput: StripeGetIssuingSettlementsCreatedInput
}
input StripeIntOrGetIssuingTransactionsCreatedUnionInput {
	int: Int
	stripeGetIssuingTransactionsCreatedInput: StripeGetIssuingTransactionsCreatedInput
}
input StripeIntOrGetPaymentIntentsCreatedUnionInput {
	int: Int
	stripeGetPaymentIntentsCreatedInput: StripeGetPaymentIntentsCreatedInput
}
input StripeIntOrGetPayoutsArrivalDateUnionInput {
	int: Int
	stripeGetPayoutsArrivalDateInput: StripeGetPayoutsArrivalDateInput
}
input StripeIntOrGetPayoutsCreatedUnionInput {
	int: Int
	stripeGetPayoutsCreatedInput: StripeGetPayoutsCreatedInput
}
input StripeIntOrGetPlansCreatedUnionInput {
	int: Int
	stripeGetPlansCreatedInput: StripeGetPlansCreatedInput
}
input StripeIntOrGetPricesCreatedUnionInput {
	int: Int
	stripeGetPricesCreatedInput: StripeGetPricesCreatedInput
}
input StripeIntOrGetProductsCreatedUnionInput {
	int: Int
	stripeGetProductsCreatedInput: StripeGetProductsCreatedInput
}
input StripeIntOrGetPromotionCodesCreatedUnionInput {
	int: Int
	stripeGetPromotionCodesCreatedInput: StripeGetPromotionCodesCreatedInput
}
input StripeIntOrGetRadarValueListItemsCreatedUnionInput {
	int: Int
	stripeGetRadarValueListItemsCreatedInput: StripeGetRadarValueListItemsCreatedInput
}
input StripeIntOrGetRadarValueListsCreatedUnionInput {
	int: Int
	stripeGetRadarValueListsCreatedInput: StripeGetRadarValueListsCreatedInput
}
input StripeIntOrGetRefundsCreatedUnionInput {
	int: Int
	stripeGetRefundsCreatedInput: StripeGetRefundsCreatedInput
}
input StripeIntOrGetReportingReportRunsCreatedUnionInput {
	int: Int
	stripeGetReportingReportRunsCreatedInput: StripeGetReportingReportRunsCreatedInput
}
input StripeIntOrGetReviewsCreatedUnionInput {
	int: Int
	stripeGetReviewsCreatedInput: StripeGetReviewsCreatedInput
}
input StripeIntOrGetSetupAttemptsCreatedUnionInput {
	int: Int
	stripeGetSetupAttemptsCreatedInput: StripeGetSetupAttemptsCreatedInput
}
input StripeIntOrGetSetupIntentsCreatedUnionInput {
	int: Int
	stripeGetSetupIntentsCreatedInput: StripeGetSetupIntentsCreatedInput
}
input StripeIntOrGetShippingRatesCreatedUnionInput {
	int: Int
	stripeGetShippingRatesCreatedInput: StripeGetShippingRatesCreatedInput
}
input StripeIntOrGetSubscriptionSchedulesCanceledAtUnionInput {
	int: Int
	stripeGetSubscriptionSchedulesCanceledAtInput: StripeGetSubscriptionSchedulesCanceledAtInput
}
input StripeIntOrGetSubscriptionSchedulesCompletedAtUnionInput {
	int: Int
	stripeGetSubscriptionSchedulesCompletedAtInput: StripeGetSubscriptionSchedulesCompletedAtInput
}
input StripeIntOrGetSubscriptionSchedulesCreatedUnionInput {
	int: Int
	stripeGetSubscriptionSchedulesCreatedInput: StripeGetSubscriptionSchedulesCreatedInput
}
input StripeIntOrGetSubscriptionSchedulesReleasedAtUnionInput {
	int: Int
	stripeGetSubscriptionSchedulesReleasedAtInput: StripeGetSubscriptionSchedulesReleasedAtInput
}
input StripeIntOrGetSubscriptionsCreatedUnionInput {
	int: Int
	stripeGetSubscriptionsCreatedInput: StripeGetSubscriptionsCreatedInput
}
input StripeIntOrGetSubscriptionsCurrentPeriodEndUnionInput {
	int: Int
	stripeGetSubscriptionsCurrentPeriodEndInput: StripeGetSubscriptionsCurrentPeriodEndInput
}
input StripeIntOrGetSubscriptionsCurrentPeriodStartUnionInput {
	int: Int
	stripeGetSubscriptionsCurrentPeriodStartInput: StripeGetSubscriptionsCurrentPeriodStartInput
}
input StripeIntOrGetTaxRatesCreatedUnionInput {
	int: Int
	stripeGetTaxRatesCreatedInput: StripeGetTaxRatesCreatedInput
}
input StripeIntOrGetTopupsAmountUnionInput {
	int: Int
	stripeGetTopupsAmountInput: StripeGetTopupsAmountInput
}
input StripeIntOrGetTopupsCreatedUnionInput {
	int: Int
	stripeGetTopupsCreatedInput: StripeGetTopupsCreatedInput
}
input StripeIntOrGetTransfersCreatedUnionInput {
	int: Int
	stripeGetTransfersCreatedInput: StripeGetTransfersCreatedInput
}
input StripeIntOrGetTreasuryFinancialAccountsCreatedUnionInput {
	int: Int
	stripeGetTreasuryFinancialAccountsCreatedInput: StripeGetTreasuryFinancialAccountsCreatedInput
}
input StripeIntOrGetTreasuryTransactionEntriesCreatedUnionInput {
	int: Int
	stripeGetTreasuryTransactionEntriesCreatedInput: StripeGetTreasuryTransactionEntriesCreatedInput
}
input StripeIntOrGetTreasuryTransactionEntriesEffectiveAtUnionInput {
	int: Int
	stripeGetTreasuryTransactionEntriesEffectiveAtInput: StripeGetTreasuryTransactionEntriesEffectiveAtInput
}
input StripeIntOrGetTreasuryTransactionsCreatedUnionInput {
	int: Int
	stripeGetTreasuryTransactionsCreatedInput: StripeGetTreasuryTransactionsCreatedInput
}
input StripeIntOrGetTreasuryTransactionsPostedAtStatusTransitionsUnionInput {
	int: Int
	stripeGetTreasuryTransactionsPostedAtStatusTransitionsInput: StripeGetTreasuryTransactionsPostedAtStatusTransitionsInput
}
input StripeIntOrStringUnionInput {
	string: String
	int: Int
}
input StripeIntUnionInput {
	int: Int
	stripeGetInvoicesUpcomingSubscriptionTrialEnd: StripeGetInvoicesUpcomingSubscriptionTrialEnd
}
type StripeInvoice {
	webhooksDeliveredAt: Int
	transferData: StripeInvoiceTransferData
	totalTaxAmounts: [StripeInvoiceTaxAmount!]!
	totalExcludingTax: Int
	totalDiscountAmounts: [StripeDiscountsResourceDiscountAmount!]
	total: Int!
	thresholdReason: StripeInvoiceThresholdReason
	testClock: StripeStringOrTestHelpersTestClockUnion
	tax: Int
	subtotalExcludingTax: Int
	subtotal: Int!
	subscriptionProrationDate: Int
	subscription: StripeStringOrSubscriptionUnion
	statusTransitions: StripeInvoicesStatusTransitions!
	status: StripeInvoiceStatus
	statementDescriptor: String
	startingBalance: Int!
	shippingDetails: StripeShipping
	shippingCost: StripeInvoicesShippingCost
	renderingOptions: StripeInvoiceSettingRenderingOptions
	receiptNumber: String
	quote: StripeStringOrQuoteUnion
	prePaymentCreditNotesAmount: Int!
	postPaymentCreditNotesAmount: Int!
	periodStart: Int!
	periodEnd: Int!
	paymentSettings: StripeInvoicesPaymentSettings!
	paymentIntent: StripeStringOrPaymentIntentUnion
	paidOutOfBand: Boolean!
	paid: Boolean!
	onBehalfOf: StripeStringOrAccountUnion
	object: StripeInvoiceObject!
	number: String
	nextPaymentAttempt: Int
	metadata: JSON
	livemode: Boolean!
	lines: StripeInvoiceLines!
	latestRevision: StripeStringOrInvoiceUnion
	lastFinalizationError: StripeApiErrors
	invoicePdf: String
	id: String
	hostedInvoiceUrl: String
	fromInvoice: StripeInvoicesFromInvoice
	footer: String
	endingBalance: Int
	dueDate: Int
	discounts: [StripeStringOrDeletedDiscountOrDiscountUnion!]
	discount: StripeDiscount
	description: String
	defaultTaxRates: [StripeTaxRate!]!
	defaultSource: StripeStringOrSourceOrCardOrBankAccountUnion
	defaultPaymentMethod: StripeStringOrPaymentMethodUnion
	customerTaxIds: [StripeInvoicesResourceInvoiceTaxId!]
	customerTaxExempt: StripeInvoiceCustomerTaxExempt
	customerShipping: StripeShipping
	customerPhone: String
	customerName: String
	customerEmail: String
	customerAddress: StripeAddress
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	customFields: [StripeInvoiceSettingCustomField!]
	currency: String!
	created: Int!
	collectionMethod: StripeInvoiceCollectionMethod!
	charge: StripeStringOrChargeUnion
	billingReason: StripeInvoiceBillingReason
	automaticTax: StripeAutomaticTax!
	autoAdvance: Boolean
	attempted: Boolean!
	attemptCount: Int!
	applicationFeeAmount: Int
	application: StripeStringOrDeletedApplicationOrApplicationUnion
	amountShipping: Int!
	amountRemaining: Int!
	amountPaid: Int!
	amountDue: Int!
	accountTaxIds: [StripeStringOrDeletedTaxIdOrTaxIdUnion!]
	accountName: String
	accountCountry: String
}
enum StripeInvoiceBillingReason {
	AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE
	MANUAL
	QUOTE_ACCEPT
	SUBSCRIPTION
	SUBSCRIPTION_CREATE
	SUBSCRIPTION_CYCLE
	SUBSCRIPTION_THRESHOLD
	SUBSCRIPTION_UPDATE
	UPCOMING
}
enum StripeInvoiceCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum StripeInvoiceCustomerTaxExempt {
	EXEMPT
	NONE
	REVERSE
}
type StripeInvoiceInstallmentsCard {
	enabled: Boolean
}
type StripeInvoiceItemThresholdReason {
	usageGte: Int!
	lineItemIds: [String!]!
}
type StripeInvoiceLineItemPeriod {
	start: Int!
	end: Int!
}
type StripeInvoiceLines {
	url: String!
	object: StripeInvoiceObjectLines!
	hasMore: Boolean!
	nodes: [StripeLineItem!]!
}
type StripeInvoiceMandateOptionsCard {
	description: String
	amountType: StripeInvoiceMandateOptionsCardAmountType
	amount: Int
}
enum StripeInvoiceMandateOptionsCardAmountType {
	FIXED
	MAXIMUM
}
enum StripeInvoiceObject {
	INVOICE
}
enum StripeInvoiceObjectLines {
	LIST
}
type StripeInvoicePaymentMethodOptionsAcssDebit {
	verificationMethod: StripeInvoicePaymentMethodOptionsAcssDebitVerificationMethod
	mandateOptions: StripeInvoicePaymentMethodOptionsAcssDebitMandateOptions
}
type StripeInvoicePaymentMethodOptionsAcssDebitMandateOptions {
	transactionType: StripeInvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType
}
enum StripeInvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType {
	BUSINESS
	PERSONAL
}
enum StripeInvoicePaymentMethodOptionsAcssDebitVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripeInvoicePaymentMethodOptionsBancontact {
	preferredLanguage: StripeInvoicePaymentMethodOptionsBancontactPreferredLanguage!
}
enum StripeInvoicePaymentMethodOptionsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
type StripeInvoicePaymentMethodOptionsCard {
	requestThreeDSecure: StripeInvoicePaymentMethodOptionsCardRequestThreeDSecure
	installments: StripeInvoiceInstallmentsCard
}
enum StripeInvoicePaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
}
type StripeInvoicePaymentMethodOptionsCustomerBalance {
	fundingType: StripeInvoicePaymentMethodOptionsCustomerBalanceFundingType
	bankTransfer: StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransfer
}
type StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransfer {
	type: String
	euBankTransfer: StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer
}
type StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer {
	country: StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry!
}
enum StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry {
	BE
	DE
	ES
	FR
	IE
	NL
}
enum StripeInvoicePaymentMethodOptionsCustomerBalanceFundingType {
	BANK_TRANSFER
}
type StripeInvoicePaymentMethodOptionsUsBankAccount {
	verificationMethod: StripeInvoicePaymentMethodOptionsUsBankAccountVerificationMethod
	financialConnections: StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions
}
type StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions {
	permissions: [StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions!]
}
enum StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions {
	BALANCES
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripeInvoicePaymentMethodOptionsUsBankAccountVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripeInvoiceSettingCustomField {
	value: String!
	name: String!
}
type StripeInvoiceSettingCustomerSetting {
	renderingOptions: StripeInvoiceSettingRenderingOptions
	footer: String
	defaultPaymentMethod: StripeStringOrPaymentMethodUnion
	customFields: [StripeInvoiceSettingCustomField!]
}
type StripeInvoiceSettingQuoteSetting {
	daysUntilDue: Int
}
type StripeInvoiceSettingRenderingOptions {
	amountTaxDisplay: String
}
type StripeInvoiceSettingSubscriptionScheduleSetting {
	daysUntilDue: Int
}
enum StripeInvoiceStatus {
	DELETED
	DRAFT
	OPEN
	PAID
	UNCOLLECTIBLE
	VOID
}
type StripeInvoiceTaxAmount {
	taxRate: StripeStringOrTaxRateUnion!
	inclusive: Boolean!
	amount: Int!
}
type StripeInvoiceThresholdReason {
	itemReasons: [StripeInvoiceItemThresholdReason!]!
	amountGte: Int
}
type StripeInvoiceTransferData {
	destination: StripeStringOrAccountUnion!
	amount: Int
}
type StripeInvoiceitem {
	unitAmountDecimal: String
	unitAmount: Int
	testClock: StripeStringOrTestHelpersTestClockUnion
	taxRates: [StripeTaxRate!]
	subscriptionItem: String
	subscription: StripeStringOrSubscriptionUnion
	quantity: Int!
	proration: Boolean!
	price: StripePrice
	period: StripeInvoiceLineItemPeriod!
	object: StripeInvoiceitemObject!
	metadata: JSON
	livemode: Boolean!
	invoice: StripeStringOrInvoiceUnion
	id: String!
	discounts: [StripeStringOrDiscountUnion!]
	discountable: Boolean!
	description: String
	date: Int!
	customer: StripeStringOrDeletedCustomerOrCustomerUnion!
	currency: String!
	amount: Int!
}
enum StripeInvoiceitemObject {
	INVOICEITEM
}
type StripeInvoicesFromInvoice {
	invoice: StripeStringOrInvoiceUnion!
	action: String!
}
type StripeInvoicesLineItemsCreditedItems {
	invoiceLineItems: [String!]!
	invoice: String!
}
type StripeInvoicesLineItemsProrationDetails {
	creditedItems: StripeInvoicesLineItemsCreditedItems
}
type StripeInvoicesPaymentMethodOptions {
	usBankAccount: StripeInvoicePaymentMethodOptionsUsBankAccount
	konbini: JSON
	customerBalance: StripeInvoicePaymentMethodOptionsCustomerBalance
	card: StripeInvoicePaymentMethodOptionsCard
	bancontact: StripeInvoicePaymentMethodOptionsBancontact
	acssDebit: StripeInvoicePaymentMethodOptionsAcssDebit
}
type StripeInvoicesPaymentSettings {
	paymentMethodTypes: [StripeInvoicesPaymentSettingsPaymentMethodTypes!]
	paymentMethodOptions: StripeInvoicesPaymentMethodOptions
	defaultMandate: String
}
enum StripeInvoicesPaymentSettingsPaymentMethodTypes {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ACSS_DEBIT
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BOLETO
	CARD
	CUSTOMER_BALANCE
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KONBINI
	LINK
	PAYNOW
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type StripeInvoicesResourceInvoiceTaxId {
	value: String
	type: StripeInvoicesResourceInvoiceTaxIdType!
}
enum StripeInvoicesResourceInvoiceTaxIdType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	UNKNOWN
	US_EIN
	ZA_VAT
}
type StripeInvoicesShippingCost {
	taxes: [StripeLineItemsTaxAmount!]
	shippingRate: StripeStringOrShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
type StripeInvoicesStatusTransitions {
	voidedAt: Int
	paidAt: Int
	markedUncollectibleAt: Int
	finalizedAt: Int
}
type StripeIssuingAuthorization {
	wallet: String
	verificationData: StripeIssuingAuthorizationVerificationData!
	treasury: StripeIssuingAuthorizationTreasury
	transactions: [StripeIssuingTransaction!]!
	status: StripeIssuingAuthorizationStatus!
	requestHistory: [StripeIssuingAuthorizationRequest!]!
	pendingRequest: StripeIssuingAuthorizationPendingRequest
	object: StripeIssuingAuthorizationObject!
	networkData: StripeIssuingAuthorizationNetworkData
	metadata: JSON!
	merchantData: StripeIssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	currency: String!
	created: Int!
	cardholder: StripeStringOrIssuingCardholderUnion
	card: StripeIssuingCard!
	balanceTransactions: [StripeBalanceTransaction!]!
	authorizationMethod: StripeIssuingAuthorizationAuthorizationMethod!
	approved: Boolean!
	amountDetails: StripeIssuingAuthorizationAmountDetails
	amount: Int!
}
type StripeIssuingAuthorizationAmountDetails {
	atmFee: Int
}
enum StripeIssuingAuthorizationAuthorizationMethod {
	CHIP
	CONTACTLESS
	KEYED_IN
	ONLINE
	SWIPE
}
type StripeIssuingAuthorizationMerchantData {
	state: String
	postalCode: String
	networkId: String!
	name: String
	country: String
	city: String
	categoryCode: String!
	category: String!
}
type StripeIssuingAuthorizationNetworkData {
	acquiringInstitutionId: String
}
enum StripeIssuingAuthorizationObject {
	ISSUING_AUTHORIZATION
}
type StripeIssuingAuthorizationPendingRequest {
	merchantCurrency: String!
	merchantAmount: Int!
	isAmountControllable: Boolean!
	currency: String!
	amountDetails: StripeIssuingAuthorizationAmountDetails
	amount: Int!
}
type StripeIssuingAuthorizationRequest {
	reasonMessage: String
	reason: StripeIssuingAuthorizationRequestReason!
	merchantCurrency: String!
	merchantAmount: Int!
	currency: String!
	created: Int!
	approved: Boolean!
	amountDetails: StripeIssuingAuthorizationAmountDetails
	amount: Int!
}
enum StripeIssuingAuthorizationRequestReason {
	ACCOUNT_DISABLED
	CARD_ACTIVE
	CARD_INACTIVE
	CARDHOLDER_INACTIVE
	CARDHOLDER_VERIFICATION_REQUIRED
	INSUFFICIENT_FUNDS
	NOT_ALLOWED
	SPENDING_CONTROLS
	SUSPECTED_FRAUD
	VERIFICATION_FAILED
	WEBHOOK_APPROVED
	WEBHOOK_DECLINED
	WEBHOOK_ERROR
	WEBHOOK_TIMEOUT
}
enum StripeIssuingAuthorizationStatus {
	CLOSED
	PENDING
	REVERSED
}
type StripeIssuingAuthorizationTreasury {
	transaction: String
	receivedDebits: [String!]!
	receivedCredits: [String!]!
}
type StripeIssuingAuthorizationVerificationData {
	expiryCheck: StripeIssuingAuthorizationVerificationDataExpiryCheck!
	cvcCheck: StripeIssuingAuthorizationVerificationDataCvcCheck!
	addressPostalCodeCheck: StripeIssuingAuthorizationVerificationDataAddressPostalCodeCheck!
	addressLine1Check: StripeIssuingAuthorizationVerificationDataAddressLine1Check!
}
enum StripeIssuingAuthorizationVerificationDataAddressLine1Check {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
enum StripeIssuingAuthorizationVerificationDataAddressPostalCodeCheck {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
enum StripeIssuingAuthorizationVerificationDataCvcCheck {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
enum StripeIssuingAuthorizationVerificationDataExpiryCheck {
	MATCH
	MISMATCH
	NOT_PROVIDED
}
type StripeIssuingCard {
	wallets: StripeIssuingCardWallets
	type: StripeIssuingCardType!
	status: StripeIssuingCardStatus!
	spendingControls: StripeIssuingCardAuthorizationControls!
	shipping: StripeIssuingCardShipping
	replacementReason: StripeIssuingCardReplacementReason
	replacementFor: StripeStringOrIssuingCardUnion
	replacedBy: StripeStringOrIssuingCardUnion
	object: StripeIssuingCardObject!
	number: String
	metadata: JSON!
	livemode: Boolean!
	last4: String!
	id: String!
	financialAccount: String
	expYear: Int!
	expMonth: Int!
	cvc: String
	currency: String!
	created: Int!
	cardholder: StripeIssuingCardholder!
	cancellationReason: StripeIssuingCardCancellationReason
	brand: String!
}
type StripeIssuingCardApplePay {
	ineligibleReason: StripeIssuingCardApplePayIneligibleReason
	eligible: Boolean!
}
enum StripeIssuingCardApplePayIneligibleReason {
	MISSING_AGREEMENT
	MISSING_CARDHOLDER_CONTACT
	UNSUPPORTED_REGION
}
type StripeIssuingCardAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [StripeIssuingCardSpendingLimit!]
	blockedCategories: [StripeIssuingCardAuthorizationControlsBlockedCategories!]
	allowedCategories: [StripeIssuingCardAuthorizationControlsAllowedCategories!]
}
enum StripeIssuingCardAuthorizationControlsAllowedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripeIssuingCardAuthorizationControlsBlockedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripeIssuingCardCancellationReason {
	DESIGN_REJECTED
	LOST
	STOLEN
}
type StripeIssuingCardGooglePay {
	ineligibleReason: StripeIssuingCardGooglePayIneligibleReason
	eligible: Boolean!
}
enum StripeIssuingCardGooglePayIneligibleReason {
	MISSING_AGREEMENT
	MISSING_CARDHOLDER_CONTACT
	UNSUPPORTED_REGION
}
enum StripeIssuingCardObject {
	ISSUING_CARD
}
enum StripeIssuingCardReplacementReason {
	DAMAGED
	EXPIRED
	LOST
	STOLEN
}
type StripeIssuingCardShipping {
	type: StripeIssuingCardShippingType!
	trackingUrl: String
	trackingNumber: String
	status: StripeIssuingCardShippingStatus
	service: StripeIssuingCardShippingService!
	requireSignature: Boolean
	phoneNumber: String
	name: String!
	eta: Int
	customs: StripeIssuingCardShippingCustoms
	carrier: StripeIssuingCardShippingCarrier
	address: StripeAddress!
}
enum StripeIssuingCardShippingCarrier {
	DHL
	FEDEX
	ROYAL_MAIL
	USPS
}
type StripeIssuingCardShippingCustoms {
	eoriNumber: String
}
enum StripeIssuingCardShippingService {
	EXPRESS
	PRIORITY
	STANDARD
}
enum StripeIssuingCardShippingStatus {
	CANCELED
	DELIVERED
	FAILURE
	PENDING
	RETURNED
	SHIPPED
}
enum StripeIssuingCardShippingType {
	BULK
	INDIVIDUAL
}
type StripeIssuingCardSpendingLimit {
	interval: StripeIssuingCardSpendingLimitInterval!
	categories: [StripeIssuingCardSpendingLimitCategories!]
	amount: Int!
}
enum StripeIssuingCardSpendingLimitCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripeIssuingCardSpendingLimitInterval {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
enum StripeIssuingCardStatus {
	ACTIVE
	CANCELED
	INACTIVE
}
enum StripeIssuingCardType {
	PHYSICAL
	VIRTUAL
}
type StripeIssuingCardWallets {
	primaryAccountIdentifier: String
	googlePay: StripeIssuingCardGooglePay!
	applePay: StripeIssuingCardApplePay!
}
type StripeIssuingCardholder {
	type: StripeIssuingCardholderType!
	status: StripeIssuingCardholderStatus!
	spendingControls: StripeIssuingCardholderAuthorizationControls
	requirements: StripeIssuingCardholderRequirements!
	phoneNumber: String
	object: StripeIssuingCardholderObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	individual: StripeIssuingCardholderIndividual
	id: String!
	email: String
	created: Int!
	company: StripeIssuingCardholderCompany
	billing: StripeIssuingCardholderAddress!
}
type StripeIssuingCardholderAddress {
	address: StripeAddress!
}
type StripeIssuingCardholderAuthorizationControls {
	spendingLimitsCurrency: String
	spendingLimits: [StripeIssuingCardholderSpendingLimit!]
	blockedCategories: [StripeIssuingCardholderAuthorizationControlsBlockedCategories!]
	allowedCategories: [StripeIssuingCardholderAuthorizationControlsAllowedCategories!]
}
enum StripeIssuingCardholderAuthorizationControlsAllowedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripeIssuingCardholderAuthorizationControlsBlockedCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
type StripeIssuingCardholderCompany {
	taxIdProvided: Boolean!
}
type StripeIssuingCardholderIdDocument {
	front: StripeStringOrFileUnion
	back: StripeStringOrFileUnion
}
type StripeIssuingCardholderIndividual {
	verification: StripeIssuingCardholderVerification
	lastName: String
	firstName: String
	dob: StripeIssuingCardholderIndividualDob
}
type StripeIssuingCardholderIndividualDob {
	year: Int
	month: Int
	day: Int
}
enum StripeIssuingCardholderObject {
	ISSUING_CARDHOLDER
}
type StripeIssuingCardholderRequirements {
	pastDue: [StripeIssuingCardholderRequirementsPastDue!]
	disabledReason: StripeIssuingCardholderRequirementsDisabledReason
}
enum StripeIssuingCardholderRequirementsDisabledReason {
	LISTED
	REJECTED_LISTED
	UNDER_REVIEW
}
enum StripeIssuingCardholderRequirementsPastDue {
	COMPANY_TAX_ID
	INDIVIDUAL_DOB_DAY
	INDIVIDUAL_DOB_MONTH
	INDIVIDUAL_DOB_YEAR
	INDIVIDUAL_FIRST_NAME
	INDIVIDUAL_LAST_NAME
	INDIVIDUAL_VERIFICATION_DOCUMENT
}
type StripeIssuingCardholderSpendingLimit {
	interval: StripeIssuingCardholderSpendingLimitInterval!
	categories: [StripeIssuingCardholderSpendingLimitCategories!]
	amount: Int!
}
enum StripeIssuingCardholderSpendingLimitCategories {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripeIssuingCardholderSpendingLimitInterval {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
enum StripeIssuingCardholderStatus {
	ACTIVE
	BLOCKED
	INACTIVE
}
enum StripeIssuingCardholderType {
	COMPANY
	INDIVIDUAL
}
type StripeIssuingCardholderVerification {
	document: StripeIssuingCardholderIdDocument
}
type StripeIssuingDispute {
	treasury: StripeIssuingDisputeTreasury
	transaction: StripeStringOrIssuingTransactionUnion!
	status: StripeIssuingDisputeStatus!
	object: StripeIssuingDisputeObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	evidence: StripeIssuingDisputeEvidence!
	currency: String!
	created: Int!
	balanceTransactions: [StripeBalanceTransaction!]
	amount: Int!
}
type StripeIssuingDisputeCanceledEvidence {
	returnedAt: Int
	returnStatus: StripeIssuingDisputeCanceledEvidenceReturnStatus
	productType: StripeIssuingDisputeCanceledEvidenceProductType
	productDescription: String
	explanation: String
	expectedAt: Int
	cancellationReason: String
	cancellationPolicyProvided: Boolean
	canceledAt: Int
	additionalDocumentation: StripeStringOrFileUnion
}
enum StripeIssuingDisputeCanceledEvidenceProductType {
	MERCHANDISE
	SERVICE
}
enum StripeIssuingDisputeCanceledEvidenceReturnStatus {
	MERCHANT_REJECTED
	SUCCESSFUL
}
type StripeIssuingDisputeDuplicateEvidence {
	originalTransaction: String
	explanation: String
	checkImage: StripeStringOrFileUnion
	cashReceipt: StripeStringOrFileUnion
	cardStatement: StripeStringOrFileUnion
	additionalDocumentation: StripeStringOrFileUnion
}
type StripeIssuingDisputeEvidence {
	serviceNotAsDescribed: StripeIssuingDisputeServiceNotAsDescribedEvidence
	reason: StripeIssuingDisputeEvidenceReason!
	other: StripeIssuingDisputeOtherEvidence
	notReceived: StripeIssuingDisputeNotReceivedEvidence
	merchandiseNotAsDescribed: StripeIssuingDisputeMerchandiseNotAsDescribedEvidence
	fraudulent: StripeIssuingDisputeFraudulentEvidence
	duplicate: StripeIssuingDisputeDuplicateEvidence
	canceled: StripeIssuingDisputeCanceledEvidence
}
enum StripeIssuingDisputeEvidenceReason {
	CANCELED
	DUPLICATE
	FRAUDULENT
	MERCHANDISE_NOT_AS_DESCRIBED
	NOT_RECEIVED
	OTHER
	SERVICE_NOT_AS_DESCRIBED
}
type StripeIssuingDisputeFraudulentEvidence {
	explanation: String
	additionalDocumentation: StripeStringOrFileUnion
}
type StripeIssuingDisputeMerchandiseNotAsDescribedEvidence {
	returnedAt: Int
	returnStatus: StripeIssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus
	returnDescription: String
	receivedAt: Int
	explanation: String
	additionalDocumentation: StripeStringOrFileUnion
}
enum StripeIssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus {
	MERCHANT_REJECTED
	SUCCESSFUL
}
type StripeIssuingDisputeNotReceivedEvidence {
	productType: StripeIssuingDisputeNotReceivedEvidenceProductType
	productDescription: String
	explanation: String
	expectedAt: Int
	additionalDocumentation: StripeStringOrFileUnion
}
enum StripeIssuingDisputeNotReceivedEvidenceProductType {
	MERCHANDISE
	SERVICE
}
enum StripeIssuingDisputeObject {
	ISSUING_DISPUTE
}
type StripeIssuingDisputeOtherEvidence {
	productType: StripeIssuingDisputeOtherEvidenceProductType
	productDescription: String
	explanation: String
	additionalDocumentation: StripeStringOrFileUnion
}
enum StripeIssuingDisputeOtherEvidenceProductType {
	MERCHANDISE
	SERVICE
}
type StripeIssuingDisputeServiceNotAsDescribedEvidence {
	receivedAt: Int
	explanation: String
	cancellationReason: String
	canceledAt: Int
	additionalDocumentation: StripeStringOrFileUnion
}
enum StripeIssuingDisputeStatus {
	EXPIRED
	LOST
	SUBMITTED
	UNSUBMITTED
	WON
}
type StripeIssuingDisputeTreasury {
	receivedDebit: String!
	debitReversal: String
}
type StripeIssuingSettlement {
	transactionVolume: Int!
	transactionCount: Int!
	settlementService: String!
	object: StripeIssuingSettlementObject!
	networkSettlementIdentifier: String!
	networkFees: Int!
	network: StripeIssuingSettlementNetwork!
	netTotal: Int!
	metadata: JSON!
	livemode: Boolean!
	interchangeFees: Int!
	id: String!
	currency: String!
	created: Int!
	clearingDate: Int!
	bin: String!
}
enum StripeIssuingSettlementNetwork {
	VISA
}
enum StripeIssuingSettlementObject {
	ISSUING_SETTLEMENT
}
type StripeIssuingTransaction {
	wallet: StripeIssuingTransactionWallet
	type: StripeIssuingTransactionType!
	treasury: StripeIssuingTransactionTreasury
	purchaseDetails: StripeIssuingTransactionPurchaseDetails
	object: StripeIssuingTransactionObject!
	metadata: JSON!
	merchantData: StripeIssuingAuthorizationMerchantData!
	merchantCurrency: String!
	merchantAmount: Int!
	livemode: Boolean!
	id: String!
	dispute: StripeStringOrIssuingDisputeUnion
	currency: String!
	created: Int!
	cardholder: StripeStringOrIssuingCardholderUnion
	card: StripeStringOrIssuingCardUnion!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	authorization: StripeStringOrIssuingAuthorizationUnion
	amountDetails: StripeIssuingTransactionAmountDetails
	amount: Int!
}
type StripeIssuingTransactionAmountDetails {
	atmFee: Int
}
type StripeIssuingTransactionFlightData {
	travelAgency: String
	segments: [StripeIssuingTransactionFlightDataLeg!]
	refundable: Boolean
	passengerName: String
	departureAt: Int
}
type StripeIssuingTransactionFlightDataLeg {
	stopoverAllowed: Boolean
	serviceClass: String
	flightNumber: String
	departureAirportCode: String
	carrier: String
	arrivalAirportCode: String
}
type StripeIssuingTransactionFuelData {
	volumeDecimal: String
	unitCostDecimal: String!
	unit: String!
	type: String!
}
type StripeIssuingTransactionLodgingData {
	nights: Int
	checkInAt: Int
}
enum StripeIssuingTransactionObject {
	ISSUING_TRANSACTION
}
type StripeIssuingTransactionPurchaseDetails {
	reference: String
	receipt: [StripeIssuingTransactionReceiptData!]
	lodging: StripeIssuingTransactionLodgingData
	fuel: StripeIssuingTransactionFuelData
	flight: StripeIssuingTransactionFlightData
}
type StripeIssuingTransactionReceiptData {
	unitCost: Int
	total: Int
	quantity: Float
	description: String
}
type StripeIssuingTransactionTreasury {
	receivedDebit: String
	receivedCredit: String
}
enum StripeIssuingTransactionType {
	CAPTURE
	REFUND
}
enum StripeIssuingTransactionWallet {
	APPLE_PAY
	GOOGLE_PAY
	SAMSUNG_PAY
}
type StripeItem {
	taxes: [StripeLineItemsTaxAmount!]
	quantity: Int
	price: StripePrice
	object: StripeItemObject!
	id: String!
	discounts: [StripeLineItemsDiscountAmount!]
	description: String!
	currency: String!
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
	amountDiscount: Int!
}
enum StripeItemObject {
	ITEM
}
type StripeLegalEntityCompany {
	verification: StripeLegalEntityCompanyVerification
	vatIdProvided: Boolean
	taxIdRegistrar: String
	taxIdProvided: Boolean
	structure: StripeLegalEntityCompanyStructure
	phone: String
	ownershipDeclaration: StripeLegalEntityUboDeclaration
	ownersProvided: Boolean
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean
	directorsProvided: Boolean
	addressKanji: StripeLegalEntityJapanAddress
	addressKana: StripeLegalEntityJapanAddress
	address: StripeAddress
}
enum StripeLegalEntityCompanyStructure {
	FREE_ZONE_ESTABLISHMENT
	FREE_ZONE_LLC
	GOVERNMENT_INSTRUMENTALITY
	GOVERNMENTAL_UNIT
	INCORPORATED_NON_PROFIT
	LIMITED_LIABILITY_PARTNERSHIP
	LLC
	MULTI_MEMBER_LLC
	PRIVATE_COMPANY
	PRIVATE_CORPORATION
	PRIVATE_PARTNERSHIP
	PUBLIC_COMPANY
	PUBLIC_CORPORATION
	PUBLIC_PARTNERSHIP
	SINGLE_MEMBER_LLC
	SOLE_ESTABLISHMENT
	SOLE_PROPRIETORSHIP
	TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
	UNINCORPORATED_ASSOCIATION
	UNINCORPORATED_NON_PROFIT
}
type StripeLegalEntityCompanyVerification {
	document: StripeLegalEntityCompanyVerificationDocument!
}
type StripeLegalEntityCompanyVerificationDocument {
	front: StripeStringOrFileUnion
	detailsCode: String
	details: String
	back: StripeStringOrFileUnion
}
type StripeLegalEntityDob {
	year: Int
	month: Int
	day: Int
}
type StripeLegalEntityJapanAddress {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
type StripeLegalEntityPersonVerification {
	status: String!
	document: StripeLegalEntityPersonVerificationDocument
	detailsCode: String
	details: String
	additionalDocument: StripeLegalEntityPersonVerificationDocument
}
type StripeLegalEntityPersonVerificationDocument {
	front: StripeStringOrFileUnion
	detailsCode: String
	details: String
	back: StripeStringOrFileUnion
}
type StripeLegalEntityUboDeclaration {
	userAgent: String
	ip: String
	date: Int
}
type StripeLineItem {
	unitAmountExcludingTax: String
	type: StripeLineItemType!
	taxRates: [StripeTaxRate!]
	taxAmounts: [StripeInvoiceTaxAmount!]
	subscriptionItem: String
	subscription: String
	quantity: Int
	prorationDetails: StripeInvoicesLineItemsProrationDetails
	proration: Boolean!
	price: StripePrice
	period: StripeInvoiceLineItemPeriod!
	object: StripeLineItemObject!
	metadata: JSON!
	livemode: Boolean!
	invoiceItem: String
	id: String!
	discounts: [StripeStringOrDiscountUnion!]
	discountable: Boolean!
	discountAmounts: [StripeDiscountsResourceDiscountAmount!]
	description: String
	currency: String!
	amountExcludingTax: Int
	amount: Int!
}
enum StripeLineItemObject {
	LINE_ITEM
}
enum StripeLineItemType {
	INVOICEITEM
	SUBSCRIPTION
}
type StripeLineItemsDiscountAmount {
	discount: StripeDiscount!
	amount: Int!
}
type StripeLineItemsTaxAmount {
	rate: StripeTaxRate!
	amount: Int!
}
type StripeLinkedAccountOptionsUsBankAccount {
	returnUrl: String
	permissions: [StripeLinkedAccountOptionsUsBankAccountPermissions!]
}
enum StripeLinkedAccountOptionsUsBankAccountPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
type StripeLoginLink {
	url: String!
	object: StripeLoginLinkObject!
	created: Int!
}
enum StripeLoginLinkObject {
	LOGIN_LINK
}
type StripeMandate {
	type: StripeMandateType!
	status: StripeMandateStatus!
	singleUse: StripeMandateSingleUse
	paymentMethodDetails: StripeMandatePaymentMethodDetails!
	paymentMethod: StripeStringOrPaymentMethodUnion!
	object: StripeMandateObject!
	multiUse: JSON
	livemode: Boolean!
	id: String!
	customerAcceptance: StripeCustomerAcceptance!
}
type StripeMandateAcssDebit {
	transactionType: StripeMandateAcssDebitTransactionType!
	paymentSchedule: StripeMandateAcssDebitPaymentSchedule!
	intervalDescription: String
	defaultFor: [StripeMandateAcssDebitDefaultFor!]
}
enum StripeMandateAcssDebitDefaultFor {
	INVOICE
	SUBSCRIPTION
}
enum StripeMandateAcssDebitPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripeMandateAcssDebitTransactionType {
	BUSINESS
	PERSONAL
}
type StripeMandateAuBecsDebit {
	url: String!
}
type StripeMandateBacsDebit {
	url: String!
	reference: String!
	networkStatus: StripeMandateBacsDebitNetworkStatus!
}
enum StripeMandateBacsDebitNetworkStatus {
	ACCEPTED
	PENDING
	REFUSED
	REVOKED
}
type StripeMandateBlik {
	type: StripeMandateBlikType
	offSession: StripeMandateOptionsOffSessionDetailsBlik
	expiresAfter: Int
}
enum StripeMandateBlikType {
	OFF_SESSION
	ON_SESSION
}
enum StripeMandateObject {
	MANDATE
}
type StripeMandateOptionsOffSessionDetailsBlik {
	intervalCount: Int
	interval: StripeMandateOptionsOffSessionDetailsBlikInterval
	currency: String
	amount: Int
}
enum StripeMandateOptionsOffSessionDetailsBlikInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
type StripeMandatePaymentMethodDetails {
	usBankAccount: JSON
	type: String!
	sepaDebit: StripeMandateSepaDebit
	link: JSON
	card: JSON
	blik: StripeMandateBlik
	bacsDebit: StripeMandateBacsDebit
	auBecsDebit: StripeMandateAuBecsDebit
	acssDebit: StripeMandateAcssDebit
}
type StripeMandateSepaDebit {
	url: String!
	reference: String!
}
type StripeMandateSingleUse {
	currency: String!
	amount: Int!
}
enum StripeMandateStatus {
	ACTIVE
	INACTIVE
	PENDING
}
enum StripeMandateType {
	MULTI_USE
	SINGLE_USE
}
type StripeMutation {
	postAccountLinks(input: StripePostAccountLinksInput!): StripeAccountLink
	postAccounts(input: StripePostAccountsInput): StripeAccount
	postAccountsAccount(account: String!, input: StripePostAccountsAccountInput): StripeAccount
	deleteAccountsAccount(account: String!): StripeDeletedAccount
	postAccountsAccountBankAccounts(account: String!, input: StripePostAccountsAccountBankAccountsInput): StripeExternalAccount
	postAccountsAccountBankAccountsId(id: String!, account: String!, input: StripePostAccountsAccountBankAccountsIdInput): StripeExternalAccount
	deleteAccountsAccountBankAccountsId(id: String!, account: String!): StripeDeletedExternalAccount
	postAccountsAccountCapabilitiesCapability(capability: String!, account: String!, input: StripePostAccountsAccountCapabilitiesCapabilityInput): StripeCapability
	postAccountsAccountExternalAccounts(account: String!, input: StripePostAccountsAccountExternalAccountsInput): StripeExternalAccount
	postAccountsAccountExternalAccountsId(id: String!, account: String!, input: StripePostAccountsAccountExternalAccountsIdInput): StripeExternalAccount
	deleteAccountsAccountExternalAccountsId(id: String!, account: String!): StripeDeletedExternalAccount
	postAccountsAccountLoginLinks(account: String!, input: StripePostAccountsAccountLoginLinksInput): StripeLoginLink
	postAccountsAccountPeople(account: String!, input: StripePostAccountsAccountPeopleInput): StripePerson
	postAccountsAccountPeoplePerson(person: String!, account: String!, input: StripePostAccountsAccountPeoplePersonInput): StripePerson
	deleteAccountsAccountPeoplePerson(person: String!, account: String!): StripeDeletedPerson
	postAccountsAccountPersons(account: String!, input: StripePostAccountsAccountPersonsInput): StripePerson
	postAccountsAccountPersonsPerson(person: String!, account: String!, input: StripePostAccountsAccountPersonsPersonInput): StripePerson
	deleteAccountsAccountPersonsPerson(person: String!, account: String!): StripeDeletedPerson
	postAccountsAccountReject(account: String!, input: StripePostAccountsAccountRejectInput!): StripeAccount
	postApplePayDomains(input: StripePostApplePayDomainsInput!): StripeApplePayDomain
	deleteApplePayDomainsDomain(domain: String!): StripeDeletedApplePayDomain
	postApplicationFeesFeeRefundsId(id: String!, fee: String!, input: StripePostApplicationFeesFeeRefundsIdInput): StripeFeeRefund
	postApplicationFeesIdRefund(id: String!, input: StripePostApplicationFeesIdRefundInput): StripeApplicationFee
	postApplicationFeesIdRefunds(id: String!, input: StripePostApplicationFeesIdRefundsInput): StripeFeeRefund
	postAppsSecrets(input: StripePostAppsSecretsInput!): StripeAppsSecret
	postAppsSecretsDelete(input: StripePostAppsSecretsDeleteInput!): StripeAppsSecret
	postBillingPortalConfigurations(input: StripePostBillingPortalConfigurationsInput!): StripeBillingPortalConfiguration
	postBillingPortalConfigurationsConfiguration(configuration: String!, input: StripePostBillingPortalConfigurationsConfigurationInput): StripeBillingPortalConfiguration
	postBillingPortalSessions(input: StripePostBillingPortalSessionsInput!): StripeBillingPortalSession
	postCharges(input: StripePostChargesInput): StripeCharge
	postChargesCharge(charge: String!, input: StripePostChargesChargeInput): StripeCharge
	postChargesChargeCapture(charge: String!, input: StripePostChargesChargeCaptureInput): StripeCharge
	postChargesChargeDispute(charge: String!, input: StripePostChargesChargeDisputeInput): StripeDispute
	postChargesChargeDisputeClose(charge: String!, input: StripePostChargesChargeDisputeCloseInput): StripeDispute
	postChargesChargeRefund(charge: String!, input: StripePostChargesChargeRefundInput): StripeCharge
	postChargesChargeRefunds(charge: String!, input: StripePostChargesChargeRefundsInput): StripeRefund
	postChargesChargeRefundsRefund(refund: String!, charge: String!, input: StripePostChargesChargeRefundsRefundInput): StripeRefund
	postCheckoutSessions(input: StripePostCheckoutSessionsInput!): StripeCheckoutSession
	postCheckoutSessionsSessionExpire(session: String!, input: StripePostCheckoutSessionsSessionExpireInput): StripeCheckoutSession
	postCoupons(input: StripePostCouponsInput): StripeCoupon
	postCouponsCoupon(coupon: String!, input: StripePostCouponsCouponInput): StripeCoupon
	deleteCouponsCoupon(coupon: String!): StripeDeletedCoupon
	postCreditNotes(input: StripePostCreditNotesInput!): StripeCreditNote
	postCreditNotesId(id: String!, input: StripePostCreditNotesIdInput): StripeCreditNote
	postCreditNotesIdVoid(id: String!, input: StripePostCreditNotesIdVoidInput): StripeCreditNote
	postCustomers(input: StripePostCustomersInput): StripeCustomer
	postCustomersCustomer(customer: String!, input: StripePostCustomersCustomerInput): StripeCustomer
	deleteCustomersCustomer(customer: String!): StripeDeletedCustomer
	postCustomersCustomerBalanceTransactions(customer: String!, input: StripePostCustomersCustomerBalanceTransactionsInput!): StripeCustomerBalanceTransaction
	postCustomersCustomerBalanceTransactionsTransaction(transaction: String!, customer: String!, input: StripePostCustomersCustomerBalanceTransactionsTransactionInput): StripeCustomerBalanceTransaction
	postCustomersCustomerBankAccounts(customer: String!, input: StripePostCustomersCustomerBankAccountsInput): StripePaymentSource
	postCustomersCustomerBankAccountsId(id: String!, customer: String!, input: StripePostCustomersCustomerBankAccountsIdInput): StripeSourceOrBankAccountOrCardUnion
	deleteCustomersCustomerBankAccountsId(id: String!, customer: String!, input: StripeDeleteCustomersCustomerBankAccountsIdInput): StripeDeletedPaymentSourceOrPaymentSourceUnion
	postCustomersCustomerBankAccountsIdVerify(id: String!, customer: String!, input: StripePostCustomersCustomerBankAccountsIdVerifyInput): StripeBankAccount
	postCustomersCustomerCards(customer: String!, input: StripePostCustomersCustomerCardsInput): StripePaymentSource
	postCustomersCustomerCardsId(id: String!, customer: String!, input: StripePostCustomersCustomerCardsIdInput): StripeSourceOrBankAccountOrCardUnion
	deleteCustomersCustomerCardsId(id: String!, customer: String!, input: StripeDeleteCustomersCustomerCardsIdInput): StripeDeletedPaymentSourceOrPaymentSourceUnion
	postCustomersCustomerCashBalance(customer: String!, input: StripePostCustomersCustomerCashBalanceInput): StripeCashBalance
	deleteCustomersCustomerDiscount(customer: String!): StripeDeletedDiscount
	postCustomersCustomerFundingInstructions(customer: String!, input: StripePostCustomersCustomerFundingInstructionsInput!): StripeFundingInstructions
	postCustomersCustomerSources(customer: String!, input: StripePostCustomersCustomerSourcesInput): StripePaymentSource
	postCustomersCustomerSourcesId(id: String!, customer: String!, input: StripePostCustomersCustomerSourcesIdInput): StripeSourceOrBankAccountOrCardUnion
	deleteCustomersCustomerSourcesId(id: String!, customer: String!, input: StripeDeleteCustomersCustomerSourcesIdInput): StripeDeletedPaymentSourceOrPaymentSourceUnion
	postCustomersCustomerSourcesIdVerify(id: String!, customer: String!, input: StripePostCustomersCustomerSourcesIdVerifyInput): StripeBankAccount
	postCustomersCustomerSubscriptions(customer: String!, input: StripePostCustomersCustomerSubscriptionsInput): StripeSubscription
	postCustomersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, input: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdInput): StripeSubscription
	deleteCustomersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, input: StripeDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdInput): StripeSubscription
	deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, customer: String!): StripeDeletedDiscount
	postCustomersCustomerTaxIds(customer: String!, input: StripePostCustomersCustomerTaxIdsInput!): StripeTaxId
	deleteCustomersCustomerTaxIdsId(id: String!, customer: String!): StripeDeletedTaxId
	postDisputesDispute(dispute: String!, input: StripePostDisputesDisputeInput): StripeDispute
	postDisputesDisputeClose(dispute: String!, input: StripePostDisputesDisputeCloseInput): StripeDispute
	postEphemeralKeys(input: StripePostEphemeralKeysInput): StripeEphemeralKey
	deleteEphemeralKeysKey(key: String!, input: StripeDeleteEphemeralKeysKeyInput): StripeEphemeralKey
	postFileLinks(input: StripePostFileLinksInput!): StripeFileLink
	postFileLinksLink(link: String!, input: StripePostFileLinksLinkInput): StripeFileLink
	postFiles: StripeFile
	postFinancialConnectionsAccountsAccountDisconnect(account: String!, input: StripePostFinancialConnectionsAccountsAccountDisconnectInput): StripeFinancialConnectionsAccount
	postFinancialConnectionsAccountsAccountRefresh(account: String!, input: StripePostFinancialConnectionsAccountsAccountRefreshInput!): StripeFinancialConnectionsAccount
	postFinancialConnectionsSessions(input: StripePostFinancialConnectionsSessionsInput!): StripeFinancialConnectionsSession
	postIdentityVerificationSessions(input: StripePostIdentityVerificationSessionsInput!): StripeIdentityVerificationSession
	postIdentityVerificationSessionsSession(session: String!, input: StripePostIdentityVerificationSessionsSessionInput): StripeIdentityVerificationSession
	postIdentityVerificationSessionsSessionCancel(session: String!, input: StripePostIdentityVerificationSessionsSessionCancelInput): StripeIdentityVerificationSession
	postIdentityVerificationSessionsSessionRedact(session: String!, input: StripePostIdentityVerificationSessionsSessionRedactInput): StripeIdentityVerificationSession
	postInvoiceitems(input: StripePostInvoiceitemsInput!): StripeInvoiceitem
	postInvoiceitemsInvoiceitem(invoiceitem: String!, input: StripePostInvoiceitemsInvoiceitemInput): StripeInvoiceitem
	deleteInvoiceitemsInvoiceitem(invoiceitem: String!): StripeDeletedInvoiceitem
	postInvoices(input: StripePostInvoicesInput): StripeInvoice
	postInvoicesInvoice(invoice: String!, input: StripePostInvoicesInvoiceInput): StripeInvoice
	deleteInvoicesInvoice(invoice: String!): StripeDeletedInvoice
	postInvoicesInvoiceFinalize(invoice: String!, input: StripePostInvoicesInvoiceFinalizeInput): StripeInvoice
	postInvoicesInvoiceMarkUncollectible(invoice: String!, input: StripePostInvoicesInvoiceMarkUncollectibleInput): StripeInvoice
	postInvoicesInvoicePay(invoice: String!, input: StripePostInvoicesInvoicePayInput): StripeInvoice
	postInvoicesInvoiceSend(invoice: String!, input: StripePostInvoicesInvoiceSendInput): StripeInvoice
	postInvoicesInvoiceVoid(invoice: String!, input: StripePostInvoicesInvoiceVoidInput): StripeInvoice
	postIssuingAuthorizationsAuthorization(authorization: String!, input: StripePostIssuingAuthorizationsAuthorizationInput): StripeIssuingAuthorization
	postIssuingAuthorizationsAuthorizationApprove(authorization: String!, input: StripePostIssuingAuthorizationsAuthorizationApproveInput): StripeIssuingAuthorization
	postIssuingAuthorizationsAuthorizationDecline(authorization: String!, input: StripePostIssuingAuthorizationsAuthorizationDeclineInput): StripeIssuingAuthorization
	postIssuingCardholders(input: StripePostIssuingCardholdersInput!): StripeIssuingCardholder
	postIssuingCardholdersCardholder(cardholder: String!, input: StripePostIssuingCardholdersCardholderInput): StripeIssuingCardholder
	postIssuingCards(input: StripePostIssuingCardsInput!): StripeIssuingCard
	postIssuingCardsCard(card: String!, input: StripePostIssuingCardsCardInput): StripeIssuingCard
	postIssuingDisputes(input: StripePostIssuingDisputesInput): StripeIssuingDispute
	postIssuingDisputesDispute(dispute: String!, input: StripePostIssuingDisputesDisputeInput): StripeIssuingDispute
	postIssuingDisputesDisputeSubmit(dispute: String!, input: StripePostIssuingDisputesDisputeSubmitInput): StripeIssuingDispute
	postIssuingSettlementsSettlement(settlement: String!, input: StripePostIssuingSettlementsSettlementInput): StripeIssuingSettlement
	postIssuingTransactionsTransaction(transaction: String!, input: StripePostIssuingTransactionsTransactionInput): StripeIssuingTransaction
	postLinkAccountSessions(input: StripePostLinkAccountSessionsInput!): StripeFinancialConnectionsSession
	postLinkedAccountsAccountDisconnect(account: String!, input: StripePostLinkedAccountsAccountDisconnectInput): StripeFinancialConnectionsAccount
	postLinkedAccountsAccountRefresh(account: String!, input: StripePostLinkedAccountsAccountRefreshInput!): StripeFinancialConnectionsAccount
	postPaymentIntents(input: StripePostPaymentIntentsInput!): StripePaymentIntent
	postPaymentIntentsIntent(intent: String!, input: StripePostPaymentIntentsIntentInput): StripePaymentIntent
	postPaymentIntentsIntentApplyCustomerBalance(intent: String!, input: StripePostPaymentIntentsIntentApplyCustomerBalanceInput): StripePaymentIntent
	postPaymentIntentsIntentCancel(intent: String!, input: StripePostPaymentIntentsIntentCancelInput): StripePaymentIntent
	postPaymentIntentsIntentCapture(intent: String!, input: StripePostPaymentIntentsIntentCaptureInput): StripePaymentIntent
	postPaymentIntentsIntentConfirm(intent: String!, input: StripePostPaymentIntentsIntentConfirmInput): StripePaymentIntent
	postPaymentIntentsIntentIncrementAuthorization(intent: String!, input: StripePostPaymentIntentsIntentIncrementAuthorizationInput!): StripePaymentIntent
	postPaymentIntentsIntentVerifyMicrodeposits(intent: String!, input: StripePostPaymentIntentsIntentVerifyMicrodepositsInput): StripePaymentIntent
	postPaymentLinks(input: StripePostPaymentLinksInput!): StripePaymentLink
	postPaymentLinksPaymentLink(paymentLink: String!, input: StripePostPaymentLinksPaymentLinkInput): StripePaymentLink
	postPaymentMethods(input: StripePostPaymentMethodsInput): StripePaymentMethod
	postPaymentMethodsPaymentMethod(paymentMethod: String!, input: StripePostPaymentMethodsPaymentMethodInput): StripePaymentMethod
	postPaymentMethodsPaymentMethodAttach(paymentMethod: String!, input: StripePostPaymentMethodsPaymentMethodAttachInput!): StripePaymentMethod
	postPaymentMethodsPaymentMethodDetach(paymentMethod: String!, input: StripePostPaymentMethodsPaymentMethodDetachInput): StripePaymentMethod
	postPayouts(input: StripePostPayoutsInput!): StripePayout
	postPayoutsPayout(payout: String!, input: StripePostPayoutsPayoutInput): StripePayout
	postPayoutsPayoutCancel(payout: String!, input: StripePostPayoutsPayoutCancelInput): StripePayout
	postPayoutsPayoutReverse(payout: String!, input: StripePostPayoutsPayoutReverseInput): StripePayout
	postPlans(input: StripePostPlansInput!): StripePlan
	postPlansPlan(plan: String!, input: StripePostPlansPlanInput): StripePlan
	deletePlansPlan(plan: String!): StripeDeletedPlan
	postPrices(input: StripePostPricesInput!): StripePrice
	postPricesPrice(price: String!, input: StripePostPricesPriceInput): StripePrice
	postProducts(input: StripePostProductsInput!): StripeProduct
	postProductsId(id: String!, input: StripePostProductsIdInput): StripeProduct
	deleteProductsId(id: String!): StripeDeletedProduct
	postPromotionCodes(input: StripePostPromotionCodesInput!): StripePromotionCode
	postPromotionCodesPromotionCode(promotionCode: String!, input: StripePostPromotionCodesPromotionCodeInput): StripePromotionCode
	postQuotes(input: StripePostQuotesInput): StripeQuote
	postQuotesQuote(quote: String!, input: StripePostQuotesQuoteInput): StripeQuote
	postQuotesQuoteAccept(quote: String!, input: StripePostQuotesQuoteAcceptInput): StripeQuote
	postQuotesQuoteCancel(quote: String!, input: StripePostQuotesQuoteCancelInput): StripeQuote
	postQuotesQuoteFinalize(quote: String!, input: StripePostQuotesQuoteFinalizeInput): StripeQuote
	postRadarValueListItems(input: StripePostRadarValueListItemsInput!): StripeRadarValueListItem
	deleteRadarValueListItemsItem(item: String!): StripeDeletedRadarValueListItem
	postRadarValueLists(input: StripePostRadarValueListsInput!): StripeRadarValueList
	postRadarValueListsValueList(valueList: String!, input: StripePostRadarValueListsValueListInput): StripeRadarValueList
	deleteRadarValueListsValueList(valueList: String!): StripeDeletedRadarValueList
	postRefunds(input: StripePostRefundsInput): StripeRefund
	postRefundsRefund(refund: String!, input: StripePostRefundsRefundInput): StripeRefund
	postRefundsRefundCancel(refund: String!, input: StripePostRefundsRefundCancelInput): StripeRefund
	postReportingReportRuns(input: StripePostReportingReportRunsInput!): StripeReportingReportRun
	postReviewsReviewApprove(review: String!, input: StripePostReviewsReviewApproveInput): StripeReview
	postSetupIntents(input: StripePostSetupIntentsInput): StripeSetupIntent
	postSetupIntentsIntent(intent: String!, input: StripePostSetupIntentsIntentInput): StripeSetupIntent
	postSetupIntentsIntentCancel(intent: String!, input: StripePostSetupIntentsIntentCancelInput): StripeSetupIntent
	postSetupIntentsIntentConfirm(intent: String!, input: StripePostSetupIntentsIntentConfirmInput): StripeSetupIntent
	postSetupIntentsIntentVerifyMicrodeposits(intent: String!, input: StripePostSetupIntentsIntentVerifyMicrodepositsInput): StripeSetupIntent
	postShippingRates(input: StripePostShippingRatesInput!): StripeShippingRate
	postShippingRatesShippingRateToken(shippingRateToken: String!, input: StripePostShippingRatesShippingRateTokenInput): StripeShippingRate
	postSources(input: StripePostSourcesInput): StripeSource
	postSourcesSource(source: String!, input: StripePostSourcesSourceInput): StripeSource
	postSourcesSourceVerify(source: String!, input: StripePostSourcesSourceVerifyInput!): StripeSource
	postSubscriptionItems(input: StripePostSubscriptionItemsInput!): StripeSubscriptionItem
	postSubscriptionItemsItem(item: String!, input: StripePostSubscriptionItemsItemInput): StripeSubscriptionItem
	deleteSubscriptionItemsItem(item: String!, input: StripeDeleteSubscriptionItemsItemInput): StripeDeletedSubscriptionItem
	postSubscriptionItemsSubscriptionItemUsageRecords(subscriptionItem: String!, input: StripePostSubscriptionItemsSubscriptionItemUsageRecordsInput!): StripeUsageRecord
	postSubscriptionSchedules(input: StripePostSubscriptionSchedulesInput): StripeSubscriptionSchedule
	postSubscriptionSchedulesSchedule(schedule: String!, input: StripePostSubscriptionSchedulesScheduleInput): StripeSubscriptionSchedule
	postSubscriptionSchedulesScheduleCancel(schedule: String!, input: StripePostSubscriptionSchedulesScheduleCancelInput): StripeSubscriptionSchedule
	postSubscriptionSchedulesScheduleRelease(schedule: String!, input: StripePostSubscriptionSchedulesScheduleReleaseInput): StripeSubscriptionSchedule
	postSubscriptions(input: StripePostSubscriptionsInput!): StripeSubscription
	postSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, input: StripePostSubscriptionsSubscriptionExposedIdInput): StripeSubscription
	deleteSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, input: StripeDeleteSubscriptionsSubscriptionExposedIdInput): StripeSubscription
	deleteSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!): StripeDeletedDiscount
	postSubscriptionsSubscriptionResume(subscription: String!, input: StripePostSubscriptionsSubscriptionResumeInput): StripeSubscription
	postTaxRates(input: StripePostTaxRatesInput!): StripeTaxRate
	postTaxRatesTaxRate(taxRate: String!, input: StripePostTaxRatesTaxRateInput): StripeTaxRate
	postTerminalConfigurations(input: StripePostTerminalConfigurationsInput): StripeTerminalConfiguration
	postTerminalConfigurationsConfiguration(configuration: String!, input: StripePostTerminalConfigurationsConfigurationInput): StripeDeletedTerminalConfigurationOrTerminalConfigurationUnion
	deleteTerminalConfigurationsConfiguration(configuration: String!): StripeDeletedTerminalConfiguration
	postTerminalConnectionTokens(input: StripePostTerminalConnectionTokensInput): StripeTerminalConnectionToken
	postTerminalLocations(input: StripePostTerminalLocationsInput!): StripeTerminalLocation
	postTerminalLocationsLocation(location: String!, input: StripePostTerminalLocationsLocationInput): StripeDeletedTerminalLocationOrTerminalLocationUnion
	deleteTerminalLocationsLocation(location: String!): StripeDeletedTerminalLocation
	postTerminalReaders(input: StripePostTerminalReadersInput!): StripeTerminalReader
	postTerminalReadersReader(reader: String!, input: StripePostTerminalReadersReaderInput): StripeDeletedTerminalReaderOrTerminalReaderUnion
	deleteTerminalReadersReader(reader: String!): StripeDeletedTerminalReader
	postTerminalReadersReaderCancelAction(reader: String!, input: StripePostTerminalReadersReaderCancelActionInput): StripeTerminalReader
	postTerminalReadersReaderProcessPaymentIntent(reader: String!, input: StripePostTerminalReadersReaderProcessPaymentIntentInput!): StripeTerminalReader
	postTerminalReadersReaderProcessSetupIntent(reader: String!, input: StripePostTerminalReadersReaderProcessSetupIntentInput!): StripeTerminalReader
	postTerminalReadersReaderSetReaderDisplay(reader: String!, input: StripePostTerminalReadersReaderSetReaderDisplayInput!): StripeTerminalReader
	postTestHelpersCustomersCustomerFundCashBalance(customer: String!, input: StripePostTestHelpersCustomersCustomerFundCashBalanceInput!): StripeCustomerCashBalanceTransaction
	postTestHelpersIssuingCardsCardShippingDeliver(card: String!, input: StripePostTestHelpersIssuingCardsCardShippingDeliverInput): StripeIssuingCard
	postTestHelpersIssuingCardsCardShippingFail(card: String!, input: StripePostTestHelpersIssuingCardsCardShippingFailInput): StripeIssuingCard
	postTestHelpersIssuingCardsCardShippingReturn(card: String!, input: StripePostTestHelpersIssuingCardsCardShippingReturnInput): StripeIssuingCard
	postTestHelpersIssuingCardsCardShippingShip(card: String!, input: StripePostTestHelpersIssuingCardsCardShippingShipInput): StripeIssuingCard
	postTestHelpersRefundsRefundExpire(refund: String!, input: StripePostTestHelpersRefundsRefundExpireInput): StripeRefund
	postTestHelpersTerminalReadersReaderPresentPaymentMethod(reader: String!, input: StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodInput): StripeTerminalReader
	postTestHelpersTestClocks(input: StripePostTestHelpersTestClocksInput!): StripeTestHelpersTestClock
	deleteTestHelpersTestClocksTestClock(testClock: String!): StripeDeletedTestHelpersTestClock
	postTestHelpersTestClocksTestClockAdvance(testClock: String!, input: StripePostTestHelpersTestClocksTestClockAdvanceInput!): StripeTestHelpersTestClock
	postTestHelpersTreasuryInboundTransfersIdFail(id: String!, input: StripePostTestHelpersTreasuryInboundTransfersIdFailInput): StripeTreasuryInboundTransfer
	postTestHelpersTreasuryInboundTransfersIdReturn(id: String!, input: StripePostTestHelpersTreasuryInboundTransfersIdReturnInput): StripeTreasuryInboundTransfer
	postTestHelpersTreasuryInboundTransfersIdSucceed(id: String!, input: StripePostTestHelpersTreasuryInboundTransfersIdSucceedInput): StripeTreasuryInboundTransfer
	postTestHelpersTreasuryOutboundPaymentsIdFail(id: String!, input: StripePostTestHelpersTreasuryOutboundPaymentsIdFailInput): StripeTreasuryOutboundPayment
	postTestHelpersTreasuryOutboundPaymentsIdPost(id: String!, input: StripePostTestHelpersTreasuryOutboundPaymentsIdPostInput): StripeTreasuryOutboundPayment
	postTestHelpersTreasuryOutboundPaymentsIdReturn(id: String!, input: StripePostTestHelpersTreasuryOutboundPaymentsIdReturnInput): StripeTreasuryOutboundPayment
	postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(outboundTransfer: String!, input: StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferFailInput): StripeTreasuryOutboundTransfer
	postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(outboundTransfer: String!, input: StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferPostInput): StripeTreasuryOutboundTransfer
	postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(outboundTransfer: String!, input: StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnInput): StripeTreasuryOutboundTransfer
	postTestHelpersTreasuryReceivedCredits(input: StripePostTestHelpersTreasuryReceivedCreditsInput!): StripeTreasuryReceivedCredit
	postTestHelpersTreasuryReceivedDebits(input: StripePostTestHelpersTreasuryReceivedDebitsInput!): StripeTreasuryReceivedDebit
	postTokens(input: StripePostTokensInput): StripeToken
	postTopups(input: StripePostTopupsInput!): StripeTopup
	postTopupsTopup(topup: String!, input: StripePostTopupsTopupInput): StripeTopup
	postTopupsTopupCancel(topup: String!, input: StripePostTopupsTopupCancelInput): StripeTopup
	postTransfers(input: StripePostTransfersInput!): StripeTransfer
	postTransfersIdReversals(id: String!, input: StripePostTransfersIdReversalsInput): StripeTransferReversal
	postTransfersTransfer(transfer: String!, input: StripePostTransfersTransferInput): StripeTransfer
	postTransfersTransferReversalsId(transfer: String!, id: String!, input: StripePostTransfersTransferReversalsIdInput): StripeTransferReversal
	postTreasuryCreditReversals(input: StripePostTreasuryCreditReversalsInput!): StripeTreasuryCreditReversal
	postTreasuryDebitReversals(input: StripePostTreasuryDebitReversalsInput!): StripeTreasuryDebitReversal
	postTreasuryFinancialAccounts(input: StripePostTreasuryFinancialAccountsInput!): StripeTreasuryFinancialAccount
	postTreasuryFinancialAccountsFinancialAccount(financialAccount: String!, input: StripePostTreasuryFinancialAccountsFinancialAccountInput): StripeTreasuryFinancialAccount
	postTreasuryFinancialAccountsFinancialAccountFeatures(financialAccount: String!, input: StripePostTreasuryFinancialAccountsFinancialAccountFeaturesInput): StripeTreasuryFinancialAccountFeatures
	postTreasuryInboundTransfers(input: StripePostTreasuryInboundTransfersInput!): StripeTreasuryInboundTransfer
	postTreasuryInboundTransfersInboundTransferCancel(inboundTransfer: String!, input: StripePostTreasuryInboundTransfersInboundTransferCancelInput): StripeTreasuryInboundTransfer
	postTreasuryOutboundPayments(input: StripePostTreasuryOutboundPaymentsInput!): StripeTreasuryOutboundPayment
	postTreasuryOutboundPaymentsIdCancel(id: String!, input: StripePostTreasuryOutboundPaymentsIdCancelInput): StripeTreasuryOutboundPayment
	postTreasuryOutboundTransfers(input: StripePostTreasuryOutboundTransfersInput!): StripeTreasuryOutboundTransfer
	postTreasuryOutboundTransfersOutboundTransferCancel(outboundTransfer: String!, input: StripePostTreasuryOutboundTransfersOutboundTransferCancelInput): StripeTreasuryOutboundTransfer
	postWebhookEndpoints(input: StripePostWebhookEndpointsInput!): StripeWebhookEndpoint
	postWebhookEndpointsWebhookEndpoint(webhookEndpoint: String!, input: StripePostWebhookEndpointsWebhookEndpointInput): StripeWebhookEndpoint
	deleteWebhookEndpointsWebhookEndpoint(webhookEndpoint: String!): StripeDeletedWebhookEndpoint
}
type StripeNetworks {
	preferred: String
	available: [String!]!
}
type StripeNotificationEventData {
	previousAttributes: JSON
	object: JSON!
}
type StripeNotificationEventRequest {
	idempotencyKey: String
	id: String
}
type StripeOnlineAcceptance {
	userAgent: String
	ipAddress: String
}
type StripeOutboundPaymentsPaymentMethodDetails {
	usBankAccount: StripeOutboundPaymentsPaymentMethodDetailsUsBankAccount
	type: StripeOutboundPaymentsPaymentMethodDetailsType!
	financialAccount: StripeOutboundPaymentsPaymentMethodDetailsFinancialAccount
	billingDetails: StripeTreasurySharedResourceBillingDetails!
}
type StripeOutboundPaymentsPaymentMethodDetailsFinancialAccount {
	network: StripeOutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork!
	id: String!
}
enum StripeOutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork {
	STRIPE
}
enum StripeOutboundPaymentsPaymentMethodDetailsType {
	FINANCIAL_ACCOUNT
	US_BANK_ACCOUNT
}
type StripeOutboundPaymentsPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
enum StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork {
	ACH
	US_DOMESTIC_WIRE
}
type StripeOutboundTransfersPaymentMethodDetails {
	usBankAccount: StripeOutboundTransfersPaymentMethodDetailsUsBankAccount
	type: StripeOutboundTransfersPaymentMethodDetailsType!
	billingDetails: StripeTreasurySharedResourceBillingDetails!
}
enum StripeOutboundTransfersPaymentMethodDetailsType {
	US_BANK_ACCOUNT
}
type StripeOutboundTransfersPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	network: StripeOutboundTransfersPaymentMethodDetailsUsBankAccountNetwork!
	last4: String
	fingerprint: String
	bankName: String
	accountType: StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType
}
enum StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
enum StripeOutboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
	ACH
	US_DOMESTIC_WIRE
}
type StripePackageDimensions {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
type StripePaymentFlowsAmountDetails {
	tip: StripePaymentFlowsAmountDetailsResourceTip
}
type StripePaymentFlowsAmountDetailsResourceTip {
	amount: Int
}
type StripePaymentFlowsAutomaticPaymentMethodsPaymentIntent {
	enabled: Boolean!
}
type StripePaymentFlowsInstallmentOptions {
	plan: StripePaymentMethodDetailsCardInstallmentsPlan
	enabled: Boolean!
}
type StripePaymentFlowsPrivatePaymentMethodsAlipayDetails {
	transactionId: String
	fingerprint: String
	buyerId: String
}
type StripePaymentFlowsPrivatePaymentMethodsKlarnaDob {
	year: Int
	month: Int
	day: Int
}
type StripePaymentIntent {
	transferGroup: String
	transferData: StripeTransferData
	status: StripePaymentIntentStatus!
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: StripeShipping
	setupFutureUsage: StripePaymentIntentSetupFutureUsage
	review: StripeStringOrReviewUnion
	receiptEmail: String
	processing: StripePaymentIntentProcessing
	paymentMethodTypes: [String!]!
	paymentMethodOptions: StripePaymentIntentPaymentMethodOptions
	paymentMethod: StripeStringOrPaymentMethodUnion
	onBehalfOf: StripeStringOrAccountUnion
	object: StripePaymentIntentObject!
	nextAction: StripePaymentIntentNextAction
	metadata: JSON
	livemode: Boolean!
	latestCharge: StripeStringOrChargeUnion
	lastPaymentError: StripeApiErrors
	invoice: StripeStringOrInvoiceUnion
	id: String!
	description: String
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	currency: String!
	created: Int!
	confirmationMethod: StripePaymentIntentConfirmationMethod!
	clientSecret: String
	captureMethod: StripePaymentIntentCaptureMethod!
	cancellationReason: StripePaymentIntentCancellationReason
	canceledAt: Int
	automaticPaymentMethods: StripePaymentFlowsAutomaticPaymentMethodsPaymentIntent
	applicationFeeAmount: Int
	application: StripeStringOrApplicationUnion
	amountReceived: Int
	amountDetails: StripePaymentFlowsAmountDetails
	amountCapturable: Int
	amount: Int!
}
enum StripePaymentIntentCancellationReason {
	ABANDONED
	AUTOMATIC
	DUPLICATE
	FAILED_INVOICE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
	VOID_INVOICE
}
enum StripePaymentIntentCaptureMethod {
	AUTOMATIC
	MANUAL
}
type StripePaymentIntentCardProcessing {
	customerNotification: StripePaymentIntentProcessingCustomerNotification
}
enum StripePaymentIntentConfirmationMethod {
	AUTOMATIC
	MANUAL
}
type StripePaymentIntentNextAction {
	wechatPayRedirectToIosApp: StripePaymentIntentNextActionWechatPayRedirectToIosApp
	wechatPayRedirectToAndroidApp: StripePaymentIntentNextActionWechatPayRedirectToAndroidApp
	wechatPayDisplayQrCode: StripePaymentIntentNextActionWechatPayDisplayQrCode
	verifyWithMicrodeposits: StripePaymentIntentNextActionVerifyWithMicrodeposits
	useStripeSdk: JSON
	type: String!
	redirectToUrl: StripePaymentIntentNextActionRedirectToUrl
	promptpayDisplayQrCode: StripePaymentIntentNextActionPromptpayDisplayQrCode
	pixDisplayQrCode: StripePaymentIntentNextActionPixDisplayQrCode
	paynowDisplayQrCode: StripePaymentIntentNextActionPaynowDisplayQrCode
	oxxoDisplayDetails: StripePaymentIntentNextActionDisplayOxxoDetails
	konbiniDisplayDetails: StripePaymentIntentNextActionKonbini
	displayBankTransferInstructions: StripePaymentIntentNextActionDisplayBankTransferInstructions
	cardAwaitNotification: StripePaymentIntentNextActionCardAwaitNotification
	boletoDisplayDetails: StripePaymentIntentNextActionBoleto
	alipayHandleRedirect: StripePaymentIntentNextActionAlipayHandleRedirect
}
type StripePaymentIntentNextActionAlipayHandleRedirect {
	url: String
	returnUrl: String
	nativeUrl: String
	nativeData: String
}
type StripePaymentIntentNextActionBoleto {
	pdf: String
	number: String
	hostedVoucherUrl: String
	expiresAt: Int
}
type StripePaymentIntentNextActionCardAwaitNotification {
	customerApprovalRequired: Boolean
	chargeAttemptAt: Int
}
type StripePaymentIntentNextActionDisplayBankTransferInstructions {
	type: StripePaymentIntentNextActionDisplayBankTransferInstructionsType!
	reference: String
	hostedInstructionsUrl: String
	financialAddresses: [StripeFundingInstructionsBankTransferFinancialAddress!]
	currency: String
	amountRemaining: Int
}
enum StripePaymentIntentNextActionDisplayBankTransferInstructionsType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type StripePaymentIntentNextActionDisplayOxxoDetails {
	number: String
	hostedVoucherUrl: String
	expiresAfter: Int
}
type StripePaymentIntentNextActionKonbini {
	stores: StripePaymentIntentNextActionKonbiniStores!
	hostedVoucherUrl: String
	expiresAt: Int!
}
type StripePaymentIntentNextActionKonbiniFamilymart {
	paymentCode: String!
	confirmationNumber: String
}
type StripePaymentIntentNextActionKonbiniLawson {
	paymentCode: String!
	confirmationNumber: String
}
type StripePaymentIntentNextActionKonbiniMinistop {
	paymentCode: String!
	confirmationNumber: String
}
type StripePaymentIntentNextActionKonbiniSeicomart {
	paymentCode: String!
	confirmationNumber: String
}
type StripePaymentIntentNextActionKonbiniStores {
	seicomart: StripePaymentIntentNextActionKonbiniSeicomart
	ministop: StripePaymentIntentNextActionKonbiniMinistop
	lawson: StripePaymentIntentNextActionKonbiniLawson
	familymart: StripePaymentIntentNextActionKonbiniFamilymart
}
type StripePaymentIntentNextActionPaynowDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String
	data: String!
}
type StripePaymentIntentNextActionPixDisplayQrCode {
	imageUrlSvg: String
	imageUrlPng: String
	hostedInstructionsUrl: String
	expiresAt: Int
	data: String
}
type StripePaymentIntentNextActionPromptpayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	hostedInstructionsUrl: String!
	data: String!
}
type StripePaymentIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
type StripePaymentIntentNextActionVerifyWithMicrodeposits {
	microdepositType: StripePaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
enum StripePaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType {
	AMOUNTS
	DESCRIPTOR_CODE
}
type StripePaymentIntentNextActionWechatPayDisplayQrCode {
	imageUrlSvg: String!
	imageUrlPng: String!
	imageDataUrl: String!
	hostedInstructionsUrl: String!
	data: String!
}
type StripePaymentIntentNextActionWechatPayRedirectToAndroidApp {
	timestamp: String!
	sign: String!
	prepayId: String!
	partnerId: String!
	package: String!
	nonceStr: String!
	appId: String!
}
type StripePaymentIntentNextActionWechatPayRedirectToIosApp {
	nativeUrl: String!
}
enum StripePaymentIntentObject {
	PAYMENT_INTENT
}
type StripePaymentIntentPaymentMethodOptions {
	wechatPay: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion
	usBankAccount: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion
	sofort: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion
	sepaDebit: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion
	promptpay: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion
	pix: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion
	paynow: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion
	p24: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union
	oxxo: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion
	link: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion
	konbini: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion
	klarna: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion
	interacPresent: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientUnion
	ideal: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion
	grabpay: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion
	giropay: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion
	fpx: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion
	eps: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion
	customerBalance: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion
	cardPresent: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion
	card: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion
	boleto: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion
	blik: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientUnion
	bancontact: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion
	bacsDebit: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion
	auBecsDebit: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion
	alipay: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion
	afterpayClearpay: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion
	affirm: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion
	acssDebit: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion
}
type StripePaymentIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: StripePaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage
	mandateOptions: StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit
}
enum StripePaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripePaymentIntentPaymentMethodOptionsAuBecsDebit {
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage
}
enum StripePaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripePaymentIntentPaymentMethodOptionsCard {
	statementDescriptorSuffixKanji: String
	statementDescriptorSuffixKana: String
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsCardSetupFutureUsage
	requestThreeDSecure: StripePaymentIntentPaymentMethodOptionsCardRequestThreeDSecure
	network: StripePaymentIntentPaymentMethodOptionsCardNetwork
	mandateOptions: StripePaymentMethodOptionsCardMandateOptions
	installments: StripePaymentMethodOptionsCardInstallments
	captureMethod: StripePaymentIntentPaymentMethodOptionsCardCaptureMethod
}
enum StripePaymentIntentPaymentMethodOptionsCardCaptureMethod {
	MANUAL
}
enum StripePaymentIntentPaymentMethodOptionsCardNetwork {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum StripePaymentIntentPaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
	CHALLENGE_ONLY
}
enum StripePaymentIntentPaymentMethodOptionsCardSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripePaymentIntentPaymentMethodOptionsEps {
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsEpsSetupFutureUsage
}
enum StripePaymentIntentPaymentMethodOptionsEpsSetupFutureUsage {
	NONE
}
type StripePaymentIntentPaymentMethodOptionsLink {
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsLinkSetupFutureUsage
	persistentToken: String
	captureMethod: StripePaymentIntentPaymentMethodOptionsLinkCaptureMethod
}
enum StripePaymentIntentPaymentMethodOptionsLinkCaptureMethod {
	MANUAL
}
enum StripePaymentIntentPaymentMethodOptionsLinkSetupFutureUsage {
	NONE
	OFF_SESSION
}
type StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType
	paymentSchedule: StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule
	intervalDescription: String
	customMandateUrl: String
}
enum StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
	BUSINESS
	PERSONAL
}
type StripePaymentIntentPaymentMethodOptionsSepaDebit {
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage
	mandateOptions: JSON
}
enum StripePaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripePaymentIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: StripePaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod
	setupFutureUsage: StripePaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage
	financialConnections: StripeLinkedAccountOptionsUsBankAccount
}
enum StripePaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripePaymentIntentProcessing {
	type: StripePaymentIntentProcessingType!
	card: StripePaymentIntentCardProcessing
}
type StripePaymentIntentProcessingCustomerNotification {
	completesAt: Int
	approvalRequested: Boolean
}
enum StripePaymentIntentProcessingType {
	CARD
}
enum StripePaymentIntentSetupFutureUsage {
	OFF_SESSION
	ON_SESSION
}
enum StripePaymentIntentStatus {
	CANCELED
	PROCESSING
	REQUIRES_ACTION
	REQUIRES_CAPTURE
	REQUIRES_CONFIRMATION
	REQUIRES_PAYMENT_METHOD
	SUCCEEDED
}
type StripePaymentIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod
	setupFutureUsage: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage
	installments: StripePaymentFlowsInstallmentOptions
	captureMethod: StripePaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod
}
enum StripePaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod {
	MANUAL
	MANUAL_PREFERRED
}
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsAcssDebit
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsAuBecsDebit
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsCard
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsEps
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsLink
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsSepaDebit
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentIntentPaymentMethodOptionsUsBankAccount
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsAffirm
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsAfterpayClearpay
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsAlipay
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsBacsDebit
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsBancontact
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsBoleto
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsCardPresent
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsCustomerBalance
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsFpx
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsGiropay
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsGrabpay
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsIdeal
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsKlarna
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsKonbini
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsOxxo
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsP24
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPaynow
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPix
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPromptpay
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsSofort
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsWechatPay
enum StripePaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
union StripePaymentIntentTypeSpecificPaymentMethodOptionsClientUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient
enum StripePaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripePaymentLink {
	url: String!
	transferData: StripePaymentLinksResourceTransferData
	taxIdCollection: StripePaymentLinksResourceTaxIdCollection!
	subscriptionData: StripePaymentLinksResourceSubscriptionData
	submitType: StripePaymentLinkSubmitType!
	shippingOptions: [StripePaymentLinksResourceShippingOption!]!
	shippingAddressCollection: StripePaymentLinksResourceShippingAddressCollection
	phoneNumberCollection: StripePaymentLinksResourcePhoneNumberCollection!
	paymentMethodTypes: [StripePaymentLinkPaymentMethodTypes!]
	paymentMethodCollection: StripePaymentLinkPaymentMethodCollection!
	paymentIntentData: StripePaymentLinksResourcePaymentIntentData
	onBehalfOf: StripeStringOrAccountUnion
	object: StripePaymentLinkObject!
	metadata: JSON!
	livemode: Boolean!
	lineItems: StripePaymentLinkLineItems
	invoiceCreation: StripePaymentLinksResourceInvoiceCreation
	id: String!
	customerCreation: StripePaymentLinkCustomerCreation!
	customText: StripePaymentLinksResourceCustomText!
	currency: String!
	consentCollection: StripePaymentLinksResourceConsentCollection
	billingAddressCollection: StripePaymentLinkBillingAddressCollection!
	automaticTax: StripePaymentLinksResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	allowPromotionCodes: Boolean!
	afterCompletion: StripePaymentLinksResourceAfterCompletion!
	active: Boolean!
}
enum StripePaymentLinkBillingAddressCollection {
	AUTO
	REQUIRED
}
enum StripePaymentLinkCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
type StripePaymentLinkLineItems {
	url: String!
	object: StripePaymentLinkObjectLineItems!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripePaymentLinkObject {
	PAYMENT_LINK
}
enum StripePaymentLinkObjectLineItems {
	LIST
}
enum StripePaymentLinkPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
enum StripePaymentLinkPaymentMethodTypes {
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum StripePaymentLinkSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
type StripePaymentLinksResourceAfterCompletion {
	type: StripePaymentLinksResourceAfterCompletionType!
	redirect: StripePaymentLinksResourceCompletionBehaviorRedirect
	hostedConfirmation: StripePaymentLinksResourceCompletionBehaviorConfirmationPage
}
enum StripePaymentLinksResourceAfterCompletionType {
	HOSTED_CONFIRMATION
	REDIRECT
}
type StripePaymentLinksResourceAutomaticTax {
	enabled: Boolean!
}
type StripePaymentLinksResourceCompletionBehaviorConfirmationPage {
	customMessage: String
}
type StripePaymentLinksResourceCompletionBehaviorRedirect {
	url: String!
}
type StripePaymentLinksResourceConsentCollection {
	termsOfService: StripePaymentLinksResourceConsentCollectionTermsOfService
	promotions: StripePaymentLinksResourceConsentCollectionPromotions
}
enum StripePaymentLinksResourceConsentCollectionPromotions {
	AUTO
	NONE
}
enum StripePaymentLinksResourceConsentCollectionTermsOfService {
	NONE
	REQUIRED
}
type StripePaymentLinksResourceCustomText {
	submit: StripePaymentLinksResourceCustomTextPosition
	shippingAddress: StripePaymentLinksResourceCustomTextPosition
}
type StripePaymentLinksResourceCustomTextPosition {
	message: String!
}
type StripePaymentLinksResourceInvoiceCreation {
	invoiceData: StripePaymentLinksResourceInvoiceSettings
	enabled: Boolean!
}
type StripePaymentLinksResourceInvoiceSettings {
	renderingOptions: StripeInvoiceSettingRenderingOptions
	metadata: JSON
	footer: String
	description: String
	customFields: [StripeInvoiceSettingCustomField!]
	accountTaxIds: [StripeStringOrDeletedTaxIdOrTaxIdUnion!]
}
type StripePaymentLinksResourcePaymentIntentData {
	setupFutureUsage: StripePaymentLinksResourcePaymentIntentDataSetupFutureUsage
	captureMethod: StripePaymentLinksResourcePaymentIntentDataCaptureMethod
}
enum StripePaymentLinksResourcePaymentIntentDataCaptureMethod {
	AUTOMATIC
	MANUAL
}
enum StripePaymentLinksResourcePaymentIntentDataSetupFutureUsage {
	OFF_SESSION
	ON_SESSION
}
type StripePaymentLinksResourcePhoneNumberCollection {
	enabled: Boolean!
}
type StripePaymentLinksResourceShippingAddressCollection {
	allowedCountries: [StripePaymentLinksResourceShippingAddressCollectionAllowedCountries!]!
}
enum StripePaymentLinksResourceShippingAddressCollectionAllowedCountries {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
type StripePaymentLinksResourceShippingOption {
	shippingRate: StripeStringOrShippingRateUnion!
	shippingAmount: Int!
}
type StripePaymentLinksResourceSubscriptionData {
	trialPeriodDays: Int
	description: String
}
type StripePaymentLinksResourceTaxIdCollection {
	enabled: Boolean!
}
type StripePaymentLinksResourceTransferData {
	destination: StripeStringOrAccountUnion!
	amount: Int
}
type StripePaymentMethod {
	wechatPay: JSON
	usBankAccount: StripePaymentMethodUsBankAccount
	type: StripePaymentMethodType!
	sofort: StripePaymentMethodSofort
	sepaDebit: StripePaymentMethodSepaDebit
	radarOptions: StripeRadarRadarOptions
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePaymentMethodP24
	oxxo: JSON
	object: StripePaymentMethodObject!
	metadata: JSON
	livemode: Boolean!
	link: StripePaymentMethodLink
	konbini: JSON
	klarna: StripePaymentMethodKlarna
	interacPresent: JSON
	ideal: StripePaymentMethodIdeal
	id: String!
	grabpay: JSON
	giropay: JSON
	fpx: StripePaymentMethodFpx
	eps: StripePaymentMethodEps
	customerBalance: JSON
	customer: StripeStringOrCustomerUnion
	created: Int!
	cardPresent: JSON
	card: StripePaymentMethodCard
	boleto: StripePaymentMethodBoleto
	blik: JSON
	billingDetails: StripeBillingDetails!
	bancontact: JSON
	bacsDebit: StripePaymentMethodBacsDebit
	auBecsDebit: StripePaymentMethodAuBecsDebit
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePaymentMethodAcssDebit
}
type StripePaymentMethodAcssDebit {
	transitNumber: String
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type StripePaymentMethodAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type StripePaymentMethodBacsDebit {
	sortCode: String
	last4: String
	fingerprint: String
}
type StripePaymentMethodBoleto {
	taxId: String!
}
type StripePaymentMethodCard {
	wallet: StripePaymentMethodCardWallet
	threeDSecureUsage: StripeThreeDSecureUsage
	networks: StripeNetworks
	last4: String!
	generatedFrom: StripePaymentMethodCardGeneratedCard
	funding: String!
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: StripePaymentMethodCardChecks
	brand: String!
}
type StripePaymentMethodCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
type StripePaymentMethodCardGeneratedCard {
	setupAttempt: StripeStringOrSetupAttemptUnion
	paymentMethodDetails: StripeCardGeneratedFromPaymentMethodDetails
	charge: String
}
type StripePaymentMethodCardWallet {
	visaCheckout: StripePaymentMethodCardWalletVisaCheckout
	type: StripePaymentMethodCardWalletType!
	samsungPay: JSON
	masterpass: StripePaymentMethodCardWalletMasterpass
	googlePay: JSON
	dynamicLast4: String
	applePay: JSON
	amexExpressCheckout: JSON
}
type StripePaymentMethodCardWalletMasterpass {
	shippingAddress: StripeAddress
	name: String
	email: String
	billingAddress: StripeAddress
}
enum StripePaymentMethodCardWalletType {
	AMEX_EXPRESS_CHECKOUT
	APPLE_PAY
	GOOGLE_PAY
	MASTERPASS
	SAMSUNG_PAY
	VISA_CHECKOUT
}
type StripePaymentMethodCardWalletVisaCheckout {
	shippingAddress: StripeAddress
	name: String
	email: String
	billingAddress: StripeAddress
}
type StripePaymentMethodDetails {
	wechatPay: StripePaymentMethodDetailsWechatPay
	wechat: JSON
	usBankAccount: StripePaymentMethodDetailsUsBankAccount
	type: String!
	stripeAccount: JSON
	sofort: StripePaymentMethodDetailsSofort
	sepaDebit: StripePaymentMethodDetailsSepaDebit
	promptpay: StripePaymentMethodDetailsPromptpay
	pix: StripePaymentMethodDetailsPix
	paynow: StripePaymentMethodDetailsPaynow
	p24: StripePaymentMethodDetailsP24
	oxxo: StripePaymentMethodDetailsOxxo
	multibanco: StripePaymentMethodDetailsMultibanco
	link: JSON
	konbini: StripePaymentMethodDetailsKonbini
	klarna: StripePaymentMethodDetailsKlarna
	interacPresent: StripePaymentMethodDetailsInteracPresent
	ideal: StripePaymentMethodDetailsIdeal
	grabpay: StripePaymentMethodDetailsGrabpay
	giropay: StripePaymentMethodDetailsGiropay
	fpx: StripePaymentMethodDetailsFpx
	eps: StripePaymentMethodDetailsEps
	customerBalance: JSON
	cardPresent: StripePaymentMethodDetailsCardPresent
	card: StripePaymentMethodDetailsCard
	boleto: StripePaymentMethodDetailsBoleto
	blik: JSON
	bancontact: StripePaymentMethodDetailsBancontact
	bacsDebit: StripePaymentMethodDetailsBacsDebit
	auBecsDebit: StripePaymentMethodDetailsAuBecsDebit
	alipay: StripePaymentFlowsPrivatePaymentMethodsAlipayDetails
	afterpayClearpay: StripePaymentMethodDetailsAfterpayClearpay
	affirm: JSON
	acssDebit: StripePaymentMethodDetailsAcssDebit
	achDebit: StripePaymentMethodDetailsAchDebit
	achCreditTransfer: StripePaymentMethodDetailsAchCreditTransfer
}
type StripePaymentMethodDetailsAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	bankName: String
	accountNumber: String
}
type StripePaymentMethodDetailsAchDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
	accountHolderType: StripePaymentMethodDetailsAchDebitAccountHolderType
}
enum StripePaymentMethodDetailsAchDebitAccountHolderType {
	COMPANY
	INDIVIDUAL
}
type StripePaymentMethodDetailsAcssDebit {
	transitNumber: String
	mandate: String
	last4: String
	institutionNumber: String
	fingerprint: String
	bankName: String
}
type StripePaymentMethodDetailsAfterpayClearpay {
	reference: String
}
type StripePaymentMethodDetailsAuBecsDebit {
	mandate: String
	last4: String
	fingerprint: String
	bsbNumber: String
}
type StripePaymentMethodDetailsBacsDebit {
	sortCode: String
	mandate: String
	last4: String
	fingerprint: String
}
type StripePaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: StripePaymentMethodDetailsBancontactPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: StripeStringOrMandateUnion
	generatedSepaDebit: StripeStringOrPaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum StripePaymentMethodDetailsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
type StripePaymentMethodDetailsBoleto {
	taxId: String!
}
type StripePaymentMethodDetailsCard {
	wallet: StripePaymentMethodDetailsCardWallet
	threeDSecure: StripeThreeDSecureDetails
	network: String
	mandate: String
	last4: String
	installments: StripePaymentMethodDetailsCardInstallments
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	country: String
	checks: StripePaymentMethodDetailsCardChecks
	brand: String
}
type StripePaymentMethodDetailsCardChecks {
	cvcCheck: String
	addressPostalCodeCheck: String
	addressLine1Check: String
}
type StripePaymentMethodDetailsCardInstallments {
	plan: StripePaymentMethodDetailsCardInstallmentsPlan
}
type StripePaymentMethodDetailsCardInstallmentsPlan {
	type: StripePaymentMethodDetailsCardInstallmentsPlanType!
	interval: StripePaymentMethodDetailsCardInstallmentsPlanInterval
	count: Int
}
enum StripePaymentMethodDetailsCardInstallmentsPlanInterval {
	MONTH
}
enum StripePaymentMethodDetailsCardInstallmentsPlanType {
	FIXED_COUNT
}
type StripePaymentMethodDetailsCardPresent {
	receipt: StripePaymentMethodDetailsCardPresentReceipt
	readMethod: StripePaymentMethodDetailsCardPresentReadMethod
	overcaptureSupported: Boolean!
	network: String
	last4: String
	incrementalAuthorizationSupported: Boolean!
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	captureBefore: Int
	brand: String
	amountAuthorized: Int
}
enum StripePaymentMethodDetailsCardPresentReadMethod {
	CONTACT_EMV
	CONTACTLESS_EMV
	CONTACTLESS_MAGSTRIPE_MODE
	MAGNETIC_STRIPE_FALLBACK
	MAGNETIC_STRIPE_TRACK_2
}
type StripePaymentMethodDetailsCardPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: StripePaymentMethodDetailsCardPresentReceiptAccountType
}
enum StripePaymentMethodDetailsCardPresentReceiptAccountType {
	CHECKING
	CREDIT
	PREPAID
	UNKNOWN
}
type StripePaymentMethodDetailsCardWallet {
	visaCheckout: StripePaymentMethodDetailsCardWalletVisaCheckout
	type: StripePaymentMethodDetailsCardWalletType!
	samsungPay: JSON
	masterpass: StripePaymentMethodDetailsCardWalletMasterpass
	googlePay: JSON
	dynamicLast4: String
	applePay: JSON
	amexExpressCheckout: JSON
}
type StripePaymentMethodDetailsCardWalletMasterpass {
	shippingAddress: StripeAddress
	name: String
	email: String
	billingAddress: StripeAddress
}
enum StripePaymentMethodDetailsCardWalletType {
	AMEX_EXPRESS_CHECKOUT
	APPLE_PAY
	GOOGLE_PAY
	MASTERPASS
	SAMSUNG_PAY
	VISA_CHECKOUT
}
type StripePaymentMethodDetailsCardWalletVisaCheckout {
	shippingAddress: StripeAddress
	name: String
	email: String
	billingAddress: StripeAddress
}
type StripePaymentMethodDetailsEps {
	verifiedName: String
	bank: StripePaymentMethodDetailsEpsBank
}
enum StripePaymentMethodDetailsEpsBank {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
type StripePaymentMethodDetailsFpx {
	transactionId: String
	bank: StripePaymentMethodDetailsFpxBank!
}
enum StripePaymentMethodDetailsFpxBank {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
type StripePaymentMethodDetailsGiropay {
	verifiedName: String
	bic: String
	bankName: String
	bankCode: String
}
type StripePaymentMethodDetailsGrabpay {
	transactionId: String
}
type StripePaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: StripeStringOrMandateUnion
	generatedSepaDebit: StripeStringOrPaymentMethodUnion
	bic: StripePaymentMethodDetailsIdealBic
	bank: StripePaymentMethodDetailsIdealBank
}
enum StripePaymentMethodDetailsIdealBank {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePaymentMethodDetailsIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type StripePaymentMethodDetailsInteracPresent {
	receipt: StripePaymentMethodDetailsInteracPresentReceipt
	readMethod: StripePaymentMethodDetailsInteracPresentReadMethod
	preferredLocales: [String!]
	network: String
	last4: String
	generatedCard: String
	funding: String
	fingerprint: String
	expYear: Int!
	expMonth: Int!
	emvAuthData: String
	country: String
	cardholderName: String
	brand: String
}
enum StripePaymentMethodDetailsInteracPresentReadMethod {
	CONTACT_EMV
	CONTACTLESS_EMV
	CONTACTLESS_MAGSTRIPE_MODE
	MAGNETIC_STRIPE_FALLBACK
	MAGNETIC_STRIPE_TRACK_2
}
type StripePaymentMethodDetailsInteracPresentReceipt {
	transactionStatusInformation: String
	terminalVerificationResults: String
	dedicatedFileName: String
	cardholderVerificationMethod: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
	accountType: StripePaymentMethodDetailsInteracPresentReceiptAccountType
}
enum StripePaymentMethodDetailsInteracPresentReceiptAccountType {
	CHECKING
	SAVINGS
	UNKNOWN
}
type StripePaymentMethodDetailsKlarna {
	preferredLocale: String
	paymentMethodCategory: String
}
type StripePaymentMethodDetailsKonbini {
	store: StripePaymentMethodDetailsKonbiniStore
}
type StripePaymentMethodDetailsKonbiniStore {
	chain: StripePaymentMethodDetailsKonbiniStoreChain
}
enum StripePaymentMethodDetailsKonbiniStoreChain {
	FAMILYMART
	LAWSON
	MINISTOP
	SEICOMART
}
type StripePaymentMethodDetailsMultibanco {
	reference: String
	entity: String
}
type StripePaymentMethodDetailsOxxo {
	number: String
}
type StripePaymentMethodDetailsP24 {
	verifiedName: String
	reference: String
	bank: StripePaymentMethodDetailsP24Bank
}
enum StripePaymentMethodDetailsP24Bank {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
type StripePaymentMethodDetailsPaynow {
	reference: String
}
type StripePaymentMethodDetailsPix {
	bankTransactionId: String
}
type StripePaymentMethodDetailsPromptpay {
	reference: String
}
type StripePaymentMethodDetailsSepaDebit {
	mandate: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type StripePaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: StripePaymentMethodDetailsSofortPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: StripeStringOrMandateUnion
	generatedSepaDebit: StripeStringOrPaymentMethodUnion
	country: String
	bic: String
	bankName: String
	bankCode: String
}
enum StripePaymentMethodDetailsSofortPreferredLanguage {
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
type StripePaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	fingerprint: String
	bankName: String
	accountType: StripePaymentMethodDetailsUsBankAccountAccountType
	accountHolderType: StripePaymentMethodDetailsUsBankAccountAccountHolderType
}
enum StripePaymentMethodDetailsUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum StripePaymentMethodDetailsUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
type StripePaymentMethodDetailsWechatPay {
	transactionId: String
	fingerprint: String
}
type StripePaymentMethodEps {
	bank: StripePaymentMethodEpsBank
}
enum StripePaymentMethodEpsBank {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
type StripePaymentMethodFpx {
	bank: StripePaymentMethodFpxBank!
}
enum StripePaymentMethodFpxBank {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
type StripePaymentMethodIdeal {
	bic: StripePaymentMethodIdealBic
	bank: StripePaymentMethodIdealBank
}
enum StripePaymentMethodIdealBank {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePaymentMethodIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type StripePaymentMethodKlarna {
	dob: StripePaymentFlowsPrivatePaymentMethodsKlarnaDob
}
type StripePaymentMethodLink {
	persistentToken: String
	email: String
}
enum StripePaymentMethodObject {
	PAYMENT_METHOD
}
type StripePaymentMethodOptionsAffirm {
	setupFutureUsage: StripePaymentMethodOptionsAffirmSetupFutureUsage
	captureMethod: StripePaymentMethodOptionsAffirmCaptureMethod
}
enum StripePaymentMethodOptionsAffirmCaptureMethod {
	MANUAL
}
enum StripePaymentMethodOptionsAffirmSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsAfterpayClearpay {
	setupFutureUsage: StripePaymentMethodOptionsAfterpayClearpaySetupFutureUsage
	reference: String
	captureMethod: StripePaymentMethodOptionsAfterpayClearpayCaptureMethod
}
enum StripePaymentMethodOptionsAfterpayClearpayCaptureMethod {
	MANUAL
}
enum StripePaymentMethodOptionsAfterpayClearpaySetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsAlipay {
	setupFutureUsage: StripePaymentMethodOptionsAlipaySetupFutureUsage
}
enum StripePaymentMethodOptionsAlipaySetupFutureUsage {
	NONE
	OFF_SESSION
}
type StripePaymentMethodOptionsBacsDebit {
	setupFutureUsage: StripePaymentMethodOptionsBacsDebitSetupFutureUsage
}
enum StripePaymentMethodOptionsBacsDebitSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripePaymentMethodOptionsBancontact {
	setupFutureUsage: StripePaymentMethodOptionsBancontactSetupFutureUsage
	preferredLanguage: StripePaymentMethodOptionsBancontactPreferredLanguage!
}
enum StripePaymentMethodOptionsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
enum StripePaymentMethodOptionsBancontactSetupFutureUsage {
	NONE
	OFF_SESSION
}
type StripePaymentMethodOptionsBoleto {
	setupFutureUsage: StripePaymentMethodOptionsBoletoSetupFutureUsage
	expiresAfterDays: Int!
}
enum StripePaymentMethodOptionsBoletoSetupFutureUsage {
	NONE
	OFF_SESSION
	ON_SESSION
}
type StripePaymentMethodOptionsCardInstallments {
	plan: StripePaymentMethodDetailsCardInstallmentsPlan
	enabled: Boolean!
	availablePlans: [StripePaymentMethodDetailsCardInstallmentsPlan!]
}
type StripePaymentMethodOptionsCardMandateOptions {
	supportedTypes: [StripePaymentMethodOptionsCardMandateOptionsSupportedTypes!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePaymentMethodOptionsCardMandateOptionsInterval!
	endDate: Int
	description: String
	amountType: StripePaymentMethodOptionsCardMandateOptionsAmountType!
	amount: Int!
}
enum StripePaymentMethodOptionsCardMandateOptionsAmountType {
	FIXED
	MAXIMUM
}
enum StripePaymentMethodOptionsCardMandateOptionsInterval {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum StripePaymentMethodOptionsCardMandateOptionsSupportedTypes {
	INDIA
}
type StripePaymentMethodOptionsCardPresent {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
type StripePaymentMethodOptionsCustomerBalance {
	setupFutureUsage: StripePaymentMethodOptionsCustomerBalanceSetupFutureUsage
	fundingType: StripePaymentMethodOptionsCustomerBalanceFundingType
	bankTransfer: StripePaymentMethodOptionsCustomerBalanceBankTransfer
}
type StripePaymentMethodOptionsCustomerBalanceBankTransfer {
	type: StripePaymentMethodOptionsCustomerBalanceBankTransferType
	requestedAddressTypes: [StripePaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes!]
	euBankTransfer: StripePaymentMethodOptionsCustomerBalanceEuBankAccount
}
enum StripePaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum StripePaymentMethodOptionsCustomerBalanceBankTransferType {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
type StripePaymentMethodOptionsCustomerBalanceEuBankAccount {
	country: StripePaymentMethodOptionsCustomerBalanceEuBankAccountCountry!
}
enum StripePaymentMethodOptionsCustomerBalanceEuBankAccountCountry {
	BE
	DE
	ES
	FR
	IE
	NL
}
enum StripePaymentMethodOptionsCustomerBalanceFundingType {
	BANK_TRANSFER
}
enum StripePaymentMethodOptionsCustomerBalanceSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsFpx {
	setupFutureUsage: StripePaymentMethodOptionsFpxSetupFutureUsage
}
enum StripePaymentMethodOptionsFpxSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsGiropay {
	setupFutureUsage: StripePaymentMethodOptionsGiropaySetupFutureUsage
}
enum StripePaymentMethodOptionsGiropaySetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsGrabpay {
	setupFutureUsage: StripePaymentMethodOptionsGrabpaySetupFutureUsage
}
enum StripePaymentMethodOptionsGrabpaySetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsIdeal {
	setupFutureUsage: StripePaymentMethodOptionsIdealSetupFutureUsage
}
enum StripePaymentMethodOptionsIdealSetupFutureUsage {
	NONE
	OFF_SESSION
}
type StripePaymentMethodOptionsKlarna {
	setupFutureUsage: StripePaymentMethodOptionsKlarnaSetupFutureUsage
	preferredLocale: String
	captureMethod: StripePaymentMethodOptionsKlarnaCaptureMethod
}
enum StripePaymentMethodOptionsKlarnaCaptureMethod {
	MANUAL
}
enum StripePaymentMethodOptionsKlarnaSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsKonbini {
	setupFutureUsage: StripePaymentMethodOptionsKonbiniSetupFutureUsage
	productDescription: String
	expiresAt: Int
	expiresAfterDays: Int
	confirmationNumber: String
}
enum StripePaymentMethodOptionsKonbiniSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsOxxo {
	setupFutureUsage: StripePaymentMethodOptionsOxxoSetupFutureUsage
	expiresAfterDays: Int!
}
enum StripePaymentMethodOptionsOxxoSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsP24 {
	setupFutureUsage: StripePaymentMethodOptionsP24SetupFutureUsage
}
enum StripePaymentMethodOptionsP24SetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsPaynow {
	setupFutureUsage: StripePaymentMethodOptionsPaynowSetupFutureUsage
}
enum StripePaymentMethodOptionsPaynowSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsPix {
	setupFutureUsage: StripePaymentMethodOptionsPixSetupFutureUsage
	expiresAt: Int
	expiresAfterSeconds: Int
}
enum StripePaymentMethodOptionsPixSetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsPromptpay {
	setupFutureUsage: StripePaymentMethodOptionsPromptpaySetupFutureUsage
}
enum StripePaymentMethodOptionsPromptpaySetupFutureUsage {
	NONE
}
type StripePaymentMethodOptionsSofort {
	setupFutureUsage: StripePaymentMethodOptionsSofortSetupFutureUsage
	preferredLanguage: StripePaymentMethodOptionsSofortPreferredLanguage
}
enum StripePaymentMethodOptionsSofortPreferredLanguage {
	DE
	EN
	ES
	FR
	IT
	NL
	PL
}
enum StripePaymentMethodOptionsSofortSetupFutureUsage {
	NONE
	OFF_SESSION
}
type StripePaymentMethodOptionsWechatPay {
	setupFutureUsage: StripePaymentMethodOptionsWechatPaySetupFutureUsage
	client: StripePaymentMethodOptionsWechatPayClient
	appId: String
}
enum StripePaymentMethodOptionsWechatPayClient {
	ANDROID
	IOS
	WEB
}
enum StripePaymentMethodOptionsWechatPaySetupFutureUsage {
	NONE
}
type StripePaymentMethodP24 {
	bank: StripePaymentMethodP24Bank
}
enum StripePaymentMethodP24Bank {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
type StripePaymentMethodSepaDebit {
	last4: String
	generatedFrom: StripeSepaDebitGeneratedFrom
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type StripePaymentMethodSofort {
	country: String
}
enum StripePaymentMethodType {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CARD_PRESENT
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	INTERAC_PRESENT
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
type StripePaymentMethodUsBankAccount {
	routingNumber: String
	networks: StripeUsBankAccountNetworks
	last4: String
	fingerprint: String
	financialConnectionsAccount: String
	bankName: String
	accountType: StripePaymentMethodUsBankAccountAccountType
	accountHolderType: StripePaymentMethodUsBankAccountAccountHolderType
}
enum StripePaymentMethodUsBankAccountAccountHolderType {
	COMPANY
	INDIVIDUAL
}
enum StripePaymentMethodUsBankAccountAccountType {
	CHECKING
	SAVINGS
}
type StripePaymentPagesCheckoutSessionAfterExpiration {
	recovery: StripePaymentPagesCheckoutSessionAfterExpirationRecovery
}
type StripePaymentPagesCheckoutSessionAfterExpirationRecovery {
	url: String
	expiresAt: Int
	enabled: Boolean!
	allowPromotionCodes: Boolean!
}
type StripePaymentPagesCheckoutSessionAutomaticTax {
	status: StripePaymentPagesCheckoutSessionAutomaticTaxStatus
	enabled: Boolean!
}
enum StripePaymentPagesCheckoutSessionAutomaticTaxStatus {
	COMPLETE
	FAILED
	REQUIRES_LOCATION_INPUTS
}
type StripePaymentPagesCheckoutSessionConsent {
	termsOfService: StripePaymentPagesCheckoutSessionConsentTermsOfService
	promotions: StripePaymentPagesCheckoutSessionConsentPromotions
}
type StripePaymentPagesCheckoutSessionConsentCollection {
	termsOfService: StripePaymentPagesCheckoutSessionConsentCollectionTermsOfService
	promotions: StripePaymentPagesCheckoutSessionConsentCollectionPromotions
}
enum StripePaymentPagesCheckoutSessionConsentCollectionPromotions {
	AUTO
	NONE
}
enum StripePaymentPagesCheckoutSessionConsentCollectionTermsOfService {
	NONE
	REQUIRED
}
enum StripePaymentPagesCheckoutSessionConsentPromotions {
	OPT_IN
	OPT_OUT
}
enum StripePaymentPagesCheckoutSessionConsentTermsOfService {
	ACCEPTED
}
type StripePaymentPagesCheckoutSessionCustomText {
	submit: StripePaymentPagesCheckoutSessionCustomTextPosition
	shippingAddress: StripePaymentPagesCheckoutSessionCustomTextPosition
}
type StripePaymentPagesCheckoutSessionCustomTextPosition {
	message: String!
}
type StripePaymentPagesCheckoutSessionCustomerDetails {
	taxIds: [StripePaymentPagesCheckoutSessionTaxId!]
	taxExempt: StripePaymentPagesCheckoutSessionCustomerDetailsTaxExempt
	phone: String
	name: String
	email: String
	address: StripeAddress
}
enum StripePaymentPagesCheckoutSessionCustomerDetailsTaxExempt {
	EXEMPT
	NONE
	REVERSE
}
type StripePaymentPagesCheckoutSessionInvoiceCreation {
	invoiceData: StripePaymentPagesCheckoutSessionInvoiceSettings!
	enabled: Boolean!
}
type StripePaymentPagesCheckoutSessionInvoiceSettings {
	renderingOptions: StripeInvoiceSettingRenderingOptions
	metadata: JSON
	footer: String
	description: String
	customFields: [StripeInvoiceSettingCustomField!]
	accountTaxIds: [StripeStringOrDeletedTaxIdOrTaxIdUnion!]
}
type StripePaymentPagesCheckoutSessionPhoneNumberCollection {
	enabled: Boolean!
}
type StripePaymentPagesCheckoutSessionShippingAddressCollection {
	allowedCountries: [StripePaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries!]!
}
enum StripePaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
type StripePaymentPagesCheckoutSessionShippingCost {
	taxes: [StripeLineItemsTaxAmount!]
	shippingRate: StripeStringOrShippingRateUnion
	amountTotal: Int!
	amountTax: Int!
	amountSubtotal: Int!
}
type StripePaymentPagesCheckoutSessionShippingOption {
	shippingRate: StripeStringOrShippingRateUnion!
	shippingAmount: Int!
}
type StripePaymentPagesCheckoutSessionTaxId {
	value: String
	type: StripePaymentPagesCheckoutSessionTaxIdType!
}
type StripePaymentPagesCheckoutSessionTaxIdCollection {
	enabled: Boolean!
}
enum StripePaymentPagesCheckoutSessionTaxIdType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	UNKNOWN
	US_EIN
	ZA_VAT
}
type StripePaymentPagesCheckoutSessionTotalDetails {
	breakdown: StripePaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type StripePaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
	taxes: [StripeLineItemsTaxAmount!]!
	discounts: [StripeLineItemsDiscountAmount!]!
}
union StripePaymentSource = StripeSource | StripeCard | StripeBankAccount | StripeAccount
type StripePayout {
	type: StripePayoutType!
	status: String!
	statementDescriptor: String
	sourceType: String!
	reversedBy: StripeStringOrPayoutUnion
	originalPayout: StripeStringOrPayoutUnion
	object: StripePayoutObject!
	method: String!
	metadata: JSON
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	failureBalanceTransaction: StripeStringOrBalanceTransactionUnion
	destination: StripeStringOrDeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	automatic: Boolean!
	arrivalDate: Int!
	amount: Int!
}
enum StripePayoutObject {
	PAYOUT
}
enum StripePayoutType {
	BANK_ACCOUNT
	CARD
}
type StripePeriod {
	start: Int
	end: Int
}
type StripePerson {
	verification: StripeLegalEntityPersonVerification
	ssnLast4Provided: Boolean
	requirements: StripePersonRequirements
	relationship: StripePersonRelationship
	registeredAddress: StripeAddress
	politicalExposure: StripePersonPoliticalExposure
	phone: String
	object: StripePersonObject!
	nationality: String
	metadata: JSON
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondaryProvided: Boolean
	idNumberProvided: Boolean
	id: String!
	gender: String
	futureRequirements: StripePersonFutureRequirements
	fullNameAliases: [String!]
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: StripeLegalEntityDob
	created: Int!
	addressKanji: StripeLegalEntityJapanAddress
	addressKana: StripeLegalEntityJapanAddress
	address: StripeAddress
	account: String!
}
type StripePersonFutureRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [StripeAccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [StripeAccountRequirementsAlternative!]
}
enum StripePersonObject {
	PERSON
}
enum StripePersonPoliticalExposure {
	EXISTING
	NONE
}
type StripePersonRelationship {
	title: String
	representative: Boolean
	percentOwnership: Float
	owner: Boolean
	executive: Boolean
	director: Boolean
}
type StripePersonRequirements {
	pendingVerification: [String!]!
	pastDue: [String!]!
	eventuallyDue: [String!]!
	errors: [StripeAccountRequirementsError!]!
	currentlyDue: [String!]!
	alternatives: [StripeAccountRequirementsAlternative!]
}
type StripePlan {
	usageType: StripePlanUsageType!
	trialPeriodDays: Int
	transformUsage: StripeTransformUsage
	tiersMode: StripePlanTiersMode
	tiers: [StripePlanTier!]
	product: StripeStringOrDeletedProductOrProductUnion
	object: StripePlanObject!
	nickname: String
	metadata: JSON
	livemode: Boolean!
	intervalCount: Int!
	interval: StripePlanInterval!
	id: String!
	currency: String!
	created: Int!
	billingScheme: StripePlanBillingScheme!
	amountDecimal: String
	amount: Int
	aggregateUsage: StripePlanAggregateUsage
	active: Boolean!
}
enum StripePlanAggregateUsage {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum StripePlanBillingScheme {
	PER_UNIT
	TIERED
}
enum StripePlanInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripePlanObject {
	PLAN
}
type StripePlanTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum StripePlanTiersMode {
	GRADUATED
	VOLUME
}
enum StripePlanUsageType {
	LICENSED
	METERED
}
type StripePlatformTaxFee {
	type: String!
	sourceTransaction: String!
	object: StripePlatformTaxFeeObject!
	id: String!
	account: String!
}
enum StripePlatformTaxFeeObject {
	PLATFORM_TAX_FEE
}
type StripePortalBusinessProfile {
	termsOfServiceUrl: String
	privacyPolicyUrl: String
	headline: String
}
type StripePortalCustomerUpdate {
	enabled: Boolean!
	allowedUpdates: [StripePortalCustomerUpdateAllowedUpdates!]!
}
enum StripePortalCustomerUpdateAllowedUpdates {
	ADDRESS
	EMAIL
	PHONE
	SHIPPING
	TAX_ID
}
type StripePortalFeatures {
	subscriptionUpdate: StripePortalSubscriptionUpdate!
	subscriptionPause: StripePortalSubscriptionPause!
	subscriptionCancel: StripePortalSubscriptionCancel!
	paymentMethodUpdate: StripePortalPaymentMethodUpdate!
	invoiceHistory: StripePortalInvoiceList!
	customerUpdate: StripePortalCustomerUpdate!
}
type StripePortalFlowsAfterCompletionHostedConfirmation {
	customMessage: String
}
type StripePortalFlowsAfterCompletionRedirect {
	returnUrl: String!
}
type StripePortalFlowsFlow {
	type: StripePortalFlowsFlowType!
	subscriptionCancel: StripePortalFlowsFlowSubscriptionCancel
	afterCompletion: StripePortalFlowsFlowAfterCompletion!
}
type StripePortalFlowsFlowAfterCompletion {
	type: StripePortalFlowsFlowAfterCompletionType!
	redirect: StripePortalFlowsAfterCompletionRedirect
	hostedConfirmation: StripePortalFlowsAfterCompletionHostedConfirmation
}
enum StripePortalFlowsFlowAfterCompletionType {
	HOSTED_CONFIRMATION
	PORTAL_HOMEPAGE
	REDIRECT
}
type StripePortalFlowsFlowSubscriptionCancel {
	subscription: String!
}
enum StripePortalFlowsFlowType {
	PAYMENT_METHOD_UPDATE
	SUBSCRIPTION_CANCEL
}
type StripePortalInvoiceList {
	enabled: Boolean!
}
type StripePortalLoginPage {
	url: String
	enabled: Boolean!
}
type StripePortalPaymentMethodUpdate {
	enabled: Boolean!
}
type StripePortalSubscriptionCancel {
	prorationBehavior: StripePortalSubscriptionCancelProrationBehavior!
	mode: StripePortalSubscriptionCancelMode!
	enabled: Boolean!
	cancellationReason: StripePortalSubscriptionCancellationReason!
}
enum StripePortalSubscriptionCancelMode {
	AT_PERIOD_END
	IMMEDIATELY
}
enum StripePortalSubscriptionCancelProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
type StripePortalSubscriptionCancellationReason {
	options: [StripePortalSubscriptionCancellationReasonOptions!]!
	enabled: Boolean!
}
enum StripePortalSubscriptionCancellationReasonOptions {
	CUSTOMER_SERVICE
	LOW_QUALITY
	MISSING_FEATURES
	OTHER
	SWITCHED_SERVICE
	TOO_COMPLEX
	TOO_EXPENSIVE
	UNUSED
}
type StripePortalSubscriptionPause {
	enabled: Boolean!
}
type StripePortalSubscriptionUpdate {
	prorationBehavior: StripePortalSubscriptionUpdateProrationBehavior!
	products: [StripePortalSubscriptionUpdateProduct!]
	enabled: Boolean!
	defaultAllowedUpdates: [StripePortalSubscriptionUpdateDefaultAllowedUpdates!]!
}
enum StripePortalSubscriptionUpdateDefaultAllowedUpdates {
	PRICE
	PROMOTION_CODE
	QUANTITY
}
type StripePortalSubscriptionUpdateProduct {
	product: String!
	prices: [String!]!
}
enum StripePortalSubscriptionUpdateProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripePostAccountLinksCollect {
	CURRENTLY_DUE
	EVENTUALLY_DUE
}
input StripePostAccountLinksInput {
	type: StripePostAccountLinksType!
	returnUrl: String
	refreshUrl: String
	expand: [String!]
	collect: StripePostAccountLinksCollect
	account: String!
}
enum StripePostAccountLinksType {
	ACCOUNT_ONBOARDING
	ACCOUNT_UPDATE
}
input StripePostAccountsAccountAcssDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountAdditionalDocumentVerificationIndividualInput {
	front: String
	back: String
}
input StripePostAccountsAccountAddressCompanyInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountAddressIndividualInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountAddressKanaCompanyInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountAddressKanaIndividualInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountAddressKanjiCompanyInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountAddressKanjiIndividualInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountAffirmPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountAfterpayClearpayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountAuBecsDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountBacsDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountBancontactPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountBankAccountOwnershipVerificationDocumentsInput {
	files: [String!]
}
enum StripePostAccountsAccountBankAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
enum StripePostAccountsAccountBankAccountsAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input StripePostAccountsAccountBankAccountsBankAccountInput {
	routingNumber: String
	object: StripePostAccountsAccountBankAccountsObjectBankAccount
	currency: String
	country: String!
	accountType: StripePostAccountsAccountBankAccountsAccountTypeBankAccount
	accountNumber: String!
	accountHolderType: StripePostAccountsAccountBankAccountsAccountHolderTypeBankAccount
	accountHolderName: String
}
enum StripePostAccountsAccountBankAccountsIdAccountType {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input StripePostAccountsAccountBankAccountsIdInput {
	metadata: JSON
	name: String
	expand: [String!]
	expYear: String
	expMonth: String
	defaultForCurrency: Boolean
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	accountType: StripePostAccountsAccountBankAccountsIdAccountType
	accountHolderType: String
	accountHolderName: String
}
input StripePostAccountsAccountBankAccountsInput {
	metadata: JSON
	externalAccount: String
	expand: [String!]
	defaultForCurrency: Boolean
	bankAccount: StripeStringOrPostAccountsAccountBankAccountsBankAccountUnionInput
}
enum StripePostAccountsAccountBankAccountsObjectBankAccount {
	BANK_ACCOUNT
}
input StripePostAccountsAccountBankTransferPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountBlikPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountBoletoPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountBrandingSettingsInput {
	secondaryColor: String
	primaryColor: String
	logo: String
	icon: String
}
input StripePostAccountsAccountBusinessProfileInput {
	supportUrl: JSON
	url: String
	supportPhone: String
	supportEmail: String
	supportAddress: StripePostAccountsAccountSupportAddressBusinessProfileInput
	productDescription: String
	name: String
	mcc: String
}
enum StripePostAccountsAccountBusinessType {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
input StripePostAccountsAccountCapabilitiesCapabilityInput {
	requested: Boolean
	expand: [String!]
}
input StripePostAccountsAccountCapabilitiesInput {
	usBankAccountAchPayments: StripePostAccountsAccountUsBankAccountAchPaymentsCapabilitiesInput
	treasury: StripePostAccountsAccountTreasuryCapabilitiesInput
	transfers: StripePostAccountsAccountTransfersCapabilitiesInput
	taxReportingUs1099Misc: StripePostAccountsAccountTaxReportingUs1099MiscCapabilitiesInput
	taxReportingUs1099K: StripePostAccountsAccountTaxReportingUs1099KCapabilitiesInput
	sofortPayments: StripePostAccountsAccountSofortPaymentsCapabilitiesInput
	sepaDebitPayments: StripePostAccountsAccountSepaDebitPaymentsCapabilitiesInput
	promptpayPayments: StripePostAccountsAccountPromptpayPaymentsCapabilitiesInput
	paynowPayments: StripePostAccountsAccountPaynowPaymentsCapabilitiesInput
	p24Payments: StripePostAccountsAccountP24PaymentsCapabilitiesInput
	oxxoPayments: StripePostAccountsAccountOxxoPaymentsCapabilitiesInput
	linkPayments: StripePostAccountsAccountLinkPaymentsCapabilitiesInput
	legacyPayments: StripePostAccountsAccountLegacyPaymentsCapabilitiesInput
	konbiniPayments: StripePostAccountsAccountKonbiniPaymentsCapabilitiesInput
	klarnaPayments: StripePostAccountsAccountKlarnaPaymentsCapabilitiesInput
	jcbPayments: StripePostAccountsAccountJcbPaymentsCapabilitiesInput
	indiaInternationalPayments: StripePostAccountsAccountIndiaInternationalPaymentsCapabilitiesInput
	idealPayments: StripePostAccountsAccountIdealPaymentsCapabilitiesInput
	grabpayPayments: StripePostAccountsAccountGrabpayPaymentsCapabilitiesInput
	giropayPayments: StripePostAccountsAccountGiropayPaymentsCapabilitiesInput
	fpxPayments: StripePostAccountsAccountFpxPaymentsCapabilitiesInput
	epsPayments: StripePostAccountsAccountEpsPaymentsCapabilitiesInput
	cartesBancairesPayments: StripePostAccountsAccountCartesBancairesPaymentsCapabilitiesInput
	cardPayments: StripePostAccountsAccountCardPaymentsCapabilitiesInput
	cardIssuing: StripePostAccountsAccountCardIssuingCapabilitiesInput
	boletoPayments: StripePostAccountsAccountBoletoPaymentsCapabilitiesInput
	blikPayments: StripePostAccountsAccountBlikPaymentsCapabilitiesInput
	bankTransferPayments: StripePostAccountsAccountBankTransferPaymentsCapabilitiesInput
	bancontactPayments: StripePostAccountsAccountBancontactPaymentsCapabilitiesInput
	bacsDebitPayments: StripePostAccountsAccountBacsDebitPaymentsCapabilitiesInput
	auBecsDebitPayments: StripePostAccountsAccountAuBecsDebitPaymentsCapabilitiesInput
	afterpayClearpayPayments: StripePostAccountsAccountAfterpayClearpayPaymentsCapabilitiesInput
	affirmPayments: StripePostAccountsAccountAffirmPaymentsCapabilitiesInput
	acssDebitPayments: StripePostAccountsAccountAcssDebitPaymentsCapabilitiesInput
}
input StripePostAccountsAccountCardIssuingCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountCardIssuingSettingsInput {
	tosAcceptance: StripePostAccountsAccountTosAcceptanceCardIssuingSettingsInput
}
input StripePostAccountsAccountCardPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountCardPaymentsSettingsInput {
	statementDescriptorPrefixKanji: JSON
	statementDescriptorPrefixKana: JSON
	statementDescriptorPrefix: String
	declineOn: StripePostAccountsAccountDeclineOnCardPaymentsSettingsInput
}
input StripePostAccountsAccountCartesBancairesPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountCompanyInput {
	verification: StripePostAccountsAccountVerificationCompanyInput
	vatId: String
	taxIdRegistrar: String
	taxId: String
	structure: String
	registrationNumber: String
	phone: String
	ownershipDeclaration: StripePostAccountsAccountOwnershipDeclarationCompanyInput
	ownersProvided: Boolean
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean
	directorsProvided: Boolean
	addressKanji: StripePostAccountsAccountAddressKanjiCompanyInput
	addressKana: StripePostAccountsAccountAddressKanaCompanyInput
	address: StripePostAccountsAccountAddressCompanyInput
}
input StripePostAccountsAccountCompanyLicenseDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountCompanyMemorandumOfAssociationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountCompanyMinisterialDecreeDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountCompanyRegistrationVerificationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountCompanyTaxIdVerificationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountDeclineOnCardPaymentsSettingsInput {
	cvcFailure: Boolean
	avsFailure: Boolean
}
input StripePostAccountsAccountDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostAccountsAccountDocumentVerificationCompanyInput {
	front: String
	back: String
}
input StripePostAccountsAccountDocumentVerificationIndividualInput {
	front: String
	back: String
}
input StripePostAccountsAccountDocumentsInput {
	proofOfRegistration: StripePostAccountsAccountProofOfRegistrationDocumentsInput
	companyTaxIdVerification: StripePostAccountsAccountCompanyTaxIdVerificationDocumentsInput
	companyRegistrationVerification: StripePostAccountsAccountCompanyRegistrationVerificationDocumentsInput
	companyMinisterialDecree: StripePostAccountsAccountCompanyMinisterialDecreeDocumentsInput
	companyMemorandumOfAssociation: StripePostAccountsAccountCompanyMemorandumOfAssociationDocumentsInput
	companyLicense: StripePostAccountsAccountCompanyLicenseDocumentsInput
	bankAccountOwnershipVerification: StripePostAccountsAccountBankAccountOwnershipVerificationDocumentsInput
}
input StripePostAccountsAccountEpsPaymentsCapabilitiesInput {
	requested: Boolean
}
enum StripePostAccountsAccountExternalAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
enum StripePostAccountsAccountExternalAccountsAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input StripePostAccountsAccountExternalAccountsBankAccountInput {
	routingNumber: String
	object: StripePostAccountsAccountExternalAccountsObjectBankAccount
	currency: String
	country: String!
	accountType: StripePostAccountsAccountExternalAccountsAccountTypeBankAccount
	accountNumber: String!
	accountHolderType: StripePostAccountsAccountExternalAccountsAccountHolderTypeBankAccount
	accountHolderName: String
}
enum StripePostAccountsAccountExternalAccountsIdAccountType {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input StripePostAccountsAccountExternalAccountsIdInput {
	metadata: JSON
	name: String
	expand: [String!]
	expYear: String
	expMonth: String
	defaultForCurrency: Boolean
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	accountType: StripePostAccountsAccountExternalAccountsIdAccountType
	accountHolderType: String
	accountHolderName: String
}
input StripePostAccountsAccountExternalAccountsInput {
	metadata: JSON
	externalAccount: String
	expand: [String!]
	defaultForCurrency: Boolean
	bankAccount: StripeStringOrPostAccountsAccountExternalAccountsBankAccountUnionInput
}
enum StripePostAccountsAccountExternalAccountsObjectBankAccount {
	BANK_ACCOUNT
}
input StripePostAccountsAccountFpxPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountGiropayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountGrabpayPaymentsCapabilitiesInput {
	requested: Boolean
}
enum StripePostAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostAccountsAccountIdealPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountIndiaInternationalPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountIndividualInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostAccountsAccountVerificationIndividualInput
	ssnLast4: String
	registeredAddress: StripePostAccountsAccountRegisteredAddressIndividualInput
	politicalExposure: StripePostAccountsAccountPoliticalExposureIndividual
	phone: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: StripeStringOrPostAccountsAccountDobIndividualUnionInput
	addressKanji: StripePostAccountsAccountAddressKanjiIndividualInput
	addressKana: StripePostAccountsAccountAddressKanaIndividualInput
	address: StripePostAccountsAccountAddressIndividualInput
}
input StripePostAccountsAccountInput {
	metadata: JSON
	tosAcceptance: StripePostAccountsAccountTosAcceptanceInput
	settings: StripePostAccountsAccountSettingsInput
	individual: StripePostAccountsAccountIndividualInput
	externalAccount: String
	expand: [String!]
	email: String
	documents: StripePostAccountsAccountDocumentsInput
	defaultCurrency: String
	company: StripePostAccountsAccountCompanyInput
	capabilities: StripePostAccountsAccountCapabilitiesInput
	businessType: StripePostAccountsAccountBusinessType
	businessProfile: StripePostAccountsAccountBusinessProfileInput
	accountToken: String
}
enum StripePostAccountsAccountIntervalSchedulePayoutsSettings {
	DAILY
	MANUAL
	MONTHLY
	WEEKLY
}
input StripePostAccountsAccountJcbPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountKlarnaPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountKonbiniPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountLegacyPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountLinkPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountLoginLinksInput {
	expand: [String!]
}
input StripePostAccountsAccountOwnershipDeclarationCompanyInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostAccountsAccountOxxoPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountP24PaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountPaymentsSettingsInput {
	statementDescriptorKanji: String
	statementDescriptorKana: String
	statementDescriptor: String
}
input StripePostAccountsAccountPaynowPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountPayoutsSettingsInput {
	statementDescriptor: String
	schedule: StripePostAccountsAccountSchedulePayoutsSettingsInput
	debitNegativeBalances: Boolean
}
input StripePostAccountsAccountPeopleAdditionalDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPeopleAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeopleAddressKanaInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeopleAddressKanjiInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeopleCompanyAuthorizationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPeopleDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostAccountsAccountPeopleDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPeopleDocumentsInput {
	visa: StripePostAccountsAccountPeopleVisaDocumentsInput
	passport: StripePostAccountsAccountPeoplePassportDocumentsInput
	companyAuthorization: StripePostAccountsAccountPeopleCompanyAuthorizationDocumentsInput
}
input StripePostAccountsAccountPeopleInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostAccountsAccountPeopleVerificationInput
	ssnLast4: String
	relationship: StripePostAccountsAccountPeopleRelationshipInput
	registeredAddress: StripePostAccountsAccountPeopleRegisteredAddressInput
	politicalExposure: String
	phone: String
	personToken: String
	nationality: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	expand: [String!]
	email: String
	documents: StripePostAccountsAccountPeopleDocumentsInput
	dob: StripeStringOrPostAccountsAccountPeopleDobUnionInput
	addressKanji: StripePostAccountsAccountPeopleAddressKanjiInput
	addressKana: StripePostAccountsAccountPeopleAddressKanaInput
	address: StripePostAccountsAccountPeopleAddressInput
}
input StripePostAccountsAccountPeoplePassportDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPeoplePersonAdditionalDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPeoplePersonAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeoplePersonAddressKanaInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeoplePersonAddressKanjiInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeoplePersonCompanyAuthorizationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPeoplePersonDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostAccountsAccountPeoplePersonDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPeoplePersonDocumentsInput {
	visa: StripePostAccountsAccountPeoplePersonVisaDocumentsInput
	passport: StripePostAccountsAccountPeoplePersonPassportDocumentsInput
	companyAuthorization: StripePostAccountsAccountPeoplePersonCompanyAuthorizationDocumentsInput
}
input StripePostAccountsAccountPeoplePersonInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostAccountsAccountPeoplePersonVerificationInput
	ssnLast4: String
	relationship: StripePostAccountsAccountPeoplePersonRelationshipInput
	registeredAddress: StripePostAccountsAccountPeoplePersonRegisteredAddressInput
	politicalExposure: String
	phone: String
	personToken: String
	nationality: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	expand: [String!]
	email: String
	documents: StripePostAccountsAccountPeoplePersonDocumentsInput
	dob: StripeStringOrPostAccountsAccountPeoplePersonDobUnionInput
	addressKanji: StripePostAccountsAccountPeoplePersonAddressKanjiInput
	addressKana: StripePostAccountsAccountPeoplePersonAddressKanaInput
	address: StripePostAccountsAccountPeoplePersonAddressInput
}
input StripePostAccountsAccountPeoplePersonPassportDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPeoplePersonRegisteredAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeoplePersonRelationshipInput {
	percentOwnership: JSON
	title: String
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
input StripePostAccountsAccountPeoplePersonVerificationInput {
	document: StripePostAccountsAccountPeoplePersonDocumentVerificationInput
	additionalDocument: StripePostAccountsAccountPeoplePersonAdditionalDocumentVerificationInput
}
input StripePostAccountsAccountPeoplePersonVisaDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPeopleRegisteredAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPeopleRelationshipInput {
	percentOwnership: JSON
	title: String
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
input StripePostAccountsAccountPeopleVerificationInput {
	document: StripePostAccountsAccountPeopleDocumentVerificationInput
	additionalDocument: StripePostAccountsAccountPeopleAdditionalDocumentVerificationInput
}
input StripePostAccountsAccountPeopleVisaDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPersonsAdditionalDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPersonsAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsAddressKanaInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsAddressKanjiInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsCompanyAuthorizationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPersonsDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostAccountsAccountPersonsDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPersonsDocumentsInput {
	visa: StripePostAccountsAccountPersonsVisaDocumentsInput
	passport: StripePostAccountsAccountPersonsPassportDocumentsInput
	companyAuthorization: StripePostAccountsAccountPersonsCompanyAuthorizationDocumentsInput
}
input StripePostAccountsAccountPersonsInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostAccountsAccountPersonsVerificationInput
	ssnLast4: String
	relationship: StripePostAccountsAccountPersonsRelationshipInput
	registeredAddress: StripePostAccountsAccountPersonsRegisteredAddressInput
	politicalExposure: String
	phone: String
	personToken: String
	nationality: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	expand: [String!]
	email: String
	documents: StripePostAccountsAccountPersonsDocumentsInput
	dob: StripeStringOrPostAccountsAccountPersonsDobUnionInput
	addressKanji: StripePostAccountsAccountPersonsAddressKanjiInput
	addressKana: StripePostAccountsAccountPersonsAddressKanaInput
	address: StripePostAccountsAccountPersonsAddressInput
}
input StripePostAccountsAccountPersonsPassportDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPersonsPersonAdditionalDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPersonsPersonAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsPersonAddressKanaInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsPersonAddressKanjiInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsPersonCompanyAuthorizationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPersonsPersonDobInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostAccountsAccountPersonsPersonDocumentVerificationInput {
	front: String
	back: String
}
input StripePostAccountsAccountPersonsPersonDocumentsInput {
	visa: StripePostAccountsAccountPersonsPersonVisaDocumentsInput
	passport: StripePostAccountsAccountPersonsPersonPassportDocumentsInput
	companyAuthorization: StripePostAccountsAccountPersonsPersonCompanyAuthorizationDocumentsInput
}
input StripePostAccountsAccountPersonsPersonInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostAccountsAccountPersonsPersonVerificationInput
	ssnLast4: String
	relationship: StripePostAccountsAccountPersonsPersonRelationshipInput
	registeredAddress: StripePostAccountsAccountPersonsPersonRegisteredAddressInput
	politicalExposure: String
	phone: String
	personToken: String
	nationality: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	expand: [String!]
	email: String
	documents: StripePostAccountsAccountPersonsPersonDocumentsInput
	dob: StripeStringOrPostAccountsAccountPersonsPersonDobUnionInput
	addressKanji: StripePostAccountsAccountPersonsPersonAddressKanjiInput
	addressKana: StripePostAccountsAccountPersonsPersonAddressKanaInput
	address: StripePostAccountsAccountPersonsPersonAddressInput
}
input StripePostAccountsAccountPersonsPersonPassportDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPersonsPersonRegisteredAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsPersonRelationshipInput {
	percentOwnership: JSON
	title: String
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
input StripePostAccountsAccountPersonsPersonVerificationInput {
	document: StripePostAccountsAccountPersonsPersonDocumentVerificationInput
	additionalDocument: StripePostAccountsAccountPersonsPersonAdditionalDocumentVerificationInput
}
input StripePostAccountsAccountPersonsPersonVisaDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountPersonsRegisteredAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountPersonsRelationshipInput {
	percentOwnership: JSON
	title: String
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
input StripePostAccountsAccountPersonsVerificationInput {
	document: StripePostAccountsAccountPersonsDocumentVerificationInput
	additionalDocument: StripePostAccountsAccountPersonsAdditionalDocumentVerificationInput
}
input StripePostAccountsAccountPersonsVisaDocumentsInput {
	files: [String!]
}
enum StripePostAccountsAccountPoliticalExposureIndividual {
	EXISTING
	NONE
}
input StripePostAccountsAccountPromptpayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountProofOfRegistrationDocumentsInput {
	files: [String!]
}
input StripePostAccountsAccountRegisteredAddressIndividualInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountRejectInput {
	reason: String!
	expand: [String!]
}
input StripePostAccountsAccountSchedulePayoutsSettingsInput {
	delayDays: JSON
	weeklyAnchor: StripePostAccountsAccountWeeklyAnchorSchedulePayoutsSettings
	monthlyAnchor: Int
	interval: StripePostAccountsAccountIntervalSchedulePayoutsSettings
}
input StripePostAccountsAccountSepaDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountSettingsInput {
	treasury: StripePostAccountsAccountTreasurySettingsInput
	payouts: StripePostAccountsAccountPayoutsSettingsInput
	payments: StripePostAccountsAccountPaymentsSettingsInput
	cardPayments: StripePostAccountsAccountCardPaymentsSettingsInput
	cardIssuing: StripePostAccountsAccountCardIssuingSettingsInput
	branding: StripePostAccountsAccountBrandingSettingsInput
}
input StripePostAccountsAccountSofortPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountSupportAddressBusinessProfileInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAccountTaxReportingUs1099KCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountTaxReportingUs1099MiscCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountTosAcceptanceCardIssuingSettingsInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostAccountsAccountTosAcceptanceInput {
	userAgent: String
	serviceAgreement: String
	ip: String
	date: Int
}
input StripePostAccountsAccountTosAcceptanceTreasurySettingsInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostAccountsAccountTransfersCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountTreasuryCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountTreasurySettingsInput {
	tosAcceptance: StripePostAccountsAccountTosAcceptanceTreasurySettingsInput
}
enum StripePostAccountsAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input StripePostAccountsAccountUsBankAccountAchPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAccountVerificationCompanyInput {
	document: StripePostAccountsAccountDocumentVerificationCompanyInput
}
input StripePostAccountsAccountVerificationIndividualInput {
	document: StripePostAccountsAccountDocumentVerificationIndividualInput
	additionalDocument: StripePostAccountsAccountAdditionalDocumentVerificationIndividualInput
}
enum StripePostAccountsAccountWeeklyAnchorSchedulePayoutsSettings {
	FRIDAY
	MONDAY
	SATURDAY
	SUNDAY
	THURSDAY
	TUESDAY
	WEDNESDAY
}
input StripePostAccountsAcssDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAdditionalDocumentVerificationIndividualInput {
	front: String
	back: String
}
input StripePostAccountsAddressCompanyInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAddressIndividualInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAddressKanaCompanyInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAddressKanaIndividualInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAddressKanjiCompanyInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAddressKanjiIndividualInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsAffirmPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAfterpayClearpayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsAuBecsDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsBacsDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsBancontactPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsBankAccountInput {
	routingNumber: String
	object: StripePostAccountsObjectBankAccount
	currency: String
	country: String!
	accountType: StripePostAccountsAccountTypeBankAccount
	accountNumber: String!
	accountHolderType: StripePostAccountsAccountHolderTypeBankAccount
	accountHolderName: String
}
input StripePostAccountsBankAccountOwnershipVerificationDocumentsInput {
	files: [String!]
}
input StripePostAccountsBankTransferPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsBlikPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsBoletoPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsBrandingSettingsInput {
	secondaryColor: String
	primaryColor: String
	logo: String
	icon: String
}
input StripePostAccountsBusinessProfileInput {
	supportUrl: JSON
	url: String
	supportPhone: String
	supportEmail: String
	supportAddress: StripePostAccountsSupportAddressBusinessProfileInput
	productDescription: String
	name: String
	mcc: String
}
enum StripePostAccountsBusinessType {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
input StripePostAccountsCapabilitiesInput {
	usBankAccountAchPayments: StripePostAccountsUsBankAccountAchPaymentsCapabilitiesInput
	treasury: StripePostAccountsTreasuryCapabilitiesInput
	transfers: StripePostAccountsTransfersCapabilitiesInput
	taxReportingUs1099Misc: StripePostAccountsTaxReportingUs1099MiscCapabilitiesInput
	taxReportingUs1099K: StripePostAccountsTaxReportingUs1099KCapabilitiesInput
	sofortPayments: StripePostAccountsSofortPaymentsCapabilitiesInput
	sepaDebitPayments: StripePostAccountsSepaDebitPaymentsCapabilitiesInput
	promptpayPayments: StripePostAccountsPromptpayPaymentsCapabilitiesInput
	paynowPayments: StripePostAccountsPaynowPaymentsCapabilitiesInput
	p24Payments: StripePostAccountsP24PaymentsCapabilitiesInput
	oxxoPayments: StripePostAccountsOxxoPaymentsCapabilitiesInput
	linkPayments: StripePostAccountsLinkPaymentsCapabilitiesInput
	legacyPayments: StripePostAccountsLegacyPaymentsCapabilitiesInput
	konbiniPayments: StripePostAccountsKonbiniPaymentsCapabilitiesInput
	klarnaPayments: StripePostAccountsKlarnaPaymentsCapabilitiesInput
	jcbPayments: StripePostAccountsJcbPaymentsCapabilitiesInput
	indiaInternationalPayments: StripePostAccountsIndiaInternationalPaymentsCapabilitiesInput
	idealPayments: StripePostAccountsIdealPaymentsCapabilitiesInput
	grabpayPayments: StripePostAccountsGrabpayPaymentsCapabilitiesInput
	giropayPayments: StripePostAccountsGiropayPaymentsCapabilitiesInput
	fpxPayments: StripePostAccountsFpxPaymentsCapabilitiesInput
	epsPayments: StripePostAccountsEpsPaymentsCapabilitiesInput
	cartesBancairesPayments: StripePostAccountsCartesBancairesPaymentsCapabilitiesInput
	cardPayments: StripePostAccountsCardPaymentsCapabilitiesInput
	cardIssuing: StripePostAccountsCardIssuingCapabilitiesInput
	boletoPayments: StripePostAccountsBoletoPaymentsCapabilitiesInput
	blikPayments: StripePostAccountsBlikPaymentsCapabilitiesInput
	bankTransferPayments: StripePostAccountsBankTransferPaymentsCapabilitiesInput
	bancontactPayments: StripePostAccountsBancontactPaymentsCapabilitiesInput
	bacsDebitPayments: StripePostAccountsBacsDebitPaymentsCapabilitiesInput
	auBecsDebitPayments: StripePostAccountsAuBecsDebitPaymentsCapabilitiesInput
	afterpayClearpayPayments: StripePostAccountsAfterpayClearpayPaymentsCapabilitiesInput
	affirmPayments: StripePostAccountsAffirmPaymentsCapabilitiesInput
	acssDebitPayments: StripePostAccountsAcssDebitPaymentsCapabilitiesInput
}
input StripePostAccountsCardIssuingCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsCardIssuingSettingsInput {
	tosAcceptance: StripePostAccountsTosAcceptanceCardIssuingSettingsInput
}
input StripePostAccountsCardPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsCardPaymentsSettingsInput {
	statementDescriptorPrefixKanji: JSON
	statementDescriptorPrefixKana: JSON
	statementDescriptorPrefix: String
	declineOn: StripePostAccountsDeclineOnCardPaymentsSettingsInput
}
input StripePostAccountsCartesBancairesPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsCompanyInput {
	verification: StripePostAccountsVerificationCompanyInput
	vatId: String
	taxIdRegistrar: String
	taxId: String
	structure: String
	registrationNumber: String
	phone: String
	ownershipDeclaration: StripePostAccountsOwnershipDeclarationCompanyInput
	ownersProvided: Boolean
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean
	directorsProvided: Boolean
	addressKanji: StripePostAccountsAddressKanjiCompanyInput
	addressKana: StripePostAccountsAddressKanaCompanyInput
	address: StripePostAccountsAddressCompanyInput
}
input StripePostAccountsCompanyLicenseDocumentsInput {
	files: [String!]
}
input StripePostAccountsCompanyMemorandumOfAssociationDocumentsInput {
	files: [String!]
}
input StripePostAccountsCompanyMinisterialDecreeDocumentsInput {
	files: [String!]
}
input StripePostAccountsCompanyRegistrationVerificationDocumentsInput {
	files: [String!]
}
input StripePostAccountsCompanyTaxIdVerificationDocumentsInput {
	files: [String!]
}
input StripePostAccountsDeclineOnCardPaymentsSettingsInput {
	cvcFailure: Boolean
	avsFailure: Boolean
}
input StripePostAccountsDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostAccountsDocumentVerificationCompanyInput {
	front: String
	back: String
}
input StripePostAccountsDocumentVerificationIndividualInput {
	front: String
	back: String
}
input StripePostAccountsDocumentsInput {
	proofOfRegistration: StripePostAccountsProofOfRegistrationDocumentsInput
	companyTaxIdVerification: StripePostAccountsCompanyTaxIdVerificationDocumentsInput
	companyRegistrationVerification: StripePostAccountsCompanyRegistrationVerificationDocumentsInput
	companyMinisterialDecree: StripePostAccountsCompanyMinisterialDecreeDocumentsInput
	companyMemorandumOfAssociation: StripePostAccountsCompanyMemorandumOfAssociationDocumentsInput
	companyLicense: StripePostAccountsCompanyLicenseDocumentsInput
	bankAccountOwnershipVerification: StripePostAccountsBankAccountOwnershipVerificationDocumentsInput
}
input StripePostAccountsEpsPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsFpxPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsGiropayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsGrabpayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsIdealPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsIndiaInternationalPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsIndividualInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostAccountsVerificationIndividualInput
	ssnLast4: String
	registeredAddress: StripePostAccountsRegisteredAddressIndividualInput
	politicalExposure: StripePostAccountsPoliticalExposureIndividual
	phone: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: StripeStringOrPostAccountsDobIndividualUnionInput
	addressKanji: StripePostAccountsAddressKanjiIndividualInput
	addressKana: StripePostAccountsAddressKanaIndividualInput
	address: StripePostAccountsAddressIndividualInput
}
input StripePostAccountsInput {
	metadata: JSON
	type: StripePostAccountsType
	tosAcceptance: StripePostAccountsTosAcceptanceInput
	settings: StripePostAccountsSettingsInput
	individual: StripePostAccountsIndividualInput
	externalAccount: String
	expand: [String!]
	email: String
	documents: StripePostAccountsDocumentsInput
	defaultCurrency: String
	country: String
	company: StripePostAccountsCompanyInput
	capabilities: StripePostAccountsCapabilitiesInput
	businessType: StripePostAccountsBusinessType
	businessProfile: StripePostAccountsBusinessProfileInput
	bankAccount: StripeStringOrPostAccountsBankAccountUnionInput
	accountToken: String
}
enum StripePostAccountsIntervalSchedulePayoutsSettings {
	DAILY
	MANUAL
	MONTHLY
	WEEKLY
}
input StripePostAccountsJcbPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsKlarnaPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsKonbiniPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsLegacyPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsLinkPaymentsCapabilitiesInput {
	requested: Boolean
}
enum StripePostAccountsObjectBankAccount {
	BANK_ACCOUNT
}
input StripePostAccountsOwnershipDeclarationCompanyInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostAccountsOxxoPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsP24PaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsPaymentsSettingsInput {
	statementDescriptorKanji: String
	statementDescriptorKana: String
	statementDescriptor: String
}
input StripePostAccountsPaynowPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsPayoutsSettingsInput {
	statementDescriptor: String
	schedule: StripePostAccountsSchedulePayoutsSettingsInput
	debitNegativeBalances: Boolean
}
enum StripePostAccountsPoliticalExposureIndividual {
	EXISTING
	NONE
}
input StripePostAccountsPromptpayPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsProofOfRegistrationDocumentsInput {
	files: [String!]
}
input StripePostAccountsRegisteredAddressIndividualInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsSchedulePayoutsSettingsInput {
	delayDays: JSON
	weeklyAnchor: StripePostAccountsWeeklyAnchorSchedulePayoutsSettings
	monthlyAnchor: Int
	interval: StripePostAccountsIntervalSchedulePayoutsSettings
}
input StripePostAccountsSepaDebitPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsSettingsInput {
	treasury: StripePostAccountsTreasurySettingsInput
	payouts: StripePostAccountsPayoutsSettingsInput
	payments: StripePostAccountsPaymentsSettingsInput
	cardPayments: StripePostAccountsCardPaymentsSettingsInput
	cardIssuing: StripePostAccountsCardIssuingSettingsInput
	branding: StripePostAccountsBrandingSettingsInput
}
input StripePostAccountsSofortPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsSupportAddressBusinessProfileInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostAccountsTaxReportingUs1099KCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsTaxReportingUs1099MiscCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsTosAcceptanceCardIssuingSettingsInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostAccountsTosAcceptanceInput {
	userAgent: String
	serviceAgreement: String
	ip: String
	date: Int
}
input StripePostAccountsTosAcceptanceTreasurySettingsInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostAccountsTransfersCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsTreasuryCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsTreasurySettingsInput {
	tosAcceptance: StripePostAccountsTosAcceptanceTreasurySettingsInput
}
enum StripePostAccountsType {
	CUSTOM
	EXPRESS
	STANDARD
}
input StripePostAccountsUsBankAccountAchPaymentsCapabilitiesInput {
	requested: Boolean
}
input StripePostAccountsVerificationCompanyInput {
	document: StripePostAccountsDocumentVerificationCompanyInput
}
input StripePostAccountsVerificationIndividualInput {
	document: StripePostAccountsDocumentVerificationIndividualInput
	additionalDocument: StripePostAccountsAdditionalDocumentVerificationIndividualInput
}
enum StripePostAccountsWeeklyAnchorSchedulePayoutsSettings {
	FRIDAY
	MONDAY
	SATURDAY
	SUNDAY
	THURSDAY
	TUESDAY
	WEDNESDAY
}
input StripePostApplePayDomainsInput {
	expand: [String!]
	domainName: String!
}
input StripePostApplicationFeesFeeRefundsIdInput {
	metadata: JSON
	expand: [String!]
}
input StripePostApplicationFeesIdRefundInput {
	expand: [String!]
	directive: String
	amount: Int
}
input StripePostApplicationFeesIdRefundsInput {
	metadata: JSON
	expand: [String!]
	amount: Int
}
input StripePostAppsSecretsDeleteInput {
	scope: StripePostAppsSecretsDeleteScopeInput!
	name: String!
	expand: [String!]
}
input StripePostAppsSecretsDeleteScopeInput {
	user: String
	type: StripePostAppsSecretsDeleteTypeScope!
}
enum StripePostAppsSecretsDeleteTypeScope {
	ACCOUNT
	USER
}
input StripePostAppsSecretsInput {
	scope: StripePostAppsSecretsScopeInput!
	payload: String!
	name: String!
	expiresAt: Int
	expand: [String!]
}
input StripePostAppsSecretsScopeInput {
	user: String
	type: StripePostAppsSecretsTypeScope!
}
enum StripePostAppsSecretsTypeScope {
	ACCOUNT
	USER
}
input StripePostBillingPortalConfigurationsBusinessProfileInput {
	termsOfServiceUrl: String
	privacyPolicyUrl: String
	headline: String
}
input StripePostBillingPortalConfigurationsCancellationReasonSubscriptionCancelFeaturesInput {
	options: JSON!
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsConfigurationBusinessProfileInput {
	termsOfServiceUrl: JSON
	privacyPolicyUrl: JSON
	headline: String
}
input StripePostBillingPortalConfigurationsConfigurationCancellationReasonSubscriptionCancelFeaturesInput {
	options: JSON
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsConfigurationCustomerUpdateFeaturesInput {
	allowedUpdates: JSON
	enabled: Boolean
}
input StripePostBillingPortalConfigurationsConfigurationFeaturesInput {
	subscriptionUpdate: StripePostBillingPortalConfigurationsConfigurationSubscriptionUpdateFeaturesInput
	subscriptionPause: StripePostBillingPortalConfigurationsConfigurationSubscriptionPauseFeaturesInput
	subscriptionCancel: StripePostBillingPortalConfigurationsConfigurationSubscriptionCancelFeaturesInput
	paymentMethodUpdate: StripePostBillingPortalConfigurationsConfigurationPaymentMethodUpdateFeaturesInput
	invoiceHistory: StripePostBillingPortalConfigurationsConfigurationInvoiceHistoryFeaturesInput
	customerUpdate: StripePostBillingPortalConfigurationsConfigurationCustomerUpdateFeaturesInput
}
input StripePostBillingPortalConfigurationsConfigurationInput {
	metadata: JSON
	defaultReturnUrl: JSON
	loginPage: StripePostBillingPortalConfigurationsConfigurationLoginPageInput
	features: StripePostBillingPortalConfigurationsConfigurationFeaturesInput
	expand: [String!]
	businessProfile: StripePostBillingPortalConfigurationsConfigurationBusinessProfileInput
	active: Boolean
}
input StripePostBillingPortalConfigurationsConfigurationInvoiceHistoryFeaturesInput {
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsConfigurationLoginPageInput {
	enabled: Boolean!
}
enum StripePostBillingPortalConfigurationsConfigurationModeSubscriptionCancelFeatures {
	AT_PERIOD_END
	IMMEDIATELY
}
input StripePostBillingPortalConfigurationsConfigurationPaymentMethodUpdateFeaturesInput {
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput {
	product: String!
	prices: [String!]!
}
enum StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionCancelFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionUpdateFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostBillingPortalConfigurationsConfigurationSubscriptionCancelFeaturesInput {
	prorationBehavior: StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionCancelFeatures
	mode: StripePostBillingPortalConfigurationsConfigurationModeSubscriptionCancelFeatures
	enabled: Boolean
	cancellationReason: StripePostBillingPortalConfigurationsConfigurationCancellationReasonSubscriptionCancelFeaturesInput
}
input StripePostBillingPortalConfigurationsConfigurationSubscriptionPauseFeaturesInput {
	enabled: Boolean
}
input StripePostBillingPortalConfigurationsConfigurationSubscriptionUpdateFeaturesInput {
	defaultAllowedUpdates: JSON
	prorationBehavior: StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionUpdateFeatures
	products: StripeStringOrPostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesUnionInput
	enabled: Boolean
}
input StripePostBillingPortalConfigurationsCustomerUpdateFeaturesInput {
	allowedUpdates: JSON
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsFeaturesInput {
	subscriptionUpdate: StripePostBillingPortalConfigurationsSubscriptionUpdateFeaturesInput
	subscriptionPause: StripePostBillingPortalConfigurationsSubscriptionPauseFeaturesInput
	subscriptionCancel: StripePostBillingPortalConfigurationsSubscriptionCancelFeaturesInput
	paymentMethodUpdate: StripePostBillingPortalConfigurationsPaymentMethodUpdateFeaturesInput
	invoiceHistory: StripePostBillingPortalConfigurationsInvoiceHistoryFeaturesInput
	customerUpdate: StripePostBillingPortalConfigurationsCustomerUpdateFeaturesInput
}
input StripePostBillingPortalConfigurationsInput {
	defaultReturnUrl: JSON
	metadata: JSON
	loginPage: StripePostBillingPortalConfigurationsLoginPageInput
	features: StripePostBillingPortalConfigurationsFeaturesInput!
	expand: [String!]
	businessProfile: StripePostBillingPortalConfigurationsBusinessProfileInput!
}
input StripePostBillingPortalConfigurationsInvoiceHistoryFeaturesInput {
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsLoginPageInput {
	enabled: Boolean!
}
enum StripePostBillingPortalConfigurationsModeSubscriptionCancelFeatures {
	AT_PERIOD_END
	IMMEDIATELY
}
input StripePostBillingPortalConfigurationsPaymentMethodUpdateFeaturesInput {
	enabled: Boolean!
}
input StripePostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput {
	product: String!
	prices: [String!]!
}
enum StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionCancelFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionUpdateFeatures {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostBillingPortalConfigurationsSubscriptionCancelFeaturesInput {
	prorationBehavior: StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionCancelFeatures
	mode: StripePostBillingPortalConfigurationsModeSubscriptionCancelFeatures
	enabled: Boolean!
	cancellationReason: StripePostBillingPortalConfigurationsCancellationReasonSubscriptionCancelFeaturesInput
}
input StripePostBillingPortalConfigurationsSubscriptionPauseFeaturesInput {
	enabled: Boolean
}
input StripePostBillingPortalConfigurationsSubscriptionUpdateFeaturesInput {
	defaultAllowedUpdates: JSON!
	prorationBehavior: StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionUpdateFeatures
	products: StripeStringOrPostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesUnionInput!
	enabled: Boolean!
}
input StripePostBillingPortalSessionsAfterCompletionFlowDataInput {
	type: StripePostBillingPortalSessionsTypeAfterCompletionFlowData!
	redirect: StripePostBillingPortalSessionsRedirectAfterCompletionFlowDataInput
	hostedConfirmation: StripePostBillingPortalSessionsHostedConfirmationAfterCompletionFlowDataInput
}
input StripePostBillingPortalSessionsFlowDataInput {
	type: StripePostBillingPortalSessionsTypeFlowData!
	subscriptionCancel: StripePostBillingPortalSessionsSubscriptionCancelFlowDataInput
	afterCompletion: StripePostBillingPortalSessionsAfterCompletionFlowDataInput
}
input StripePostBillingPortalSessionsHostedConfirmationAfterCompletionFlowDataInput {
	customMessage: String
}
input StripePostBillingPortalSessionsInput {
	returnUrl: String
	onBehalfOf: String
	locale: StripePostBillingPortalSessionsLocale
	flowData: StripePostBillingPortalSessionsFlowDataInput
	expand: [String!]
	customer: String!
	configuration: String
}
enum StripePostBillingPortalSessionsLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_AU
	EN_CA
	EN_GB
	EN_IE
	EN_IN
	EN_NZ
	EN_SG
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
input StripePostBillingPortalSessionsRedirectAfterCompletionFlowDataInput {
	returnUrl: String!
}
input StripePostBillingPortalSessionsSubscriptionCancelFlowDataInput {
	subscription: String!
}
enum StripePostBillingPortalSessionsTypeAfterCompletionFlowData {
	HOSTED_CONFIRMATION
	PORTAL_HOMEPAGE
	REDIRECT
}
enum StripePostBillingPortalSessionsTypeFlowData {
	PAYMENT_METHOD_UPDATE
	SUBSCRIPTION_CANCEL
}
input StripePostChargesAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostChargesCardInput {
	object: StripePostChargesObjectCard
	number: String!
	name: String
	metadata: JSON
	expYear: Int!
	expMonth: Int!
	cvc: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
}
input StripePostChargesChargeAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostChargesChargeCaptureInput {
	transferGroup: String
	transferData: StripePostChargesChargeCaptureTransferDataInput
	statementDescriptorSuffix: String
	statementDescriptor: String
	receiptEmail: String
	expand: [String!]
	applicationFeeAmount: Int
	applicationFee: Int
	amount: Int
}
input StripePostChargesChargeCaptureTransferDataInput {
	amount: Int
}
input StripePostChargesChargeDisputeCloseInput {
	expand: [String!]
}
input StripePostChargesChargeDisputeEvidenceInput {
	uncategorizedText: String
	uncategorizedFile: String
	shippingTrackingNumber: String
	shippingDocumentation: String
	shippingDate: String
	shippingCarrier: String
	shippingAddress: String
	serviceDocumentation: String
	serviceDate: String
	refundRefusalExplanation: String
	refundPolicyDisclosure: String
	refundPolicy: String
	receipt: String
	productDescription: String
	duplicateChargeId: String
	duplicateChargeExplanation: String
	duplicateChargeDocumentation: String
	customerSignature: String
	customerPurchaseIp: String
	customerName: String
	customerEmailAddress: String
	customerCommunication: String
	cancellationRebuttal: String
	cancellationPolicyDisclosure: String
	cancellationPolicy: String
	billingAddress: String
	accessActivityLog: String
}
input StripePostChargesChargeDisputeInput {
	metadata: JSON
	submit: Boolean
	expand: [String!]
	evidence: StripePostChargesChargeDisputeEvidenceInput
}
input StripePostChargesChargeFraudDetailsInput {
	userReport: String!
}
input StripePostChargesChargeInput {
	metadata: JSON
	transferGroup: String
	shipping: StripePostChargesChargeShippingInput
	receiptEmail: String
	fraudDetails: StripePostChargesChargeFraudDetailsInput
	expand: [String!]
	description: String
	customer: String
}
input StripePostChargesChargeRefundInput {
	metadata: JSON
	reverseTransfer: Boolean
	refundApplicationFee: Boolean
	reason: StripePostChargesChargeRefundReason
	paymentIntent: String
	instructionsEmail: String
	expand: [String!]
	amount: Int
}
enum StripePostChargesChargeRefundReason {
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input StripePostChargesChargeRefundsInput {
	metadata: JSON
	reverseTransfer: Boolean
	refundApplicationFee: Boolean
	reason: StripePostChargesChargeRefundsReason
	paymentIntent: String
	origin: StripePostChargesChargeRefundsOrigin
	instructionsEmail: String
	expand: [String!]
	customer: String
	currency: String
	amount: Int
}
enum StripePostChargesChargeRefundsOrigin {
	CUSTOMER_BALANCE
}
enum StripePostChargesChargeRefundsReason {
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input StripePostChargesChargeRefundsRefundInput {
	metadata: JSON
	expand: [String!]
}
input StripePostChargesChargeShippingInput {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: StripePostChargesChargeAddressShippingInput!
}
input StripePostChargesDestinationInput {
	amount: Int
	account: String!
}
input StripePostChargesInput {
	metadata: JSON
	transferGroup: String
	transferData: StripePostChargesTransferDataInput
	statementDescriptorSuffix: String
	statementDescriptor: String
	source: String
	shipping: StripePostChargesShippingInput
	receiptEmail: String
	radarOptions: StripePostChargesRadarOptionsInput
	onBehalfOf: String
	expand: [String!]
	destination: StripeStringOrPostChargesDestinationUnionInput
	description: String
	customer: String
	currency: String
	card: StripeStringOrPostChargesCardUnionInput
	capture: Boolean
	applicationFeeAmount: Int
	applicationFee: Int
	amount: Int
}
enum StripePostChargesObjectCard {
	CARD
}
input StripePostChargesRadarOptionsInput {
	session: String
}
input StripePostChargesShippingInput {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: StripePostChargesAddressShippingInput!
}
input StripePostChargesTransferDataInput {
	destination: String!
	amount: Int
}
input StripePostCheckoutSessionsAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostCheckoutSessionsVerificationMethodAcssDebitPaymentMethodOptions
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageAcssDebitPaymentMethodOptions
	mandateOptions: StripePostCheckoutSessionsMandateOptionsAcssDebitPaymentMethodOptionsInput
	currency: StripePostCheckoutSessionsCurrencyAcssDebitPaymentMethodOptions
}
enum StripePostCheckoutSessionsAddressCustomerUpdate {
	AUTO
	NEVER
}
input StripePostCheckoutSessionsAddressShippingPaymentIntentDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String!
	country: String
	city: String
}
input StripePostCheckoutSessionsAdjustableQuantityLineItemsInput {
	minimum: Int
	maximum: Int
	enabled: Boolean!
}
input StripePostCheckoutSessionsAffirmPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageAffirmPaymentMethodOptions
}
input StripePostCheckoutSessionsAfterExpirationInput {
	recovery: StripePostCheckoutSessionsRecoveryAfterExpirationInput
}
input StripePostCheckoutSessionsAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageAfterpayClearpayPaymentMethodOptions
}
input StripePostCheckoutSessionsAlipayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageAlipayPaymentMethodOptions
}
enum StripePostCheckoutSessionsAllowedCountriesShippingAddressCollection {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
input StripePostCheckoutSessionsAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageAuBecsDebitPaymentMethodOptions
}
input StripePostCheckoutSessionsAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostCheckoutSessionsBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageBacsDebitPaymentMethodOptions
}
input StripePostCheckoutSessionsBancontactPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageBancontactPaymentMethodOptions
}
input StripePostCheckoutSessionsBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: StripePostCheckoutSessionsTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [StripePostCheckoutSessionsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]
	euBankTransfer: StripePostCheckoutSessionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput
}
enum StripePostCheckoutSessionsBillingAddressCollection {
	AUTO
	REQUIRED
}
input StripePostCheckoutSessionsBoletoPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageBoletoPaymentMethodOptions
	expiresAfterDays: Int
}
enum StripePostCheckoutSessionsCaptureMethodPaymentIntentData {
	AUTOMATIC
	MANUAL
}
input StripePostCheckoutSessionsCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: String
	statementDescriptorSuffixKana: String
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageCardPaymentMethodOptions
	installments: StripePostCheckoutSessionsInstallmentsCardPaymentMethodOptionsInput
}
enum StripePostCheckoutSessionsClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
input StripePostCheckoutSessionsConsentCollectionInput {
	termsOfService: StripePostCheckoutSessionsTermsOfServiceConsentCollection
	promotions: StripePostCheckoutSessionsPromotionsConsentCollection
}
enum StripePostCheckoutSessionsCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
input StripePostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput {
	value: String!
	name: String!
}
input StripePostCheckoutSessionsCustomTextInput {
	submit: StripeStringOrPostCheckoutSessionsSubmitCustomTextUnionInput
	shippingAddress: StripeStringOrPostCheckoutSessionsShippingAddressCustomTextUnionInput
}
input StripePostCheckoutSessionsCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageCustomerBalancePaymentMethodOptions
	fundingType: StripePostCheckoutSessionsFundingTypeCustomerBalancePaymentMethodOptions
	bankTransfer: StripePostCheckoutSessionsBankTransferCustomerBalancePaymentMethodOptionsInput
}
enum StripePostCheckoutSessionsCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
input StripePostCheckoutSessionsCustomerUpdateInput {
	shipping: StripePostCheckoutSessionsShippingCustomerUpdate
	name: StripePostCheckoutSessionsNameCustomerUpdate
	address: StripePostCheckoutSessionsAddressCustomerUpdate
}
enum StripePostCheckoutSessionsDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input StripePostCheckoutSessionsDeliveryEstimateShippingRateDataShippingOptionsInput {
	minimum: StripePostCheckoutSessionsMinimumDeliveryEstimateShippingRateDataShippingOptionsInput
	maximum: StripePostCheckoutSessionsMaximumDeliveryEstimateShippingRateDataShippingOptionsInput
}
input StripePostCheckoutSessionsDiscountsInput {
	promotionCode: String
	coupon: String
}
input StripePostCheckoutSessionsEndBehaviorTrialSettingsSubscriptionDataInput {
	missingPaymentMethod: StripePostCheckoutSessionsMissingPaymentMethodEndBehaviorTrialSettingsSubscriptionData!
}
input StripePostCheckoutSessionsEpsPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageEpsPaymentMethodOptions
}
input StripePostCheckoutSessionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input StripePostCheckoutSessionsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	permissions: [StripePostCheckoutSessionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
input StripePostCheckoutSessionsFixedAmountShippingRateDataShippingOptionsInput {
	currencyOptions: JSON
	currency: String!
	amount: Int!
}
input StripePostCheckoutSessionsFpxPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageFpxPaymentMethodOptions
}
enum StripePostCheckoutSessionsFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
input StripePostCheckoutSessionsGiropayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageGiropayPaymentMethodOptions
}
input StripePostCheckoutSessionsGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageGrabpayPaymentMethodOptions
}
input StripePostCheckoutSessionsIdealPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageIdealPaymentMethodOptions
}
input StripePostCheckoutSessionsInput {
	taxIdCollection: StripePostCheckoutSessionsTaxIdCollectionInput
	successUrl: String!
	subscriptionData: StripePostCheckoutSessionsSubscriptionDataInput
	submitType: StripePostCheckoutSessionsSubmitType
	shippingOptions: [StripePostCheckoutSessionsShippingOptionsInput!]
	shippingAddressCollection: StripePostCheckoutSessionsShippingAddressCollectionInput
	setupIntentData: StripePostCheckoutSessionsSetupIntentDataInput
	phoneNumberCollection: StripePostCheckoutSessionsPhoneNumberCollectionInput
	paymentMethodTypes: [StripePostCheckoutSessionsPaymentMethodTypes!]
	paymentMethodOptions: StripePostCheckoutSessionsPaymentMethodOptionsInput
	paymentMethodCollection: StripePostCheckoutSessionsPaymentMethodCollection
	paymentIntentData: StripePostCheckoutSessionsPaymentIntentDataInput
	mode: StripePostCheckoutSessionsMode
	metadata: JSON
	locale: StripePostCheckoutSessionsLocale
	lineItems: [StripePostCheckoutSessionsLineItemsInput!]
	invoiceCreation: StripePostCheckoutSessionsInvoiceCreationInput
	expiresAt: Int
	expand: [String!]
	discounts: [StripePostCheckoutSessionsDiscountsInput!]
	customerUpdate: StripePostCheckoutSessionsCustomerUpdateInput
	customerEmail: String
	customerCreation: StripePostCheckoutSessionsCustomerCreation
	customer: String
	customText: StripePostCheckoutSessionsCustomTextInput
	currency: String
	consentCollection: StripePostCheckoutSessionsConsentCollectionInput
	clientReferenceId: String
	cancelUrl: String
	billingAddressCollection: StripePostCheckoutSessionsBillingAddressCollection
	automaticTax: StripePostCheckoutSessionsAutomaticTaxInput
	allowPromotionCodes: Boolean
	afterExpiration: StripePostCheckoutSessionsAfterExpirationInput
}
input StripePostCheckoutSessionsInstallmentsCardPaymentMethodOptionsInput {
	enabled: Boolean
}
enum StripePostCheckoutSessionsIntervalRecurringPriceDataLineItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostCheckoutSessionsInvoiceCreationInput {
	invoiceData: StripePostCheckoutSessionsInvoiceDataInvoiceCreationInput
	enabled: Boolean!
}
input StripePostCheckoutSessionsInvoiceDataInvoiceCreationInput {
	accountTaxIds: JSON
	renderingOptions: StripeStringOrPostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationUnionInput
	metadata: JSON
	footer: String
	description: String
	customFields: StripeStringOrPostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationUnionInput
}
input StripePostCheckoutSessionsKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageKlarnaPaymentMethodOptions
}
input StripePostCheckoutSessionsKonbiniPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageKonbiniPaymentMethodOptions
	expiresAfterDays: Int
}
input StripePostCheckoutSessionsLineItemsInput {
	taxRates: [String!]
	quantity: Int
	priceData: StripePostCheckoutSessionsPriceDataLineItemsInput
	price: String
	dynamicTaxRates: [String!]
	adjustableQuantity: StripePostCheckoutSessionsAdjustableQuantityLineItemsInput
}
enum StripePostCheckoutSessionsLocale {
	AUTO
	BG
	CS
	DA
	DE
	EL
	EN
	EN_GB
	ES
	ES_419
	ET
	FI
	FIL
	FR
	FR_CA
	HR
	HU
	ID
	IT
	JA
	KO
	LT
	LV
	MS
	MT
	NB
	NL
	PL
	PT
	PT_BR
	RO
	RU
	SK
	SL
	SV
	TH
	TR
	VI
	ZH
	ZH_HK
	ZH_TW
}
input StripePostCheckoutSessionsMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostCheckoutSessionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostCheckoutSessionsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
	defaultFor: [StripePostCheckoutSessionsDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]
}
input StripePostCheckoutSessionsMaximumDeliveryEstimateShippingRateDataShippingOptionsInput {
	value: Int!
	unit: StripePostCheckoutSessionsUnitMaximumDeliveryEstimateShippingRateDataShippingOptions!
}
input StripePostCheckoutSessionsMinimumDeliveryEstimateShippingRateDataShippingOptionsInput {
	value: Int!
	unit: StripePostCheckoutSessionsUnitMinimumDeliveryEstimateShippingRateDataShippingOptions!
}
enum StripePostCheckoutSessionsMissingPaymentMethodEndBehaviorTrialSettingsSubscriptionData {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum StripePostCheckoutSessionsMode {
	PAYMENT
	SETUP
	SUBSCRIPTION
}
enum StripePostCheckoutSessionsNameCustomerUpdate {
	AUTO
	NEVER
}
input StripePostCheckoutSessionsOxxoPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageOxxoPaymentMethodOptions
	expiresAfterDays: Int
}
input StripePostCheckoutSessionsP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageP24PaymentMethodOptions
}
input StripePostCheckoutSessionsPaymentIntentDataInput {
	transferGroup: String
	transferData: StripePostCheckoutSessionsTransferDataPaymentIntentDataInput
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: StripePostCheckoutSessionsShippingPaymentIntentDataInput
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsagePaymentIntentData
	receiptEmail: String
	onBehalfOf: String
	metadata: JSON
	description: String
	captureMethod: StripePostCheckoutSessionsCaptureMethodPaymentIntentData
	applicationFeeAmount: Int
}
enum StripePostCheckoutSessionsPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
input StripePostCheckoutSessionsPaymentMethodOptionsInput {
	wechatPay: StripePostCheckoutSessionsWechatPayPaymentMethodOptionsInput
	usBankAccount: StripePostCheckoutSessionsUsBankAccountPaymentMethodOptionsInput
	sofort: StripePostCheckoutSessionsSofortPaymentMethodOptionsInput
	sepaDebit: StripePostCheckoutSessionsSepaDebitPaymentMethodOptionsInput
	pix: StripePostCheckoutSessionsPixPaymentMethodOptionsInput
	paynow: StripePostCheckoutSessionsPaynowPaymentMethodOptionsInput
	p24: StripePostCheckoutSessionsP24PaymentMethodOptionsInput
	oxxo: StripePostCheckoutSessionsOxxoPaymentMethodOptionsInput
	konbini: StripePostCheckoutSessionsKonbiniPaymentMethodOptionsInput
	klarna: StripePostCheckoutSessionsKlarnaPaymentMethodOptionsInput
	ideal: StripePostCheckoutSessionsIdealPaymentMethodOptionsInput
	grabpay: StripePostCheckoutSessionsGrabpayPaymentMethodOptionsInput
	giropay: StripePostCheckoutSessionsGiropayPaymentMethodOptionsInput
	fpx: StripePostCheckoutSessionsFpxPaymentMethodOptionsInput
	eps: StripePostCheckoutSessionsEpsPaymentMethodOptionsInput
	customerBalance: StripePostCheckoutSessionsCustomerBalancePaymentMethodOptionsInput
	card: StripePostCheckoutSessionsCardPaymentMethodOptionsInput
	boleto: StripePostCheckoutSessionsBoletoPaymentMethodOptionsInput
	bancontact: StripePostCheckoutSessionsBancontactPaymentMethodOptionsInput
	bacsDebit: StripePostCheckoutSessionsBacsDebitPaymentMethodOptionsInput
	auBecsDebit: StripePostCheckoutSessionsAuBecsDebitPaymentMethodOptionsInput
	alipay: StripePostCheckoutSessionsAlipayPaymentMethodOptionsInput
	afterpayClearpay: StripePostCheckoutSessionsAfterpayClearpayPaymentMethodOptionsInput
	affirm: StripePostCheckoutSessionsAffirmPaymentMethodOptionsInput
	acssDebit: StripePostCheckoutSessionsAcssDebitPaymentMethodOptionsInput
}
enum StripePostCheckoutSessionsPaymentMethodTypes {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum StripePostCheckoutSessionsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
input StripePostCheckoutSessionsPaynowPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsagePaynowPaymentMethodOptions
}
enum StripePostCheckoutSessionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostCheckoutSessionsPhoneNumberCollectionInput {
	enabled: Boolean!
}
input StripePostCheckoutSessionsPixPaymentMethodOptionsInput {
	expiresAfterSeconds: Int
}
input StripePostCheckoutSessionsPriceDataLineItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostCheckoutSessionsTaxBehaviorPriceDataLineItems
	recurring: StripePostCheckoutSessionsRecurringPriceDataLineItemsInput
	productData: StripePostCheckoutSessionsProductDataPriceDataLineItemsInput
	product: String
	currency: String!
}
input StripePostCheckoutSessionsProductDataPriceDataLineItemsInput {
	taxCode: String
	name: String!
	metadata: JSON
	images: [String!]
	description: String
}
enum StripePostCheckoutSessionsPromotionsConsentCollection {
	AUTO
	NONE
}
input StripePostCheckoutSessionsRecoveryAfterExpirationInput {
	enabled: Boolean!
	allowPromotionCodes: Boolean
}
input StripePostCheckoutSessionsRecurringPriceDataLineItemsInput {
	intervalCount: Int
	interval: StripePostCheckoutSessionsIntervalRecurringPriceDataLineItems!
}
input StripePostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput {
	amountTaxDisplay: String
}
enum StripePostCheckoutSessionsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
input StripePostCheckoutSessionsSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageSepaDebitPaymentMethodOptions
}
input StripePostCheckoutSessionsSessionExpireInput {
	expand: [String!]
}
enum StripePostCheckoutSessionsSetupFutureUsageAcssDebitPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageAlipayPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageAuBecsDebitPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageBacsDebitPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsageBancontactPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageBoletoPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsageCardPaymentMethodOptions {
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageIdealPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsagePaymentIntentData {
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageSepaDebitPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsageSofortPaymentMethodOptions {
	NONE
}
enum StripePostCheckoutSessionsSetupFutureUsageUsBankAccountPaymentMethodOptions {
	NONE
	OFF_SESSION
	ON_SESSION
}
enum StripePostCheckoutSessionsSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
input StripePostCheckoutSessionsSetupIntentDataInput {
	onBehalfOf: String
	metadata: JSON
	description: String
}
input StripePostCheckoutSessionsShippingAddressCollectionInput {
	allowedCountries: [StripePostCheckoutSessionsAllowedCountriesShippingAddressCollection!]!
}
input StripePostCheckoutSessionsShippingAddressCustomTextInput {
	message: String!
}
enum StripePostCheckoutSessionsShippingCustomerUpdate {
	AUTO
	NEVER
}
input StripePostCheckoutSessionsShippingOptionsInput {
	shippingRateData: StripePostCheckoutSessionsShippingRateDataShippingOptionsInput
	shippingRate: String
}
input StripePostCheckoutSessionsShippingPaymentIntentDataInput {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: StripePostCheckoutSessionsAddressShippingPaymentIntentDataInput!
}
input StripePostCheckoutSessionsShippingRateDataShippingOptionsInput {
	type: StripePostCheckoutSessionsTypeShippingRateDataShippingOptions
	taxCode: String
	taxBehavior: StripePostCheckoutSessionsTaxBehaviorShippingRateDataShippingOptions
	metadata: JSON
	fixedAmount: StripePostCheckoutSessionsFixedAmountShippingRateDataShippingOptionsInput
	displayName: String!
	deliveryEstimate: StripePostCheckoutSessionsDeliveryEstimateShippingRateDataShippingOptionsInput
}
input StripePostCheckoutSessionsSofortPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageSofortPaymentMethodOptions
}
input StripePostCheckoutSessionsSubmitCustomTextInput {
	message: String!
}
enum StripePostCheckoutSessionsSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
input StripePostCheckoutSessionsSubscriptionDataInput {
	trialSettings: StripePostCheckoutSessionsTrialSettingsSubscriptionDataInput
	trialPeriodDays: Int
	trialEnd: Int
	transferData: StripePostCheckoutSessionsTransferDataSubscriptionDataInput
	onBehalfOf: String
	metadata: JSON
	description: String
	defaultTaxRates: [String!]
	applicationFeePercent: Float
}
enum StripePostCheckoutSessionsTaxBehaviorPriceDataLineItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostCheckoutSessionsTaxBehaviorShippingRateDataShippingOptions {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostCheckoutSessionsTaxIdCollectionInput {
	enabled: Boolean!
}
enum StripePostCheckoutSessionsTermsOfServiceConsentCollection {
	NONE
	REQUIRED
}
enum StripePostCheckoutSessionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
input StripePostCheckoutSessionsTransferDataPaymentIntentDataInput {
	destination: String!
	amount: Int
}
input StripePostCheckoutSessionsTransferDataSubscriptionDataInput {
	destination: String!
	amountPercent: Float
}
input StripePostCheckoutSessionsTrialSettingsSubscriptionDataInput {
	endBehavior: StripePostCheckoutSessionsEndBehaviorTrialSettingsSubscriptionDataInput!
}
enum StripePostCheckoutSessionsTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum StripePostCheckoutSessionsTypeShippingRateDataShippingOptions {
	FIXED_AMOUNT
}
enum StripePostCheckoutSessionsUnitMaximumDeliveryEstimateShippingRateDataShippingOptions {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum StripePostCheckoutSessionsUnitMinimumDeliveryEstimateShippingRateDataShippingOptions {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
input StripePostCheckoutSessionsUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostCheckoutSessionsVerificationMethodUsBankAccountPaymentMethodOptions
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageUsBankAccountPaymentMethodOptions
	financialConnections: StripePostCheckoutSessionsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostCheckoutSessionsVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostCheckoutSessionsVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
}
input StripePostCheckoutSessionsWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostCheckoutSessionsSetupFutureUsageWechatPayPaymentMethodOptions
	client: StripePostCheckoutSessionsClientWechatPayPaymentMethodOptions!
	appId: String
}
input StripePostCouponsAppliesToInput {
	products: [String!]
}
input StripePostCouponsCouponInput {
	metadata: JSON
	name: String
	expand: [String!]
	currencyOptions: JSON
}
enum StripePostCouponsDuration {
	FOREVER
	ONCE
	REPEATING
}
input StripePostCouponsInput {
	metadata: JSON
	redeemBy: Int
	percentOff: Float
	name: String
	maxRedemptions: Int
	id: String
	expand: [String!]
	durationInMonths: Int
	duration: StripePostCouponsDuration
	currencyOptions: JSON
	currency: String
	appliesTo: StripePostCouponsAppliesToInput
	amountOff: Int
}
input StripePostCreditNotesIdInput {
	metadata: JSON
	memo: String
	expand: [String!]
}
input StripePostCreditNotesIdVoidInput {
	expand: [String!]
}
input StripePostCreditNotesInput {
	shippingCost: StripePostCreditNotesShippingCostInput
	refundAmount: Int
	refund: String
	reason: StripePostCreditNotesReason
	outOfBandAmount: Int
	metadata: JSON
	memo: String
	lines: [StripePostCreditNotesLinesInput!]
	invoice: String!
	expand: [String!]
	creditAmount: Int
	amount: Int
}
input StripePostCreditNotesLinesInput {
	taxRates: JSON
	unitAmountDecimal: String
	unitAmount: Int
	type: StripePostCreditNotesTypeLines!
	quantity: Int
	invoiceLineItem: String
	description: String
	amount: Int
}
enum StripePostCreditNotesReason {
	DUPLICATE
	FRAUDULENT
	ORDER_CHANGE
	PRODUCT_UNSATISFACTORY
}
input StripePostCreditNotesShippingCostInput {
	shippingRate: String
}
enum StripePostCreditNotesTypeLines {
	CUSTOM_LINE_ITEM
	INVOICE_LINE_ITEM
}
input StripePostCustomersAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersCashBalanceInput {
	settings: StripePostCustomersSettingsCashBalanceInput
}
input StripePostCustomersCustomFieldsInvoiceSettingsInput {
	value: String!
	name: String!
}
enum StripePostCustomersCustomerAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersCustomerAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersCustomerBalanceTransactionsInput {
	metadata: JSON
	expand: [String!]
	description: String
	currency: String!
	amount: Int!
}
input StripePostCustomersCustomerBalanceTransactionsTransactionInput {
	metadata: JSON
	expand: [String!]
	description: String
}
input StripePostCustomersCustomerBankAccountInput {
	routingNumber: String
	object: StripePostCustomersCustomerObjectBankAccount
	currency: String
	country: String!
	accountNumber: String!
	accountHolderType: StripePostCustomersCustomerAccountHolderTypeBankAccount
	accountHolderName: String
}
enum StripePostCustomersCustomerBankAccountsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerBankAccountsBankAccountInput {
	routingNumber: String
	object: StripePostCustomersCustomerBankAccountsObjectBankAccount
	currency: String
	country: String!
	accountNumber: String!
	accountHolderType: StripePostCustomersCustomerBankAccountsAccountHolderTypeBankAccount
	accountHolderName: String
}
input StripePostCustomersCustomerBankAccountsCardInput {
	object: StripePostCustomersCustomerBankAccountsObjectCard
	number: String!
	name: String
	metadata: JSON
	expYear: Int!
	expMonth: Int!
	cvc: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
}
enum StripePostCustomersCustomerBankAccountsIdAccountHolderType {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerBankAccountsIdAddressOwnerInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersCustomerBankAccountsIdInput {
	metadata: JSON
	owner: StripePostCustomersCustomerBankAccountsIdOwnerInput
	name: String
	expand: [String!]
	expYear: String
	expMonth: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	accountHolderType: StripePostCustomersCustomerBankAccountsIdAccountHolderType
	accountHolderName: String
}
input StripePostCustomersCustomerBankAccountsIdOwnerInput {
	phone: String
	name: String
	email: String
	address: StripePostCustomersCustomerBankAccountsIdAddressOwnerInput
}
input StripePostCustomersCustomerBankAccountsIdVerifyInput {
	expand: [String!]
	amounts: [Int!]
}
input StripePostCustomersCustomerBankAccountsInput {
	source: String
	metadata: JSON
	expand: [String!]
	card: StripeStringOrPostCustomersCustomerBankAccountsCardUnionInput
	bankAccount: StripeStringOrPostCustomersCustomerBankAccountsBankAccountUnionInput
	alipayAccount: String
}
enum StripePostCustomersCustomerBankAccountsObjectBankAccount {
	BANK_ACCOUNT
}
enum StripePostCustomersCustomerBankAccountsObjectCard {
	CARD
}
input StripePostCustomersCustomerCardInput {
	object: StripePostCustomersCustomerObjectCard
	number: String!
	name: String
	metadata: JSON
	expYear: Int!
	expMonth: Int!
	cvc: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
}
enum StripePostCustomersCustomerCardsAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerCardsBankAccountInput {
	routingNumber: String
	object: StripePostCustomersCustomerCardsObjectBankAccount
	currency: String
	country: String!
	accountNumber: String!
	accountHolderType: StripePostCustomersCustomerCardsAccountHolderTypeBankAccount
	accountHolderName: String
}
input StripePostCustomersCustomerCardsCardInput {
	object: StripePostCustomersCustomerCardsObjectCard
	number: String!
	name: String
	metadata: JSON
	expYear: Int!
	expMonth: Int!
	cvc: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
}
enum StripePostCustomersCustomerCardsIdAccountHolderType {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerCardsIdAddressOwnerInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersCustomerCardsIdInput {
	metadata: JSON
	owner: StripePostCustomersCustomerCardsIdOwnerInput
	name: String
	expand: [String!]
	expYear: String
	expMonth: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	accountHolderType: StripePostCustomersCustomerCardsIdAccountHolderType
	accountHolderName: String
}
input StripePostCustomersCustomerCardsIdOwnerInput {
	phone: String
	name: String
	email: String
	address: StripePostCustomersCustomerCardsIdAddressOwnerInput
}
input StripePostCustomersCustomerCardsInput {
	source: String
	metadata: JSON
	expand: [String!]
	card: StripeStringOrPostCustomersCustomerCardsCardUnionInput
	bankAccount: StripeStringOrPostCustomersCustomerCardsBankAccountUnionInput
	alipayAccount: String
}
enum StripePostCustomersCustomerCardsObjectBankAccount {
	BANK_ACCOUNT
}
enum StripePostCustomersCustomerCardsObjectCard {
	CARD
}
input StripePostCustomersCustomerCashBalanceInput {
	settings: StripePostCustomersCustomerSettingsCashBalanceInput
}
input StripePostCustomersCustomerCustomFieldsInvoiceSettingsInput {
	value: String!
	name: String!
}
input StripePostCustomersCustomerFundingInstructionsBankTransferInput {
	type: StripePostCustomersCustomerFundingInstructionsTypeBankTransfer!
	requestedAddressTypes: [StripePostCustomersCustomerFundingInstructionsRequestedAddressTypesBankTransfer!]
	euBankTransfer: StripePostCustomersCustomerFundingInstructionsEuBankTransferBankTransferInput
}
input StripePostCustomersCustomerFundingInstructionsEuBankTransferBankTransferInput {
	country: String!
}
enum StripePostCustomersCustomerFundingInstructionsFundingType {
	BANK_TRANSFER
}
input StripePostCustomersCustomerFundingInstructionsInput {
	fundingType: StripePostCustomersCustomerFundingInstructionsFundingType!
	expand: [String!]
	currency: String!
	bankTransfer: StripePostCustomersCustomerFundingInstructionsBankTransferInput!
}
enum StripePostCustomersCustomerFundingInstructionsRequestedAddressTypesBankTransfer {
	IBAN
	SORT_CODE
	SPEI
	ZENGIN
}
enum StripePostCustomersCustomerFundingInstructionsTypeBankTransfer {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
input StripePostCustomersCustomerInput {
	metadata: JSON
	taxExempt: String
	tax: StripePostCustomersCustomerTaxInput
	source: String
	shipping: StripeStringOrPostCustomersCustomerShippingUnionInput
	promotionCode: String
	preferredLocales: [String!]
	phone: String
	nextInvoiceSequence: Int
	name: String
	invoiceSettings: StripePostCustomersCustomerInvoiceSettingsInput
	invoicePrefix: String
	expand: [String!]
	email: String
	description: String
	defaultSource: String
	defaultCard: String
	defaultBankAccount: String
	defaultAlipayAccount: String
	coupon: String
	cashBalance: StripePostCustomersCustomerCashBalanceInput
	card: StripeStringOrPostCustomersCustomerCardUnionInput
	bankAccount: StripeStringOrPostCustomersCustomerBankAccountUnionInput
	balance: Int
	address: StripeStringOrPostCustomersCustomerAddressUnionInput
}
input StripePostCustomersCustomerInvoiceSettingsInput {
	renderingOptions: StripeStringOrPostCustomersCustomerRenderingOptionsInvoiceSettingsUnionInput
	footer: String
	defaultPaymentMethod: String
	customFields: StripeStringOrPostCustomersCustomerCustomFieldsInvoiceSettingsUnionInput
}
enum StripePostCustomersCustomerObjectBankAccount {
	BANK_ACCOUNT
}
enum StripePostCustomersCustomerObjectCard {
	CARD
}
enum StripePostCustomersCustomerReconciliationModeSettingsCashBalance {
	AUTOMATIC
	MANUAL
	MERCHANT_DEFAULT
}
input StripePostCustomersCustomerRenderingOptionsInvoiceSettingsInput {
	amountTaxDisplay: String
}
input StripePostCustomersCustomerSettingsCashBalanceInput {
	reconciliationMode: StripePostCustomersCustomerReconciliationModeSettingsCashBalance
}
input StripePostCustomersCustomerShippingInput {
	phone: String
	name: String!
	address: StripePostCustomersCustomerAddressShippingInput!
}
enum StripePostCustomersCustomerSourcesAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerSourcesBankAccountInput {
	routingNumber: String
	object: StripePostCustomersCustomerSourcesObjectBankAccount
	currency: String
	country: String!
	accountNumber: String!
	accountHolderType: StripePostCustomersCustomerSourcesAccountHolderTypeBankAccount
	accountHolderName: String
}
input StripePostCustomersCustomerSourcesCardInput {
	object: StripePostCustomersCustomerSourcesObjectCard
	number: String!
	name: String
	metadata: JSON
	expYear: Int!
	expMonth: Int!
	cvc: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
}
enum StripePostCustomersCustomerSourcesIdAccountHolderType {
	COMPANY
	INDIVIDUAL
}
input StripePostCustomersCustomerSourcesIdAddressOwnerInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostCustomersCustomerSourcesIdInput {
	metadata: JSON
	owner: StripePostCustomersCustomerSourcesIdOwnerInput
	name: String
	expand: [String!]
	expYear: String
	expMonth: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
	accountHolderType: StripePostCustomersCustomerSourcesIdAccountHolderType
	accountHolderName: String
}
input StripePostCustomersCustomerSourcesIdOwnerInput {
	phone: String
	name: String
	email: String
	address: StripePostCustomersCustomerSourcesIdAddressOwnerInput
}
input StripePostCustomersCustomerSourcesIdVerifyInput {
	expand: [String!]
	amounts: [Int!]
}
input StripePostCustomersCustomerSourcesInput {
	source: String
	metadata: JSON
	expand: [String!]
	card: StripeStringOrPostCustomersCustomerSourcesCardUnionInput
	bankAccount: StripeStringOrPostCustomersCustomerSourcesBankAccountUnionInput
	alipayAccount: String
}
enum StripePostCustomersCustomerSourcesObjectBankAccount {
	BANK_ACCOUNT
}
enum StripePostCustomersCustomerSourcesObjectCard {
	CARD
}
input StripePostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostCustomersCustomerSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostCustomersCustomerSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsAddInvoiceItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostCustomersCustomerSubscriptionsPriceDataAddInvoiceItemsInput
	price: String
}
enum StripePostCustomersCustomerSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input StripePostCustomersCustomerSubscriptionsAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: StripePostCustomersCustomerSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings
}
input StripePostCustomersCustomerSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String
	euBankTransfer: StripePostCustomersCustomerSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostCustomersCustomerSubscriptionsBillingThresholdsItemsInput {
	usageGte: Int!
}
input StripePostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: StripePostCustomersCustomerSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings
	network: StripePostCustomersCustomerSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostCustomersCustomerSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostCustomersCustomerSubscriptionsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String
	bankTransfer: StripePostCustomersCustomerSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsEndBehaviorTrialSettingsInput {
	missingPaymentMethod: StripePostCustomersCustomerSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings!
}
input StripePostCustomersCustomerSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input StripePostCustomersCustomerSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [StripePostCustomersCustomerSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]
}
input StripePostCustomersCustomerSubscriptionsInput {
	trialEnd: JSON
	metadata: JSON
	defaultTaxRates: JSON
	trialSettings: StripePostCustomersCustomerSubscriptionsTrialSettingsInput
	trialPeriodDays: Int
	trialFromPlan: Boolean
	transferData: StripePostCustomersCustomerSubscriptionsTransferDataInput
	prorationBehavior: StripePostCustomersCustomerSubscriptionsProrationBehavior
	promotionCode: String
	pendingInvoiceItemInterval: StripeStringOrPostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalUnionInput
	paymentSettings: StripePostCustomersCustomerSubscriptionsPaymentSettingsInput
	paymentBehavior: StripePostCustomersCustomerSubscriptionsPaymentBehavior
	offSession: Boolean
	items: [StripePostCustomersCustomerSubscriptionsItemsInput!]
	expand: [String!]
	defaultSource: String
	defaultPaymentMethod: String
	daysUntilDue: Int
	currency: String
	coupon: String
	collectionMethod: StripePostCustomersCustomerSubscriptionsCollectionMethod
	cancelAtPeriodEnd: Boolean
	cancelAt: Int
	billingThresholds: StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsUnionInput
	billingCycleAnchor: Int
	backdateStartDate: Int
	automaticTax: StripePostCustomersCustomerSubscriptionsAutomaticTaxInput
	applicationFeePercent: Float
	addInvoiceItems: [StripePostCustomersCustomerSubscriptionsAddInvoiceItemsInput!]
}
enum StripePostCustomersCustomerSubscriptionsIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripePostCustomersCustomerSubscriptionsIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostCustomersCustomerSubscriptionsItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostCustomersCustomerSubscriptionsPriceDataItemsInput
	price: String
	metadata: JSON
	billingThresholds: StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsItemsUnionInput
}
input StripePostCustomersCustomerSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: StripePostCustomersCustomerSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings
}
input StripePostCustomersCustomerSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String
	amountType: StripePostCustomersCustomerSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings
	amount: Int
}
enum StripePostCustomersCustomerSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum StripePostCustomersCustomerSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum StripePostCustomersCustomerSubscriptionsPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input StripePostCustomersCustomerSubscriptionsPaymentMethodOptionsPaymentSettingsInput {
	konbini: JSON
	usBankAccount: StripeStringOrPostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput
	customerBalance: StripeStringOrPostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput
	card: StripeStringOrPostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput
	bancontact: StripeStringOrPostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput
	acssDebit: StripeStringOrPostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput
}
input StripePostCustomersCustomerSubscriptionsPaymentSettingsInput {
	paymentMethodTypes: JSON
	saveDefaultPaymentMethod: StripePostCustomersCustomerSubscriptionsSaveDefaultPaymentMethodPaymentSettings
	paymentMethodOptions: StripePostCustomersCustomerSubscriptionsPaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput {
	intervalCount: Int
	interval: StripePostCustomersCustomerSubscriptionsIntervalPendingInvoiceItemInterval!
}
enum StripePostCustomersCustomerSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripePostCustomersCustomerSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input StripePostCustomersCustomerSubscriptionsPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataAddInvoiceItems
	product: String!
	currency: String!
}
input StripePostCustomersCustomerSubscriptionsPriceDataItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataItems
	recurring: StripePostCustomersCustomerSubscriptionsRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum StripePostCustomersCustomerSubscriptionsProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostCustomersCustomerSubscriptionsRecurringPriceDataItemsInput {
	intervalCount: Int
	interval: StripePostCustomersCustomerSubscriptionsIntervalRecurringPriceDataItems!
}
enum StripePostCustomersCustomerSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum StripePostCustomersCustomerSubscriptionsSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput
	price: String
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String
	euBankTransfer: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBehaviorPauseCollection {
	KEEP_AS_DRAFT
	MARK_UNCOLLECTIBLE
	VOID
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingCycleAnchor {
	NOW
	UNCHANGED
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput {
	usageGte: Int!
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings
	network: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String
	bankTransfer: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput {
	missingPaymentMethod: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings!
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdInput {
	trialEnd: JSON
	metadata: JSON
	defaultTaxRates: JSON
	cancelAt: JSON
	trialSettings: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTrialSettingsInput
	trialFromPlan: Boolean
	transferData: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataUnionInput
	prorationDate: Int
	prorationBehavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdProrationBehavior
	promotionCode: String
	pendingInvoiceItemInterval: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput
	paymentSettings: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentSettingsInput
	paymentBehavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentBehavior
	pauseCollection: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput
	offSession: Boolean
	items: [StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdItemsInput!]
	expand: [String!]
	defaultSource: String
	defaultPaymentMethod: String
	daysUntilDue: Int
	coupon: String
	collectionMethod: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCollectionMethod
	cancelAtPeriodEnd: Boolean
	billingThresholds: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput
	billingCycleAnchor: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingCycleAnchor
	automaticTax: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAutomaticTaxInput
	applicationFeePercent: Float
	addInvoiceItems: [StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput!]
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdItemsInput {
	taxRates: JSON
	metadata: JSON
	quantity: Int
	priceData: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataItemsInput
	price: String
	id: String
	deleted: Boolean
	clearUsage: Boolean
	billingThresholds: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String
	amountType: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings
	amount: Int
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput {
	resumesAt: Int
	behavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBehaviorPauseCollection!
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput {
	konbini: JSON
	usBankAccount: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput
	customerBalance: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput
	card: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput
	bancontact: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput
	acssDebit: StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentSettingsInput {
	paymentMethodTypes: JSON
	saveDefaultPaymentMethod: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings
	paymentMethodOptions: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput {
	intervalCount: Int
	interval: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval!
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems
	product: String!
	currency: String!
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems
	recurring: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput {
	intervalCount: Int
	interval: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems!
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput {
	destination: String!
	amountPercent: Float
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTrialSettingsInput {
	endBehavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput!
}
input StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings
	financialConnections: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostCustomersCustomerSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input StripePostCustomersCustomerSubscriptionsTransferDataInput {
	destination: String!
	amountPercent: Float
}
input StripePostCustomersCustomerSubscriptionsTrialSettingsInput {
	endBehavior: StripePostCustomersCustomerSubscriptionsEndBehaviorTrialSettingsInput!
}
input StripePostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostCustomersCustomerSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings
	financialConnections: StripePostCustomersCustomerSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostCustomersCustomerSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostCustomersCustomerSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostCustomersCustomerTaxIdsInput {
	value: String!
	type: StripePostCustomersCustomerTaxIdsType!
	expand: [String!]
}
enum StripePostCustomersCustomerTaxIdsType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	US_EIN
	ZA_VAT
}
input StripePostCustomersCustomerTaxInput {
	ipAddress: JSON
}
input StripePostCustomersInput {
	metadata: JSON
	testClock: String
	taxIdData: [StripePostCustomersTaxIdDataInput!]
	taxExempt: String
	tax: StripePostCustomersTaxInput
	source: String
	shipping: StripeStringOrPostCustomersShippingUnionInput
	promotionCode: String
	preferredLocales: [String!]
	phone: String
	paymentMethod: String
	nextInvoiceSequence: Int
	name: String
	invoiceSettings: StripePostCustomersInvoiceSettingsInput
	invoicePrefix: String
	expand: [String!]
	email: String
	description: String
	coupon: String
	cashBalance: StripePostCustomersCashBalanceInput
	balance: Int
	address: StripeStringOrPostCustomersAddressUnionInput
}
input StripePostCustomersInvoiceSettingsInput {
	renderingOptions: StripeStringOrPostCustomersRenderingOptionsInvoiceSettingsUnionInput
	footer: String
	defaultPaymentMethod: String
	customFields: StripeStringOrPostCustomersCustomFieldsInvoiceSettingsUnionInput
}
enum StripePostCustomersReconciliationModeSettingsCashBalance {
	AUTOMATIC
	MANUAL
	MERCHANT_DEFAULT
}
input StripePostCustomersRenderingOptionsInvoiceSettingsInput {
	amountTaxDisplay: String
}
input StripePostCustomersSettingsCashBalanceInput {
	reconciliationMode: StripePostCustomersReconciliationModeSettingsCashBalance
}
input StripePostCustomersShippingInput {
	phone: String
	name: String!
	address: StripePostCustomersAddressShippingInput!
}
input StripePostCustomersTaxIdDataInput {
	value: String!
	type: StripePostCustomersTypeTaxIdData!
}
input StripePostCustomersTaxInput {
	ipAddress: JSON
}
enum StripePostCustomersTypeTaxIdData {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	US_EIN
	ZA_VAT
}
input StripePostDisputesDisputeCloseInput {
	expand: [String!]
}
input StripePostDisputesDisputeEvidenceInput {
	uncategorizedText: String
	uncategorizedFile: String
	shippingTrackingNumber: String
	shippingDocumentation: String
	shippingDate: String
	shippingCarrier: String
	shippingAddress: String
	serviceDocumentation: String
	serviceDate: String
	refundRefusalExplanation: String
	refundPolicyDisclosure: String
	refundPolicy: String
	receipt: String
	productDescription: String
	duplicateChargeId: String
	duplicateChargeExplanation: String
	duplicateChargeDocumentation: String
	customerSignature: String
	customerPurchaseIp: String
	customerName: String
	customerEmailAddress: String
	customerCommunication: String
	cancellationRebuttal: String
	cancellationPolicyDisclosure: String
	cancellationPolicy: String
	billingAddress: String
	accessActivityLog: String
}
input StripePostDisputesDisputeInput {
	metadata: JSON
	submit: Boolean
	expand: [String!]
	evidence: StripePostDisputesDisputeEvidenceInput
}
input StripePostEphemeralKeysInput {
	verificationSession: String
	issuingCard: String
	expand: [String!]
	customer: String
}
input StripePostFileLinksInput {
	metadata: JSON
	file: String!
	expiresAt: Int
	expand: [String!]
}
input StripePostFileLinksLinkInput {
	metadata: JSON
	expiresAt: JSON
	expand: [String!]
}
input StripePostFinancialConnectionsAccountsAccountDisconnectInput {
	expand: [String!]
}
enum StripePostFinancialConnectionsAccountsAccountRefreshFeatures {
	BALANCE
	OWNERSHIP
}
input StripePostFinancialConnectionsAccountsAccountRefreshInput {
	features: [StripePostFinancialConnectionsAccountsAccountRefreshFeatures!]!
	expand: [String!]
}
input StripePostFinancialConnectionsSessionsAccountHolderInput {
	type: StripePostFinancialConnectionsSessionsTypeAccountHolder!
	customer: String
	account: String
}
input StripePostFinancialConnectionsSessionsFiltersInput {
	countries: [String!]!
}
input StripePostFinancialConnectionsSessionsInput {
	returnUrl: String
	permissions: [StripePostFinancialConnectionsSessionsPermissions!]!
	filters: StripePostFinancialConnectionsSessionsFiltersInput
	expand: [String!]
	accountHolder: StripePostFinancialConnectionsSessionsAccountHolderInput!
}
enum StripePostFinancialConnectionsSessionsPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripePostFinancialConnectionsSessionsTypeAccountHolder {
	ACCOUNT
	CUSTOMER
}
enum StripePostIdentityVerificationSessionsAllowedTypesDocumentOptions {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
input StripePostIdentityVerificationSessionsDocumentOptionsInput {
	requireMatchingSelfie: Boolean
	requireLiveCapture: Boolean
	requireIdNumber: Boolean
	allowedTypes: [StripePostIdentityVerificationSessionsAllowedTypesDocumentOptions!]
}
input StripePostIdentityVerificationSessionsInput {
	type: StripePostIdentityVerificationSessionsType!
	returnUrl: String
	options: StripePostIdentityVerificationSessionsOptionsInput
	metadata: JSON
	expand: [String!]
}
input StripePostIdentityVerificationSessionsOptionsInput {
	document: StripeStringOrPostIdentityVerificationSessionsDocumentOptionsUnionInput
}
enum StripePostIdentityVerificationSessionsSessionAllowedTypesDocumentOptions {
	DRIVING_LICENSE
	ID_CARD
	PASSPORT
}
input StripePostIdentityVerificationSessionsSessionCancelInput {
	expand: [String!]
}
input StripePostIdentityVerificationSessionsSessionDocumentOptionsInput {
	requireMatchingSelfie: Boolean
	requireLiveCapture: Boolean
	requireIdNumber: Boolean
	allowedTypes: [StripePostIdentityVerificationSessionsSessionAllowedTypesDocumentOptions!]
}
input StripePostIdentityVerificationSessionsSessionInput {
	type: StripePostIdentityVerificationSessionsSessionType
	options: StripePostIdentityVerificationSessionsSessionOptionsInput
	metadata: JSON
	expand: [String!]
}
input StripePostIdentityVerificationSessionsSessionOptionsInput {
	document: StripeStringOrPostIdentityVerificationSessionsSessionDocumentOptionsUnionInput
}
input StripePostIdentityVerificationSessionsSessionRedactInput {
	expand: [String!]
}
enum StripePostIdentityVerificationSessionsSessionType {
	DOCUMENT
	ID_NUMBER
}
enum StripePostIdentityVerificationSessionsType {
	DOCUMENT
	ID_NUMBER
}
input StripePostInvoiceitemsDiscountsInput {
	discount: String
	coupon: String
}
input StripePostInvoiceitemsInput {
	taxCode: JSON
	metadata: JSON
	unitAmountDecimal: String
	unitAmount: Int
	taxRates: [String!]
	taxBehavior: StripePostInvoiceitemsTaxBehavior
	subscription: String
	quantity: Int
	priceData: StripePostInvoiceitemsPriceDataInput
	price: String
	period: StripePostInvoiceitemsPeriodInput
	invoice: String
	expand: [String!]
	discounts: StripeStringOrPostInvoiceitemsDiscountsUnionInput
	discountable: Boolean
	description: String
	customer: String!
	currency: String
	amount: Int
}
input StripePostInvoiceitemsInvoiceitemDiscountsInput {
	discount: String
	coupon: String
}
input StripePostInvoiceitemsInvoiceitemInput {
	taxRates: JSON
	taxCode: JSON
	metadata: JSON
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostInvoiceitemsInvoiceitemTaxBehavior
	quantity: Int
	priceData: StripePostInvoiceitemsInvoiceitemPriceDataInput
	price: String
	period: StripePostInvoiceitemsInvoiceitemPeriodInput
	expand: [String!]
	discounts: StripeStringOrPostInvoiceitemsInvoiceitemDiscountsUnionInput
	discountable: Boolean
	description: String
	amount: Int
}
input StripePostInvoiceitemsInvoiceitemPeriodInput {
	start: Int!
	end: Int!
}
input StripePostInvoiceitemsInvoiceitemPriceDataInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostInvoiceitemsInvoiceitemTaxBehaviorPriceData
	product: String!
	currency: String!
}
enum StripePostInvoiceitemsInvoiceitemTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostInvoiceitemsInvoiceitemTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostInvoiceitemsPeriodInput {
	start: Int!
	end: Int!
}
input StripePostInvoiceitemsPriceDataInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostInvoiceitemsTaxBehaviorPriceData
	product: String!
	currency: String!
}
enum StripePostInvoiceitemsTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostInvoiceitemsTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostInvoicesVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostInvoicesMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostInvoicesActionFromInvoice {
	REVISION
}
input StripePostInvoicesAddressShippingDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostInvoicesAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: StripePostInvoicesPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings
}
input StripePostInvoicesBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String
	euBankTransfer: StripePostInvoicesEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostInvoicesCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: StripePostInvoicesRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings
	installments: StripePostInvoicesInstallmentsCardPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostInvoicesCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostInvoicesCustomFieldsInput {
	value: String!
	name: String!
}
input StripePostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String
	bankTransfer: StripePostInvoicesBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostInvoicesDeliveryEstimateShippingRateDataShippingCostInput {
	minimum: StripePostInvoicesMinimumDeliveryEstimateShippingRateDataShippingCostInput
	maximum: StripePostInvoicesMaximumDeliveryEstimateShippingRateDataShippingCostInput
}
input StripePostInvoicesDiscountsInput {
	discount: String
	coupon: String
}
input StripePostInvoicesEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input StripePostInvoicesFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [StripePostInvoicesPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]
}
input StripePostInvoicesFixedAmountShippingRateDataShippingCostInput {
	currencyOptions: JSON
	currency: String!
	amount: Int!
}
input StripePostInvoicesFromInvoiceInput {
	invoice: String!
	action: StripePostInvoicesActionFromInvoice!
}
input StripePostInvoicesInput {
	metadata: JSON
	accountTaxIds: JSON
	transferData: StripePostInvoicesTransferDataInput
	subscription: String
	statementDescriptor: String
	shippingDetails: StripePostInvoicesShippingDetailsInput
	shippingCost: StripePostInvoicesShippingCostInput
	renderingOptions: StripeStringOrPostInvoicesRenderingOptionsUnionInput
	pendingInvoiceItemsBehavior: StripePostInvoicesPendingInvoiceItemsBehavior
	paymentSettings: StripePostInvoicesPaymentSettingsInput
	onBehalfOf: String
	fromInvoice: StripePostInvoicesFromInvoiceInput
	footer: String
	expand: [String!]
	dueDate: Int
	discounts: StripeStringOrPostInvoicesDiscountsUnionInput
	description: String
	defaultTaxRates: [String!]
	defaultSource: String
	defaultPaymentMethod: String
	daysUntilDue: Int
	customer: String
	customFields: StripeStringOrPostInvoicesCustomFieldsUnionInput
	currency: String
	collectionMethod: StripePostInvoicesCollectionMethod
	automaticTax: StripePostInvoicesAutomaticTaxInput
	autoAdvance: Boolean
	applicationFeeAmount: Int
}
input StripePostInvoicesInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	plan: StripeStringOrPostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput
	enabled: Boolean
}
enum StripePostInvoicesIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	MONTH
}
input StripePostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostInvoicesInvoiceVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostInvoicesInvoiceMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripePostInvoicesInvoiceAddressShippingDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostInvoicesInvoiceAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: StripePostInvoicesInvoicePreferredLanguageBancontactPaymentMethodOptionsPaymentSettings
}
input StripePostInvoicesInvoiceBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String
	euBankTransfer: StripePostInvoicesInvoiceEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: StripePostInvoicesInvoiceRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings
	installments: StripePostInvoicesInvoiceInstallmentsCardPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostInvoicesInvoiceCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostInvoicesInvoiceCustomFieldsInput {
	value: String!
	name: String!
}
input StripePostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String
	bankTransfer: StripePostInvoicesInvoiceBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostInvoicesInvoiceDeliveryEstimateShippingRateDataShippingCostInput {
	minimum: StripePostInvoicesInvoiceMinimumDeliveryEstimateShippingRateDataShippingCostInput
	maximum: StripePostInvoicesInvoiceMaximumDeliveryEstimateShippingRateDataShippingCostInput
}
input StripePostInvoicesInvoiceDiscountsInput {
	discount: String
	coupon: String
}
input StripePostInvoicesInvoiceEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input StripePostInvoicesInvoiceFinalizeInput {
	expand: [String!]
	autoAdvance: Boolean
}
input StripePostInvoicesInvoiceFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [StripePostInvoicesInvoicePermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]
}
input StripePostInvoicesInvoiceFixedAmountShippingRateDataShippingCostInput {
	currencyOptions: JSON
	currency: String!
	amount: Int!
}
input StripePostInvoicesInvoiceInput {
	onBehalfOf: JSON
	metadata: JSON
	defaultTaxRates: JSON
	accountTaxIds: JSON
	transferData: StripeStringOrPostInvoicesInvoiceTransferDataUnionInput
	statementDescriptor: String
	shippingDetails: StripeStringOrPostInvoicesInvoiceShippingDetailsUnionInput
	shippingCost: StripeStringOrPostInvoicesInvoiceShippingCostUnionInput
	renderingOptions: StripeStringOrPostInvoicesInvoiceRenderingOptionsUnionInput
	paymentSettings: StripePostInvoicesInvoicePaymentSettingsInput
	footer: String
	expand: [String!]
	dueDate: Int
	discounts: StripeStringOrPostInvoicesInvoiceDiscountsUnionInput
	description: String
	defaultSource: String
	defaultPaymentMethod: String
	daysUntilDue: Int
	customFields: StripeStringOrPostInvoicesInvoiceCustomFieldsUnionInput
	collectionMethod: StripePostInvoicesInvoiceCollectionMethod
	automaticTax: StripePostInvoicesInvoiceAutomaticTaxInput
	autoAdvance: Boolean
	applicationFeeAmount: Int
}
input StripePostInvoicesInvoiceInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	plan: StripeStringOrPostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput
	enabled: Boolean
}
enum StripePostInvoicesInvoiceIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	MONTH
}
input StripePostInvoicesInvoiceMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: StripePostInvoicesInvoiceTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings
}
input StripePostInvoicesInvoiceMarkUncollectibleInput {
	expand: [String!]
}
input StripePostInvoicesInvoiceMaximumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: StripePostInvoicesInvoiceUnitMaximumDeliveryEstimateShippingRateDataShippingCost!
}
input StripePostInvoicesInvoiceMinimumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: StripePostInvoicesInvoiceUnitMinimumDeliveryEstimateShippingRateDataShippingCost!
}
input StripePostInvoicesInvoicePayInput {
	source: String
	paymentMethod: String
	paidOutOfBand: Boolean
	offSession: Boolean
	mandate: String
	forgive: Boolean
	expand: [String!]
}
input StripePostInvoicesInvoicePaymentMethodOptionsPaymentSettingsInput {
	konbini: JSON
	usBankAccount: StripeStringOrPostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput
	customerBalance: StripeStringOrPostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput
	card: StripeStringOrPostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsUnionInput
	bancontact: StripeStringOrPostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsUnionInput
	acssDebit: StripeStringOrPostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput
}
input StripePostInvoicesInvoicePaymentSettingsInput {
	paymentMethodTypes: JSON
	paymentMethodOptions: StripePostInvoicesInvoicePaymentMethodOptionsPaymentSettingsInput
	defaultMandate: String
}
enum StripePostInvoicesInvoicePermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	type: StripePostInvoicesInvoiceTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	interval: StripePostInvoicesInvoiceIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	count: Int!
}
enum StripePostInvoicesInvoicePreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input StripePostInvoicesInvoiceRenderingOptionsInput {
	amountTaxDisplay: String
}
enum StripePostInvoicesInvoiceRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
input StripePostInvoicesInvoiceSendInput {
	expand: [String!]
}
input StripePostInvoicesInvoiceShippingCostInput {
	shippingRateData: StripePostInvoicesInvoiceShippingRateDataShippingCostInput
	shippingRate: String
}
input StripePostInvoicesInvoiceShippingDetailsInput {
	phone: String
	name: String!
	address: StripePostInvoicesInvoiceAddressShippingDetailsInput!
}
input StripePostInvoicesInvoiceShippingRateDataShippingCostInput {
	type: StripePostInvoicesInvoiceTypeShippingRateDataShippingCost
	taxCode: String
	taxBehavior: StripePostInvoicesInvoiceTaxBehaviorShippingRateDataShippingCost
	metadata: JSON
	fixedAmount: StripePostInvoicesInvoiceFixedAmountShippingRateDataShippingCostInput
	displayName: String!
	deliveryEstimate: StripePostInvoicesInvoiceDeliveryEstimateShippingRateDataShippingCostInput
}
enum StripePostInvoicesInvoiceTaxBehaviorShippingRateDataShippingCost {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostInvoicesInvoiceTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input StripePostInvoicesInvoiceTransferDataInput {
	destination: String!
	amount: Int
}
enum StripePostInvoicesInvoiceTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	FIXED_COUNT
}
enum StripePostInvoicesInvoiceTypeShippingRateDataShippingCost {
	FIXED_AMOUNT
}
enum StripePostInvoicesInvoiceUnitMaximumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum StripePostInvoicesInvoiceUnitMinimumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
input StripePostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostInvoicesInvoiceVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings
	financialConnections: StripePostInvoicesInvoiceFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostInvoicesInvoiceVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostInvoicesInvoiceVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostInvoicesInvoiceVoidInput {
	expand: [String!]
}
input StripePostInvoicesMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: StripePostInvoicesTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings
}
input StripePostInvoicesMaximumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: StripePostInvoicesUnitMaximumDeliveryEstimateShippingRateDataShippingCost!
}
input StripePostInvoicesMinimumDeliveryEstimateShippingRateDataShippingCostInput {
	value: Int!
	unit: StripePostInvoicesUnitMinimumDeliveryEstimateShippingRateDataShippingCost!
}
input StripePostInvoicesPaymentMethodOptionsPaymentSettingsInput {
	konbini: JSON
	usBankAccount: StripeStringOrPostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput
	customerBalance: StripeStringOrPostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput
	card: StripeStringOrPostInvoicesCardPaymentMethodOptionsPaymentSettingsUnionInput
	bancontact: StripeStringOrPostInvoicesBancontactPaymentMethodOptionsPaymentSettingsUnionInput
	acssDebit: StripeStringOrPostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput
}
input StripePostInvoicesPaymentSettingsInput {
	paymentMethodTypes: JSON
	paymentMethodOptions: StripePostInvoicesPaymentMethodOptionsPaymentSettingsInput
	defaultMandate: String
}
enum StripePostInvoicesPendingInvoiceItemsBehavior {
	EXCLUDE
	INCLUDE
	INCLUDE_AND_REQUIRE
}
enum StripePostInvoicesPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput {
	type: StripePostInvoicesTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	interval: StripePostInvoicesIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings!
	count: Int!
}
enum StripePostInvoicesPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input StripePostInvoicesRenderingOptionsInput {
	amountTaxDisplay: String
}
enum StripePostInvoicesRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
input StripePostInvoicesShippingCostInput {
	shippingRateData: StripePostInvoicesShippingRateDataShippingCostInput
	shippingRate: String
}
input StripePostInvoicesShippingDetailsInput {
	phone: String
	name: String!
	address: StripePostInvoicesAddressShippingDetailsInput!
}
input StripePostInvoicesShippingRateDataShippingCostInput {
	type: StripePostInvoicesTypeShippingRateDataShippingCost
	taxCode: String
	taxBehavior: StripePostInvoicesTaxBehaviorShippingRateDataShippingCost
	metadata: JSON
	fixedAmount: StripePostInvoicesFixedAmountShippingRateDataShippingCostInput
	displayName: String!
	deliveryEstimate: StripePostInvoicesDeliveryEstimateShippingRateDataShippingCostInput
}
enum StripePostInvoicesTaxBehaviorShippingRateDataShippingCost {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostInvoicesTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input StripePostInvoicesTransferDataInput {
	destination: String!
	amount: Int
}
enum StripePostInvoicesTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
	FIXED_COUNT
}
enum StripePostInvoicesTypeShippingRateDataShippingCost {
	FIXED_AMOUNT
}
enum StripePostInvoicesUnitMaximumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum StripePostInvoicesUnitMinimumDeliveryEstimateShippingRateDataShippingCost {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
input StripePostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostInvoicesVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings
	financialConnections: StripePostInvoicesFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostInvoicesVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostInvoicesVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostIssuingAuthorizationsAuthorizationApproveInput {
	metadata: JSON
	expand: [String!]
	amount: Int
}
input StripePostIssuingAuthorizationsAuthorizationDeclineInput {
	metadata: JSON
	expand: [String!]
}
input StripePostIssuingAuthorizationsAuthorizationInput {
	metadata: JSON
	expand: [String!]
}
input StripePostIssuingCardholdersAddressBillingInput {
	state: String
	postalCode: String!
	line2: String
	line1: String!
	country: String!
	city: String!
}
enum StripePostIssuingCardholdersAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardholdersBillingInput {
	address: StripePostIssuingCardholdersAddressBillingInput!
}
enum StripePostIssuingCardholdersBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardholdersCardholderAddressBillingInput {
	state: String
	postalCode: String!
	line2: String
	line1: String!
	country: String!
	city: String!
}
enum StripePostIssuingCardholdersCardholderAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardholdersCardholderBillingInput {
	address: StripePostIssuingCardholdersCardholderAddressBillingInput!
}
enum StripePostIssuingCardholdersCardholderBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripePostIssuingCardholdersCardholderCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardholdersCardholderCompanyInput {
	taxId: String
}
input StripePostIssuingCardholdersCardholderDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostIssuingCardholdersCardholderDocumentVerificationIndividualInput {
	front: String
	back: String
}
input StripePostIssuingCardholdersCardholderIndividualInput {
	verification: StripePostIssuingCardholdersCardholderVerificationIndividualInput
	lastName: String
	firstName: String
	dob: StripePostIssuingCardholdersCardholderDobIndividualInput
}
input StripePostIssuingCardholdersCardholderInput {
	status: StripePostIssuingCardholdersCardholderStatus
	spendingControls: StripePostIssuingCardholdersCardholderSpendingControlsInput
	phoneNumber: String
	metadata: JSON
	individual: StripePostIssuingCardholdersCardholderIndividualInput
	expand: [String!]
	email: String
	company: StripePostIssuingCardholdersCardholderCompanyInput
	billing: StripePostIssuingCardholdersCardholderBillingInput
}
enum StripePostIssuingCardholdersCardholderIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
input StripePostIssuingCardholdersCardholderSpendingControlsInput {
	spendingLimitsCurrency: String
	spendingLimits: [StripePostIssuingCardholdersCardholderSpendingLimitsSpendingControlsInput!]
	blockedCategories: [StripePostIssuingCardholdersCardholderBlockedCategoriesSpendingControls!]
	allowedCategories: [StripePostIssuingCardholdersCardholderAllowedCategoriesSpendingControls!]
}
input StripePostIssuingCardholdersCardholderSpendingLimitsSpendingControlsInput {
	interval: StripePostIssuingCardholdersCardholderIntervalSpendingLimitsSpendingControls!
	categories: [StripePostIssuingCardholdersCardholderCategoriesSpendingLimitsSpendingControls!]
	amount: Int!
}
enum StripePostIssuingCardholdersCardholderStatus {
	ACTIVE
	INACTIVE
}
input StripePostIssuingCardholdersCardholderVerificationIndividualInput {
	document: StripePostIssuingCardholdersCardholderDocumentVerificationIndividualInput
}
enum StripePostIssuingCardholdersCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardholdersCompanyInput {
	taxId: String
}
input StripePostIssuingCardholdersDobIndividualInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostIssuingCardholdersDocumentVerificationIndividualInput {
	front: String
	back: String
}
input StripePostIssuingCardholdersIndividualInput {
	verification: StripePostIssuingCardholdersVerificationIndividualInput
	lastName: String
	firstName: String
	dob: StripePostIssuingCardholdersDobIndividualInput
}
input StripePostIssuingCardholdersInput {
	type: StripePostIssuingCardholdersType!
	status: StripePostIssuingCardholdersStatus
	spendingControls: StripePostIssuingCardholdersSpendingControlsInput
	phoneNumber: String
	name: String!
	metadata: JSON
	individual: StripePostIssuingCardholdersIndividualInput
	expand: [String!]
	email: String
	company: StripePostIssuingCardholdersCompanyInput
	billing: StripePostIssuingCardholdersBillingInput!
}
enum StripePostIssuingCardholdersIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
input StripePostIssuingCardholdersSpendingControlsInput {
	spendingLimitsCurrency: String
	spendingLimits: [StripePostIssuingCardholdersSpendingLimitsSpendingControlsInput!]
	blockedCategories: [StripePostIssuingCardholdersBlockedCategoriesSpendingControls!]
	allowedCategories: [StripePostIssuingCardholdersAllowedCategoriesSpendingControls!]
}
input StripePostIssuingCardholdersSpendingLimitsSpendingControlsInput {
	interval: StripePostIssuingCardholdersIntervalSpendingLimitsSpendingControls!
	categories: [StripePostIssuingCardholdersCategoriesSpendingLimitsSpendingControls!]
	amount: Int!
}
enum StripePostIssuingCardholdersStatus {
	ACTIVE
	INACTIVE
}
enum StripePostIssuingCardholdersType {
	COMPANY
	INDIVIDUAL
}
input StripePostIssuingCardholdersVerificationIndividualInput {
	document: StripePostIssuingCardholdersDocumentVerificationIndividualInput
}
input StripePostIssuingCardsAddressShippingInput {
	state: String
	postalCode: String!
	line2: String
	line1: String!
	country: String!
	city: String!
}
enum StripePostIssuingCardsAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripePostIssuingCardsBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripePostIssuingCardsCardAllowedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripePostIssuingCardsCardBlockedCategoriesSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
enum StripePostIssuingCardsCardCancellationReason {
	LOST
	STOLEN
}
enum StripePostIssuingCardsCardCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardsCardInput {
	metadata: JSON
	status: StripePostIssuingCardsCardStatus
	spendingControls: StripePostIssuingCardsCardSpendingControlsInput
	pin: StripePostIssuingCardsCardPinInput
	expand: [String!]
	cancellationReason: StripePostIssuingCardsCardCancellationReason
}
enum StripePostIssuingCardsCardIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
input StripePostIssuingCardsCardPinInput {
	encryptedNumber: String
}
input StripePostIssuingCardsCardSpendingControlsInput {
	spendingLimits: [StripePostIssuingCardsCardSpendingLimitsSpendingControlsInput!]
	blockedCategories: [StripePostIssuingCardsCardBlockedCategoriesSpendingControls!]
	allowedCategories: [StripePostIssuingCardsCardAllowedCategoriesSpendingControls!]
}
input StripePostIssuingCardsCardSpendingLimitsSpendingControlsInput {
	interval: StripePostIssuingCardsCardIntervalSpendingLimitsSpendingControls!
	categories: [StripePostIssuingCardsCardCategoriesSpendingLimitsSpendingControls!]
	amount: Int!
}
enum StripePostIssuingCardsCardStatus {
	ACTIVE
	CANCELED
	INACTIVE
}
enum StripePostIssuingCardsCategoriesSpendingLimitsSpendingControls {
	AC_REFRIGERATION_REPAIR
	ACCOUNTING_BOOKKEEPING_SERVICES
	ADVERTISING_SERVICES
	AGRICULTURAL_COOPERATIVE
	AIRLINES_AIR_CARRIERS
	AIRPORTS_FLYING_FIELDS
	AMBULANCE_SERVICES
	AMUSEMENT_PARKS_CARNIVALS
	ANTIQUE_REPRODUCTIONS
	ANTIQUE_SHOPS
	AQUARIUMS
	ARCHITECTURAL_SURVEYING_SERVICES
	ART_DEALERS_AND_GALLERIES
	ARTISTS_SUPPLY_AND_CRAFT_SHOPS
	AUTO_AND_HOME_SUPPLY_STORES
	AUTO_BODY_REPAIR_SHOPS
	AUTO_PAINT_SHOPS
	AUTO_SERVICE_SHOPS
	AUTOMATED_CASH_DISBURSE
	AUTOMATED_FUEL_DISPENSERS
	AUTOMOBILE_ASSOCIATIONS
	AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
	AUTOMOTIVE_TIRE_STORES
	BAIL_AND_BOND_PAYMENTS
	BAKERIES
	BANDS_ORCHESTRAS
	BARBER_AND_BEAUTY_SHOPS
	BETTING_CASINO_GAMBLING
	BICYCLE_SHOPS
	BILLIARD_POOL_ESTABLISHMENTS
	BOAT_DEALERS
	BOAT_RENTALS_AND_LEASES
	BOOK_STORES
	BOOKS_PERIODICALS_AND_NEWSPAPERS
	BOWLING_ALLEYS
	BUS_LINES
	BUSINESS_SECRETARIAL_SCHOOLS
	BUYING_SHOPPING_SERVICES
	CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
	CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
	CANDY_NUT_AND_CONFECTIONERY_STORES
	CAR_AND_TRUCK_DEALERS_NEW_USED
	CAR_AND_TRUCK_DEALERS_USED_ONLY
	CAR_RENTAL_AGENCIES
	CAR_WASHES
	CARPENTRY_SERVICES
	CARPET_UPHOLSTERY_CLEANING
	CATERERS
	CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
	CHEMICALS_AND_ALLIED_PRODUCTS
	CHILD_CARE_SERVICES
	CHILDRENS_AND_INFANTS_WEAR_STORES
	CHIROPODISTS_PODIATRISTS
	CHIROPRACTORS
	CIGAR_STORES_AND_STANDS
	CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
	CLEANING_AND_MAINTENANCE
	CLOTHING_RENTAL
	COLLEGES_UNIVERSITIES
	COMMERCIAL_EQUIPMENT
	COMMERCIAL_FOOTWEAR
	COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
	COMMUTER_TRANSPORT_AND_FERRIES
	COMPUTER_NETWORK_SERVICES
	COMPUTER_PROGRAMMING
	COMPUTER_REPAIR
	COMPUTER_SOFTWARE_STORES
	COMPUTERS_PERIPHERALS_AND_SOFTWARE
	CONCRETE_WORK_SERVICES
	CONSTRUCTION_MATERIALS
	CONSULTING_PUBLIC_RELATIONS
	CORRESPONDENCE_SCHOOLS
	COSMETIC_STORES
	COUNSELING_SERVICES
	COUNTRY_CLUBS
	COURIER_SERVICES
	COURT_COSTS
	CREDIT_REPORTING_AGENCIES
	CRUISE_LINES
	DAIRY_PRODUCTS_STORES
	DANCE_HALL_STUDIOS_SCHOOLS
	DATING_ESCORT_SERVICES
	DENTISTS_ORTHODONTISTS
	DEPARTMENT_STORES
	DETECTIVE_AGENCIES
	DIGITAL_GOODS_APPLICATIONS
	DIGITAL_GOODS_GAMES
	DIGITAL_GOODS_LARGE_VOLUME
	DIGITAL_GOODS_MEDIA
	DIRECT_MARKETING_CATALOG_MERCHANT
	DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
	DIRECT_MARKETING_INBOUND_TELEMARKETING
	DIRECT_MARKETING_INSURANCE_SERVICES
	DIRECT_MARKETING_OTHER
	DIRECT_MARKETING_OUTBOUND_TELEMARKETING
	DIRECT_MARKETING_SUBSCRIPTION
	DIRECT_MARKETING_TRAVEL
	DISCOUNT_STORES
	DOCTORS
	DOOR_TO_DOOR_SALES
	DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
	DRINKING_PLACES
	DRUG_STORES_AND_PHARMACIES
	DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
	DRY_CLEANERS
	DURABLE_GOODS
	DUTY_FREE_STORES
	EATING_PLACES_RESTAURANTS
	EDUCATIONAL_SERVICES
	ELECTRIC_RAZOR_STORES
	ELECTRICAL_PARTS_AND_EQUIPMENT
	ELECTRICAL_SERVICES
	ELECTRONICS_REPAIR_SHOPS
	ELECTRONICS_STORES
	ELEMENTARY_SECONDARY_SCHOOLS
	EMPLOYMENT_TEMP_AGENCIES
	EQUIPMENT_RENTAL
	EXTERMINATING_SERVICES
	FAMILY_CLOTHING_STORES
	FAST_FOOD_RESTAURANTS
	FINANCIAL_INSTITUTIONS
	FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
	FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
	FLOOR_COVERING_STORES
	FLORISTS
	FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
	FREEZER_AND_LOCKER_MEAT_PROVISIONERS
	FUEL_DEALERS_NON_AUTOMOTIVE
	FUNERAL_SERVICES_CREMATORIES
	FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
	FURNITURE_REPAIR_REFINISHING
	FURRIERS_AND_FUR_SHOPS
	GENERAL_SERVICES
	GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
	GLASS_PAINT_AND_WALLPAPER_STORES
	GLASSWARE_CRYSTAL_STORES
	GOLF_COURSES_PUBLIC
	GOVERNMENT_SERVICES
	GROCERY_STORES_SUPERMARKETS
	HARDWARE_EQUIPMENT_AND_SUPPLIES
	HARDWARE_STORES
	HEALTH_AND_BEAUTY_SPAS
	HEARING_AIDS_SALES_AND_SUPPLIES
	HEATING_PLUMBING_A_C
	HOBBY_TOY_AND_GAME_SHOPS
	HOME_SUPPLY_WAREHOUSE_STORES
	HOSPITALS
	HOTELS_MOTELS_AND_RESORTS
	HOUSEHOLD_APPLIANCE_STORES
	INDUSTRIAL_SUPPLIES
	INFORMATION_RETRIEVAL_SERVICES
	INSURANCE_DEFAULT
	INSURANCE_UNDERWRITING_PREMIUMS
	INTRA_COMPANY_PURCHASES
	JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
	LANDSCAPING_SERVICES
	LAUNDRIES
	LAUNDRY_CLEANING_SERVICES
	LEGAL_SERVICES_ATTORNEYS
	LUGGAGE_AND_LEATHER_GOODS_STORES
	LUMBER_BUILDING_MATERIALS_STORES
	MANUAL_CASH_DISBURSE
	MARINAS_SERVICE_AND_SUPPLIES
	MASONRY_STONEWORK_AND_PLASTER
	MASSAGE_PARLORS
	MEDICAL_AND_DENTAL_LABS
	MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
	MEDICAL_SERVICES
	MEMBERSHIP_ORGANIZATIONS
	MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
	MENS_WOMENS_CLOTHING_STORES
	METAL_SERVICE_CENTERS
	MISCELLANEOUS
	MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
	MISCELLANEOUS_AUTO_DEALERS
	MISCELLANEOUS_BUSINESS_SERVICES
	MISCELLANEOUS_FOOD_STORES
	MISCELLANEOUS_GENERAL_MERCHANDISE
	MISCELLANEOUS_GENERAL_SERVICES
	MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
	MISCELLANEOUS_PUBLISHING_AND_PRINTING
	MISCELLANEOUS_RECREATION_SERVICES
	MISCELLANEOUS_REPAIR_SHOPS
	MISCELLANEOUS_SPECIALTY_RETAIL
	MOBILE_HOME_DEALERS
	MOTION_PICTURE_THEATERS
	MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
	MOTOR_HOMES_DEALERS
	MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
	MOTORCYCLE_SHOPS_AND_DEALERS
	MOTORCYCLE_SHOPS_DEALERS
	MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
	NEWS_DEALERS_AND_NEWSSTANDS
	NON_FI_MONEY_ORDERS
	NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
	NONDURABLE_GOODS
	NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
	NURSING_PERSONAL_CARE
	OFFICE_AND_COMMERCIAL_FURNITURE
	OPTICIANS_EYEGLASSES
	OPTOMETRISTS_OPHTHALMOLOGIST
	ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
	OSTEOPATHS
	PACKAGE_STORES_BEER_WINE_AND_LIQUOR
	PAINTS_VARNISHES_AND_SUPPLIES
	PARKING_LOTS_GARAGES
	PASSENGER_RAILWAYS
	PAWN_SHOPS
	PET_SHOPS_PET_FOOD_AND_SUPPLIES
	PETROLEUM_AND_PETROLEUM_PRODUCTS
	PHOTO_DEVELOPING
	PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
	PHOTOGRAPHIC_STUDIOS
	PICTURE_VIDEO_PRODUCTION
	PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
	PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
	POLITICAL_ORGANIZATIONS
	POSTAL_SERVICES_GOVERNMENT_ONLY
	PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
	PROFESSIONAL_SERVICES
	PUBLIC_WAREHOUSING_AND_STORAGE
	QUICK_COPY_REPRO_AND_BLUEPRINT
	RAILROADS
	REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
	RECORD_STORES
	RECREATIONAL_VEHICLE_RENTALS
	RELIGIOUS_GOODS_STORES
	RELIGIOUS_ORGANIZATIONS
	ROOFING_SIDING_SHEET_METAL
	SECRETARIAL_SUPPORT_SERVICES
	SECURITY_BROKERS_DEALERS
	SERVICE_STATIONS
	SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
	SHOE_REPAIR_HAT_CLEANING
	SHOE_STORES
	SMALL_APPLIANCE_REPAIR
	SNOWMOBILE_DEALERS
	SPECIAL_TRADE_SERVICES
	SPECIALTY_CLEANING
	SPORTING_GOODS_STORES
	SPORTING_RECREATION_CAMPS
	SPORTS_AND_RIDING_APPAREL_STORES
	SPORTS_CLUBS_FIELDS
	STAMP_AND_COIN_STORES
	STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
	STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
	SWIMMING_POOLS_SALES
	T_UI_TRAVEL_GERMANY
	TAILORS_ALTERATIONS
	TAX_PAYMENTS_GOVERNMENT_AGENCIES
	TAX_PREPARATION_SERVICES
	TAXICABS_LIMOUSINES
	TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
	TELECOMMUNICATION_SERVICES
	TELEGRAPH_SERVICES
	TENT_AND_AWNING_SHOPS
	TESTING_LABORATORIES
	THEATRICAL_TICKET_AGENCIES
	TIMESHARES
	TIRE_RETREADING_AND_REPAIR
	TOLLS_BRIDGE_FEES
	TOURIST_ATTRACTIONS_AND_EXHIBITS
	TOWING_SERVICES
	TRAILER_PARKS_CAMPGROUNDS
	TRANSPORTATION_SERVICES
	TRAVEL_AGENCIES_TOUR_OPERATORS
	TRUCK_STOP_ITERATION
	TRUCK_UTILITY_TRAILER_RENTALS
	TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
	TYPEWRITER_STORES
	U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
	UNIFORMS_COMMERCIAL_CLOTHING
	USED_MERCHANDISE_AND_SECONDHAND_STORES
	UTILITIES
	VARIETY_STORES
	VETERINARY_SERVICES
	VIDEO_AMUSEMENT_GAME_SUPPLIES
	VIDEO_GAME_ARCADES
	VIDEO_TAPE_RENTAL_STORES
	VOCATIONAL_TRADE_SCHOOLS
	WATCH_JEWELRY_REPAIR
	WELDING_REPAIR
	WHOLESALE_CLUBS
	WIG_AND_TOUPEE_STORES
	WIRES_MONEY_ORDERS
	WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
	WOMENS_READY_TO_WEAR_STORES
	WRECKING_AND_SALVAGE_YARDS
}
input StripePostIssuingCardsCustomsShippingInput {
	eoriNumber: String
}
input StripePostIssuingCardsInput {
	type: StripePostIssuingCardsType!
	status: StripePostIssuingCardsStatus
	spendingControls: StripePostIssuingCardsSpendingControlsInput
	shipping: StripePostIssuingCardsShippingInput
	replacementReason: StripePostIssuingCardsReplacementReason
	replacementFor: String
	metadata: JSON
	financialAccount: String
	expand: [String!]
	currency: String!
	cardholder: String
}
enum StripePostIssuingCardsIntervalSpendingLimitsSpendingControls {
	ALL_TIME
	DAILY
	MONTHLY
	PER_AUTHORIZATION
	WEEKLY
	YEARLY
}
enum StripePostIssuingCardsReplacementReason {
	DAMAGED
	EXPIRED
	LOST
	STOLEN
}
enum StripePostIssuingCardsServiceShipping {
	EXPRESS
	PRIORITY
	STANDARD
}
input StripePostIssuingCardsShippingInput {
	type: StripePostIssuingCardsTypeShipping
	service: StripePostIssuingCardsServiceShipping
	requireSignature: Boolean
	phoneNumber: String
	name: String!
	customs: StripePostIssuingCardsCustomsShippingInput
	address: StripePostIssuingCardsAddressShippingInput!
}
input StripePostIssuingCardsSpendingControlsInput {
	spendingLimits: [StripePostIssuingCardsSpendingLimitsSpendingControlsInput!]
	blockedCategories: [StripePostIssuingCardsBlockedCategoriesSpendingControls!]
	allowedCategories: [StripePostIssuingCardsAllowedCategoriesSpendingControls!]
}
input StripePostIssuingCardsSpendingLimitsSpendingControlsInput {
	interval: StripePostIssuingCardsIntervalSpendingLimitsSpendingControls!
	categories: [StripePostIssuingCardsCategoriesSpendingLimitsSpendingControls!]
	amount: Int!
}
enum StripePostIssuingCardsStatus {
	ACTIVE
	INACTIVE
}
enum StripePostIssuingCardsType {
	PHYSICAL
	VIRTUAL
}
enum StripePostIssuingCardsTypeShipping {
	BULK
	INDIVIDUAL
}
input StripePostIssuingDisputesCanceledEvidenceInput {
	returnedAt: JSON
	expectedAt: JSON
	cancellationPolicyProvided: JSON
	canceledAt: JSON
	additionalDocumentation: JSON
	returnStatus: String
	productType: String
	productDescription: String
	explanation: String
	cancellationReason: String
}
input StripePostIssuingDisputesDisputeCanceledEvidenceInput {
	returnedAt: JSON
	expectedAt: JSON
	cancellationPolicyProvided: JSON
	canceledAt: JSON
	additionalDocumentation: JSON
	returnStatus: String
	productType: String
	productDescription: String
	explanation: String
	cancellationReason: String
}
input StripePostIssuingDisputesDisputeDuplicateEvidenceInput {
	checkImage: JSON
	cashReceipt: JSON
	cardStatement: JSON
	additionalDocumentation: JSON
	originalTransaction: String
	explanation: String
}
input StripePostIssuingDisputesDisputeEvidenceInput {
	serviceNotAsDescribed: StripeStringOrPostIssuingDisputesDisputeServiceNotAsDescribedEvidenceUnionInput
	reason: StripePostIssuingDisputesDisputeReasonEvidence
	other: StripeStringOrPostIssuingDisputesDisputeOtherEvidenceUnionInput
	notReceived: StripeStringOrPostIssuingDisputesDisputeNotReceivedEvidenceUnionInput
	merchandiseNotAsDescribed: StripeStringOrPostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceUnionInput
	fraudulent: StripeStringOrPostIssuingDisputesDisputeFraudulentEvidenceUnionInput
	duplicate: StripeStringOrPostIssuingDisputesDisputeDuplicateEvidenceUnionInput
	canceled: StripeStringOrPostIssuingDisputesDisputeCanceledEvidenceUnionInput
}
input StripePostIssuingDisputesDisputeFraudulentEvidenceInput {
	additionalDocumentation: JSON
	explanation: String
}
input StripePostIssuingDisputesDisputeInput {
	metadata: JSON
	expand: [String!]
	evidence: StripePostIssuingDisputesDisputeEvidenceInput
	amount: Int
}
input StripePostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput {
	returnedAt: JSON
	receivedAt: JSON
	additionalDocumentation: JSON
	returnStatus: String
	returnDescription: String
	explanation: String
}
input StripePostIssuingDisputesDisputeNotReceivedEvidenceInput {
	expectedAt: JSON
	additionalDocumentation: JSON
	productType: String
	productDescription: String
	explanation: String
}
input StripePostIssuingDisputesDisputeOtherEvidenceInput {
	additionalDocumentation: JSON
	productType: String
	productDescription: String
	explanation: String
}
enum StripePostIssuingDisputesDisputeReasonEvidence {
	CANCELED
	DUPLICATE
	FRAUDULENT
	MERCHANDISE_NOT_AS_DESCRIBED
	NOT_RECEIVED
	OTHER
	SERVICE_NOT_AS_DESCRIBED
}
input StripePostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput {
	receivedAt: JSON
	canceledAt: JSON
	additionalDocumentation: JSON
	explanation: String
	cancellationReason: String
}
input StripePostIssuingDisputesDisputeSubmitInput {
	metadata: JSON
	expand: [String!]
}
input StripePostIssuingDisputesDuplicateEvidenceInput {
	checkImage: JSON
	cashReceipt: JSON
	cardStatement: JSON
	additionalDocumentation: JSON
	originalTransaction: String
	explanation: String
}
input StripePostIssuingDisputesEvidenceInput {
	serviceNotAsDescribed: StripeStringOrPostIssuingDisputesServiceNotAsDescribedEvidenceUnionInput
	reason: StripePostIssuingDisputesReasonEvidence
	other: StripeStringOrPostIssuingDisputesOtherEvidenceUnionInput
	notReceived: StripeStringOrPostIssuingDisputesNotReceivedEvidenceUnionInput
	merchandiseNotAsDescribed: StripeStringOrPostIssuingDisputesMerchandiseNotAsDescribedEvidenceUnionInput
	fraudulent: StripeStringOrPostIssuingDisputesFraudulentEvidenceUnionInput
	duplicate: StripeStringOrPostIssuingDisputesDuplicateEvidenceUnionInput
	canceled: StripeStringOrPostIssuingDisputesCanceledEvidenceUnionInput
}
input StripePostIssuingDisputesFraudulentEvidenceInput {
	additionalDocumentation: JSON
	explanation: String
}
input StripePostIssuingDisputesInput {
	treasury: StripePostIssuingDisputesTreasuryInput
	transaction: String
	metadata: JSON
	expand: [String!]
	evidence: StripePostIssuingDisputesEvidenceInput
	amount: Int
}
input StripePostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput {
	returnedAt: JSON
	receivedAt: JSON
	additionalDocumentation: JSON
	returnStatus: String
	returnDescription: String
	explanation: String
}
input StripePostIssuingDisputesNotReceivedEvidenceInput {
	expectedAt: JSON
	additionalDocumentation: JSON
	productType: String
	productDescription: String
	explanation: String
}
input StripePostIssuingDisputesOtherEvidenceInput {
	additionalDocumentation: JSON
	productType: String
	productDescription: String
	explanation: String
}
enum StripePostIssuingDisputesReasonEvidence {
	CANCELED
	DUPLICATE
	FRAUDULENT
	MERCHANDISE_NOT_AS_DESCRIBED
	NOT_RECEIVED
	OTHER
	SERVICE_NOT_AS_DESCRIBED
}
input StripePostIssuingDisputesServiceNotAsDescribedEvidenceInput {
	receivedAt: JSON
	canceledAt: JSON
	additionalDocumentation: JSON
	explanation: String
	cancellationReason: String
}
input StripePostIssuingDisputesTreasuryInput {
	receivedDebit: String!
}
input StripePostIssuingSettlementsSettlementInput {
	metadata: JSON
	expand: [String!]
}
input StripePostIssuingTransactionsTransactionInput {
	metadata: JSON
	expand: [String!]
}
input StripePostLinkAccountSessionsAccountHolderInput {
	type: StripePostLinkAccountSessionsTypeAccountHolder!
	customer: String
	account: String
}
input StripePostLinkAccountSessionsFiltersInput {
	countries: [String!]!
}
input StripePostLinkAccountSessionsInput {
	returnUrl: String
	permissions: [StripePostLinkAccountSessionsPermissions!]!
	filters: StripePostLinkAccountSessionsFiltersInput
	expand: [String!]
	accountHolder: StripePostLinkAccountSessionsAccountHolderInput!
}
enum StripePostLinkAccountSessionsPermissions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripePostLinkAccountSessionsTypeAccountHolder {
	ACCOUNT
	CUSTOMER
}
input StripePostLinkedAccountsAccountDisconnectInput {
	expand: [String!]
}
enum StripePostLinkedAccountsAccountRefreshFeatures {
	BALANCE
	OWNERSHIP
}
input StripePostLinkedAccountsAccountRefreshInput {
	features: [StripePostLinkedAccountsAccountRefreshFeatures!]!
	expand: [String!]
}
enum StripePostPaymentIntentsAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostPaymentIntentsAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostPaymentIntentsAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostPaymentIntentsAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostPaymentIntentsVerificationMethodAcssDebitPaymentMethodOptions
	setupFutureUsage: String
	mandateOptions: StripePostPaymentIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput
}
input StripePostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentIntentsAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentIntentsAffirmPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageAffirmPaymentMethodOptions
	captureMethod: String
}
input StripePostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageAfterpayClearpayPaymentMethodOptions
	reference: String
	captureMethod: String
}
input StripePostPaymentIntentsAlipayPaymentMethodOptionsInput {
	setupFutureUsage: String
}
enum StripePostPaymentIntentsAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input StripePostPaymentIntentsAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsAutomaticPaymentMethodsInput {
	enabled: Boolean!
}
input StripePostPaymentIntentsBacsDebitPaymentMethodDataInput {
	sortCode: String
	accountNumber: String
}
input StripePostPaymentIntentsBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsBancontactPaymentMethodOptionsInput {
	setupFutureUsage: String
	preferredLanguage: StripePostPaymentIntentsPreferredLanguageBancontactPaymentMethodOptions
}
enum StripePostPaymentIntentsBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostPaymentIntentsBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostPaymentIntentsBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostPaymentIntentsBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostPaymentIntentsBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: StripePostPaymentIntentsTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [StripePostPaymentIntentsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]
	euBankTransfer: StripePostPaymentIntentsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput
}
input StripePostPaymentIntentsBillingDetailsPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostPaymentIntentsAddressBillingDetailsPaymentMethodDataUnionInput
}
input StripePostPaymentIntentsBlikPaymentMethodOptionsInput {
	code: String
}
input StripePostPaymentIntentsBoletoPaymentMethodDataInput {
	taxId: String!
}
input StripePostPaymentIntentsBoletoPaymentMethodOptionsInput {
	setupFutureUsage: String
	expiresAfterDays: Int
}
enum StripePostPaymentIntentsCaptureMethod {
	AUTOMATIC
	MANUAL
}
input StripePostPaymentIntentsCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: JSON
	statementDescriptorSuffixKana: JSON
	setupFutureUsage: String
	requestThreeDSecure: StripePostPaymentIntentsRequestThreeDSecureCardPaymentMethodOptions
	network: StripePostPaymentIntentsNetworkCardPaymentMethodOptions
	mandateOptions: StripePostPaymentIntentsMandateOptionsCardPaymentMethodOptionsInput
	installments: StripePostPaymentIntentsInstallmentsCardPaymentMethodOptionsInput
	cvcToken: String
	captureMethod: String
}
input StripePostPaymentIntentsCardPresentPaymentMethodOptionsInput {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
enum StripePostPaymentIntentsClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
enum StripePostPaymentIntentsConfirmationMethod {
	AUTOMATIC
	MANUAL
}
enum StripePostPaymentIntentsCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
input StripePostPaymentIntentsCustomerAcceptanceMandateDataInput {
	type: StripePostPaymentIntentsTypeCustomerAcceptanceMandateData!
	online: StripePostPaymentIntentsOnlineCustomerAcceptanceMandateDataInput
	offline: JSON
	acceptedAt: Int
}
input StripePostPaymentIntentsCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageCustomerBalancePaymentMethodOptions
	fundingType: StripePostPaymentIntentsFundingTypeCustomerBalancePaymentMethodOptions
	bankTransfer: StripePostPaymentIntentsBankTransferCustomerBalancePaymentMethodOptionsInput
}
input StripePostPaymentIntentsDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostPaymentIntentsEpsPaymentMethodDataInput {
	bank: StripePostPaymentIntentsBankEpsPaymentMethodData
}
input StripePostPaymentIntentsEpsPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageEpsPaymentMethodOptions
}
input StripePostPaymentIntentsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input StripePostPaymentIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String
	permissions: [StripePostPaymentIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
input StripePostPaymentIntentsFpxPaymentMethodDataInput {
	bank: StripePostPaymentIntentsBankFpxPaymentMethodData!
}
input StripePostPaymentIntentsFpxPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageFpxPaymentMethodOptions
}
enum StripePostPaymentIntentsFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
input StripePostPaymentIntentsGiropayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageGiropayPaymentMethodOptions
}
input StripePostPaymentIntentsGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageGrabpayPaymentMethodOptions
}
input StripePostPaymentIntentsIdealPaymentMethodDataInput {
	bank: StripePostPaymentIntentsBankIdealPaymentMethodData
}
input StripePostPaymentIntentsIdealPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsInput {
	offSession: JSON
	useStripeSdk: Boolean
	transferGroup: String
	transferData: StripePostPaymentIntentsTransferDataInput
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: StripePostPaymentIntentsShippingInput
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsage
	returnUrl: String
	receiptEmail: String
	radarOptions: StripePostPaymentIntentsRadarOptionsInput
	paymentMethodTypes: [String!]
	paymentMethodOptions: StripePostPaymentIntentsPaymentMethodOptionsInput
	paymentMethodData: StripePostPaymentIntentsPaymentMethodDataInput
	paymentMethod: String
	onBehalfOf: String
	metadata: JSON
	mandateData: StripePostPaymentIntentsMandateDataInput
	mandate: String
	expand: [String!]
	errorOnRequiresAction: Boolean
	description: String
	customer: String
	currency: String!
	confirmationMethod: StripePostPaymentIntentsConfirmationMethod
	confirm: Boolean
	captureMethod: StripePostPaymentIntentsCaptureMethod
	automaticPaymentMethods: StripePostPaymentIntentsAutomaticPaymentMethodsInput
	applicationFeeAmount: Int
	amount: Int!
}
input StripePostPaymentIntentsInstallmentsCardPaymentMethodOptionsInput {
	plan: StripeStringOrPostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsUnionInput
	enabled: Boolean
}
enum StripePostPaymentIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostPaymentIntentsIntentAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostPaymentIntentsIntentAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostPaymentIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions
	setupFutureUsage: String
	mandateOptions: StripePostPaymentIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput
}
input StripePostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentIntentsIntentAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentIntentsIntentAffirmPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageAffirmPaymentMethodOptions
	captureMethod: String
}
input StripePostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageAfterpayClearpayPaymentMethodOptions
	reference: String
	captureMethod: String
}
input StripePostPaymentIntentsIntentAlipayPaymentMethodOptionsInput {
	setupFutureUsage: String
}
enum StripePostPaymentIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input StripePostPaymentIntentsIntentApplyCustomerBalanceInput {
	expand: [String!]
	currency: String
	amount: Int
}
input StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsIntentBacsDebitPaymentMethodDataInput {
	sortCode: String
	accountNumber: String
}
input StripePostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsIntentBancontactPaymentMethodOptionsInput {
	setupFutureUsage: String
	preferredLanguage: StripePostPaymentIntentsIntentPreferredLanguageBancontactPaymentMethodOptions
}
enum StripePostPaymentIntentsIntentBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostPaymentIntentsIntentBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostPaymentIntentsIntentBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostPaymentIntentsIntentBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostPaymentIntentsIntentBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: StripePostPaymentIntentsIntentTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [StripePostPaymentIntentsIntentRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]
	euBankTransfer: StripePostPaymentIntentsIntentEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput
}
input StripePostPaymentIntentsIntentBillingDetailsPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput
}
input StripePostPaymentIntentsIntentBlikPaymentMethodOptionsInput {
	code: String
}
input StripePostPaymentIntentsIntentBoletoPaymentMethodDataInput {
	taxId: String!
}
input StripePostPaymentIntentsIntentBoletoPaymentMethodOptionsInput {
	setupFutureUsage: String
	expiresAfterDays: Int
}
enum StripePostPaymentIntentsIntentCancelCancellationReason {
	ABANDONED
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input StripePostPaymentIntentsIntentCancelInput {
	expand: [String!]
	cancellationReason: StripePostPaymentIntentsIntentCancelCancellationReason
}
input StripePostPaymentIntentsIntentCaptureInput {
	transferData: StripePostPaymentIntentsIntentCaptureTransferDataInput
	statementDescriptorSuffix: String
	statementDescriptor: String
	expand: [String!]
	applicationFeeAmount: Int
	amountToCapture: Int
}
enum StripePostPaymentIntentsIntentCaptureMethod {
	AUTOMATIC
	MANUAL
}
input StripePostPaymentIntentsIntentCaptureTransferDataInput {
	amount: Int
}
input StripePostPaymentIntentsIntentCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: JSON
	statementDescriptorSuffixKana: JSON
	setupFutureUsage: String
	requestThreeDSecure: StripePostPaymentIntentsIntentRequestThreeDSecureCardPaymentMethodOptions
	network: StripePostPaymentIntentsIntentNetworkCardPaymentMethodOptions
	mandateOptions: StripePostPaymentIntentsIntentMandateOptionsCardPaymentMethodOptionsInput
	installments: StripePostPaymentIntentsIntentInstallmentsCardPaymentMethodOptionsInput
	cvcToken: String
	captureMethod: String
}
input StripePostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
enum StripePostPaymentIntentsIntentClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
enum StripePostPaymentIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostPaymentIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostPaymentIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions
	setupFutureUsage: String
	mandateOptions: StripePostPaymentIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput
}
input StripePostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentIntentsIntentConfirmAddressShippingInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageAffirmPaymentMethodOptions
	captureMethod: String
}
input StripePostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageAfterpayClearpayPaymentMethodOptions
	reference: String
	captureMethod: String
}
input StripePostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput {
	setupFutureUsage: String
}
enum StripePostPaymentIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodDataInput {
	sortCode: String
	accountNumber: String
}
input StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput {
	setupFutureUsage: String
	preferredLanguage: StripePostPaymentIntentsIntentConfirmPreferredLanguageBancontactPaymentMethodOptions
}
enum StripePostPaymentIntentsIntentConfirmBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostPaymentIntentsIntentConfirmBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostPaymentIntentsIntentConfirmBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostPaymentIntentsIntentConfirmBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostPaymentIntentsIntentConfirmBankTransferCustomerBalancePaymentMethodOptionsInput {
	type: StripePostPaymentIntentsIntentConfirmTypeBankTransferCustomerBalancePaymentMethodOptions!
	requestedAddressTypes: [StripePostPaymentIntentsIntentConfirmRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions!]
	euBankTransfer: StripePostPaymentIntentsIntentConfirmEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput
}
input StripePostPaymentIntentsIntentConfirmBillingDetailsPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput
}
input StripePostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput {
	code: String
}
input StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodDataInput {
	taxId: String!
}
input StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput {
	setupFutureUsage: String
	expiresAfterDays: Int
}
enum StripePostPaymentIntentsIntentConfirmCaptureMethod {
	AUTOMATIC
	MANUAL
}
input StripePostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput {
	statementDescriptorSuffixKanji: JSON
	statementDescriptorSuffixKana: JSON
	setupFutureUsage: String
	requestThreeDSecure: StripePostPaymentIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions
	network: StripePostPaymentIntentsIntentConfirmNetworkCardPaymentMethodOptions
	mandateOptions: StripePostPaymentIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput
	installments: StripePostPaymentIntentsIntentConfirmInstallmentsCardPaymentMethodOptionsInput
	cvcToken: String
	captureMethod: String
}
input StripePostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput {
	requestIncrementalAuthorizationSupport: Boolean
	requestExtendedAuthorization: Boolean
}
enum StripePostPaymentIntentsIntentConfirmClientWechatPayPaymentMethodOptions {
	ANDROID
	IOS
	WEB
}
enum StripePostPaymentIntentsIntentConfirmCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
input StripePostPaymentIntentsIntentConfirmCustomerAcceptanceMandateDataInput {
	type: StripePostPaymentIntentsIntentConfirmTypeCustomerAcceptanceMandateData!
	online: StripePostPaymentIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput!
}
input StripePostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageCustomerBalancePaymentMethodOptions
	fundingType: StripePostPaymentIntentsIntentConfirmFundingTypeCustomerBalancePaymentMethodOptions
	bankTransfer: StripePostPaymentIntentsIntentConfirmBankTransferCustomerBalancePaymentMethodOptionsInput
}
input StripePostPaymentIntentsIntentConfirmDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostPaymentIntentsIntentConfirmEpsPaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentConfirmBankEpsPaymentMethodData
}
input StripePostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageEpsPaymentMethodOptions
}
input StripePostPaymentIntentsIntentConfirmEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input StripePostPaymentIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String
	permissions: [StripePostPaymentIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
input StripePostPaymentIntentsIntentConfirmFpxPaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentConfirmBankFpxPaymentMethodData!
}
input StripePostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageFpxPaymentMethodOptions
}
enum StripePostPaymentIntentsIntentConfirmFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
input StripePostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageGiropayPaymentMethodOptions
}
input StripePostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageGrabpayPaymentMethodOptions
}
input StripePostPaymentIntentsIntentConfirmIdealPaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentConfirmBankIdealPaymentMethodData
}
input StripePostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsIntentConfirmInput {
	receiptEmail: JSON
	offSession: JSON
	useStripeSdk: Boolean
	shipping: StripeStringOrPostPaymentIntentsIntentConfirmShippingUnionInput
	setupFutureUsage: String
	returnUrl: String
	radarOptions: StripePostPaymentIntentsIntentConfirmRadarOptionsInput
	paymentMethodTypes: [String!]
	paymentMethodOptions: StripePostPaymentIntentsIntentConfirmPaymentMethodOptionsInput
	paymentMethodData: StripePostPaymentIntentsIntentConfirmPaymentMethodDataInput
	paymentMethod: String
	mandateData: StripePostPaymentIntentsIntentConfirmMandateDataOrPostPaymentIntentsIntentConfirmMandateDataUnionInput
	mandate: String
	expand: [String!]
	errorOnRequiresAction: Boolean
	clientSecret: String
	captureMethod: StripePostPaymentIntentsIntentConfirmCaptureMethod
}
input StripePostPaymentIntentsIntentConfirmInstallmentsCardPaymentMethodOptionsInput {
	plan: StripeStringOrPostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsUnionInput
	enabled: Boolean
}
enum StripePostPaymentIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum StripePostPaymentIntentsIntentConfirmIntervalPlanInstallmentsCardPaymentMethodOptions {
	MONTH
}
input StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodDataInput {
	dob: StripePostPaymentIntentsIntentConfirmDobKlarnaPaymentMethodDataInput
}
input StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageKlarnaPaymentMethodOptions
	preferredLocale: StripePostPaymentIntentsIntentConfirmPreferredLocaleKlarnaPaymentMethodOptions
	captureMethod: String
}
input StripePostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput {
	expiresAt: JSON
	expiresAfterDays: JSON
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageKonbiniPaymentMethodOptions
	productDescription: String
	confirmationNumber: String
}
input StripePostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput {
	setupFutureUsage: String
	persistentToken: String
	captureMethod: String
}
input StripePostPaymentIntentsIntentConfirmMandateDataInput {
	customerAcceptance: StripePostPaymentIntentsIntentConfirmCustomerAcceptanceMandateDataInput!
}
input StripePostPaymentIntentsIntentConfirmMandateDataOrPostPaymentIntentsIntentConfirmMandateDataUnionInput {
	stripePostPaymentIntentsIntentConfirmMandateDataInput: StripePostPaymentIntentsIntentConfirmMandateDataInput
}
input StripePostPaymentIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostPaymentIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostPaymentIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
}
input StripePostPaymentIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [StripePostPaymentIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePostPaymentIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int
	description: String
	amountType: StripePostPaymentIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum StripePostPaymentIntentsIntentConfirmNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostPaymentIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [StripePostPaymentIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions!]
}
input StripePostPaymentIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String
	ipAddress: String
}
input StripePostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageOxxoPaymentMethodOptions
	expiresAfterDays: Int
}
input StripePostPaymentIntentsIntentConfirmP24PaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentConfirmBankP24PaymentMethodData
}
input StripePostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageP24PaymentMethodOptions
}
input StripePostPaymentIntentsIntentConfirmPaymentMethodDataInput {
	wechatPay: JSON
	usBankAccount: StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodDataInput
	type: StripePostPaymentIntentsIntentConfirmTypePaymentMethodData!
	sofort: StripePostPaymentIntentsIntentConfirmSofortPaymentMethodDataInput
	sepaDebit: StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodDataInput
	radarOptions: StripePostPaymentIntentsIntentConfirmRadarOptionsPaymentMethodDataInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePostPaymentIntentsIntentConfirmP24PaymentMethodDataInput
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodDataInput
	interacPresent: JSON
	ideal: StripePostPaymentIntentsIntentConfirmIdealPaymentMethodDataInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostPaymentIntentsIntentConfirmFpxPaymentMethodDataInput
	eps: StripePostPaymentIntentsIntentConfirmEpsPaymentMethodDataInput
	customerBalance: JSON
	boleto: StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodDataInput
	blik: JSON
	billingDetails: StripePostPaymentIntentsIntentConfirmBillingDetailsPaymentMethodDataInput
	bancontact: JSON
	bacsDebit: StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodDataInput
	auBecsDebit: StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodDataInput
}
input StripePostPaymentIntentsIntentConfirmPaymentMethodOptionsInput {
	interacPresent: JSON
	wechatPay: StripeStringOrPostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsUnionInput
	usBankAccount: StripeStringOrPostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsUnionInput
	sofort: StripeStringOrPostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsUnionInput
	sepaDebit: StripeStringOrPostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsUnionInput
	promptpay: StripeStringOrPostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsUnionInput
	pix: StripeStringOrPostPaymentIntentsIntentConfirmPixPaymentMethodOptionsUnionInput
	paynow: StripeStringOrPostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsUnionInput
	p24: StripeStringOrPostPaymentIntentsIntentConfirmP24PaymentMethodOptionsUnionInput
	oxxo: StripeStringOrPostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsUnionInput
	link: StripeStringOrPostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsUnionInput
	konbini: StripeStringOrPostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsUnionInput
	klarna: StripeStringOrPostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsUnionInput
	ideal: StripeStringOrPostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsUnionInput
	grabpay: StripeStringOrPostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsUnionInput
	giropay: StripeStringOrPostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsUnionInput
	fpx: StripeStringOrPostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsUnionInput
	eps: StripeStringOrPostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsUnionInput
	customerBalance: StripeStringOrPostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsUnionInput
	cardPresent: StripeStringOrPostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsUnionInput
	card: StripeStringOrPostPaymentIntentsIntentConfirmCardPaymentMethodOptionsUnionInput
	boleto: StripeStringOrPostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsUnionInput
	blik: StripeStringOrPostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsUnionInput
	bancontact: StripeStringOrPostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsUnionInput
	bacsDebit: StripeStringOrPostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsUnionInput
	auBecsDebit: StripeStringOrPostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsUnionInput
	alipay: StripeStringOrPostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsUnionInput
	afterpayClearpay: StripeStringOrPostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsUnionInput
	affirm: StripeStringOrPostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsUnionInput
	acssDebit: StripeStringOrPostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsUnionInput
}
enum StripePostPaymentIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
input StripePostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsagePaynowPaymentMethodOptions
}
enum StripePostPaymentIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsagePixPaymentMethodOptions
	expiresAt: Int
	expiresAfterSeconds: Int
}
input StripePostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput {
	type: StripePostPaymentIntentsIntentConfirmTypePlanInstallmentsCardPaymentMethodOptions!
	interval: StripePostPaymentIntentsIntentConfirmIntervalPlanInstallmentsCardPaymentMethodOptions!
	count: Int!
}
enum StripePostPaymentIntentsIntentConfirmPreferredLanguageBancontactPaymentMethodOptions {
	DE
	EN
	FR
	NL
}
enum StripePostPaymentIntentsIntentConfirmPreferredLocaleKlarnaPaymentMethodOptions {
	CS_CZ
	DA_DK
	DE_AT
	DE_CH
	DE_DE
	EL_GR
	EN_AT
	EN_AU
	EN_BE
	EN_CA
	EN_CH
	EN_CZ
	EN_DE
	EN_DK
	EN_ES
	EN_FI
	EN_FR
	EN_GB
	EN_GR
	EN_IE
	EN_IT
	EN_NL
	EN_NO
	EN_NZ
	EN_PL
	EN_PT
	EN_SE
	EN_US
	ES_ES
	ES_US
	FI_FI
	FR_BE
	FR_CA
	FR_CH
	FR_FR
	IT_CH
	IT_IT
	NB_NO
	NL_BE
	NL_NL
	PL_PL
	PT_PT
	SV_FI
	SV_SE
}
input StripePostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsagePromptpayPaymentMethodOptions
}
input StripePostPaymentIntentsIntentConfirmRadarOptionsInput {
	session: String
}
input StripePostPaymentIntentsIntentConfirmRadarOptionsPaymentMethodDataInput {
	session: String
}
enum StripePostPaymentIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum StripePostPaymentIntentsIntentConfirmRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum StripePostPaymentIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodDataInput {
	iban: String!
}
input StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
	mandateOptions: JSON
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsagePixPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsagePromptpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
input StripePostPaymentIntentsIntentConfirmShippingInput {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: StripePostPaymentIntentsIntentConfirmAddressShippingInput!
}
input StripePostPaymentIntentsIntentConfirmSofortPaymentMethodDataInput {
	country: StripePostPaymentIntentsIntentConfirmCountrySofortPaymentMethodData!
}
input StripePostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput {
	setupFutureUsage: String
	preferredLanguage: String
}
enum StripePostPaymentIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum StripePostPaymentIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum StripePostPaymentIntentsIntentConfirmTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum StripePostPaymentIntentsIntentConfirmTypeCustomerAcceptanceMandateData {
	ONLINE
}
enum StripePostPaymentIntentsIntentConfirmTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum StripePostPaymentIntentsIntentConfirmTypePlanInstallmentsCardPaymentMethodOptions {
	FIXED_COUNT
}
input StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostPaymentIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostPaymentIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData
}
input StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostPaymentIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions
	setupFutureUsage: String
	networks: StripePostPaymentIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput
	financialConnections: StripePostPaymentIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostPaymentIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostPaymentIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentConfirmSetupFutureUsageWechatPayPaymentMethodOptions
	client: StripePostPaymentIntentsIntentConfirmClientWechatPayPaymentMethodOptions!
	appId: String
}
enum StripePostPaymentIntentsIntentCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
input StripePostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageCustomerBalancePaymentMethodOptions
	fundingType: StripePostPaymentIntentsIntentFundingTypeCustomerBalancePaymentMethodOptions
	bankTransfer: StripePostPaymentIntentsIntentBankTransferCustomerBalancePaymentMethodOptionsInput
}
input StripePostPaymentIntentsIntentDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostPaymentIntentsIntentEpsPaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentBankEpsPaymentMethodData
}
input StripePostPaymentIntentsIntentEpsPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageEpsPaymentMethodOptions
}
input StripePostPaymentIntentsIntentEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput {
	country: String!
}
input StripePostPaymentIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String
	permissions: [StripePostPaymentIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
input StripePostPaymentIntentsIntentFpxPaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentBankFpxPaymentMethodData!
}
input StripePostPaymentIntentsIntentFpxPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageFpxPaymentMethodOptions
}
enum StripePostPaymentIntentsIntentFundingTypeCustomerBalancePaymentMethodOptions {
	BANK_TRANSFER
}
input StripePostPaymentIntentsIntentGiropayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageGiropayPaymentMethodOptions
}
input StripePostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageGrabpayPaymentMethodOptions
}
input StripePostPaymentIntentsIntentIdealPaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentBankIdealPaymentMethodData
}
input StripePostPaymentIntentsIntentIdealPaymentMethodOptionsInput {
	setupFutureUsage: String
}
input StripePostPaymentIntentsIntentIncrementAuthorizationInput {
	transferData: StripePostPaymentIntentsIntentIncrementAuthorizationTransferDataInput
	statementDescriptor: String
	metadata: JSON
	expand: [String!]
	description: String
	applicationFeeAmount: Int
	amount: Int!
}
input StripePostPaymentIntentsIntentIncrementAuthorizationTransferDataInput {
	amount: Int
}
input StripePostPaymentIntentsIntentInput {
	receiptEmail: JSON
	metadata: JSON
	applicationFeeAmount: JSON
	transferGroup: String
	transferData: StripePostPaymentIntentsIntentTransferDataInput
	statementDescriptorSuffix: String
	statementDescriptor: String
	shipping: StripeStringOrPostPaymentIntentsIntentShippingUnionInput
	setupFutureUsage: String
	paymentMethodTypes: [String!]
	paymentMethodOptions: StripePostPaymentIntentsIntentPaymentMethodOptionsInput
	paymentMethodData: StripePostPaymentIntentsIntentPaymentMethodDataInput
	paymentMethod: String
	expand: [String!]
	description: String
	customer: String
	currency: String
	captureMethod: StripePostPaymentIntentsIntentCaptureMethod
	amount: Int
}
input StripePostPaymentIntentsIntentInstallmentsCardPaymentMethodOptionsInput {
	plan: StripeStringOrPostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsUnionInput
	enabled: Boolean
}
enum StripePostPaymentIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum StripePostPaymentIntentsIntentIntervalPlanInstallmentsCardPaymentMethodOptions {
	MONTH
}
input StripePostPaymentIntentsIntentKlarnaPaymentMethodDataInput {
	dob: StripePostPaymentIntentsIntentDobKlarnaPaymentMethodDataInput
}
input StripePostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageKlarnaPaymentMethodOptions
	preferredLocale: StripePostPaymentIntentsIntentPreferredLocaleKlarnaPaymentMethodOptions
	captureMethod: String
}
input StripePostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput {
	expiresAt: JSON
	expiresAfterDays: JSON
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageKonbiniPaymentMethodOptions
	productDescription: String
	confirmationNumber: String
}
input StripePostPaymentIntentsIntentLinkPaymentMethodOptionsInput {
	setupFutureUsage: String
	persistentToken: String
	captureMethod: String
}
input StripePostPaymentIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostPaymentIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostPaymentIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
}
input StripePostPaymentIntentsIntentMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [StripePostPaymentIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePostPaymentIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int
	description: String
	amountType: StripePostPaymentIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum StripePostPaymentIntentsIntentNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostPaymentIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [StripePostPaymentIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions!]
}
input StripePostPaymentIntentsIntentOxxoPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageOxxoPaymentMethodOptions
	expiresAfterDays: Int
}
input StripePostPaymentIntentsIntentP24PaymentMethodDataInput {
	bank: StripePostPaymentIntentsIntentBankP24PaymentMethodData
}
input StripePostPaymentIntentsIntentP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageP24PaymentMethodOptions
}
input StripePostPaymentIntentsIntentPaymentMethodDataInput {
	wechatPay: JSON
	usBankAccount: StripePostPaymentIntentsIntentUsBankAccountPaymentMethodDataInput
	type: StripePostPaymentIntentsIntentTypePaymentMethodData!
	sofort: StripePostPaymentIntentsIntentSofortPaymentMethodDataInput
	sepaDebit: StripePostPaymentIntentsIntentSepaDebitPaymentMethodDataInput
	radarOptions: StripePostPaymentIntentsIntentRadarOptionsPaymentMethodDataInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePostPaymentIntentsIntentP24PaymentMethodDataInput
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostPaymentIntentsIntentKlarnaPaymentMethodDataInput
	interacPresent: JSON
	ideal: StripePostPaymentIntentsIntentIdealPaymentMethodDataInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostPaymentIntentsIntentFpxPaymentMethodDataInput
	eps: StripePostPaymentIntentsIntentEpsPaymentMethodDataInput
	customerBalance: JSON
	boleto: StripePostPaymentIntentsIntentBoletoPaymentMethodDataInput
	blik: JSON
	billingDetails: StripePostPaymentIntentsIntentBillingDetailsPaymentMethodDataInput
	bancontact: JSON
	bacsDebit: StripePostPaymentIntentsIntentBacsDebitPaymentMethodDataInput
	auBecsDebit: StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodDataInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostPaymentIntentsIntentAcssDebitPaymentMethodDataInput
}
input StripePostPaymentIntentsIntentPaymentMethodOptionsInput {
	interacPresent: JSON
	wechatPay: StripeStringOrPostPaymentIntentsIntentWechatPayPaymentMethodOptionsUnionInput
	usBankAccount: StripeStringOrPostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsUnionInput
	sofort: StripeStringOrPostPaymentIntentsIntentSofortPaymentMethodOptionsUnionInput
	sepaDebit: StripeStringOrPostPaymentIntentsIntentSepaDebitPaymentMethodOptionsUnionInput
	promptpay: StripeStringOrPostPaymentIntentsIntentPromptpayPaymentMethodOptionsUnionInput
	pix: StripeStringOrPostPaymentIntentsIntentPixPaymentMethodOptionsUnionInput
	paynow: StripeStringOrPostPaymentIntentsIntentPaynowPaymentMethodOptionsUnionInput
	p24: StripeStringOrPostPaymentIntentsIntentP24PaymentMethodOptionsUnionInput
	oxxo: StripeStringOrPostPaymentIntentsIntentOxxoPaymentMethodOptionsUnionInput
	link: StripeStringOrPostPaymentIntentsIntentLinkPaymentMethodOptionsUnionInput
	konbini: StripeStringOrPostPaymentIntentsIntentKonbiniPaymentMethodOptionsUnionInput
	klarna: StripeStringOrPostPaymentIntentsIntentKlarnaPaymentMethodOptionsUnionInput
	ideal: StripeStringOrPostPaymentIntentsIntentIdealPaymentMethodOptionsUnionInput
	grabpay: StripeStringOrPostPaymentIntentsIntentGrabpayPaymentMethodOptionsUnionInput
	giropay: StripeStringOrPostPaymentIntentsIntentGiropayPaymentMethodOptionsUnionInput
	fpx: StripeStringOrPostPaymentIntentsIntentFpxPaymentMethodOptionsUnionInput
	eps: StripeStringOrPostPaymentIntentsIntentEpsPaymentMethodOptionsUnionInput
	customerBalance: StripeStringOrPostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsUnionInput
	cardPresent: StripeStringOrPostPaymentIntentsIntentCardPresentPaymentMethodOptionsUnionInput
	card: StripeStringOrPostPaymentIntentsIntentCardPaymentMethodOptionsUnionInput
	boleto: StripeStringOrPostPaymentIntentsIntentBoletoPaymentMethodOptionsUnionInput
	blik: StripeStringOrPostPaymentIntentsIntentBlikPaymentMethodOptionsUnionInput
	bancontact: StripeStringOrPostPaymentIntentsIntentBancontactPaymentMethodOptionsUnionInput
	bacsDebit: StripeStringOrPostPaymentIntentsIntentBacsDebitPaymentMethodOptionsUnionInput
	auBecsDebit: StripeStringOrPostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsUnionInput
	alipay: StripeStringOrPostPaymentIntentsIntentAlipayPaymentMethodOptionsUnionInput
	afterpayClearpay: StripeStringOrPostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsUnionInput
	affirm: StripeStringOrPostPaymentIntentsIntentAffirmPaymentMethodOptionsUnionInput
	acssDebit: StripeStringOrPostPaymentIntentsIntentAcssDebitPaymentMethodOptionsUnionInput
}
enum StripePostPaymentIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
input StripePostPaymentIntentsIntentPaynowPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsagePaynowPaymentMethodOptions
}
enum StripePostPaymentIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostPaymentIntentsIntentPixPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsagePixPaymentMethodOptions
	expiresAt: Int
	expiresAfterSeconds: Int
}
input StripePostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput {
	type: StripePostPaymentIntentsIntentTypePlanInstallmentsCardPaymentMethodOptions!
	interval: StripePostPaymentIntentsIntentIntervalPlanInstallmentsCardPaymentMethodOptions!
	count: Int!
}
enum StripePostPaymentIntentsIntentPreferredLanguageBancontactPaymentMethodOptions {
	DE
	EN
	FR
	NL
}
enum StripePostPaymentIntentsIntentPreferredLocaleKlarnaPaymentMethodOptions {
	CS_CZ
	DA_DK
	DE_AT
	DE_CH
	DE_DE
	EL_GR
	EN_AT
	EN_AU
	EN_BE
	EN_CA
	EN_CH
	EN_CZ
	EN_DE
	EN_DK
	EN_ES
	EN_FI
	EN_FR
	EN_GB
	EN_GR
	EN_IE
	EN_IT
	EN_NL
	EN_NO
	EN_NZ
	EN_PL
	EN_PT
	EN_SE
	EN_US
	ES_ES
	ES_US
	FI_FI
	FR_BE
	FR_CA
	FR_CH
	FR_FR
	IT_CH
	IT_IT
	NB_NO
	NL_BE
	NL_NL
	PL_PL
	PT_PT
	SV_FI
	SV_SE
}
input StripePostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsagePromptpayPaymentMethodOptions
}
input StripePostPaymentIntentsIntentRadarOptionsPaymentMethodDataInput {
	session: String
}
enum StripePostPaymentIntentsIntentRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum StripePostPaymentIntentsIntentRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum StripePostPaymentIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostPaymentIntentsIntentSepaDebitPaymentMethodDataInput {
	iban: String!
}
input StripePostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
	mandateOptions: JSON
}
enum StripePostPaymentIntentsIntentSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsagePixPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsagePromptpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsIntentSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
input StripePostPaymentIntentsIntentShippingInput {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: StripePostPaymentIntentsIntentAddressShippingInput!
}
input StripePostPaymentIntentsIntentSofortPaymentMethodDataInput {
	country: StripePostPaymentIntentsIntentCountrySofortPaymentMethodData!
}
input StripePostPaymentIntentsIntentSofortPaymentMethodOptionsInput {
	setupFutureUsage: String
	preferredLanguage: String
}
enum StripePostPaymentIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum StripePostPaymentIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
input StripePostPaymentIntentsIntentTransferDataInput {
	amount: Int
}
enum StripePostPaymentIntentsIntentTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum StripePostPaymentIntentsIntentTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum StripePostPaymentIntentsIntentTypePlanInstallmentsCardPaymentMethodOptions {
	FIXED_COUNT
}
input StripePostPaymentIntentsIntentUsBankAccountPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostPaymentIntentsIntentAccountTypeUsBankAccountPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostPaymentIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData
}
input StripePostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostPaymentIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions
	setupFutureUsage: String
	networks: StripePostPaymentIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput
	financialConnections: StripePostPaymentIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostPaymentIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostPaymentIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostPaymentIntentsIntentVerifyMicrodepositsInput {
	expand: [String!]
	descriptorCode: String
	clientSecret: String
	amounts: [Int!]
}
input StripePostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsIntentSetupFutureUsageWechatPayPaymentMethodOptions
	client: StripePostPaymentIntentsIntentClientWechatPayPaymentMethodOptions!
	appId: String
}
enum StripePostPaymentIntentsIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum StripePostPaymentIntentsIntervalPlanInstallmentsCardPaymentMethodOptions {
	MONTH
}
input StripePostPaymentIntentsKlarnaPaymentMethodDataInput {
	dob: StripePostPaymentIntentsDobKlarnaPaymentMethodDataInput
}
input StripePostPaymentIntentsKlarnaPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageKlarnaPaymentMethodOptions
	preferredLocale: StripePostPaymentIntentsPreferredLocaleKlarnaPaymentMethodOptions
	captureMethod: String
}
input StripePostPaymentIntentsKonbiniPaymentMethodOptionsInput {
	expiresAt: JSON
	expiresAfterDays: JSON
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageKonbiniPaymentMethodOptions
	productDescription: String
	confirmationNumber: String
}
input StripePostPaymentIntentsLinkPaymentMethodOptionsInput {
	setupFutureUsage: String
	persistentToken: String
	captureMethod: String
}
input StripePostPaymentIntentsMandateDataInput {
	customerAcceptance: StripePostPaymentIntentsCustomerAcceptanceMandateDataInput!
}
input StripePostPaymentIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostPaymentIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostPaymentIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
}
input StripePostPaymentIntentsMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [StripePostPaymentIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePostPaymentIntentsIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int
	description: String
	amountType: StripePostPaymentIntentsAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum StripePostPaymentIntentsNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostPaymentIntentsNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [StripePostPaymentIntentsRequestedNetworksUsBankAccountPaymentMethodOptions!]
}
input StripePostPaymentIntentsOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String!
	ipAddress: String!
}
input StripePostPaymentIntentsOxxoPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageOxxoPaymentMethodOptions
	expiresAfterDays: Int
}
input StripePostPaymentIntentsP24PaymentMethodDataInput {
	bank: StripePostPaymentIntentsBankP24PaymentMethodData
}
input StripePostPaymentIntentsP24PaymentMethodOptionsInput {
	tosShownAndAccepted: Boolean
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageP24PaymentMethodOptions
}
input StripePostPaymentIntentsPaymentMethodDataInput {
	wechatPay: JSON
	usBankAccount: StripePostPaymentIntentsUsBankAccountPaymentMethodDataInput
	type: StripePostPaymentIntentsTypePaymentMethodData!
	sofort: StripePostPaymentIntentsSofortPaymentMethodDataInput
	sepaDebit: StripePostPaymentIntentsSepaDebitPaymentMethodDataInput
	radarOptions: StripePostPaymentIntentsRadarOptionsPaymentMethodDataInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePostPaymentIntentsP24PaymentMethodDataInput
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostPaymentIntentsKlarnaPaymentMethodDataInput
	interacPresent: JSON
	ideal: StripePostPaymentIntentsIdealPaymentMethodDataInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostPaymentIntentsFpxPaymentMethodDataInput
	eps: StripePostPaymentIntentsEpsPaymentMethodDataInput
	customerBalance: JSON
	boleto: StripePostPaymentIntentsBoletoPaymentMethodDataInput
	blik: JSON
	billingDetails: StripePostPaymentIntentsBillingDetailsPaymentMethodDataInput
	bancontact: JSON
	bacsDebit: StripePostPaymentIntentsBacsDebitPaymentMethodDataInput
	auBecsDebit: StripePostPaymentIntentsAuBecsDebitPaymentMethodDataInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostPaymentIntentsAcssDebitPaymentMethodDataInput
}
input StripePostPaymentIntentsPaymentMethodOptionsInput {
	interacPresent: JSON
	wechatPay: StripeStringOrPostPaymentIntentsWechatPayPaymentMethodOptionsUnionInput
	usBankAccount: StripeStringOrPostPaymentIntentsUsBankAccountPaymentMethodOptionsUnionInput
	sofort: StripeStringOrPostPaymentIntentsSofortPaymentMethodOptionsUnionInput
	sepaDebit: StripeStringOrPostPaymentIntentsSepaDebitPaymentMethodOptionsUnionInput
	promptpay: StripeStringOrPostPaymentIntentsPromptpayPaymentMethodOptionsUnionInput
	pix: StripeStringOrPostPaymentIntentsPixPaymentMethodOptionsUnionInput
	paynow: StripeStringOrPostPaymentIntentsPaynowPaymentMethodOptionsUnionInput
	p24: StripeStringOrPostPaymentIntentsP24PaymentMethodOptionsUnionInput
	oxxo: StripeStringOrPostPaymentIntentsOxxoPaymentMethodOptionsUnionInput
	link: StripeStringOrPostPaymentIntentsLinkPaymentMethodOptionsUnionInput
	konbini: StripeStringOrPostPaymentIntentsKonbiniPaymentMethodOptionsUnionInput
	klarna: StripeStringOrPostPaymentIntentsKlarnaPaymentMethodOptionsUnionInput
	ideal: StripeStringOrPostPaymentIntentsIdealPaymentMethodOptionsUnionInput
	grabpay: StripeStringOrPostPaymentIntentsGrabpayPaymentMethodOptionsUnionInput
	giropay: StripeStringOrPostPaymentIntentsGiropayPaymentMethodOptionsUnionInput
	fpx: StripeStringOrPostPaymentIntentsFpxPaymentMethodOptionsUnionInput
	eps: StripeStringOrPostPaymentIntentsEpsPaymentMethodOptionsUnionInput
	customerBalance: StripeStringOrPostPaymentIntentsCustomerBalancePaymentMethodOptionsUnionInput
	cardPresent: StripeStringOrPostPaymentIntentsCardPresentPaymentMethodOptionsUnionInput
	card: StripeStringOrPostPaymentIntentsCardPaymentMethodOptionsUnionInput
	boleto: StripeStringOrPostPaymentIntentsBoletoPaymentMethodOptionsUnionInput
	blik: StripeStringOrPostPaymentIntentsBlikPaymentMethodOptionsUnionInput
	bancontact: StripeStringOrPostPaymentIntentsBancontactPaymentMethodOptionsUnionInput
	bacsDebit: StripeStringOrPostPaymentIntentsBacsDebitPaymentMethodOptionsUnionInput
	auBecsDebit: StripeStringOrPostPaymentIntentsAuBecsDebitPaymentMethodOptionsUnionInput
	alipay: StripeStringOrPostPaymentIntentsAlipayPaymentMethodOptionsUnionInput
	afterpayClearpay: StripeStringOrPostPaymentIntentsAfterpayClearpayPaymentMethodOptionsUnionInput
	affirm: StripeStringOrPostPaymentIntentsAffirmPaymentMethodOptionsUnionInput
	acssDebit: StripeStringOrPostPaymentIntentsAcssDebitPaymentMethodOptionsUnionInput
}
enum StripePostPaymentIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
input StripePostPaymentIntentsPaynowPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsagePaynowPaymentMethodOptions
}
enum StripePostPaymentIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostPaymentIntentsPixPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsagePixPaymentMethodOptions
	expiresAt: Int
	expiresAfterSeconds: Int
}
input StripePostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput {
	type: StripePostPaymentIntentsTypePlanInstallmentsCardPaymentMethodOptions!
	interval: StripePostPaymentIntentsIntervalPlanInstallmentsCardPaymentMethodOptions!
	count: Int!
}
enum StripePostPaymentIntentsPreferredLanguageBancontactPaymentMethodOptions {
	DE
	EN
	FR
	NL
}
enum StripePostPaymentIntentsPreferredLocaleKlarnaPaymentMethodOptions {
	CS_CZ
	DA_DK
	DE_AT
	DE_CH
	DE_DE
	EL_GR
	EN_AT
	EN_AU
	EN_BE
	EN_CA
	EN_CH
	EN_CZ
	EN_DE
	EN_DK
	EN_ES
	EN_FI
	EN_FR
	EN_GB
	EN_GR
	EN_IE
	EN_IT
	EN_NL
	EN_NO
	EN_NZ
	EN_PL
	EN_PT
	EN_SE
	EN_US
	ES_ES
	ES_US
	FI_FI
	FR_BE
	FR_CA
	FR_CH
	FR_FR
	IT_CH
	IT_IT
	NB_NO
	NL_BE
	NL_NL
	PL_PL
	PT_PT
	SV_FI
	SV_SE
}
input StripePostPaymentIntentsPromptpayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsagePromptpayPaymentMethodOptions
}
input StripePostPaymentIntentsRadarOptionsInput {
	session: String
}
input StripePostPaymentIntentsRadarOptionsPaymentMethodDataInput {
	session: String
}
enum StripePostPaymentIntentsRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum StripePostPaymentIntentsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
	IBAN
	SEPA
	SORT_CODE
	SPEI
	ZENGIN
}
enum StripePostPaymentIntentsRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostPaymentIntentsSepaDebitPaymentMethodDataInput {
	iban: String!
}
input StripePostPaymentIntentsSepaDebitPaymentMethodOptionsInput {
	setupFutureUsage: String
	mandateOptions: JSON
}
enum StripePostPaymentIntentsSetupFutureUsage {
	OFF_SESSION
	ON_SESSION
}
enum StripePostPaymentIntentsSetupFutureUsageAffirmPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageCustomerBalancePaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageEpsPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageFpxPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageGiropayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageGrabpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageKlarnaPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageKonbiniPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageOxxoPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageP24PaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsagePaynowPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsagePixPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsagePromptpayPaymentMethodOptions {
	NONE
}
enum StripePostPaymentIntentsSetupFutureUsageWechatPayPaymentMethodOptions {
	NONE
}
input StripePostPaymentIntentsShippingInput {
	trackingNumber: String
	phone: String
	name: String!
	carrier: String
	address: StripePostPaymentIntentsAddressShippingInput!
}
input StripePostPaymentIntentsSofortPaymentMethodDataInput {
	country: StripePostPaymentIntentsCountrySofortPaymentMethodData!
}
input StripePostPaymentIntentsSofortPaymentMethodOptionsInput {
	setupFutureUsage: String
	preferredLanguage: String
}
enum StripePostPaymentIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum StripePostPaymentIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
input StripePostPaymentIntentsTransferDataInput {
	destination: String!
	amount: Int
}
enum StripePostPaymentIntentsTypeBankTransferCustomerBalancePaymentMethodOptions {
	EU_BANK_TRANSFER
	GB_BANK_TRANSFER
	JP_BANK_TRANSFER
	MX_BANK_TRANSFER
}
enum StripePostPaymentIntentsTypeCustomerAcceptanceMandateData {
	OFFLINE
	ONLINE
}
enum StripePostPaymentIntentsTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum StripePostPaymentIntentsTypePlanInstallmentsCardPaymentMethodOptions {
	FIXED_COUNT
}
input StripePostPaymentIntentsUsBankAccountPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostPaymentIntentsAccountTypeUsBankAccountPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostPaymentIntentsAccountHolderTypeUsBankAccountPaymentMethodData
}
input StripePostPaymentIntentsUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostPaymentIntentsVerificationMethodUsBankAccountPaymentMethodOptions
	setupFutureUsage: String
	networks: StripePostPaymentIntentsNetworksUsBankAccountPaymentMethodOptionsInput
	financialConnections: StripePostPaymentIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostPaymentIntentsVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostPaymentIntentsVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostPaymentIntentsWechatPayPaymentMethodOptionsInput {
	setupFutureUsage: StripePostPaymentIntentsSetupFutureUsageWechatPayPaymentMethodOptions
	client: StripePostPaymentIntentsClientWechatPayPaymentMethodOptions!
	appId: String
}
input StripePostPaymentLinksAdjustableQuantityLineItemsInput {
	minimum: Int
	maximum: Int
	enabled: Boolean!
}
input StripePostPaymentLinksAfterCompletionInput {
	type: StripePostPaymentLinksTypeAfterCompletion!
	redirect: StripePostPaymentLinksRedirectAfterCompletionInput
	hostedConfirmation: StripePostPaymentLinksHostedConfirmationAfterCompletionInput
}
enum StripePostPaymentLinksAllowedCountriesShippingAddressCollection {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
input StripePostPaymentLinksAutomaticTaxInput {
	enabled: Boolean!
}
enum StripePostPaymentLinksBillingAddressCollection {
	AUTO
	REQUIRED
}
enum StripePostPaymentLinksCaptureMethodPaymentIntentData {
	AUTOMATIC
	MANUAL
}
input StripePostPaymentLinksConsentCollectionInput {
	termsOfService: StripePostPaymentLinksTermsOfServiceConsentCollection
	promotions: StripePostPaymentLinksPromotionsConsentCollection
}
input StripePostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput {
	value: String!
	name: String!
}
input StripePostPaymentLinksCustomTextInput {
	submit: StripeStringOrPostPaymentLinksSubmitCustomTextUnionInput
	shippingAddress: StripeStringOrPostPaymentLinksShippingAddressCustomTextUnionInput
}
enum StripePostPaymentLinksCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
input StripePostPaymentLinksHostedConfirmationAfterCompletionInput {
	customMessage: String
}
input StripePostPaymentLinksInput {
	transferData: StripePostPaymentLinksTransferDataInput
	taxIdCollection: StripePostPaymentLinksTaxIdCollectionInput
	subscriptionData: StripePostPaymentLinksSubscriptionDataInput
	submitType: StripePostPaymentLinksSubmitType
	shippingOptions: [StripePostPaymentLinksShippingOptionsInput!]
	shippingAddressCollection: StripePostPaymentLinksShippingAddressCollectionInput
	phoneNumberCollection: StripePostPaymentLinksPhoneNumberCollectionInput
	paymentMethodTypes: [StripePostPaymentLinksPaymentMethodTypes!]
	paymentMethodCollection: StripePostPaymentLinksPaymentMethodCollection
	paymentIntentData: StripePostPaymentLinksPaymentIntentDataInput
	onBehalfOf: String
	metadata: JSON
	lineItems: [StripePostPaymentLinksLineItemsInput!]!
	invoiceCreation: StripePostPaymentLinksInvoiceCreationInput
	expand: [String!]
	customerCreation: StripePostPaymentLinksCustomerCreation
	customText: StripePostPaymentLinksCustomTextInput
	currency: String
	consentCollection: StripePostPaymentLinksConsentCollectionInput
	billingAddressCollection: StripePostPaymentLinksBillingAddressCollection
	automaticTax: StripePostPaymentLinksAutomaticTaxInput
	applicationFeePercent: Float
	applicationFeeAmount: Int
	allowPromotionCodes: Boolean
	afterCompletion: StripePostPaymentLinksAfterCompletionInput
}
input StripePostPaymentLinksInvoiceCreationInput {
	invoiceData: StripePostPaymentLinksInvoiceDataInvoiceCreationInput
	enabled: Boolean!
}
input StripePostPaymentLinksInvoiceDataInvoiceCreationInput {
	metadata: JSON
	accountTaxIds: JSON
	renderingOptions: StripeStringOrPostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationUnionInput
	footer: String
	description: String
	customFields: StripeStringOrPostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationUnionInput
}
input StripePostPaymentLinksLineItemsInput {
	quantity: Int!
	price: String!
	adjustableQuantity: StripePostPaymentLinksAdjustableQuantityLineItemsInput
}
input StripePostPaymentLinksPaymentIntentDataInput {
	setupFutureUsage: StripePostPaymentLinksSetupFutureUsagePaymentIntentData
	captureMethod: StripePostPaymentLinksCaptureMethodPaymentIntentData
}
input StripePostPaymentLinksPaymentLinkAdjustableQuantityLineItemsInput {
	minimum: Int
	maximum: Int
	enabled: Boolean!
}
input StripePostPaymentLinksPaymentLinkAfterCompletionInput {
	type: StripePostPaymentLinksPaymentLinkTypeAfterCompletion!
	redirect: StripePostPaymentLinksPaymentLinkRedirectAfterCompletionInput
	hostedConfirmation: StripePostPaymentLinksPaymentLinkHostedConfirmationAfterCompletionInput
}
enum StripePostPaymentLinksPaymentLinkAllowedCountriesShippingAddressCollection {
	AC
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AO
	AQ
	AR
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CV
	CW
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MK
	ML
	MM
	MN
	MO
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PY
	QA
	RE
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SZ
	TA
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VN
	VU
	WF
	WS
	XK
	YE
	YT
	ZA
	ZM
	ZW
	ZZ
}
input StripePostPaymentLinksPaymentLinkAutomaticTaxInput {
	enabled: Boolean!
}
enum StripePostPaymentLinksPaymentLinkBillingAddressCollection {
	AUTO
	REQUIRED
}
input StripePostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput {
	value: String!
	name: String!
}
input StripePostPaymentLinksPaymentLinkCustomTextInput {
	submit: StripeStringOrPostPaymentLinksPaymentLinkSubmitCustomTextUnionInput
	shippingAddress: StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCustomTextUnionInput
}
enum StripePostPaymentLinksPaymentLinkCustomerCreation {
	ALWAYS
	IF_REQUIRED
}
input StripePostPaymentLinksPaymentLinkHostedConfirmationAfterCompletionInput {
	customMessage: String
}
input StripePostPaymentLinksPaymentLinkInput {
	paymentMethodTypes: JSON
	shippingAddressCollection: StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCollectionUnionInput
	paymentMethodCollection: StripePostPaymentLinksPaymentLinkPaymentMethodCollection
	metadata: JSON
	lineItems: [StripePostPaymentLinksPaymentLinkLineItemsInput!]
	invoiceCreation: StripePostPaymentLinksPaymentLinkInvoiceCreationInput
	expand: [String!]
	customerCreation: StripePostPaymentLinksPaymentLinkCustomerCreation
	customText: StripePostPaymentLinksPaymentLinkCustomTextInput
	billingAddressCollection: StripePostPaymentLinksPaymentLinkBillingAddressCollection
	automaticTax: StripePostPaymentLinksPaymentLinkAutomaticTaxInput
	allowPromotionCodes: Boolean
	afterCompletion: StripePostPaymentLinksPaymentLinkAfterCompletionInput
	active: Boolean
}
input StripePostPaymentLinksPaymentLinkInvoiceCreationInput {
	invoiceData: StripePostPaymentLinksPaymentLinkInvoiceDataInvoiceCreationInput
	enabled: Boolean!
}
input StripePostPaymentLinksPaymentLinkInvoiceDataInvoiceCreationInput {
	metadata: JSON
	accountTaxIds: JSON
	renderingOptions: StripeStringOrPostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationUnionInput
	footer: String
	description: String
	customFields: StripeStringOrPostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationUnionInput
}
input StripePostPaymentLinksPaymentLinkLineItemsInput {
	quantity: Int
	id: String!
	adjustableQuantity: StripePostPaymentLinksPaymentLinkAdjustableQuantityLineItemsInput
}
enum StripePostPaymentLinksPaymentLinkPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
input StripePostPaymentLinksPaymentLinkRedirectAfterCompletionInput {
	url: String!
}
input StripePostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput {
	amountTaxDisplay: String
}
input StripePostPaymentLinksPaymentLinkShippingAddressCollectionInput {
	allowedCountries: [StripePostPaymentLinksPaymentLinkAllowedCountriesShippingAddressCollection!]!
}
input StripePostPaymentLinksPaymentLinkShippingAddressCustomTextInput {
	message: String!
}
input StripePostPaymentLinksPaymentLinkSubmitCustomTextInput {
	message: String!
}
enum StripePostPaymentLinksPaymentLinkTypeAfterCompletion {
	HOSTED_CONFIRMATION
	REDIRECT
}
enum StripePostPaymentLinksPaymentMethodCollection {
	ALWAYS
	IF_REQUIRED
}
enum StripePostPaymentLinksPaymentMethodTypes {
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input StripePostPaymentLinksPhoneNumberCollectionInput {
	enabled: Boolean!
}
enum StripePostPaymentLinksPromotionsConsentCollection {
	AUTO
	NONE
}
input StripePostPaymentLinksRedirectAfterCompletionInput {
	url: String!
}
input StripePostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput {
	amountTaxDisplay: String
}
enum StripePostPaymentLinksSetupFutureUsagePaymentIntentData {
	OFF_SESSION
	ON_SESSION
}
input StripePostPaymentLinksShippingAddressCollectionInput {
	allowedCountries: [StripePostPaymentLinksAllowedCountriesShippingAddressCollection!]!
}
input StripePostPaymentLinksShippingAddressCustomTextInput {
	message: String!
}
input StripePostPaymentLinksShippingOptionsInput {
	shippingRate: String
}
input StripePostPaymentLinksSubmitCustomTextInput {
	message: String!
}
enum StripePostPaymentLinksSubmitType {
	AUTO
	BOOK
	DONATE
	PAY
}
input StripePostPaymentLinksSubscriptionDataInput {
	trialPeriodDays: Int
	description: String
}
input StripePostPaymentLinksTaxIdCollectionInput {
	enabled: Boolean!
}
enum StripePostPaymentLinksTermsOfServiceConsentCollection {
	NONE
	REQUIRED
}
input StripePostPaymentLinksTransferDataInput {
	destination: String!
	amount: Int
}
enum StripePostPaymentLinksTypeAfterCompletion {
	HOSTED_CONFIRMATION
	REDIRECT
}
enum StripePostPaymentMethodsAccountHolderTypeUsBankAccount {
	COMPANY
	INDIVIDUAL
}
enum StripePostPaymentMethodsAccountTypeUsBankAccount {
	CHECKING
	SAVINGS
}
input StripePostPaymentMethodsAcssDebitInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostPaymentMethodsAddressBillingDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentMethodsAuBecsDebitInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostPaymentMethodsBacsDebitInput {
	sortCode: String
	accountNumber: String
}
enum StripePostPaymentMethodsBankEps {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostPaymentMethodsBankFpx {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostPaymentMethodsBankIdeal {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostPaymentMethodsBankP24 {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostPaymentMethodsBillingDetailsInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostPaymentMethodsAddressBillingDetailsUnionInput
}
input StripePostPaymentMethodsBoletoInput {
	taxId: String!
}
input StripePostPaymentMethodsCardInput {
	token: String!
}
input StripePostPaymentMethodsCardOrPostPaymentMethodsCardUnionInput {
	stripePostPaymentMethodsCardInput: StripePostPaymentMethodsCardInput
}
enum StripePostPaymentMethodsCountrySofort {
	AT
	BE
	DE
	ES
	IT
	NL
}
input StripePostPaymentMethodsDobKlarnaInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostPaymentMethodsEpsInput {
	bank: StripePostPaymentMethodsBankEps
}
input StripePostPaymentMethodsFpxInput {
	bank: StripePostPaymentMethodsBankFpx!
}
input StripePostPaymentMethodsIdealInput {
	bank: StripePostPaymentMethodsBankIdeal
}
input StripePostPaymentMethodsInput {
	wechatPay: JSON
	usBankAccount: StripePostPaymentMethodsUsBankAccountInput
	type: StripePostPaymentMethodsType
	sofort: StripePostPaymentMethodsSofortInput
	sepaDebit: StripePostPaymentMethodsSepaDebitInput
	radarOptions: StripePostPaymentMethodsRadarOptionsInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	paymentMethod: String
	p24: StripePostPaymentMethodsP24Input
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostPaymentMethodsKlarnaInput
	interacPresent: JSON
	ideal: StripePostPaymentMethodsIdealInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostPaymentMethodsFpxInput
	expand: [String!]
	eps: StripePostPaymentMethodsEpsInput
	customerBalance: JSON
	customer: String
	card: StripePostPaymentMethodsCardOrPostPaymentMethodsCardUnionInput
	boleto: StripePostPaymentMethodsBoletoInput
	blik: JSON
	billingDetails: StripePostPaymentMethodsBillingDetailsInput
	bancontact: JSON
	bacsDebit: StripePostPaymentMethodsBacsDebitInput
	auBecsDebit: StripePostPaymentMethodsAuBecsDebitInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostPaymentMethodsAcssDebitInput
}
input StripePostPaymentMethodsKlarnaInput {
	dob: StripePostPaymentMethodsDobKlarnaInput
}
input StripePostPaymentMethodsP24Input {
	bank: StripePostPaymentMethodsBankP24
}
enum StripePostPaymentMethodsPaymentMethodAccountHolderTypeUsBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostPaymentMethodsPaymentMethodAddressBillingDetailsInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostPaymentMethodsPaymentMethodAttachInput {
	expand: [String!]
	customer: String!
}
input StripePostPaymentMethodsPaymentMethodBillingDetailsInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostPaymentMethodsPaymentMethodAddressBillingDetailsUnionInput
}
input StripePostPaymentMethodsPaymentMethodCardInput {
	expYear: Int
	expMonth: Int
}
input StripePostPaymentMethodsPaymentMethodDetachInput {
	expand: [String!]
}
input StripePostPaymentMethodsPaymentMethodInput {
	metadata: JSON
	usBankAccount: StripePostPaymentMethodsPaymentMethodUsBankAccountInput
	link: JSON
	expand: [String!]
	card: StripePostPaymentMethodsPaymentMethodCardInput
	billingDetails: StripePostPaymentMethodsPaymentMethodBillingDetailsInput
}
input StripePostPaymentMethodsPaymentMethodUsBankAccountInput {
	accountHolderType: StripePostPaymentMethodsPaymentMethodAccountHolderTypeUsBankAccount
}
input StripePostPaymentMethodsRadarOptionsInput {
	session: String
}
input StripePostPaymentMethodsSepaDebitInput {
	iban: String!
}
input StripePostPaymentMethodsSofortInput {
	country: StripePostPaymentMethodsCountrySofort!
}
enum StripePostPaymentMethodsType {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CARD
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input StripePostPaymentMethodsUsBankAccountInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostPaymentMethodsAccountTypeUsBankAccount
	accountNumber: String
	accountHolderType: StripePostPaymentMethodsAccountHolderTypeUsBankAccount
}
input StripePostPayoutsInput {
	statementDescriptor: String
	sourceType: StripePostPayoutsSourceType
	method: StripePostPayoutsMethod
	metadata: JSON
	expand: [String!]
	destination: String
	description: String
	currency: String!
	amount: Int!
}
enum StripePostPayoutsMethod {
	INSTANT
	STANDARD
}
input StripePostPayoutsPayoutCancelInput {
	expand: [String!]
}
input StripePostPayoutsPayoutInput {
	metadata: JSON
	expand: [String!]
}
input StripePostPayoutsPayoutReverseInput {
	metadata: JSON
	expand: [String!]
}
enum StripePostPayoutsSourceType {
	BANK_ACCOUNT
	CARD
	FPX
}
enum StripePostPlansAggregateUsage {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum StripePostPlansBillingScheme {
	PER_UNIT
	TIERED
}
input StripePostPlansInput {
	metadata: JSON
	usageType: StripePostPlansUsageType
	trialPeriodDays: Int
	transformUsage: StripePostPlansTransformUsageInput
	tiersMode: StripePostPlansTiersMode
	tiers: [StripePostPlansTiersInput!]
	product: StripeStringOrPostPlansProductUnionInput
	nickname: String
	intervalCount: Int
	interval: StripePostPlansInterval!
	id: String
	expand: [String!]
	currency: String!
	billingScheme: StripePostPlansBillingScheme
	amountDecimal: String
	amount: Int
	aggregateUsage: StripePostPlansAggregateUsage
	active: Boolean
}
enum StripePostPlansInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostPlansPlanInput {
	metadata: JSON
	trialPeriodDays: Int
	product: String
	nickname: String
	expand: [String!]
	active: Boolean
}
input StripePostPlansProductInput {
	unitLabel: String
	taxCode: String
	statementDescriptor: String
	name: String!
	metadata: JSON
	id: String
	active: Boolean
}
enum StripePostPlansRoundTransformUsage {
	DOWN
	UP
}
input StripePostPlansTiersInput {
	upTo: JSON!
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum StripePostPlansTiersMode {
	GRADUATED
	VOLUME
}
input StripePostPlansTransformUsageInput {
	round: StripePostPlansRoundTransformUsage!
	divideBy: Int!
}
enum StripePostPlansUsageType {
	LICENSED
	METERED
}
enum StripePostPricesAggregateUsageRecurring {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum StripePostPricesBillingScheme {
	PER_UNIT
	TIERED
}
input StripePostPricesCustomUnitAmountInput {
	preset: Int
	minimum: Int
	maximum: Int
	enabled: Boolean!
}
input StripePostPricesInput {
	unitAmountDecimal: String
	unitAmount: Int
	transformQuantity: StripePostPricesTransformQuantityInput
	transferLookupKey: Boolean
	tiersMode: StripePostPricesTiersMode
	tiers: [StripePostPricesTiersInput!]
	taxBehavior: StripePostPricesTaxBehavior
	recurring: StripePostPricesRecurringInput
	productData: StripePostPricesProductDataInput
	product: String
	nickname: String
	metadata: JSON
	lookupKey: String
	expand: [String!]
	customUnitAmount: StripePostPricesCustomUnitAmountInput
	currencyOptions: JSON
	currency: String!
	billingScheme: StripePostPricesBillingScheme
	active: Boolean
}
enum StripePostPricesIntervalRecurring {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostPricesPriceInput {
	metadata: JSON
	currencyOptions: JSON
	transferLookupKey: Boolean
	taxBehavior: StripePostPricesPriceTaxBehavior
	nickname: String
	lookupKey: String
	expand: [String!]
	active: Boolean
}
enum StripePostPricesPriceTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostPricesProductDataInput {
	unitLabel: String
	taxCode: String
	statementDescriptor: String
	name: String!
	metadata: JSON
	id: String
	active: Boolean
}
input StripePostPricesRecurringInput {
	usageType: StripePostPricesUsageTypeRecurring
	intervalCount: Int
	interval: StripePostPricesIntervalRecurring!
	aggregateUsage: StripePostPricesAggregateUsageRecurring
}
enum StripePostPricesRoundTransformQuantity {
	DOWN
	UP
}
enum StripePostPricesTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostPricesTiersInput {
	upTo: JSON!
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum StripePostPricesTiersMode {
	GRADUATED
	VOLUME
}
input StripePostPricesTransformQuantityInput {
	round: StripePostPricesRoundTransformQuantity!
	divideBy: Int!
}
enum StripePostPricesUsageTypeRecurring {
	LICENSED
	METERED
}
input StripePostProductsDefaultPriceDataInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostProductsTaxBehaviorDefaultPriceData
	recurring: StripePostProductsRecurringDefaultPriceDataInput
	currencyOptions: JSON
	currency: String!
}
input StripePostProductsIdInput {
	url: JSON
	taxCode: JSON
	metadata: JSON
	images: JSON
	unitLabel: String
	statementDescriptor: String
	shippable: Boolean
	packageDimensions: StripeStringOrPostProductsIdPackageDimensionsUnionInput
	name: String
	expand: [String!]
	description: String
	defaultPrice: String
	active: Boolean
}
input StripePostProductsIdPackageDimensionsInput {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
input StripePostProductsInput {
	url: String
	unitLabel: String
	taxCode: String
	statementDescriptor: String
	shippable: Boolean
	packageDimensions: StripePostProductsPackageDimensionsInput
	name: String!
	metadata: JSON
	images: [String!]
	id: String
	expand: [String!]
	description: String
	defaultPriceData: StripePostProductsDefaultPriceDataInput
	active: Boolean
}
enum StripePostProductsIntervalRecurringDefaultPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostProductsPackageDimensionsInput {
	width: Float!
	weight: Float!
	length: Float!
	height: Float!
}
input StripePostProductsRecurringDefaultPriceDataInput {
	intervalCount: Int
	interval: StripePostProductsIntervalRecurringDefaultPriceData!
}
enum StripePostProductsTaxBehaviorDefaultPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostPromotionCodesInput {
	restrictions: StripePostPromotionCodesRestrictionsInput
	metadata: JSON
	maxRedemptions: Int
	expiresAt: Int
	expand: [String!]
	customer: String
	coupon: String!
	code: String
	active: Boolean
}
input StripePostPromotionCodesPromotionCodeInput {
	metadata: JSON
	restrictions: StripePostPromotionCodesPromotionCodeRestrictionsInput
	expand: [String!]
	active: Boolean
}
input StripePostPromotionCodesPromotionCodeRestrictionsInput {
	currencyOptions: JSON
}
input StripePostPromotionCodesRestrictionsInput {
	minimumAmountCurrency: String
	minimumAmount: Int
	firstTimeTransaction: Boolean
	currencyOptions: JSON
}
input StripePostQuotesAutomaticTaxInput {
	enabled: Boolean!
}
enum StripePostQuotesCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostQuotesDiscountsInput {
	discount: String
	coupon: String
}
input StripePostQuotesFromQuoteInput {
	quote: String!
	isRevision: Boolean
}
input StripePostQuotesInput {
	onBehalfOf: JSON
	defaultTaxRates: JSON
	applicationFeePercent: JSON
	applicationFeeAmount: JSON
	transferData: StripeStringOrPostQuotesTransferDataUnionInput
	testClock: String
	subscriptionData: StripePostQuotesSubscriptionDataInput
	metadata: JSON
	lineItems: [StripePostQuotesLineItemsInput!]
	invoiceSettings: StripePostQuotesInvoiceSettingsInput
	header: String
	fromQuote: StripePostQuotesFromQuoteInput
	footer: String
	expiresAt: Int
	expand: [String!]
	discounts: StripeStringOrPostQuotesDiscountsUnionInput
	description: String
	customer: String
	collectionMethod: StripePostQuotesCollectionMethod
	automaticTax: StripePostQuotesAutomaticTaxInput
}
enum StripePostQuotesIntervalRecurringPriceDataLineItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostQuotesInvoiceSettingsInput {
	daysUntilDue: Int
}
input StripePostQuotesLineItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostQuotesPriceDataLineItemsInput
	price: String
}
input StripePostQuotesPriceDataLineItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostQuotesTaxBehaviorPriceDataLineItems
	recurring: StripePostQuotesRecurringPriceDataLineItemsInput
	product: String!
	currency: String!
}
input StripePostQuotesQuoteAcceptInput {
	expand: [String!]
}
input StripePostQuotesQuoteAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostQuotesQuoteCancelInput {
	expand: [String!]
}
enum StripePostQuotesQuoteCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostQuotesQuoteDiscountsInput {
	discount: String
	coupon: String
}
input StripePostQuotesQuoteFinalizeInput {
	expiresAt: Int
	expand: [String!]
}
input StripePostQuotesQuoteInput {
	onBehalfOf: JSON
	defaultTaxRates: JSON
	applicationFeePercent: JSON
	applicationFeeAmount: JSON
	transferData: StripeStringOrPostQuotesQuoteTransferDataUnionInput
	subscriptionData: StripePostQuotesQuoteSubscriptionDataInput
	metadata: JSON
	lineItems: [StripePostQuotesQuoteLineItemsInput!]
	invoiceSettings: StripePostQuotesQuoteInvoiceSettingsInput
	header: String
	footer: String
	expiresAt: Int
	expand: [String!]
	discounts: StripeStringOrPostQuotesQuoteDiscountsUnionInput
	description: String
	customer: String
	collectionMethod: StripePostQuotesQuoteCollectionMethod
	automaticTax: StripePostQuotesQuoteAutomaticTaxInput
}
enum StripePostQuotesQuoteIntervalRecurringPriceDataLineItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostQuotesQuoteInvoiceSettingsInput {
	daysUntilDue: Int
}
input StripePostQuotesQuoteLineItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostQuotesQuotePriceDataLineItemsInput
	price: String
	id: String
}
input StripePostQuotesQuotePriceDataLineItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostQuotesQuoteTaxBehaviorPriceDataLineItems
	recurring: StripePostQuotesQuoteRecurringPriceDataLineItemsInput
	product: String!
	currency: String!
}
input StripePostQuotesQuoteRecurringPriceDataLineItemsInput {
	intervalCount: Int
	interval: StripePostQuotesQuoteIntervalRecurringPriceDataLineItems!
}
input StripePostQuotesQuoteSubscriptionDataInput {
	trialPeriodDays: JSON
	effectiveDate: JSON
	description: String
}
enum StripePostQuotesQuoteTaxBehaviorPriceDataLineItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostQuotesQuoteTransferDataInput {
	destination: String!
	amountPercent: Float
	amount: Int
}
input StripePostQuotesRecurringPriceDataLineItemsInput {
	intervalCount: Int
	interval: StripePostQuotesIntervalRecurringPriceDataLineItems!
}
input StripePostQuotesSubscriptionDataInput {
	trialPeriodDays: JSON
	effectiveDate: JSON
	description: String
}
enum StripePostQuotesTaxBehaviorPriceDataLineItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostQuotesTransferDataInput {
	destination: String!
	amountPercent: Float
	amount: Int
}
input StripePostRadarValueListItemsInput {
	valueList: String!
	value: String!
	expand: [String!]
}
input StripePostRadarValueListsInput {
	name: String!
	metadata: JSON
	itemType: StripePostRadarValueListsItemType
	expand: [String!]
	alias: String!
}
enum StripePostRadarValueListsItemType {
	CARD_BIN
	CARD_FINGERPRINT
	CASE_SENSITIVE_STRING
	COUNTRY
	CUSTOMER_ID
	EMAIL
	IP_ADDRESS
	STRING
}
input StripePostRadarValueListsValueListInput {
	name: String
	metadata: JSON
	expand: [String!]
	alias: String
}
input StripePostRefundsInput {
	metadata: JSON
	reverseTransfer: Boolean
	refundApplicationFee: Boolean
	reason: StripePostRefundsReason
	paymentIntent: String
	origin: StripePostRefundsOrigin
	instructionsEmail: String
	expand: [String!]
	customer: String
	currency: String
	charge: String
	amount: Int
}
enum StripePostRefundsOrigin {
	CUSTOMER_BALANCE
}
enum StripePostRefundsReason {
	DUPLICATE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
input StripePostRefundsRefundCancelInput {
	expand: [String!]
}
input StripePostRefundsRefundInput {
	metadata: JSON
	expand: [String!]
}
input StripePostReportingReportRunsInput {
	reportType: String!
	parameters: StripePostReportingReportRunsParametersInput
	expand: [String!]
}
input StripePostReportingReportRunsParametersInput {
	timezone: StripePostReportingReportRunsTimezoneParameters
	reportingCategory: StripePostReportingReportRunsReportingCategoryParameters
	payout: String
	intervalStart: Int
	intervalEnd: Int
	currency: String
	connectedAccount: String
	columns: [String!]
}
enum StripePostReportingReportRunsReportingCategoryParameters {
	ADVANCE
	ADVANCE_FUNDING
	ANTICIPATION_REPAYMENT
	CHARGE
	CHARGE_FAILURE
	CONNECT_COLLECTION_TRANSFER
	CONNECT_RESERVED_FUNDS
	CONTRIBUTION
	DISPUTE
	DISPUTE_REVERSAL
	FEE
	FINANCING_PAYDOWN
	FINANCING_PAYDOWN_REVERSAL
	FINANCING_PAYOUT
	FINANCING_PAYOUT_REVERSAL
	ISSUING_AUTHORIZATION_HOLD
	ISSUING_AUTHORIZATION_RELEASE
	ISSUING_DISPUTE
	ISSUING_TRANSACTION
	NETWORK_COST
	OTHER_ADJUSTMENT
	PARTIAL_CAPTURE_REVERSAL
	PAYOUT
	PAYOUT_REVERSAL
	PLATFORM_EARNING
	PLATFORM_EARNING_REFUND
	REFUND
	REFUND_FAILURE
	RISK_RESERVED_FUNDS
	TAX
	TOPUP
	TOPUP_REVERSAL
	TRANSFER
	TRANSFER_REVERSAL
}
enum StripePostReportingReportRunsTimezoneParameters {
	AFRICA_ABIDJAN
	AFRICA_ACCRA
	AFRICA_ADDIS_ABABA
	AFRICA_ALGIERS
	AFRICA_ASMARA
	AFRICA_ASMERA
	AFRICA_BAMAKO
	AFRICA_BANGUI
	AFRICA_BANJUL
	AFRICA_BISSAU
	AFRICA_BLANTYRE
	AFRICA_BRAZZAVILLE
	AFRICA_BUJUMBURA
	AFRICA_CAIRO
	AFRICA_CASABLANCA
	AFRICA_CEUTA
	AFRICA_CONAKRY
	AFRICA_DAKAR
	AFRICA_DAR_ES_SALAAM
	AFRICA_DJIBOUTI
	AFRICA_DOUALA
	AFRICA_EL_AAIUN
	AFRICA_FREETOWN
	AFRICA_GABORONE
	AFRICA_HARARE
	AFRICA_JOHANNESBURG
	AFRICA_JUBA
	AFRICA_KAMPALA
	AFRICA_KHARTOUM
	AFRICA_KIGALI
	AFRICA_KINSHASA
	AFRICA_LAGOS
	AFRICA_LIBREVILLE
	AFRICA_LOME
	AFRICA_LUANDA
	AFRICA_LUBUMBASHI
	AFRICA_LUSAKA
	AFRICA_MALABO
	AFRICA_MAPUTO
	AFRICA_MASERU
	AFRICA_MBABANE
	AFRICA_MOGADISHU
	AFRICA_MONROVIA
	AFRICA_NAIROBI
	AFRICA_NDJAMENA
	AFRICA_NIAMEY
	AFRICA_NOUAKCHOTT
	AFRICA_OUAGADOUGOU
	AFRICA_PORTO_NOVO
	AFRICA_SAO_TOME
	AFRICA_TIMBUKTU
	AFRICA_TRIPOLI
	AFRICA_TUNIS
	AFRICA_WINDHOEK
	AMERICA_ADAK
	AMERICA_ANCHORAGE
	AMERICA_ANGUILLA
	AMERICA_ANTIGUA
	AMERICA_ARAGUAINA
	AMERICA_ARGENTINA_BUENOS_AIRES
	AMERICA_ARGENTINA_CATAMARCA
	AMERICA_ARGENTINA_COMOD_RIVADAVIA
	AMERICA_ARGENTINA_CORDOBA
	AMERICA_ARGENTINA_JUJUY
	AMERICA_ARGENTINA_LA_RIOJA
	AMERICA_ARGENTINA_MENDOZA
	AMERICA_ARGENTINA_RIO_GALLEGOS
	AMERICA_ARGENTINA_SALTA
	AMERICA_ARGENTINA_SAN_JUAN
	AMERICA_ARGENTINA_SAN_LUIS
	AMERICA_ARGENTINA_TUCUMAN
	AMERICA_ARGENTINA_USHUAIA
	AMERICA_ARUBA
	AMERICA_ASUNCION
	AMERICA_ATIKOKAN
	AMERICA_ATKA
	AMERICA_BAHIA
	AMERICA_BAHIA_BANDERAS
	AMERICA_BARBADOS
	AMERICA_BELEM
	AMERICA_BELIZE
	AMERICA_BLANC_SABLON
	AMERICA_BOA_VISTA
	AMERICA_BOGOTA
	AMERICA_BOISE
	AMERICA_BUENOS_AIRES
	AMERICA_CAMBRIDGE_BAY
	AMERICA_CAMPO_GRANDE
	AMERICA_CANCUN
	AMERICA_CARACAS
	AMERICA_CATAMARCA
	AMERICA_CAYENNE
	AMERICA_CAYMAN
	AMERICA_CHICAGO
	AMERICA_CHIHUAHUA
	AMERICA_CIUDAD_JUAREZ
	AMERICA_CORAL_HARBOUR
	AMERICA_CORDOBA
	AMERICA_COSTA_RICA
	AMERICA_CRESTON
	AMERICA_CUIABA
	AMERICA_CURACAO
	AMERICA_DANMARKSHAVN
	AMERICA_DAWSON
	AMERICA_DAWSON_CREEK
	AMERICA_DENVER
	AMERICA_DETROIT
	AMERICA_DOMINICA
	AMERICA_EDMONTON
	AMERICA_EIRUNEPE
	AMERICA_EL_SALVADOR
	AMERICA_ENSENADA
	AMERICA_FORT_NELSON
	AMERICA_FORT_WAYNE
	AMERICA_FORTALEZA
	AMERICA_GLACE_BAY
	AMERICA_GODTHAB
	AMERICA_GOOSE_BAY
	AMERICA_GRAND_TURK
	AMERICA_GRENADA
	AMERICA_GUADELOUPE
	AMERICA_GUATEMALA
	AMERICA_GUAYAQUIL
	AMERICA_GUYANA
	AMERICA_HALIFAX
	AMERICA_HAVANA
	AMERICA_HERMOSILLO
	AMERICA_INDIANA_INDIANAPOLIS
	AMERICA_INDIANA_KNOX
	AMERICA_INDIANA_MARENGO
	AMERICA_INDIANA_PETERSBURG
	AMERICA_INDIANA_TELL_CITY
	AMERICA_INDIANA_VEVAY
	AMERICA_INDIANA_VINCENNES
	AMERICA_INDIANA_WINAMAC
	AMERICA_INDIANAPOLIS
	AMERICA_INUVIK
	AMERICA_IQALUIT
	AMERICA_JAMAICA
	AMERICA_JUJUY
	AMERICA_JUNEAU
	AMERICA_KENTUCKY_LOUISVILLE
	AMERICA_KENTUCKY_MONTICELLO
	AMERICA_KNOX_IN
	AMERICA_KRALENDIJK
	AMERICA_LA_PAZ
	AMERICA_LIMA
	AMERICA_LOS_ANGELES
	AMERICA_LOUISVILLE
	AMERICA_LOWER_PRINCES
	AMERICA_MACEIO
	AMERICA_MANAGUA
	AMERICA_MANAUS
	AMERICA_MARIGOT
	AMERICA_MARTINIQUE
	AMERICA_MATAMOROS
	AMERICA_MAZATLAN
	AMERICA_MENDOZA
	AMERICA_MENOMINEE
	AMERICA_MERIDA
	AMERICA_METLAKATLA
	AMERICA_MEXICO_CITY
	AMERICA_MIQUELON
	AMERICA_MONCTON
	AMERICA_MONTERREY
	AMERICA_MONTEVIDEO
	AMERICA_MONTREAL
	AMERICA_MONTSERRAT
	AMERICA_NASSAU
	AMERICA_NEW_YORK
	AMERICA_NIPIGON
	AMERICA_NOME
	AMERICA_NORONHA
	AMERICA_NORTH_DAKOTA_BEULAH
	AMERICA_NORTH_DAKOTA_CENTER
	AMERICA_NORTH_DAKOTA_NEW_SALEM
	AMERICA_NUUK
	AMERICA_OJINAGA
	AMERICA_PANAMA
	AMERICA_PANGNIRTUNG
	AMERICA_PARAMARIBO
	AMERICA_PHOENIX
	AMERICA_PORT_AU_PRINCE
	AMERICA_PORT_OF_SPAIN
	AMERICA_PORTO_ACRE
	AMERICA_PORTO_VELHO
	AMERICA_PUERTO_RICO
	AMERICA_PUNTA_ARENAS
	AMERICA_RAINY_RIVER
	AMERICA_RANKIN_INLET
	AMERICA_RECIFE
	AMERICA_REGINA
	AMERICA_RESOLUTE
	AMERICA_RIO_BRANCO
	AMERICA_ROSARIO
	AMERICA_SANTA_ISABEL
	AMERICA_SANTAREM
	AMERICA_SANTIAGO
	AMERICA_SANTO_DOMINGO
	AMERICA_SAO_PAULO
	AMERICA_SCORESBYSUND
	AMERICA_SHIPROCK
	AMERICA_SITKA
	AMERICA_ST_BARTHELEMY
	AMERICA_ST_JOHNS
	AMERICA_ST_KITTS
	AMERICA_ST_LUCIA
	AMERICA_ST_THOMAS
	AMERICA_ST_VINCENT
	AMERICA_SWIFT_CURRENT
	AMERICA_TEGUCIGALPA
	AMERICA_THULE
	AMERICA_THUNDER_BAY
	AMERICA_TIJUANA
	AMERICA_TORONTO
	AMERICA_TORTOLA
	AMERICA_VANCOUVER
	AMERICA_VIRGIN
	AMERICA_WHITEHORSE
	AMERICA_WINNIPEG
	AMERICA_YAKUTAT
	AMERICA_YELLOWKNIFE
	ANTARCTICA_CASEY
	ANTARCTICA_DAVIS
	ANTARCTICA_DUMONT_D_URVILLE
	ANTARCTICA_MACQUARIE
	ANTARCTICA_MAWSON
	ANTARCTICA_MC_MURDO
	ANTARCTICA_PALMER
	ANTARCTICA_ROTHERA
	ANTARCTICA_SOUTH_POLE
	ANTARCTICA_SYOWA
	ANTARCTICA_TROLL
	ANTARCTICA_VOSTOK
	ARCTIC_LONGYEARBYEN
	ASIA_ADEN
	ASIA_ALMATY
	ASIA_AMMAN
	ASIA_ANADYR
	ASIA_AQTAU
	ASIA_AQTOBE
	ASIA_ASHGABAT
	ASIA_ASHKHABAD
	ASIA_ATYRAU
	ASIA_BAGHDAD
	ASIA_BAHRAIN
	ASIA_BAKU
	ASIA_BANGKOK
	ASIA_BARNAUL
	ASIA_BEIRUT
	ASIA_BISHKEK
	ASIA_BRUNEI
	ASIA_CALCUTTA
	ASIA_CHITA
	ASIA_CHOIBALSAN
	ASIA_CHONGQING
	ASIA_CHUNGKING
	ASIA_COLOMBO
	ASIA_DACCA
	ASIA_DAMASCUS
	ASIA_DHAKA
	ASIA_DILI
	ASIA_DUBAI
	ASIA_DUSHANBE
	ASIA_FAMAGUSTA
	ASIA_GAZA
	ASIA_HARBIN
	ASIA_HEBRON
	ASIA_HO_CHI_MINH
	ASIA_HONG_KONG
	ASIA_HOVD
	ASIA_IRKUTSK
	ASIA_ISTANBUL
	ASIA_JAKARTA
	ASIA_JAYAPURA
	ASIA_JERUSALEM
	ASIA_KABUL
	ASIA_KAMCHATKA
	ASIA_KARACHI
	ASIA_KASHGAR
	ASIA_KATHMANDU
	ASIA_KATMANDU
	ASIA_KHANDYGA
	ASIA_KOLKATA
	ASIA_KRASNOYARSK
	ASIA_KUALA_LUMPUR
	ASIA_KUCHING
	ASIA_KUWAIT
	ASIA_MACAO
	ASIA_MACAU
	ASIA_MAGADAN
	ASIA_MAKASSAR
	ASIA_MANILA
	ASIA_MUSCAT
	ASIA_NICOSIA
	ASIA_NOVOKUZNETSK
	ASIA_NOVOSIBIRSK
	ASIA_OMSK
	ASIA_ORAL
	ASIA_PHNOM_PENH
	ASIA_PONTIANAK
	ASIA_PYONGYANG
	ASIA_QATAR
	ASIA_QOSTANAY
	ASIA_QYZYLORDA
	ASIA_RANGOON
	ASIA_RIYADH
	ASIA_SAIGON
	ASIA_SAKHALIN
	ASIA_SAMARKAND
	ASIA_SEOUL
	ASIA_SHANGHAI
	ASIA_SINGAPORE
	ASIA_SREDNEKOLYMSK
	ASIA_TAIPEI
	ASIA_TASHKENT
	ASIA_TBILISI
	ASIA_TEHRAN
	ASIA_TEL_AVIV
	ASIA_THIMBU
	ASIA_THIMPHU
	ASIA_TOKYO
	ASIA_TOMSK
	ASIA_UJUNG_PANDANG
	ASIA_ULAANBAATAR
	ASIA_ULAN_BATOR
	ASIA_URUMQI
	ASIA_UST_NERA
	ASIA_VIENTIANE
	ASIA_VLADIVOSTOK
	ASIA_YAKUTSK
	ASIA_YANGON
	ASIA_YEKATERINBURG
	ASIA_YEREVAN
	ATLANTIC_AZORES
	ATLANTIC_BERMUDA
	ATLANTIC_CANARY
	ATLANTIC_CAPE_VERDE
	ATLANTIC_FAEROE
	ATLANTIC_FAROE
	ATLANTIC_JAN_MAYEN
	ATLANTIC_MADEIRA
	ATLANTIC_REYKJAVIK
	ATLANTIC_SOUTH_GEORGIA
	ATLANTIC_ST_HELENA
	ATLANTIC_STANLEY
	AUSTRALIA_ACT
	AUSTRALIA_ADELAIDE
	AUSTRALIA_BRISBANE
	AUSTRALIA_BROKEN_HILL
	AUSTRALIA_CANBERRA
	AUSTRALIA_CURRIE
	AUSTRALIA_DARWIN
	AUSTRALIA_EUCLA
	AUSTRALIA_HOBART
	AUSTRALIA_LHI
	AUSTRALIA_LINDEMAN
	AUSTRALIA_LORD_HOWE
	AUSTRALIA_MELBOURNE
	AUSTRALIA_NSW
	AUSTRALIA_NORTH
	AUSTRALIA_PERTH
	AUSTRALIA_QUEENSLAND
	AUSTRALIA_SOUTH
	AUSTRALIA_SYDNEY
	AUSTRALIA_TASMANIA
	AUSTRALIA_VICTORIA
	AUSTRALIA_WEST
	AUSTRALIA_YANCOWINNA
	BRAZIL_ACRE
	BRAZIL_DE_NORONHA
	BRAZIL_EAST
	BRAZIL_WEST
	CET
	CST6CDT
	CANADA_ATLANTIC
	CANADA_CENTRAL
	CANADA_EASTERN
	CANADA_MOUNTAIN
	CANADA_NEWFOUNDLAND
	CANADA_PACIFIC
	CANADA_SASKATCHEWAN
	CANADA_YUKON
	CHILE_CONTINENTAL
	CHILE_EASTER_ISLAND
	CUBA
	EET
	EST
	EST5EDT
	EGYPT
	EIRE
	ETC_GMT
	ETC_GMT_0
	ETC_GMT_1
	ETC_GMT_10
	ETC_GMT_11
	ETC_GMT_12
	ETC_GMT_2
	ETC_GMT_3
	ETC_GMT_4
	ETC_GMT_5
	ETC_GMT_6
	ETC_GMT_7
	ETC_GMT_8
	ETC_GMT_9
	ETC_GMT_13
	ETC_GMT_14
	ETC_GMT0
	ETC_GREENWICH
	ETC_UCT
	ETC_UTC
	ETC_UNIVERSAL
	ETC_ZULU
	EUROPE_AMSTERDAM
	EUROPE_ANDORRA
	EUROPE_ASTRAKHAN
	EUROPE_ATHENS
	EUROPE_BELFAST
	EUROPE_BELGRADE
	EUROPE_BERLIN
	EUROPE_BRATISLAVA
	EUROPE_BRUSSELS
	EUROPE_BUCHAREST
	EUROPE_BUDAPEST
	EUROPE_BUSINGEN
	EUROPE_CHISINAU
	EUROPE_COPENHAGEN
	EUROPE_DUBLIN
	EUROPE_GIBRALTAR
	EUROPE_GUERNSEY
	EUROPE_HELSINKI
	EUROPE_ISLE_OF_MAN
	EUROPE_ISTANBUL
	EUROPE_JERSEY
	EUROPE_KALININGRAD
	EUROPE_KIEV
	EUROPE_KIROV
	EUROPE_KYIV
	EUROPE_LISBON
	EUROPE_LJUBLJANA
	EUROPE_LONDON
	EUROPE_LUXEMBOURG
	EUROPE_MADRID
	EUROPE_MALTA
	EUROPE_MARIEHAMN
	EUROPE_MINSK
	EUROPE_MONACO
	EUROPE_MOSCOW
	EUROPE_NICOSIA
	EUROPE_OSLO
	EUROPE_PARIS
	EUROPE_PODGORICA
	EUROPE_PRAGUE
	EUROPE_RIGA
	EUROPE_ROME
	EUROPE_SAMARA
	EUROPE_SAN_MARINO
	EUROPE_SARAJEVO
	EUROPE_SARATOV
	EUROPE_SIMFEROPOL
	EUROPE_SKOPJE
	EUROPE_SOFIA
	EUROPE_STOCKHOLM
	EUROPE_TALLINN
	EUROPE_TIRANE
	EUROPE_TIRASPOL
	EUROPE_ULYANOVSK
	EUROPE_UZHGOROD
	EUROPE_VADUZ
	EUROPE_VATICAN
	EUROPE_VIENNA
	EUROPE_VILNIUS
	EUROPE_VOLGOGRAD
	EUROPE_WARSAW
	EUROPE_ZAGREB
	EUROPE_ZAPOROZHYE
	EUROPE_ZURICH
	FACTORY
	GB
	GB_EIRE
	GMT
	GMT_0
	GMT0
	GREENWICH
	HST
	HONGKONG
	ICELAND
	INDIAN_ANTANANARIVO
	INDIAN_CHAGOS
	INDIAN_CHRISTMAS
	INDIAN_COCOS
	INDIAN_COMORO
	INDIAN_KERGUELEN
	INDIAN_MAHE
	INDIAN_MALDIVES
	INDIAN_MAURITIUS
	INDIAN_MAYOTTE
	INDIAN_REUNION
	IRAN
	ISRAEL
	JAMAICA
	JAPAN
	KWAJALEIN
	LIBYA
	MET
	MST
	MST7MDT
	MEXICO_BAJA_NORTE
	MEXICO_BAJA_SUR
	MEXICO_GENERAL
	NZ
	NZ_CHAT
	NAVAJO
	PRC
	PST8PDT
	PACIFIC_APIA
	PACIFIC_AUCKLAND
	PACIFIC_BOUGAINVILLE
	PACIFIC_CHATHAM
	PACIFIC_CHUUK
	PACIFIC_EASTER
	PACIFIC_EFATE
	PACIFIC_ENDERBURY
	PACIFIC_FAKAOFO
	PACIFIC_FIJI
	PACIFIC_FUNAFUTI
	PACIFIC_GALAPAGOS
	PACIFIC_GAMBIER
	PACIFIC_GUADALCANAL
	PACIFIC_GUAM
	PACIFIC_HONOLULU
	PACIFIC_JOHNSTON
	PACIFIC_KANTON
	PACIFIC_KIRITIMATI
	PACIFIC_KOSRAE
	PACIFIC_KWAJALEIN
	PACIFIC_MAJURO
	PACIFIC_MARQUESAS
	PACIFIC_MIDWAY
	PACIFIC_NAURU
	PACIFIC_NIUE
	PACIFIC_NORFOLK
	PACIFIC_NOUMEA
	PACIFIC_PAGO_PAGO
	PACIFIC_PALAU
	PACIFIC_PITCAIRN
	PACIFIC_POHNPEI
	PACIFIC_PONAPE
	PACIFIC_PORT_MORESBY
	PACIFIC_RAROTONGA
	PACIFIC_SAIPAN
	PACIFIC_SAMOA
	PACIFIC_TAHITI
	PACIFIC_TARAWA
	PACIFIC_TONGATAPU
	PACIFIC_TRUK
	PACIFIC_WAKE
	PACIFIC_WALLIS
	PACIFIC_YAP
	POLAND
	PORTUGAL
	ROC
	ROK
	SINGAPORE
	TURKEY
	UCT
	US_ALASKA
	US_ALEUTIAN
	US_ARIZONA
	US_CENTRAL
	US_EAST_INDIANA
	US_EASTERN
	US_HAWAII
	US_INDIANA_STARKE
	US_MICHIGAN
	US_MOUNTAIN
	US_PACIFIC
	US_PACIFIC_NEW
	US_SAMOA
	UTC
	UNIVERSAL
	W_SU
	WET
	ZULU
}
input StripePostReviewsReviewApproveInput {
	expand: [String!]
}
enum StripePostSetupIntentsAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostSetupIntentsAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostSetupIntentsAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostSetupIntentsAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostSetupIntentsVerificationMethodAcssDebitPaymentMethodOptions
	mandateOptions: StripePostSetupIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput
	currency: StripePostSetupIntentsCurrencyAcssDebitPaymentMethodOptions
}
input StripePostSetupIntentsAddressBillingDetailsPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
enum StripePostSetupIntentsAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input StripePostSetupIntentsAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostSetupIntentsBacsDebitPaymentMethodDataInput {
	sortCode: String
	accountNumber: String
}
enum StripePostSetupIntentsBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostSetupIntentsBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostSetupIntentsBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostSetupIntentsBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostSetupIntentsBillingDetailsPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostSetupIntentsAddressBillingDetailsPaymentMethodDataUnionInput
}
input StripePostSetupIntentsBlikPaymentMethodOptionsInput {
	code: String
}
input StripePostSetupIntentsBoletoPaymentMethodDataInput {
	taxId: String!
}
input StripePostSetupIntentsCardPaymentMethodOptionsInput {
	requestThreeDSecure: StripePostSetupIntentsRequestThreeDSecureCardPaymentMethodOptions
	network: StripePostSetupIntentsNetworkCardPaymentMethodOptions
	mandateOptions: StripePostSetupIntentsMandateOptionsCardPaymentMethodOptionsInput
}
enum StripePostSetupIntentsCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum StripePostSetupIntentsCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
input StripePostSetupIntentsCustomerAcceptanceMandateDataInput {
	type: StripePostSetupIntentsTypeCustomerAcceptanceMandateData!
	online: StripePostSetupIntentsOnlineCustomerAcceptanceMandateDataInput
	offline: JSON
	acceptedAt: Int
}
enum StripePostSetupIntentsDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input StripePostSetupIntentsDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostSetupIntentsEpsPaymentMethodDataInput {
	bank: StripePostSetupIntentsBankEpsPaymentMethodData
}
input StripePostSetupIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String
	permissions: [StripePostSetupIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
enum StripePostSetupIntentsFlowDirections {
	INBOUND
	OUTBOUND
}
input StripePostSetupIntentsFpxPaymentMethodDataInput {
	bank: StripePostSetupIntentsBankFpxPaymentMethodData!
}
input StripePostSetupIntentsIdealPaymentMethodDataInput {
	bank: StripePostSetupIntentsBankIdealPaymentMethodData
}
input StripePostSetupIntentsInput {
	usage: StripePostSetupIntentsUsage
	singleUse: StripePostSetupIntentsSingleUseInput
	returnUrl: String
	paymentMethodTypes: [String!]
	paymentMethodOptions: StripePostSetupIntentsPaymentMethodOptionsInput
	paymentMethodData: StripePostSetupIntentsPaymentMethodDataInput
	paymentMethod: String
	onBehalfOf: String
	metadata: JSON
	mandateData: StripePostSetupIntentsMandateDataInput
	flowDirections: [StripePostSetupIntentsFlowDirections!]
	expand: [String!]
	description: String
	customer: String
	confirm: Boolean
	attachToSelf: Boolean
}
enum StripePostSetupIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostSetupIntentsIntentAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostSetupIntentsIntentAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostSetupIntentsIntentAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostSetupIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions
	mandateOptions: StripePostSetupIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput
	currency: StripePostSetupIntentsIntentCurrencyAcssDebitPaymentMethodOptions
}
input StripePostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
enum StripePostSetupIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input StripePostSetupIntentsIntentAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostSetupIntentsIntentBacsDebitPaymentMethodDataInput {
	sortCode: String
	accountNumber: String
}
enum StripePostSetupIntentsIntentBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostSetupIntentsIntentBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostSetupIntentsIntentBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostSetupIntentsIntentBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostSetupIntentsIntentBillingDetailsPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput
}
input StripePostSetupIntentsIntentBlikPaymentMethodOptionsInput {
	code: String
}
input StripePostSetupIntentsIntentBoletoPaymentMethodDataInput {
	taxId: String!
}
enum StripePostSetupIntentsIntentCancelCancellationReason {
	ABANDONED
	DUPLICATE
	REQUESTED_BY_CUSTOMER
}
input StripePostSetupIntentsIntentCancelInput {
	expand: [String!]
	cancellationReason: StripePostSetupIntentsIntentCancelCancellationReason
}
input StripePostSetupIntentsIntentCardPaymentMethodOptionsInput {
	requestThreeDSecure: StripePostSetupIntentsIntentRequestThreeDSecureCardPaymentMethodOptions
	network: StripePostSetupIntentsIntentNetworkCardPaymentMethodOptions
	mandateOptions: StripePostSetupIntentsIntentMandateOptionsCardPaymentMethodOptionsInput
}
enum StripePostSetupIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostSetupIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodDataInput {
	transitNumber: String!
	institutionNumber: String!
	accountNumber: String!
}
input StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput {
	verificationMethod: StripePostSetupIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions
	mandateOptions: StripePostSetupIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput
	currency: StripePostSetupIntentsIntentConfirmCurrencyAcssDebitPaymentMethodOptions
}
input StripePostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
enum StripePostSetupIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions {
	FIXED
	MAXIMUM
}
input StripePostSetupIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput {
	bsbNumber: String!
	accountNumber: String!
}
input StripePostSetupIntentsIntentConfirmBacsDebitPaymentMethodDataInput {
	sortCode: String
	accountNumber: String
}
enum StripePostSetupIntentsIntentConfirmBankEpsPaymentMethodData {
	ARZTE_UND_APOTHEKER_BANK
	AUSTRIAN_ANADI_BANK_AG
	BANK_AUSTRIA
	BANKHAUS_CARL_SPANGLER
	BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
	BAWAG_PSK_AG
	BKS_BANK_AG
	BRULL_KALLMUS_BANK_AG
	BTV_VIER_LANDER_BANK
	CAPITAL_BANK_GRAWE_GRUPPE_AG
	DEUTSCHE_BANK_AG
	DOLOMITENBANK
	EASYBANK_AG
	ERSTE_BANK_UND_SPARKASSEN
	HYPO_ALPEADRIABANK_INTERNATIONAL_AG
	HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
	HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
	HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
	HYPO_TIROL_BANK_AG
	HYPO_VORARLBERG_BANK_AG
	MARCHFELDER_BANK
	OBERBANK_AG
	RAIFFEISEN_BANKENGRUPPE_OSTERREICH
	SCHOELLERBANK_AG
	SPARDA_BANK_WIEN
	VOLKSBANK_GRUPPE
	VOLKSKREDITBANK_AG
	VR_BANK_BRAUNAU
}
enum StripePostSetupIntentsIntentConfirmBankFpxPaymentMethodData {
	AFFIN_BANK
	AGROBANK
	ALLIANCE_BANK
	AMBANK
	BANK_ISLAM
	BANK_MUAMALAT
	BANK_OF_CHINA
	BANK_RAKYAT
	BSN
	CIMB
	DEUTSCHE_BANK
	HONG_LEONG_BANK
	HSBC
	KFH
	MAYBANK_2E
	MAYBANK_2U
	OCBC
	PB_ENTERPRISE
	PUBLIC_BANK
	RHB
	STANDARD_CHARTERED
	UOB
}
enum StripePostSetupIntentsIntentConfirmBankIdealPaymentMethodData {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripePostSetupIntentsIntentConfirmBankP24PaymentMethodData {
	ALIOR_BANK
	BANK_MILLENNIUM
	BANK_NOWY_BFG_SA
	BANK_PEKAO_SA
	BANKI_SPBDZIELCZE
	BLIK
	BNP_PARIBAS
	BOZ
	CITI_HANDLOWY
	CREDIT_AGRICOLE
	ENVELOBANK
	ETRANSFER_POCZTOWY_24
	GETIN_BANK
	IDEABANK
	ING
	INTELIGO
	MBANK_MTRANSFER
	NEST_PRZELEW
	NOBLE_PAY
	PBAC_Z_IPKO
	PLUS_BANK
	SANTANDER_PRZELEW_24
	TMOBILE_USBUGI_BANKOWE
	TOYOTA_BANK
	VOLKSWAGEN_BANK
}
input StripePostSetupIntentsIntentConfirmBillingDetailsPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput
}
input StripePostSetupIntentsIntentConfirmBlikPaymentMethodOptionsInput {
	code: String
}
input StripePostSetupIntentsIntentConfirmBoletoPaymentMethodDataInput {
	taxId: String!
}
input StripePostSetupIntentsIntentConfirmCardPaymentMethodOptionsInput {
	requestThreeDSecure: StripePostSetupIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions
	network: StripePostSetupIntentsIntentConfirmNetworkCardPaymentMethodOptions
	mandateOptions: StripePostSetupIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput
}
enum StripePostSetupIntentsIntentConfirmCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum StripePostSetupIntentsIntentConfirmCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
input StripePostSetupIntentsIntentConfirmCustomerAcceptanceMandateDataInput {
	type: StripePostSetupIntentsIntentConfirmTypeCustomerAcceptanceMandateData!
	online: StripePostSetupIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput!
}
enum StripePostSetupIntentsIntentConfirmDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input StripePostSetupIntentsIntentConfirmDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostSetupIntentsIntentConfirmEpsPaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentConfirmBankEpsPaymentMethodData
}
input StripePostSetupIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String
	permissions: [StripePostSetupIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
input StripePostSetupIntentsIntentConfirmFpxPaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentConfirmBankFpxPaymentMethodData!
}
input StripePostSetupIntentsIntentConfirmIdealPaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentConfirmBankIdealPaymentMethodData
}
input StripePostSetupIntentsIntentConfirmInput {
	returnUrl: String
	paymentMethodOptions: StripePostSetupIntentsIntentConfirmPaymentMethodOptionsInput
	paymentMethodData: StripePostSetupIntentsIntentConfirmPaymentMethodDataInput
	paymentMethod: String
	mandateData: StripePostSetupIntentsIntentConfirmMandateDataOrPostSetupIntentsIntentConfirmMandateDataUnionInput
	expand: [String!]
	clientSecret: String
}
enum StripePostSetupIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
input StripePostSetupIntentsIntentConfirmKlarnaPaymentMethodDataInput {
	dob: StripePostSetupIntentsIntentConfirmDobKlarnaPaymentMethodDataInput
}
input StripePostSetupIntentsIntentConfirmLinkPaymentMethodOptionsInput {
	persistentToken: String
}
input StripePostSetupIntentsIntentConfirmMandateDataInput {
	customerAcceptance: StripePostSetupIntentsIntentConfirmCustomerAcceptanceMandateDataInput!
}
input StripePostSetupIntentsIntentConfirmMandateDataOrPostSetupIntentsIntentConfirmMandateDataUnionInput {
	stripePostSetupIntentsIntentConfirmMandateDataInput: StripePostSetupIntentsIntentConfirmMandateDataInput
}
input StripePostSetupIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostSetupIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostSetupIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
	defaultFor: [StripePostSetupIntentsIntentConfirmDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]
}
input StripePostSetupIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [StripePostSetupIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePostSetupIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int
	description: String
	currency: String!
	amountType: StripePostSetupIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum StripePostSetupIntentsIntentConfirmNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostSetupIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [StripePostSetupIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions!]
}
input StripePostSetupIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String
	ipAddress: String
}
input StripePostSetupIntentsIntentConfirmP24PaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentConfirmBankP24PaymentMethodData
}
input StripePostSetupIntentsIntentConfirmPaymentMethodDataInput {
	wechatPay: JSON
	usBankAccount: StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodDataInput
	type: StripePostSetupIntentsIntentConfirmTypePaymentMethodData!
	sofort: StripePostSetupIntentsIntentConfirmSofortPaymentMethodDataInput
	sepaDebit: StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodDataInput
	radarOptions: StripePostSetupIntentsIntentConfirmRadarOptionsPaymentMethodDataInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePostSetupIntentsIntentConfirmP24PaymentMethodDataInput
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostSetupIntentsIntentConfirmKlarnaPaymentMethodDataInput
	interacPresent: JSON
	ideal: StripePostSetupIntentsIntentConfirmIdealPaymentMethodDataInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostSetupIntentsIntentConfirmFpxPaymentMethodDataInput
	eps: StripePostSetupIntentsIntentConfirmEpsPaymentMethodDataInput
	customerBalance: JSON
	boleto: StripePostSetupIntentsIntentConfirmBoletoPaymentMethodDataInput
	blik: JSON
	billingDetails: StripePostSetupIntentsIntentConfirmBillingDetailsPaymentMethodDataInput
	bancontact: JSON
	bacsDebit: StripePostSetupIntentsIntentConfirmBacsDebitPaymentMethodDataInput
	auBecsDebit: StripePostSetupIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodDataInput
}
input StripePostSetupIntentsIntentConfirmPaymentMethodOptionsInput {
	usBankAccount: StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput
	sepaDebit: StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput
	link: StripePostSetupIntentsIntentConfirmLinkPaymentMethodOptionsInput
	card: StripePostSetupIntentsIntentConfirmCardPaymentMethodOptionsInput
	blik: StripePostSetupIntentsIntentConfirmBlikPaymentMethodOptionsInput
	acssDebit: StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput
}
enum StripePostSetupIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripePostSetupIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostSetupIntentsIntentConfirmRadarOptionsPaymentMethodDataInput {
	session: String
}
enum StripePostSetupIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum StripePostSetupIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodDataInput {
	iban: String!
}
input StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput {
	mandateOptions: JSON
}
input StripePostSetupIntentsIntentConfirmSofortPaymentMethodDataInput {
	country: StripePostSetupIntentsIntentConfirmCountrySofortPaymentMethodData!
}
enum StripePostSetupIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum StripePostSetupIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum StripePostSetupIntentsIntentConfirmTypeCustomerAcceptanceMandateData {
	ONLINE
}
enum StripePostSetupIntentsIntentConfirmTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostSetupIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostSetupIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData
}
input StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostSetupIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions
	networks: StripePostSetupIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput
	financialConnections: StripePostSetupIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostSetupIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSetupIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSetupIntentsIntentCountrySofortPaymentMethodData {
	AT
	BE
	DE
	ES
	IT
	NL
}
enum StripePostSetupIntentsIntentCurrencyAcssDebitPaymentMethodOptions {
	CAD
	USD
}
enum StripePostSetupIntentsIntentDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
	INVOICE
	SUBSCRIPTION
}
input StripePostSetupIntentsIntentDobKlarnaPaymentMethodDataInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostSetupIntentsIntentEpsPaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentBankEpsPaymentMethodData
}
input StripePostSetupIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput {
	returnUrl: String
	permissions: [StripePostSetupIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions!]
}
enum StripePostSetupIntentsIntentFlowDirections {
	INBOUND
	OUTBOUND
}
input StripePostSetupIntentsIntentFpxPaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentBankFpxPaymentMethodData!
}
input StripePostSetupIntentsIntentIdealPaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentBankIdealPaymentMethodData
}
input StripePostSetupIntentsIntentInput {
	metadata: JSON
	paymentMethodTypes: [String!]
	paymentMethodOptions: StripePostSetupIntentsIntentPaymentMethodOptionsInput
	paymentMethodData: StripePostSetupIntentsIntentPaymentMethodDataInput
	paymentMethod: String
	flowDirections: [StripePostSetupIntentsIntentFlowDirections!]
	expand: [String!]
	description: String
	customer: String
	attachToSelf: Boolean
}
enum StripePostSetupIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
input StripePostSetupIntentsIntentKlarnaPaymentMethodDataInput {
	dob: StripePostSetupIntentsIntentDobKlarnaPaymentMethodDataInput
}
input StripePostSetupIntentsIntentLinkPaymentMethodOptionsInput {
	persistentToken: String
}
input StripePostSetupIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostSetupIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostSetupIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
	defaultFor: [StripePostSetupIntentsIntentDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]
}
input StripePostSetupIntentsIntentMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [StripePostSetupIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePostSetupIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int
	description: String
	currency: String!
	amountType: StripePostSetupIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum StripePostSetupIntentsIntentNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostSetupIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [StripePostSetupIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions!]
}
input StripePostSetupIntentsIntentP24PaymentMethodDataInput {
	bank: StripePostSetupIntentsIntentBankP24PaymentMethodData
}
input StripePostSetupIntentsIntentPaymentMethodDataInput {
	wechatPay: JSON
	usBankAccount: StripePostSetupIntentsIntentUsBankAccountPaymentMethodDataInput
	type: StripePostSetupIntentsIntentTypePaymentMethodData!
	sofort: StripePostSetupIntentsIntentSofortPaymentMethodDataInput
	sepaDebit: StripePostSetupIntentsIntentSepaDebitPaymentMethodDataInput
	radarOptions: StripePostSetupIntentsIntentRadarOptionsPaymentMethodDataInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePostSetupIntentsIntentP24PaymentMethodDataInput
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostSetupIntentsIntentKlarnaPaymentMethodDataInput
	interacPresent: JSON
	ideal: StripePostSetupIntentsIntentIdealPaymentMethodDataInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostSetupIntentsIntentFpxPaymentMethodDataInput
	eps: StripePostSetupIntentsIntentEpsPaymentMethodDataInput
	customerBalance: JSON
	boleto: StripePostSetupIntentsIntentBoletoPaymentMethodDataInput
	blik: JSON
	billingDetails: StripePostSetupIntentsIntentBillingDetailsPaymentMethodDataInput
	bancontact: JSON
	bacsDebit: StripePostSetupIntentsIntentBacsDebitPaymentMethodDataInput
	auBecsDebit: StripePostSetupIntentsIntentAuBecsDebitPaymentMethodDataInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostSetupIntentsIntentAcssDebitPaymentMethodDataInput
}
input StripePostSetupIntentsIntentPaymentMethodOptionsInput {
	usBankAccount: StripePostSetupIntentsIntentUsBankAccountPaymentMethodOptionsInput
	sepaDebit: StripePostSetupIntentsIntentSepaDebitPaymentMethodOptionsInput
	link: StripePostSetupIntentsIntentLinkPaymentMethodOptionsInput
	card: StripePostSetupIntentsIntentCardPaymentMethodOptionsInput
	blik: StripePostSetupIntentsIntentBlikPaymentMethodOptionsInput
	acssDebit: StripePostSetupIntentsIntentAcssDebitPaymentMethodOptionsInput
}
enum StripePostSetupIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripePostSetupIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostSetupIntentsIntentRadarOptionsPaymentMethodDataInput {
	session: String
}
enum StripePostSetupIntentsIntentRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum StripePostSetupIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostSetupIntentsIntentSepaDebitPaymentMethodDataInput {
	iban: String!
}
input StripePostSetupIntentsIntentSepaDebitPaymentMethodOptionsInput {
	mandateOptions: JSON
}
input StripePostSetupIntentsIntentSofortPaymentMethodDataInput {
	country: StripePostSetupIntentsIntentCountrySofortPaymentMethodData!
}
enum StripePostSetupIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum StripePostSetupIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum StripePostSetupIntentsIntentTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input StripePostSetupIntentsIntentUsBankAccountPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostSetupIntentsIntentAccountTypeUsBankAccountPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostSetupIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData
}
input StripePostSetupIntentsIntentUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostSetupIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions
	networks: StripePostSetupIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput
	financialConnections: StripePostSetupIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostSetupIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSetupIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostSetupIntentsIntentVerifyMicrodepositsInput {
	expand: [String!]
	descriptorCode: String
	clientSecret: String
	amounts: [Int!]
}
enum StripePostSetupIntentsIntervalMandateOptionsCardPaymentMethodOptions {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
input StripePostSetupIntentsKlarnaPaymentMethodDataInput {
	dob: StripePostSetupIntentsDobKlarnaPaymentMethodDataInput
}
input StripePostSetupIntentsLinkPaymentMethodOptionsInput {
	persistentToken: String
}
input StripePostSetupIntentsMandateDataInput {
	customerAcceptance: StripePostSetupIntentsCustomerAcceptanceMandateDataInput!
}
input StripePostSetupIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput {
	customMandateUrl: JSON
	transactionType: StripePostSetupIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions
	paymentSchedule: StripePostSetupIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions
	intervalDescription: String
	defaultFor: [StripePostSetupIntentsDefaultForMandateOptionsAcssDebitPaymentMethodOptions!]
}
input StripePostSetupIntentsMandateOptionsCardPaymentMethodOptionsInput {
	supportedTypes: [StripePostSetupIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripePostSetupIntentsIntervalMandateOptionsCardPaymentMethodOptions!
	endDate: Int
	description: String
	currency: String!
	amountType: StripePostSetupIntentsAmountTypeMandateOptionsCardPaymentMethodOptions!
	amount: Int!
}
enum StripePostSetupIntentsNetworkCardPaymentMethodOptions {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostSetupIntentsNetworksUsBankAccountPaymentMethodOptionsInput {
	requested: [StripePostSetupIntentsRequestedNetworksUsBankAccountPaymentMethodOptions!]
}
input StripePostSetupIntentsOnlineCustomerAcceptanceMandateDataInput {
	userAgent: String!
	ipAddress: String!
}
input StripePostSetupIntentsP24PaymentMethodDataInput {
	bank: StripePostSetupIntentsBankP24PaymentMethodData
}
input StripePostSetupIntentsPaymentMethodDataInput {
	wechatPay: JSON
	usBankAccount: StripePostSetupIntentsUsBankAccountPaymentMethodDataInput
	type: StripePostSetupIntentsTypePaymentMethodData!
	sofort: StripePostSetupIntentsSofortPaymentMethodDataInput
	sepaDebit: StripePostSetupIntentsSepaDebitPaymentMethodDataInput
	radarOptions: StripePostSetupIntentsRadarOptionsPaymentMethodDataInput
	promptpay: JSON
	pix: JSON
	paynow: JSON
	p24: StripePostSetupIntentsP24PaymentMethodDataInput
	oxxo: JSON
	metadata: JSON
	link: JSON
	konbini: JSON
	klarna: StripePostSetupIntentsKlarnaPaymentMethodDataInput
	interacPresent: JSON
	ideal: StripePostSetupIntentsIdealPaymentMethodDataInput
	grabpay: JSON
	giropay: JSON
	fpx: StripePostSetupIntentsFpxPaymentMethodDataInput
	eps: StripePostSetupIntentsEpsPaymentMethodDataInput
	customerBalance: JSON
	boleto: StripePostSetupIntentsBoletoPaymentMethodDataInput
	blik: JSON
	billingDetails: StripePostSetupIntentsBillingDetailsPaymentMethodDataInput
	bancontact: JSON
	bacsDebit: StripePostSetupIntentsBacsDebitPaymentMethodDataInput
	auBecsDebit: StripePostSetupIntentsAuBecsDebitPaymentMethodDataInput
	alipay: JSON
	afterpayClearpay: JSON
	affirm: JSON
	acssDebit: StripePostSetupIntentsAcssDebitPaymentMethodDataInput
}
input StripePostSetupIntentsPaymentMethodOptionsInput {
	usBankAccount: StripePostSetupIntentsUsBankAccountPaymentMethodOptionsInput
	sepaDebit: StripePostSetupIntentsSepaDebitPaymentMethodOptionsInput
	link: StripePostSetupIntentsLinkPaymentMethodOptionsInput
	card: StripePostSetupIntentsCardPaymentMethodOptionsInput
	blik: StripePostSetupIntentsBlikPaymentMethodOptionsInput
	acssDebit: StripePostSetupIntentsAcssDebitPaymentMethodOptionsInput
}
enum StripePostSetupIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripePostSetupIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
input StripePostSetupIntentsRadarOptionsPaymentMethodDataInput {
	session: String
}
enum StripePostSetupIntentsRequestThreeDSecureCardPaymentMethodOptions {
	ANY
	AUTOMATIC
}
enum StripePostSetupIntentsRequestedNetworksUsBankAccountPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostSetupIntentsSepaDebitPaymentMethodDataInput {
	iban: String!
}
input StripePostSetupIntentsSepaDebitPaymentMethodOptionsInput {
	mandateOptions: JSON
}
input StripePostSetupIntentsSingleUseInput {
	currency: String!
	amount: Int!
}
input StripePostSetupIntentsSofortPaymentMethodDataInput {
	country: StripePostSetupIntentsCountrySofortPaymentMethodData!
}
enum StripePostSetupIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions {
	INDIA
}
enum StripePostSetupIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
	BUSINESS
	PERSONAL
}
enum StripePostSetupIntentsTypeCustomerAcceptanceMandateData {
	OFFLINE
	ONLINE
}
enum StripePostSetupIntentsTypePaymentMethodData {
	ACSS_DEBIT
	AFFIRM
	AFTERPAY_CLEARPAY
	ALIPAY
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BLIK
	BOLETO
	CUSTOMER_BALANCE
	EPS
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KLARNA
	KONBINI
	LINK
	OXXO
	P_24
	PAYNOW
	PIX
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
input StripePostSetupIntentsUsBankAccountPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostSetupIntentsAccountTypeUsBankAccountPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostSetupIntentsAccountHolderTypeUsBankAccountPaymentMethodData
}
input StripePostSetupIntentsUsBankAccountPaymentMethodOptionsInput {
	verificationMethod: StripePostSetupIntentsVerificationMethodUsBankAccountPaymentMethodOptions
	networks: StripePostSetupIntentsNetworksUsBankAccountPaymentMethodOptionsInput
	financialConnections: StripePostSetupIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput
}
enum StripePostSetupIntentsUsage {
	OFF_SESSION
	ON_SESSION
}
enum StripePostSetupIntentsVerificationMethodAcssDebitPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSetupIntentsVerificationMethodUsBankAccountPaymentMethodOptions {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostShippingRatesDeliveryEstimateInput {
	minimum: StripePostShippingRatesMinimumDeliveryEstimateInput
	maximum: StripePostShippingRatesMaximumDeliveryEstimateInput
}
input StripePostShippingRatesFixedAmountInput {
	currencyOptions: JSON
	currency: String!
	amount: Int!
}
input StripePostShippingRatesInput {
	type: StripePostShippingRatesType
	taxCode: String
	taxBehavior: StripePostShippingRatesTaxBehavior
	metadata: JSON
	fixedAmount: StripePostShippingRatesFixedAmountInput
	expand: [String!]
	displayName: String!
	deliveryEstimate: StripePostShippingRatesDeliveryEstimateInput
}
input StripePostShippingRatesMaximumDeliveryEstimateInput {
	value: Int!
	unit: StripePostShippingRatesUnitMaximumDeliveryEstimate!
}
input StripePostShippingRatesMinimumDeliveryEstimateInput {
	value: Int!
	unit: StripePostShippingRatesUnitMinimumDeliveryEstimate!
}
input StripePostShippingRatesShippingRateTokenFixedAmountInput {
	currencyOptions: JSON
}
input StripePostShippingRatesShippingRateTokenInput {
	metadata: JSON
	taxBehavior: StripePostShippingRatesShippingRateTokenTaxBehavior
	fixedAmount: StripePostShippingRatesShippingRateTokenFixedAmountInput
	expand: [String!]
	active: Boolean
}
enum StripePostShippingRatesShippingRateTokenTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostShippingRatesTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostShippingRatesType {
	FIXED_AMOUNT
}
enum StripePostShippingRatesUnitMaximumDeliveryEstimate {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
enum StripePostShippingRatesUnitMinimumDeliveryEstimate {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
input StripePostSourcesAcceptanceMandateInput {
	userAgent: String
	type: StripePostSourcesTypeAcceptanceMandate
	status: StripePostSourcesStatusAcceptanceMandate!
	online: StripePostSourcesOnlineAcceptanceMandateInput
	offline: StripePostSourcesOfflineAcceptanceMandateInput
	ip: String
	date: Int
}
input StripePostSourcesAddressOwnerInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostSourcesAddressShippingSourceOrderInput {
	state: String
	postalCode: String
	line2: String
	line1: String!
	country: String
	city: String
}
enum StripePostSourcesFlow {
	CODE_VERIFICATION
	NONE
	RECEIVER
	REDIRECT
}
input StripePostSourcesInput {
	usage: StripePostSourcesUsage
	type: String
	token: String
	statementDescriptor: String
	sourceOrder: StripePostSourcesSourceOrderInput
	redirect: StripePostSourcesRedirectInput
	receiver: StripePostSourcesReceiverInput
	owner: StripePostSourcesOwnerInput
	originalSource: String
	metadata: JSON
	mandate: StripePostSourcesMandateInput
	flow: StripePostSourcesFlow
	expand: [String!]
	customer: String
	currency: String
	amount: Int
}
enum StripePostSourcesIntervalMandate {
	ONE_TIME
	SCHEDULED
	VARIABLE
}
input StripePostSourcesItemsSourceOrderInput {
	type: StripePostSourcesTypeItemsSourceOrder
	quantity: Int
	parent: String
	description: String
	currency: String
	amount: Int
}
input StripePostSourcesMandateInput {
	amount: JSON
	notificationMethod: StripePostSourcesNotificationMethodMandate
	interval: StripePostSourcesIntervalMandate
	currency: String
	acceptance: StripePostSourcesAcceptanceMandateInput
}
enum StripePostSourcesNotificationMethodMandate {
	DEPRECATED_NONE
	EMAIL
	MANUAL
	NONE
	STRIPE_EMAIL
}
input StripePostSourcesOfflineAcceptanceMandateInput {
	contactEmail: String!
}
input StripePostSourcesOnlineAcceptanceMandateInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostSourcesOwnerInput {
	phone: String
	name: String
	email: String
	address: StripePostSourcesAddressOwnerInput
}
input StripePostSourcesReceiverInput {
	refundAttributesMethod: StripePostSourcesRefundAttributesMethodReceiver
}
input StripePostSourcesRedirectInput {
	returnUrl: String!
}
enum StripePostSourcesRefundAttributesMethodReceiver {
	EMAIL
	MANUAL
	NONE
}
input StripePostSourcesShippingSourceOrderInput {
	trackingNumber: String
	phone: String
	name: String
	carrier: String
	address: StripePostSourcesAddressShippingSourceOrderInput!
}
input StripePostSourcesSourceAcceptanceMandateInput {
	userAgent: String
	type: StripePostSourcesSourceTypeAcceptanceMandate
	status: StripePostSourcesSourceStatusAcceptanceMandate!
	online: StripePostSourcesSourceOnlineAcceptanceMandateInput
	offline: StripePostSourcesSourceOfflineAcceptanceMandateInput
	ip: String
	date: Int
}
input StripePostSourcesSourceAddressOwnerInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostSourcesSourceAddressShippingSourceOrderInput {
	state: String
	postalCode: String
	line2: String
	line1: String!
	country: String
	city: String
}
input StripePostSourcesSourceInput {
	metadata: JSON
	sourceOrder: StripePostSourcesSourceSourceOrderInput
	owner: StripePostSourcesSourceOwnerInput
	mandate: StripePostSourcesSourceMandateInput
	expand: [String!]
	amount: Int
}
enum StripePostSourcesSourceIntervalMandate {
	ONE_TIME
	SCHEDULED
	VARIABLE
}
input StripePostSourcesSourceItemsSourceOrderInput {
	type: StripePostSourcesSourceTypeItemsSourceOrder
	quantity: Int
	parent: String
	description: String
	currency: String
	amount: Int
}
input StripePostSourcesSourceMandateInput {
	amount: JSON
	notificationMethod: StripePostSourcesSourceNotificationMethodMandate
	interval: StripePostSourcesSourceIntervalMandate
	currency: String
	acceptance: StripePostSourcesSourceAcceptanceMandateInput
}
enum StripePostSourcesSourceNotificationMethodMandate {
	DEPRECATED_NONE
	EMAIL
	MANUAL
	NONE
	STRIPE_EMAIL
}
input StripePostSourcesSourceOfflineAcceptanceMandateInput {
	contactEmail: String!
}
input StripePostSourcesSourceOnlineAcceptanceMandateInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostSourcesSourceOrderInput {
	shipping: StripePostSourcesShippingSourceOrderInput
	items: [StripePostSourcesItemsSourceOrderInput!]
}
input StripePostSourcesSourceOwnerInput {
	phone: String
	name: String
	email: String
	address: StripePostSourcesSourceAddressOwnerInput
}
input StripePostSourcesSourceShippingSourceOrderInput {
	trackingNumber: String
	phone: String
	name: String
	carrier: String
	address: StripePostSourcesSourceAddressShippingSourceOrderInput!
}
input StripePostSourcesSourceSourceOrderInput {
	shipping: StripePostSourcesSourceShippingSourceOrderInput
	items: [StripePostSourcesSourceItemsSourceOrderInput!]
}
enum StripePostSourcesSourceStatusAcceptanceMandate {
	ACCEPTED
	PENDING
	REFUSED
	REVOKED
}
enum StripePostSourcesSourceTypeAcceptanceMandate {
	OFFLINE
	ONLINE
}
enum StripePostSourcesSourceTypeItemsSourceOrder {
	DISCOUNT
	SHIPPING
	SKU
	TAX
}
input StripePostSourcesSourceVerifyInput {
	values: [String!]!
	expand: [String!]
}
enum StripePostSourcesStatusAcceptanceMandate {
	ACCEPTED
	PENDING
	REFUSED
	REVOKED
}
enum StripePostSourcesTypeAcceptanceMandate {
	OFFLINE
	ONLINE
}
enum StripePostSourcesTypeItemsSourceOrder {
	DISCOUNT
	SHIPPING
	SKU
	TAX
}
enum StripePostSourcesUsage {
	REUSABLE
	SINGLE_USE
}
input StripePostSubscriptionItemsBillingThresholdsInput {
	usageGte: Int!
}
input StripePostSubscriptionItemsInput {
	taxRates: JSON
	subscription: String!
	quantity: Int
	prorationDate: Int
	prorationBehavior: StripePostSubscriptionItemsProrationBehavior
	priceData: StripePostSubscriptionItemsPriceDataInput
	price: String
	paymentBehavior: StripePostSubscriptionItemsPaymentBehavior
	metadata: JSON
	expand: [String!]
	billingThresholds: StripeStringOrPostSubscriptionItemsBillingThresholdsUnionInput
}
enum StripePostSubscriptionItemsIntervalRecurringPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostSubscriptionItemsItemBillingThresholdsInput {
	usageGte: Int!
}
input StripePostSubscriptionItemsItemInput {
	taxRates: JSON
	metadata: JSON
	quantity: Int
	prorationDate: Int
	prorationBehavior: StripePostSubscriptionItemsItemProrationBehavior
	priceData: StripePostSubscriptionItemsItemPriceDataInput
	price: String
	paymentBehavior: StripePostSubscriptionItemsItemPaymentBehavior
	offSession: Boolean
	expand: [String!]
	billingThresholds: StripeStringOrPostSubscriptionItemsItemBillingThresholdsUnionInput
}
enum StripePostSubscriptionItemsItemIntervalRecurringPriceData {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripePostSubscriptionItemsItemPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input StripePostSubscriptionItemsItemPriceDataInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionItemsItemTaxBehaviorPriceData
	recurring: StripePostSubscriptionItemsItemRecurringPriceDataInput!
	product: String!
	currency: String!
}
enum StripePostSubscriptionItemsItemProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostSubscriptionItemsItemRecurringPriceDataInput {
	intervalCount: Int
	interval: StripePostSubscriptionItemsItemIntervalRecurringPriceData!
}
enum StripePostSubscriptionItemsItemTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionItemsPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input StripePostSubscriptionItemsPriceDataInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionItemsTaxBehaviorPriceData
	recurring: StripePostSubscriptionItemsRecurringPriceDataInput!
	product: String!
	currency: String!
}
enum StripePostSubscriptionItemsProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostSubscriptionItemsRecurringPriceDataInput {
	intervalCount: Int
	interval: StripePostSubscriptionItemsIntervalRecurringPriceData!
}
enum StripePostSubscriptionItemsSubscriptionItemUsageRecordsAction {
	INCREMENT
	SET
}
input StripePostSubscriptionItemsSubscriptionItemUsageRecordsInput {
	timestamp: JSON
	quantity: Int!
	expand: [String!]
	action: StripePostSubscriptionItemsSubscriptionItemUsageRecordsAction
}
enum StripePostSubscriptionItemsTaxBehaviorPriceData {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostSubscriptionSchedulesAddInvoiceItemsPhasesInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionSchedulesPriceDataAddInvoiceItemsPhasesInput
	price: String
}
input StripePostSubscriptionSchedulesAutomaticTaxDefaultSettingsInput {
	enabled: Boolean!
}
input StripePostSubscriptionSchedulesAutomaticTaxPhasesInput {
	enabled: Boolean!
}
enum StripePostSubscriptionSchedulesBillingCycleAnchorDefaultSettings {
	AUTOMATIC
	PHASE_START
}
enum StripePostSubscriptionSchedulesBillingCycleAnchorPhases {
	AUTOMATIC
	PHASE_START
}
input StripePostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostSubscriptionSchedulesBillingThresholdsItemsPhasesInput {
	usageGte: Int!
}
input StripePostSubscriptionSchedulesBillingThresholdsPhasesInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
enum StripePostSubscriptionSchedulesCollectionMethodDefaultSettings {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum StripePostSubscriptionSchedulesCollectionMethodPhases {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostSubscriptionSchedulesDefaultSettingsInput {
	onBehalfOf: JSON
	transferData: StripeStringOrPostSubscriptionSchedulesTransferDataDefaultSettingsUnionInput
	invoiceSettings: StripePostSubscriptionSchedulesInvoiceSettingsDefaultSettingsInput
	description: String
	defaultPaymentMethod: String
	collectionMethod: StripePostSubscriptionSchedulesCollectionMethodDefaultSettings
	billingThresholds: StripeStringOrPostSubscriptionSchedulesBillingThresholdsDefaultSettingsUnionInput
	billingCycleAnchor: StripePostSubscriptionSchedulesBillingCycleAnchorDefaultSettings
	automaticTax: StripePostSubscriptionSchedulesAutomaticTaxDefaultSettingsInput
	applicationFeePercent: Float
}
enum StripePostSubscriptionSchedulesEndBehavior {
	CANCEL
	NONE
	RELEASE
	RENEW
}
input StripePostSubscriptionSchedulesInput {
	startDate: JSON
	metadata: JSON
	phases: [StripePostSubscriptionSchedulesPhasesInput!]
	fromSubscription: String
	expand: [String!]
	endBehavior: StripePostSubscriptionSchedulesEndBehavior
	defaultSettings: StripePostSubscriptionSchedulesDefaultSettingsInput
	customer: String
}
enum StripePostSubscriptionSchedulesIntervalRecurringPriceDataItemsPhases {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostSubscriptionSchedulesInvoiceSettingsDefaultSettingsInput {
	daysUntilDue: Int
}
input StripePostSubscriptionSchedulesInvoiceSettingsPhasesInput {
	daysUntilDue: Int
}
input StripePostSubscriptionSchedulesItemsPhasesInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionSchedulesPriceDataItemsPhasesInput
	price: String
	metadata: JSON
	billingThresholds: StripeStringOrPostSubscriptionSchedulesBillingThresholdsItemsPhasesUnionInput
}
input StripePostSubscriptionSchedulesPhasesInput {
	defaultTaxRates: JSON
	trialEnd: Int
	trial: Boolean
	transferData: StripePostSubscriptionSchedulesTransferDataPhasesInput
	prorationBehavior: StripePostSubscriptionSchedulesProrationBehaviorPhases
	onBehalfOf: String
	metadata: JSON
	iterations: Int
	items: [StripePostSubscriptionSchedulesItemsPhasesInput!]!
	invoiceSettings: StripePostSubscriptionSchedulesInvoiceSettingsPhasesInput
	endDate: Int
	description: String
	defaultPaymentMethod: String
	currency: String
	coupon: String
	collectionMethod: StripePostSubscriptionSchedulesCollectionMethodPhases
	billingThresholds: StripeStringOrPostSubscriptionSchedulesBillingThresholdsPhasesUnionInput
	billingCycleAnchor: StripePostSubscriptionSchedulesBillingCycleAnchorPhases
	automaticTax: StripePostSubscriptionSchedulesAutomaticTaxPhasesInput
	applicationFeePercent: Float
	addInvoiceItems: [StripePostSubscriptionSchedulesAddInvoiceItemsPhasesInput!]
}
input StripePostSubscriptionSchedulesPriceDataAddInvoiceItemsPhasesInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionSchedulesTaxBehaviorPriceDataAddInvoiceItemsPhases
	product: String!
	currency: String!
}
input StripePostSubscriptionSchedulesPriceDataItemsPhasesInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionSchedulesTaxBehaviorPriceDataItemsPhases
	recurring: StripePostSubscriptionSchedulesRecurringPriceDataItemsPhasesInput!
	product: String!
	currency: String!
}
enum StripePostSubscriptionSchedulesProrationBehaviorPhases {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostSubscriptionSchedulesRecurringPriceDataItemsPhasesInput {
	intervalCount: Int
	interval: StripePostSubscriptionSchedulesIntervalRecurringPriceDataItemsPhases!
}
input StripePostSubscriptionSchedulesScheduleAddInvoiceItemsPhasesInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionSchedulesSchedulePriceDataAddInvoiceItemsPhasesInput
	price: String
}
input StripePostSubscriptionSchedulesScheduleAutomaticTaxDefaultSettingsInput {
	enabled: Boolean!
}
input StripePostSubscriptionSchedulesScheduleAutomaticTaxPhasesInput {
	enabled: Boolean!
}
enum StripePostSubscriptionSchedulesScheduleBillingCycleAnchorDefaultSettings {
	AUTOMATIC
	PHASE_START
}
enum StripePostSubscriptionSchedulesScheduleBillingCycleAnchorPhases {
	AUTOMATIC
	PHASE_START
}
input StripePostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput {
	usageGte: Int!
}
input StripePostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostSubscriptionSchedulesScheduleCancelInput {
	prorate: Boolean
	invoiceNow: Boolean
	expand: [String!]
}
enum StripePostSubscriptionSchedulesScheduleCollectionMethodDefaultSettings {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum StripePostSubscriptionSchedulesScheduleCollectionMethodPhases {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostSubscriptionSchedulesScheduleDefaultSettingsInput {
	onBehalfOf: JSON
	transferData: StripeStringOrPostSubscriptionSchedulesScheduleTransferDataDefaultSettingsUnionInput
	invoiceSettings: StripePostSubscriptionSchedulesScheduleInvoiceSettingsDefaultSettingsInput
	description: String
	defaultPaymentMethod: String
	collectionMethod: StripePostSubscriptionSchedulesScheduleCollectionMethodDefaultSettings
	billingThresholds: StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsUnionInput
	billingCycleAnchor: StripePostSubscriptionSchedulesScheduleBillingCycleAnchorDefaultSettings
	automaticTax: StripePostSubscriptionSchedulesScheduleAutomaticTaxDefaultSettingsInput
	applicationFeePercent: Float
}
enum StripePostSubscriptionSchedulesScheduleEndBehavior {
	CANCEL
	NONE
	RELEASE
	RENEW
}
input StripePostSubscriptionSchedulesScheduleInput {
	metadata: JSON
	prorationBehavior: StripePostSubscriptionSchedulesScheduleProrationBehavior
	phases: [StripePostSubscriptionSchedulesSchedulePhasesInput!]
	expand: [String!]
	endBehavior: StripePostSubscriptionSchedulesScheduleEndBehavior
	defaultSettings: StripePostSubscriptionSchedulesScheduleDefaultSettingsInput
}
enum StripePostSubscriptionSchedulesScheduleIntervalRecurringPriceDataItemsPhases {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostSubscriptionSchedulesScheduleInvoiceSettingsDefaultSettingsInput {
	daysUntilDue: Int
}
input StripePostSubscriptionSchedulesScheduleInvoiceSettingsPhasesInput {
	daysUntilDue: Int
}
input StripePostSubscriptionSchedulesScheduleItemsPhasesInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionSchedulesSchedulePriceDataItemsPhasesInput
	price: String
	metadata: JSON
	billingThresholds: StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesUnionInput
}
input StripePostSubscriptionSchedulesSchedulePhasesInput {
	trialEnd: JSON
	startDate: JSON
	endDate: JSON
	defaultTaxRates: JSON
	trial: Boolean
	transferData: StripePostSubscriptionSchedulesScheduleTransferDataPhasesInput
	prorationBehavior: StripePostSubscriptionSchedulesScheduleProrationBehaviorPhases
	onBehalfOf: String
	metadata: JSON
	iterations: Int
	items: [StripePostSubscriptionSchedulesScheduleItemsPhasesInput!]!
	invoiceSettings: StripePostSubscriptionSchedulesScheduleInvoiceSettingsPhasesInput
	description: String
	defaultPaymentMethod: String
	coupon: String
	collectionMethod: StripePostSubscriptionSchedulesScheduleCollectionMethodPhases
	billingThresholds: StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsPhasesUnionInput
	billingCycleAnchor: StripePostSubscriptionSchedulesScheduleBillingCycleAnchorPhases
	automaticTax: StripePostSubscriptionSchedulesScheduleAutomaticTaxPhasesInput
	applicationFeePercent: Float
	addInvoiceItems: [StripePostSubscriptionSchedulesScheduleAddInvoiceItemsPhasesInput!]
}
input StripePostSubscriptionSchedulesSchedulePriceDataAddInvoiceItemsPhasesInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataAddInvoiceItemsPhases
	product: String!
	currency: String!
}
input StripePostSubscriptionSchedulesSchedulePriceDataItemsPhasesInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataItemsPhases
	recurring: StripePostSubscriptionSchedulesScheduleRecurringPriceDataItemsPhasesInput!
	product: String!
	currency: String!
}
enum StripePostSubscriptionSchedulesScheduleProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripePostSubscriptionSchedulesScheduleProrationBehaviorPhases {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostSubscriptionSchedulesScheduleRecurringPriceDataItemsPhasesInput {
	intervalCount: Int
	interval: StripePostSubscriptionSchedulesScheduleIntervalRecurringPriceDataItemsPhases!
}
input StripePostSubscriptionSchedulesScheduleReleaseInput {
	preserveCancelDate: Boolean
	expand: [String!]
}
enum StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataAddInvoiceItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput {
	destination: String!
	amountPercent: Float
}
input StripePostSubscriptionSchedulesScheduleTransferDataPhasesInput {
	destination: String!
	amountPercent: Float
}
enum StripePostSubscriptionSchedulesTaxBehaviorPriceDataAddInvoiceItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionSchedulesTaxBehaviorPriceDataItemsPhases {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
input StripePostSubscriptionSchedulesTransferDataDefaultSettingsInput {
	destination: String!
	amountPercent: Float
}
input StripePostSubscriptionSchedulesTransferDataPhasesInput {
	destination: String!
	amountPercent: Float
}
input StripePostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsAddInvoiceItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionsPriceDataAddInvoiceItemsInput
	price: String
}
enum StripePostSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input StripePostSubscriptionsAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: StripePostSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings
}
input StripePostSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String
	euBankTransfer: StripePostSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostSubscriptionsBillingThresholdsItemsInput {
	usageGte: Int!
}
input StripePostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: StripePostSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings
	network: StripePostSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostSubscriptionsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String
	bankTransfer: StripePostSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsEndBehaviorTrialSettingsInput {
	missingPaymentMethod: StripePostSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings!
}
input StripePostSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input StripePostSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [StripePostSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]
}
input StripePostSubscriptionsInput {
	trialEnd: JSON
	onBehalfOf: JSON
	metadata: JSON
	defaultTaxRates: JSON
	trialSettings: StripePostSubscriptionsTrialSettingsInput
	trialPeriodDays: Int
	trialFromPlan: Boolean
	transferData: StripePostSubscriptionsTransferDataInput
	prorationBehavior: StripePostSubscriptionsProrationBehavior
	promotionCode: String
	pendingInvoiceItemInterval: StripeStringOrPostSubscriptionsPendingInvoiceItemIntervalUnionInput
	paymentSettings: StripePostSubscriptionsPaymentSettingsInput
	paymentBehavior: StripePostSubscriptionsPaymentBehavior
	offSession: Boolean
	items: [StripePostSubscriptionsItemsInput!]
	expand: [String!]
	description: String
	defaultSource: String
	defaultPaymentMethod: String
	daysUntilDue: Int
	customer: String!
	currency: String
	coupon: String
	collectionMethod: StripePostSubscriptionsCollectionMethod
	cancelAtPeriodEnd: Boolean
	cancelAt: Int
	billingThresholds: StripeStringOrPostSubscriptionsBillingThresholdsUnionInput
	billingCycleAnchor: Int
	backdateStartDate: Int
	automaticTax: StripePostSubscriptionsAutomaticTaxInput
	applicationFeePercent: Float
	addInvoiceItems: [StripePostSubscriptionsAddInvoiceItemsInput!]
}
enum StripePostSubscriptionsIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripePostSubscriptionsIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostSubscriptionsItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionsPriceDataItemsInput
	price: String
	metadata: JSON
	billingThresholds: StripeStringOrPostSubscriptionsBillingThresholdsItemsUnionInput
}
input StripePostSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: StripePostSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings
}
input StripePostSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String
	amountType: StripePostSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings
	amount: Int
}
enum StripePostSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum StripePostSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum StripePostSubscriptionsPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input StripePostSubscriptionsPaymentMethodOptionsPaymentSettingsInput {
	konbini: JSON
	usBankAccount: StripeStringOrPostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput
	customerBalance: StripeStringOrPostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput
	card: StripeStringOrPostSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput
	bancontact: StripeStringOrPostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput
	acssDebit: StripeStringOrPostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput
}
input StripePostSubscriptionsPaymentSettingsInput {
	paymentMethodTypes: JSON
	saveDefaultPaymentMethod: StripePostSubscriptionsSaveDefaultPaymentMethodPaymentSettings
	paymentMethodOptions: StripePostSubscriptionsPaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsPendingInvoiceItemIntervalInput {
	intervalCount: Int
	interval: StripePostSubscriptionsIntervalPendingInvoiceItemInterval!
}
enum StripePostSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripePostSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input StripePostSubscriptionsPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionsTaxBehaviorPriceDataAddInvoiceItems
	product: String!
	currency: String!
}
input StripePostSubscriptionsPriceDataItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionsTaxBehaviorPriceDataItems
	recurring: StripePostSubscriptionsRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum StripePostSubscriptionsProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostSubscriptionsRecurringPriceDataItemsInput {
	intervalCount: Int
	interval: StripePostSubscriptionsIntervalRecurringPriceDataItems!
}
enum StripePostSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum StripePostSubscriptionsSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
input StripePostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput {
	taxRates: JSON
	quantity: Int
	priceData: StripePostSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput
	price: String
}
enum StripePostSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
	FIXED
	MAXIMUM
}
input StripePostSubscriptionsSubscriptionExposedIdAutomaticTaxInput {
	enabled: Boolean!
}
input StripePostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput {
	preferredLanguage: StripePostSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings
}
input StripePostSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	type: String
	euBankTransfer: StripePostSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
enum StripePostSubscriptionsSubscriptionExposedIdBehaviorPauseCollection {
	KEEP_AS_DRAFT
	MARK_UNCOLLECTIBLE
	VOID
}
enum StripePostSubscriptionsSubscriptionExposedIdBillingCycleAnchor {
	NOW
	UNCHANGED
}
input StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsInput {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
input StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput {
	usageGte: Int!
}
input StripePostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput {
	requestThreeDSecure: StripePostSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings
	network: StripePostSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings
	mandateOptions: StripePostSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostSubscriptionsSubscriptionExposedIdCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
input StripePostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	fundingType: String
	bankTransfer: StripePostSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput {
	missingPaymentMethod: StripePostSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings!
}
input StripePostSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput {
	country: String!
}
input StripePostSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	permissions: [StripePostSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings!]
}
input StripePostSubscriptionsSubscriptionExposedIdInput {
	trialEnd: JSON
	onBehalfOf: JSON
	metadata: JSON
	defaultTaxRates: JSON
	cancelAt: JSON
	trialSettings: StripePostSubscriptionsSubscriptionExposedIdTrialSettingsInput
	trialFromPlan: Boolean
	transferData: StripeStringOrPostSubscriptionsSubscriptionExposedIdTransferDataUnionInput
	prorationDate: Int
	prorationBehavior: StripePostSubscriptionsSubscriptionExposedIdProrationBehavior
	promotionCode: String
	pendingInvoiceItemInterval: StripeStringOrPostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput
	paymentSettings: StripePostSubscriptionsSubscriptionExposedIdPaymentSettingsInput
	paymentBehavior: StripePostSubscriptionsSubscriptionExposedIdPaymentBehavior
	pauseCollection: StripeStringOrPostSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput
	offSession: Boolean
	items: [StripePostSubscriptionsSubscriptionExposedIdItemsInput!]
	expand: [String!]
	description: String
	defaultSource: String
	defaultPaymentMethod: String
	daysUntilDue: Int
	coupon: String
	collectionMethod: StripePostSubscriptionsSubscriptionExposedIdCollectionMethod
	cancelAtPeriodEnd: Boolean
	billingThresholds: StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput
	billingCycleAnchor: StripePostSubscriptionsSubscriptionExposedIdBillingCycleAnchor
	automaticTax: StripePostSubscriptionsSubscriptionExposedIdAutomaticTaxInput
	applicationFeePercent: Float
	addInvoiceItems: [StripePostSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput!]
}
enum StripePostSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripePostSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems {
	DAY
	MONTH
	WEEK
	YEAR
}
input StripePostSubscriptionsSubscriptionExposedIdItemsInput {
	taxRates: JSON
	metadata: JSON
	quantity: Int
	priceData: StripePostSubscriptionsSubscriptionExposedIdPriceDataItemsInput
	price: String
	id: String
	deleted: Boolean
	clearUsage: Boolean
	billingThresholds: StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput
}
input StripePostSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput {
	transactionType: StripePostSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings
}
input StripePostSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput {
	description: String
	amountType: StripePostSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings
	amount: Int
}
enum StripePostSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
enum StripePostSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
input StripePostSubscriptionsSubscriptionExposedIdPauseCollectionInput {
	resumesAt: Int
	behavior: StripePostSubscriptionsSubscriptionExposedIdBehaviorPauseCollection!
}
enum StripePostSubscriptionsSubscriptionExposedIdPaymentBehavior {
	ALLOW_INCOMPLETE
	DEFAULT_INCOMPLETE
	ERROR_IF_INCOMPLETE
	PENDING_IF_INCOMPLETE
}
input StripePostSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput {
	konbini: JSON
	usBankAccount: StripeStringOrPostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput
	customerBalance: StripeStringOrPostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput
	card: StripeStringOrPostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput
	bancontact: StripeStringOrPostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput
	acssDebit: StripeStringOrPostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput
}
input StripePostSubscriptionsSubscriptionExposedIdPaymentSettingsInput {
	paymentMethodTypes: JSON
	saveDefaultPaymentMethod: StripePostSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings
	paymentMethodOptions: StripePostSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput
}
input StripePostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput {
	intervalCount: Int
	interval: StripePostSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval!
}
enum StripePostSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
	BALANCES
	OWNERSHIP
	PAYMENT_METHOD
	TRANSACTIONS
}
enum StripePostSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
	DE
	EN
	FR
	NL
}
input StripePostSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems
	product: String!
	currency: String!
}
input StripePostSubscriptionsSubscriptionExposedIdPriceDataItemsInput {
	unitAmountDecimal: String
	unitAmount: Int
	taxBehavior: StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems
	recurring: StripePostSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput!
	product: String!
	currency: String!
}
enum StripePostSubscriptionsSubscriptionExposedIdProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
input StripePostSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput {
	intervalCount: Int
	interval: StripePostSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems!
}
enum StripePostSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
	ANY
	AUTOMATIC
}
enum StripePostSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings {
	OFF
	ON_SUBSCRIPTION
}
enum StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input StripePostSubscriptionsSubscriptionExposedIdTransferDataInput {
	destination: String!
	amountPercent: Float
}
input StripePostSubscriptionsSubscriptionExposedIdTrialSettingsInput {
	endBehavior: StripePostSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput!
}
input StripePostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings
	financialConnections: StripePostSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSubscriptionsSubscriptionResumeBillingCycleAnchor {
	NOW
	UNCHANGED
}
input StripePostSubscriptionsSubscriptionResumeInput {
	prorationDate: Int
	prorationBehavior: StripePostSubscriptionsSubscriptionResumeProrationBehavior
	expand: [String!]
	billingCycleAnchor: StripePostSubscriptionsSubscriptionResumeBillingCycleAnchor
}
enum StripePostSubscriptionsSubscriptionResumeProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripePostSubscriptionsTaxBehaviorPriceDataAddInvoiceItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionsTaxBehaviorPriceDataItems {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripePostSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
	BUSINESS
	PERSONAL
}
input StripePostSubscriptionsTransferDataInput {
	destination: String!
	amountPercent: Float
}
input StripePostSubscriptionsTrialSettingsInput {
	endBehavior: StripePostSubscriptionsEndBehaviorTrialSettingsInput!
}
input StripePostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput {
	verificationMethod: StripePostSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings
	financialConnections: StripePostSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
enum StripePostSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripePostSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
input StripePostTaxRatesInput {
	taxType: StripePostTaxRatesTaxType
	state: String
	percentage: Float!
	metadata: JSON
	jurisdiction: String
	inclusive: Boolean!
	expand: [String!]
	displayName: String!
	description: String
	country: String
	active: Boolean
}
input StripePostTaxRatesTaxRateInput {
	metadata: JSON
	taxType: StripePostTaxRatesTaxRateTaxType
	state: String
	jurisdiction: String
	expand: [String!]
	displayName: String
	description: String
	country: String
	active: Boolean
}
enum StripePostTaxRatesTaxRateTaxType {
	GST
	HST
	JCT
	PST
	QST
	RST
	SALES_TAX
	VAT
}
enum StripePostTaxRatesTaxType {
	GST
	HST
	JCT
	PST
	QST
	RST
	SALES_TAX
	VAT
}
input StripePostTerminalConfigurationsAudTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsBbposWiseposEInput {
	splashscreen: JSON
}
input StripePostTerminalConfigurationsCadTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsChfTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationAudTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationBbposWiseposEInput {
	splashscreen: JSON
}
input StripePostTerminalConfigurationsConfigurationCadTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationChfTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationCzkTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationDkkTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationEurTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationGbpTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationHkdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationInput {
	verifoneP400: StripeStringOrPostTerminalConfigurationsConfigurationVerifoneP400UnionInput
	tipping: StripeStringOrPostTerminalConfigurationsConfigurationTippingUnionInput
	expand: [String!]
	bbposWiseposE: StripeStringOrPostTerminalConfigurationsConfigurationBbposWiseposEUnionInput
}
input StripePostTerminalConfigurationsConfigurationMyrTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationNokTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationNzdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationSekTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationSgdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationTippingInput {
	usd: StripePostTerminalConfigurationsConfigurationUsdTippingInput
	sgd: StripePostTerminalConfigurationsConfigurationSgdTippingInput
	sek: StripePostTerminalConfigurationsConfigurationSekTippingInput
	nzd: StripePostTerminalConfigurationsConfigurationNzdTippingInput
	nok: StripePostTerminalConfigurationsConfigurationNokTippingInput
	myr: StripePostTerminalConfigurationsConfigurationMyrTippingInput
	hkd: StripePostTerminalConfigurationsConfigurationHkdTippingInput
	gbp: StripePostTerminalConfigurationsConfigurationGbpTippingInput
	eur: StripePostTerminalConfigurationsConfigurationEurTippingInput
	dkk: StripePostTerminalConfigurationsConfigurationDkkTippingInput
	czk: StripePostTerminalConfigurationsConfigurationCzkTippingInput
	chf: StripePostTerminalConfigurationsConfigurationChfTippingInput
	cad: StripePostTerminalConfigurationsConfigurationCadTippingInput
	aud: StripePostTerminalConfigurationsConfigurationAudTippingInput
}
input StripePostTerminalConfigurationsConfigurationUsdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsConfigurationVerifoneP400Input {
	splashscreen: JSON
}
input StripePostTerminalConfigurationsCzkTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsDkkTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsEurTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsGbpTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsHkdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsInput {
	verifoneP400: StripePostTerminalConfigurationsVerifoneP400Input
	tipping: StripeStringOrPostTerminalConfigurationsTippingUnionInput
	expand: [String!]
	bbposWiseposE: StripePostTerminalConfigurationsBbposWiseposEInput
}
input StripePostTerminalConfigurationsMyrTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsNokTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsNzdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsSekTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsSgdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsTippingInput {
	usd: StripePostTerminalConfigurationsUsdTippingInput
	sgd: StripePostTerminalConfigurationsSgdTippingInput
	sek: StripePostTerminalConfigurationsSekTippingInput
	nzd: StripePostTerminalConfigurationsNzdTippingInput
	nok: StripePostTerminalConfigurationsNokTippingInput
	myr: StripePostTerminalConfigurationsMyrTippingInput
	hkd: StripePostTerminalConfigurationsHkdTippingInput
	gbp: StripePostTerminalConfigurationsGbpTippingInput
	eur: StripePostTerminalConfigurationsEurTippingInput
	dkk: StripePostTerminalConfigurationsDkkTippingInput
	czk: StripePostTerminalConfigurationsCzkTippingInput
	chf: StripePostTerminalConfigurationsChfTippingInput
	cad: StripePostTerminalConfigurationsCadTippingInput
	aud: StripePostTerminalConfigurationsAudTippingInput
}
input StripePostTerminalConfigurationsUsdTippingInput {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
input StripePostTerminalConfigurationsVerifoneP400Input {
	splashscreen: JSON
}
input StripePostTerminalConnectionTokensInput {
	location: String
	expand: [String!]
}
input StripePostTerminalLocationsAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String!
	city: String
}
input StripePostTerminalLocationsInput {
	metadata: JSON
	expand: [String!]
	displayName: String!
	configurationOverrides: String
	address: StripePostTerminalLocationsAddressInput!
}
input StripePostTerminalLocationsLocationAddressInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTerminalLocationsLocationInput {
	metadata: JSON
	expand: [String!]
	displayName: String
	configurationOverrides: String
	address: StripePostTerminalLocationsLocationAddressInput
}
input StripePostTerminalReadersInput {
	metadata: JSON
	registrationCode: String!
	location: String
	label: String
	expand: [String!]
}
input StripePostTerminalReadersReaderCancelActionInput {
	expand: [String!]
}
input StripePostTerminalReadersReaderInput {
	metadata: JSON
	label: String
	expand: [String!]
}
input StripePostTerminalReadersReaderProcessPaymentIntentInput {
	processConfig: StripePostTerminalReadersReaderProcessPaymentIntentProcessConfigInput
	paymentIntent: String!
	expand: [String!]
}
input StripePostTerminalReadersReaderProcessPaymentIntentProcessConfigInput {
	tipping: StripePostTerminalReadersReaderProcessPaymentIntentTippingProcessConfigInput
	skipTipping: Boolean
}
input StripePostTerminalReadersReaderProcessPaymentIntentTippingProcessConfigInput {
	amountEligible: Int
}
input StripePostTerminalReadersReaderProcessSetupIntentInput {
	setupIntent: String!
	expand: [String!]
	customerConsentCollected: Boolean!
}
input StripePostTerminalReadersReaderSetReaderDisplayCartInput {
	total: Int!
	tax: Int
	lineItems: [StripePostTerminalReadersReaderSetReaderDisplayLineItemsCartInput!]!
	currency: String!
}
input StripePostTerminalReadersReaderSetReaderDisplayInput {
	type: StripePostTerminalReadersReaderSetReaderDisplayType!
	expand: [String!]
	cart: StripePostTerminalReadersReaderSetReaderDisplayCartInput
}
input StripePostTerminalReadersReaderSetReaderDisplayLineItemsCartInput {
	quantity: Int!
	description: String!
	amount: Int!
}
enum StripePostTerminalReadersReaderSetReaderDisplayType {
	CART
}
input StripePostTestHelpersCustomersCustomerFundCashBalanceInput {
	reference: String
	expand: [String!]
	currency: String!
	amount: Int!
}
input StripePostTestHelpersIssuingCardsCardShippingDeliverInput {
	expand: [String!]
}
input StripePostTestHelpersIssuingCardsCardShippingFailInput {
	expand: [String!]
}
input StripePostTestHelpersIssuingCardsCardShippingReturnInput {
	expand: [String!]
}
input StripePostTestHelpersIssuingCardsCardShippingShipInput {
	expand: [String!]
}
input StripePostTestHelpersRefundsRefundExpireInput {
	expand: [String!]
}
input StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodCardPresentInput {
	number: String
}
input StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodInput {
	type: StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodType
	expand: [String!]
	cardPresent: StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodCardPresentInput
}
enum StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodType {
	CARD_PRESENT
}
input StripePostTestHelpersTestClocksInput {
	name: String
	frozenTime: Int!
	expand: [String!]
}
input StripePostTestHelpersTestClocksTestClockAdvanceInput {
	frozenTime: Int!
	expand: [String!]
}
enum StripePostTestHelpersTreasuryInboundTransfersIdFailCodeFailureDetails {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DEBIT_NOT_AUTHORIZED
	INCORRECT_ACCOUNT_HOLDER_ADDRESS
	INCORRECT_ACCOUNT_HOLDER_NAME
	INCORRECT_ACCOUNT_HOLDER_TAX_ID
	INSUFFICIENT_FUNDS
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
input StripePostTestHelpersTreasuryInboundTransfersIdFailFailureDetailsInput {
	code: StripePostTestHelpersTreasuryInboundTransfersIdFailCodeFailureDetails
}
input StripePostTestHelpersTreasuryInboundTransfersIdFailInput {
	failureDetails: StripePostTestHelpersTreasuryInboundTransfersIdFailFailureDetailsInput
	expand: [String!]
}
input StripePostTestHelpersTreasuryInboundTransfersIdReturnInput {
	expand: [String!]
}
input StripePostTestHelpersTreasuryInboundTransfersIdSucceedInput {
	expand: [String!]
}
input StripePostTestHelpersTreasuryOutboundPaymentsIdFailInput {
	expand: [String!]
}
input StripePostTestHelpersTreasuryOutboundPaymentsIdPostInput {
	expand: [String!]
}
enum StripePostTestHelpersTreasuryOutboundPaymentsIdReturnCodeReturnedDetails {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
input StripePostTestHelpersTreasuryOutboundPaymentsIdReturnInput {
	returnedDetails: StripePostTestHelpersTreasuryOutboundPaymentsIdReturnReturnedDetailsInput
	expand: [String!]
}
input StripePostTestHelpersTreasuryOutboundPaymentsIdReturnReturnedDetailsInput {
	code: StripePostTestHelpersTreasuryOutboundPaymentsIdReturnCodeReturnedDetails
}
input StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferFailInput {
	expand: [String!]
}
input StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferPostInput {
	expand: [String!]
}
enum StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnCodeReturnedDetails {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
input StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnInput {
	returnedDetails: StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnReturnedDetailsInput
	expand: [String!]
}
input StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnReturnedDetailsInput {
	code: StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnCodeReturnedDetails
}
input StripePostTestHelpersTreasuryReceivedCreditsInitiatingPaymentMethodDetailsInput {
	usBankAccount: StripePostTestHelpersTreasuryReceivedCreditsUsBankAccountInitiatingPaymentMethodDetailsInput
	type: StripePostTestHelpersTreasuryReceivedCreditsTypeInitiatingPaymentMethodDetails!
}
input StripePostTestHelpersTreasuryReceivedCreditsInput {
	network: StripePostTestHelpersTreasuryReceivedCreditsNetwork!
	initiatingPaymentMethodDetails: StripePostTestHelpersTreasuryReceivedCreditsInitiatingPaymentMethodDetailsInput
	financialAccount: String!
	expand: [String!]
	description: String
	currency: String!
	amount: Int!
}
enum StripePostTestHelpersTreasuryReceivedCreditsNetwork {
	ACH
	US_DOMESTIC_WIRE
}
enum StripePostTestHelpersTreasuryReceivedCreditsTypeInitiatingPaymentMethodDetails {
	US_BANK_ACCOUNT
}
input StripePostTestHelpersTreasuryReceivedCreditsUsBankAccountInitiatingPaymentMethodDetailsInput {
	routingNumber: String
	accountNumber: String
	accountHolderName: String
}
input StripePostTestHelpersTreasuryReceivedDebitsInitiatingPaymentMethodDetailsInput {
	usBankAccount: StripePostTestHelpersTreasuryReceivedDebitsUsBankAccountInitiatingPaymentMethodDetailsInput
	type: StripePostTestHelpersTreasuryReceivedDebitsTypeInitiatingPaymentMethodDetails!
}
input StripePostTestHelpersTreasuryReceivedDebitsInput {
	network: StripePostTestHelpersTreasuryReceivedDebitsNetwork!
	initiatingPaymentMethodDetails: StripePostTestHelpersTreasuryReceivedDebitsInitiatingPaymentMethodDetailsInput
	financialAccount: String!
	expand: [String!]
	description: String
	currency: String!
	amount: Int!
}
enum StripePostTestHelpersTreasuryReceivedDebitsNetwork {
	ACH
}
enum StripePostTestHelpersTreasuryReceivedDebitsTypeInitiatingPaymentMethodDetails {
	US_BANK_ACCOUNT
}
input StripePostTestHelpersTreasuryReceivedDebitsUsBankAccountInitiatingPaymentMethodDetailsInput {
	routingNumber: String
	accountNumber: String
	accountHolderName: String
}
enum StripePostTokensAccountHolderTypeBankAccount {
	COMPANY
	INDIVIDUAL
}
input StripePostTokensAccountInput {
	tosShownAndAccepted: Boolean
	individual: StripePostTokensIndividualAccountInput
	company: StripePostTokensCompanyAccountInput
	businessType: StripePostTokensBusinessTypeAccount
}
enum StripePostTokensAccountTypeBankAccount {
	CHECKING
	FUTSU
	SAVINGS
	TOZA
}
input StripePostTokensAdditionalDocumentVerificationIndividualAccountInput {
	front: String
	back: String
}
input StripePostTokensAdditionalDocumentVerificationPersonInput {
	front: String
	back: String
}
input StripePostTokensAddressCompanyAccountInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressIndividualAccountInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressKanaCompanyAccountInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressKanaIndividualAccountInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressKanaPersonInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressKanjiCompanyAccountInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressKanjiIndividualAccountInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressKanjiPersonInput {
	town: String
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensAddressPersonInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensBankAccountInput {
	routingNumber: String
	currency: String
	country: String!
	accountType: StripePostTokensAccountTypeBankAccount
	accountNumber: String!
	accountHolderType: StripePostTokensAccountHolderTypeBankAccount
	accountHolderName: String
}
enum StripePostTokensBusinessTypeAccount {
	COMPANY
	GOVERNMENT_ENTITY
	INDIVIDUAL
	NON_PROFIT
}
input StripePostTokensCardInput {
	number: String!
	name: String
	expYear: String!
	expMonth: String!
	cvc: String
	currency: String
	addressZip: String
	addressState: String
	addressLine2: String
	addressLine1: String
	addressCountry: String
	addressCity: String
}
input StripePostTokensCompanyAccountInput {
	verification: StripePostTokensVerificationCompanyAccountInput
	vatId: String
	taxIdRegistrar: String
	taxId: String
	structure: String
	registrationNumber: String
	phone: String
	ownershipDeclarationShownAndSigned: Boolean
	ownershipDeclaration: StripePostTokensOwnershipDeclarationCompanyAccountInput
	ownersProvided: Boolean
	nameKanji: String
	nameKana: String
	name: String
	executivesProvided: Boolean
	directorsProvided: Boolean
	addressKanji: StripePostTokensAddressKanjiCompanyAccountInput
	addressKana: StripePostTokensAddressKanaCompanyAccountInput
	address: StripePostTokensAddressCompanyAccountInput
}
input StripePostTokensCompanyAuthorizationDocumentsPersonInput {
	files: [String!]
}
input StripePostTokensCvcUpdateInput {
	cvc: String!
}
input StripePostTokensDobIndividualAccountInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostTokensDobPersonInput {
	year: Int!
	month: Int!
	day: Int!
}
input StripePostTokensDocumentVerificationCompanyAccountInput {
	front: String
	back: String
}
input StripePostTokensDocumentVerificationIndividualAccountInput {
	front: String
	back: String
}
input StripePostTokensDocumentVerificationPersonInput {
	front: String
	back: String
}
input StripePostTokensDocumentsPersonInput {
	visa: StripePostTokensVisaDocumentsPersonInput
	passport: StripePostTokensPassportDocumentsPersonInput
	companyAuthorization: StripePostTokensCompanyAuthorizationDocumentsPersonInput
}
input StripePostTokensIndividualAccountInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostTokensVerificationIndividualAccountInput
	ssnLast4: String
	registeredAddress: StripePostTokensRegisteredAddressIndividualAccountInput
	politicalExposure: StripePostTokensPoliticalExposureIndividualAccount
	phone: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	dob: StripeStringOrPostTokensDobIndividualAccountUnionInput
	addressKanji: StripePostTokensAddressKanjiIndividualAccountInput
	addressKana: StripePostTokensAddressKanaIndividualAccountInput
	address: StripePostTokensAddressIndividualAccountInput
}
input StripePostTokensInput {
	pii: StripePostTokensPiiInput
	person: StripePostTokensPersonInput
	expand: [String!]
	cvcUpdate: StripePostTokensCvcUpdateInput
	customer: String
	card: StripeStringOrPostTokensCardUnionInput
	bankAccount: StripePostTokensBankAccountInput
	account: StripePostTokensAccountInput
}
input StripePostTokensOwnershipDeclarationCompanyAccountInput {
	userAgent: String
	ip: String
	date: Int
}
input StripePostTokensPassportDocumentsPersonInput {
	files: [String!]
}
input StripePostTokensPersonInput {
	metadata: JSON
	fullNameAliases: JSON
	verification: StripePostTokensVerificationPersonInput
	ssnLast4: String
	relationship: StripePostTokensRelationshipPersonInput
	registeredAddress: StripePostTokensRegisteredAddressPersonInput
	politicalExposure: String
	phone: String
	nationality: String
	maidenName: String
	lastNameKanji: String
	lastNameKana: String
	lastName: String
	idNumberSecondary: String
	idNumber: String
	gender: String
	firstNameKanji: String
	firstNameKana: String
	firstName: String
	email: String
	documents: StripePostTokensDocumentsPersonInput
	dob: StripeStringOrPostTokensDobPersonUnionInput
	addressKanji: StripePostTokensAddressKanjiPersonInput
	addressKana: StripePostTokensAddressKanaPersonInput
	address: StripePostTokensAddressPersonInput
}
input StripePostTokensPiiInput {
	idNumber: String
}
enum StripePostTokensPoliticalExposureIndividualAccount {
	EXISTING
	NONE
}
input StripePostTokensRegisteredAddressIndividualAccountInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensRegisteredAddressPersonInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTokensRelationshipPersonInput {
	percentOwnership: JSON
	title: String
	representative: Boolean
	owner: Boolean
	executive: Boolean
	director: Boolean
}
input StripePostTokensVerificationCompanyAccountInput {
	document: StripePostTokensDocumentVerificationCompanyAccountInput
}
input StripePostTokensVerificationIndividualAccountInput {
	document: StripePostTokensDocumentVerificationIndividualAccountInput
	additionalDocument: StripePostTokensAdditionalDocumentVerificationIndividualAccountInput
}
input StripePostTokensVerificationPersonInput {
	document: StripePostTokensDocumentVerificationPersonInput
	additionalDocument: StripePostTokensAdditionalDocumentVerificationPersonInput
}
input StripePostTokensVisaDocumentsPersonInput {
	files: [String!]
}
input StripePostTopupsInput {
	metadata: JSON
	transferGroup: String
	statementDescriptor: String
	source: String
	expand: [String!]
	description: String
	currency: String!
	amount: Int!
}
input StripePostTopupsTopupCancelInput {
	expand: [String!]
}
input StripePostTopupsTopupInput {
	metadata: JSON
	expand: [String!]
	description: String
}
input StripePostTransfersIdReversalsInput {
	metadata: JSON
	refundApplicationFee: Boolean
	expand: [String!]
	description: String
	amount: Int
}
input StripePostTransfersInput {
	transferGroup: String
	sourceType: StripePostTransfersSourceType
	sourceTransaction: String
	metadata: JSON
	expand: [String!]
	destination: String!
	description: String
	currency: String!
	amount: Int
}
enum StripePostTransfersSourceType {
	BANK_ACCOUNT
	CARD
	FPX
}
input StripePostTransfersTransferInput {
	metadata: JSON
	expand: [String!]
	description: String
}
input StripePostTransfersTransferReversalsIdInput {
	metadata: JSON
	expand: [String!]
}
input StripePostTreasuryCreditReversalsInput {
	receivedCredit: String!
	metadata: JSON
	expand: [String!]
}
input StripePostTreasuryDebitReversalsInput {
	receivedDebit: String!
	metadata: JSON
	expand: [String!]
}
input StripePostTreasuryFinancialAccountsAbaFinancialAddressesFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsAchInboundTransfersFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsAchOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsAchOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsCardIssuingFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsDepositInsuranceFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFeaturesInput {
	outboundTransfers: StripePostTreasuryFinancialAccountsOutboundTransfersFeaturesInput
	outboundPayments: StripePostTreasuryFinancialAccountsOutboundPaymentsFeaturesInput
	intraStripeFlows: StripePostTreasuryFinancialAccountsIntraStripeFlowsFeaturesInput
	inboundTransfers: StripePostTreasuryFinancialAccountsInboundTransfersFeaturesInput
	financialAddresses: StripePostTreasuryFinancialAccountsFinancialAddressesFeaturesInput
	depositInsurance: StripePostTreasuryFinancialAccountsDepositInsuranceFeaturesInput
	cardIssuing: StripePostTreasuryFinancialAccountsCardIssuingFeaturesInput
}
input StripePostTreasuryFinancialAccountsFinancialAccountAbaFinancialAddressesFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountAchInboundTransfersFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountCardIssuingFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountDepositInsuranceFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountFeaturesInput {
	outboundTransfers: StripePostTreasuryFinancialAccountsFinancialAccountOutboundTransfersFeaturesInput
	outboundPayments: StripePostTreasuryFinancialAccountsFinancialAccountOutboundPaymentsFeaturesInput
	intraStripeFlows: StripePostTreasuryFinancialAccountsFinancialAccountIntraStripeFlowsFeaturesInput
	inboundTransfers: StripePostTreasuryFinancialAccountsFinancialAccountInboundTransfersFeaturesInput
	financialAddresses: StripePostTreasuryFinancialAccountsFinancialAccountFinancialAddressesFeaturesInput
	depositInsurance: StripePostTreasuryFinancialAccountsFinancialAccountDepositInsuranceFeaturesInput
	cardIssuing: StripePostTreasuryFinancialAccountsFinancialAccountCardIssuingFeaturesInput
}
input StripePostTreasuryFinancialAccountsFinancialAccountFinancialAddressesFeaturesInput {
	aba: StripePostTreasuryFinancialAccountsFinancialAccountAbaFinancialAddressesFeaturesInput
}
enum StripePostTreasuryFinancialAccountsFinancialAccountInboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input StripePostTreasuryFinancialAccountsFinancialAccountInboundTransfersFeaturesInput {
	ach: StripePostTreasuryFinancialAccountsFinancialAccountAchInboundTransfersFeaturesInput
}
input StripePostTreasuryFinancialAccountsFinancialAccountInput {
	platformRestrictions: StripePostTreasuryFinancialAccountsFinancialAccountPlatformRestrictionsInput
	metadata: JSON
	features: StripePostTreasuryFinancialAccountsFinancialAccountFeaturesInput
	expand: [String!]
}
input StripePostTreasuryFinancialAccountsFinancialAccountIntraStripeFlowsFeaturesInput {
	requested: Boolean!
}
enum StripePostTreasuryFinancialAccountsFinancialAccountOutboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input StripePostTreasuryFinancialAccountsFinancialAccountOutboundPaymentsFeaturesInput {
	usDomesticWire: StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundPaymentsFeaturesInput
	ach: StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundPaymentsFeaturesInput
}
input StripePostTreasuryFinancialAccountsFinancialAccountOutboundTransfersFeaturesInput {
	usDomesticWire: StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundTransfersFeaturesInput
	ach: StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundTransfersFeaturesInput
}
input StripePostTreasuryFinancialAccountsFinancialAccountPlatformRestrictionsInput {
	outboundFlows: StripePostTreasuryFinancialAccountsFinancialAccountOutboundFlowsPlatformRestrictions
	inboundFlows: StripePostTreasuryFinancialAccountsFinancialAccountInboundFlowsPlatformRestrictions
}
input StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsFinancialAddressesFeaturesInput {
	aba: StripePostTreasuryFinancialAccountsAbaFinancialAddressesFeaturesInput
}
enum StripePostTreasuryFinancialAccountsInboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input StripePostTreasuryFinancialAccountsInboundTransfersFeaturesInput {
	ach: StripePostTreasuryFinancialAccountsAchInboundTransfersFeaturesInput
}
input StripePostTreasuryFinancialAccountsInput {
	supportedCurrencies: [String!]!
	platformRestrictions: StripePostTreasuryFinancialAccountsPlatformRestrictionsInput
	metadata: JSON
	features: StripePostTreasuryFinancialAccountsFeaturesInput
	expand: [String!]
}
input StripePostTreasuryFinancialAccountsIntraStripeFlowsFeaturesInput {
	requested: Boolean!
}
enum StripePostTreasuryFinancialAccountsOutboundFlowsPlatformRestrictions {
	RESTRICTED
	UNRESTRICTED
}
input StripePostTreasuryFinancialAccountsOutboundPaymentsFeaturesInput {
	usDomesticWire: StripePostTreasuryFinancialAccountsUsDomesticWireOutboundPaymentsFeaturesInput
	ach: StripePostTreasuryFinancialAccountsAchOutboundPaymentsFeaturesInput
}
input StripePostTreasuryFinancialAccountsOutboundTransfersFeaturesInput {
	usDomesticWire: StripePostTreasuryFinancialAccountsUsDomesticWireOutboundTransfersFeaturesInput
	ach: StripePostTreasuryFinancialAccountsAchOutboundTransfersFeaturesInput
}
input StripePostTreasuryFinancialAccountsPlatformRestrictionsInput {
	outboundFlows: StripePostTreasuryFinancialAccountsOutboundFlowsPlatformRestrictions
	inboundFlows: StripePostTreasuryFinancialAccountsInboundFlowsPlatformRestrictions
}
input StripePostTreasuryFinancialAccountsUsDomesticWireOutboundPaymentsFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryFinancialAccountsUsDomesticWireOutboundTransfersFeaturesInput {
	requested: Boolean!
}
input StripePostTreasuryInboundTransfersInboundTransferCancelInput {
	expand: [String!]
}
input StripePostTreasuryInboundTransfersInput {
	statementDescriptor: String
	originPaymentMethod: String!
	metadata: JSON
	financialAccount: String!
	expand: [String!]
	description: String
	currency: String!
	amount: Int!
}
enum StripePostTreasuryOutboundPaymentsAccountHolderTypeUsBankAccountDestinationPaymentMethodData {
	COMPANY
	INDIVIDUAL
}
enum StripePostTreasuryOutboundPaymentsAccountTypeUsBankAccountDestinationPaymentMethodData {
	CHECKING
	SAVINGS
}
input StripePostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput {
	state: String
	postalCode: String
	line2: String
	line1: String
	country: String
	city: String
}
input StripePostTreasuryOutboundPaymentsBillingDetailsDestinationPaymentMethodDataInput {
	email: JSON
	phone: String
	name: String
	address: StripeStringOrPostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataUnionInput
}
input StripePostTreasuryOutboundPaymentsDestinationPaymentMethodDataInput {
	usBankAccount: StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodDataInput
	type: StripePostTreasuryOutboundPaymentsTypeDestinationPaymentMethodData!
	metadata: JSON
	financialAccount: String
	billingDetails: StripePostTreasuryOutboundPaymentsBillingDetailsDestinationPaymentMethodDataInput
}
input StripePostTreasuryOutboundPaymentsDestinationPaymentMethodOptionsInput {
	usBankAccount: StripeStringOrPostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsUnionInput
}
input StripePostTreasuryOutboundPaymentsEndUserDetailsInput {
	present: Boolean!
	ipAddress: String
}
input StripePostTreasuryOutboundPaymentsIdCancelInput {
	expand: [String!]
}
input StripePostTreasuryOutboundPaymentsInput {
	statementDescriptor: String
	metadata: JSON
	financialAccount: String!
	expand: [String!]
	endUserDetails: StripePostTreasuryOutboundPaymentsEndUserDetailsInput
	destinationPaymentMethodOptions: StripePostTreasuryOutboundPaymentsDestinationPaymentMethodOptionsInput
	destinationPaymentMethodData: StripePostTreasuryOutboundPaymentsDestinationPaymentMethodDataInput
	destinationPaymentMethod: String
	description: String
	customer: String
	currency: String!
	amount: Int!
}
enum StripePostTreasuryOutboundPaymentsNetworkUsBankAccountDestinationPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
enum StripePostTreasuryOutboundPaymentsTypeDestinationPaymentMethodData {
	FINANCIAL_ACCOUNT
	US_BANK_ACCOUNT
}
input StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodDataInput {
	routingNumber: String
	financialConnectionsAccount: String
	accountType: StripePostTreasuryOutboundPaymentsAccountTypeUsBankAccountDestinationPaymentMethodData
	accountNumber: String
	accountHolderType: StripePostTreasuryOutboundPaymentsAccountHolderTypeUsBankAccountDestinationPaymentMethodData
}
input StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput {
	network: StripePostTreasuryOutboundPaymentsNetworkUsBankAccountDestinationPaymentMethodOptions
}
input StripePostTreasuryOutboundTransfersDestinationPaymentMethodOptionsInput {
	usBankAccount: StripeStringOrPostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsUnionInput
}
input StripePostTreasuryOutboundTransfersInput {
	statementDescriptor: String
	metadata: JSON
	financialAccount: String!
	expand: [String!]
	destinationPaymentMethodOptions: StripePostTreasuryOutboundTransfersDestinationPaymentMethodOptionsInput
	destinationPaymentMethod: String
	description: String
	currency: String!
	amount: Int!
}
enum StripePostTreasuryOutboundTransfersNetworkUsBankAccountDestinationPaymentMethodOptions {
	ACH
	US_DOMESTIC_WIRE
}
input StripePostTreasuryOutboundTransfersOutboundTransferCancelInput {
	expand: [String!]
}
input StripePostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput {
	network: StripePostTreasuryOutboundTransfersNetworkUsBankAccountDestinationPaymentMethodOptions
}
input StripePostWebhookEndpointsInput {
	metadata: JSON
	url: String!
	expand: [String!]
	enabledEvents: [String!]!
	description: String
	connect: Boolean
	apiVersion: String
}
input StripePostWebhookEndpointsWebhookEndpointInput {
	metadata: JSON
	url: String
	expand: [String!]
	enabledEvents: [String!]
	disabled: Boolean
	description: String
}
type StripePrice {
	unitAmountDecimal: String
	unitAmount: Int
	type: StripePriceType!
	transformQuantity: StripeTransformQuantity
	tiersMode: StripePriceTiersMode
	tiers: [StripePriceTier!]
	taxBehavior: StripePriceTaxBehavior
	recurring: StripeRecurring
	product: StripeStringOrDeletedProductOrProductUnion!
	object: StripePriceObject!
	nickname: String
	metadata: JSON!
	lookupKey: String
	livemode: Boolean!
	id: String!
	customUnitAmount: StripeCustomUnitAmount
	currencyOptions: JSON
	currency: String!
	created: Int!
	billingScheme: StripePriceBillingScheme!
	active: Boolean!
}
enum StripePriceBillingScheme {
	PER_UNIT
	TIERED
}
enum StripePriceObject {
	PRICE
}
enum StripePriceTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
type StripePriceTier {
	upTo: Int
	unitAmountDecimal: String
	unitAmount: Int
	flatAmountDecimal: String
	flatAmount: Int
}
enum StripePriceTiersMode {
	GRADUATED
	VOLUME
}
enum StripePriceType {
	ONE_TIME
	RECURRING
}
type StripeProduct {
	url: String
	updated: Int!
	unitLabel: String
	taxCode: StripeStringOrTaxCodeUnion
	statementDescriptor: String
	shippable: Boolean
	packageDimensions: StripePackageDimensions
	object: StripeProductObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	images: [String!]!
	id: String!
	description: String
	defaultPrice: StripeStringOrPriceUnion
	created: Int!
	active: Boolean!
}
enum StripeProductObject {
	PRODUCT
}
type StripePromotionCode {
	timesRedeemed: Int!
	restrictions: StripePromotionCodesResourceRestrictions!
	object: StripePromotionCodeObject!
	metadata: JSON
	maxRedemptions: Int
	livemode: Boolean!
	id: String!
	expiresAt: Int
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	created: Int!
	coupon: StripeCoupon!
	code: String!
	active: Boolean!
}
enum StripePromotionCodeObject {
	PROMOTION_CODE
}
type StripePromotionCodesResourceRestrictions {
	minimumAmountCurrency: String
	minimumAmount: Int
	firstTimeTransaction: Boolean!
	currencyOptions: JSON
}
type StripeQuery {
	account(expand: [String!]): StripeAccount
	accounts(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetAccountsCreatedUnionInput): StripeGetAccounts
	accountsAccount(account: String!, expand: [String!]): StripeAccount
	accountsAccountBankAccountsId(id: String!, account: String!, expand: [String!]): StripeExternalAccount
	capabilities(account: String!, expand: [String!]): StripeGetAccountsAccountCapabilities
	capability(capability: String!, account: String!, expand: [String!]): StripeCapability
	accountsAccountExternalAccounts(account: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetAccountsAccountExternalAccounts
	accountsAccountExternalAccountsId(id: String!, account: String!, expand: [String!]): StripeExternalAccount
	accountsAccountPeople(account: String!, startingAfter: String, relationship: StripeGetAccountsAccountPeopleRelationshipInput, limit: Int, expand: [String!], endingBefore: String): StripeGetAccountsAccountPeople
	accountsAccountPeoplePerson(person: String!, account: String!, expand: [String!]): StripePerson
	accountsAccountPersons(account: String!, startingAfter: String, relationship: StripeGetAccountsAccountPersonsRelationshipInput, limit: Int, expand: [String!], endingBefore: String): StripeGetAccountsAccountPersons
	accountsAccountPersonsPerson(person: String!, account: String!, expand: [String!]): StripePerson
	applePayDomains(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, domainName: String): StripeGetApplePayDomains
	applePayDomain(domain: String!, expand: [String!]): StripeApplePayDomain
	applicationFees(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetApplicationFeesCreatedUnionInput, charge: String): StripeGetApplicationFees
	feeRefund(id: String!, fee: String!, expand: [String!]): StripeFeeRefund
	applicationFee(id: String!, expand: [String!]): StripeApplicationFee
	feeRefunds(id: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetApplicationFeesIdRefunds
	appsSecrets(startingAfter: String, scope: StripeGetAppsSecretsScopeInput!, limit: Int, expand: [String!], endingBefore: String): StripeGetAppsSecrets
	appsSecret(scope: StripeGetAppsSecretsFindScopeInput!, name: String!, expand: [String!]): StripeAppsSecret
	balance(expand: [String!]): StripeBalance
	balanceHistory(type: String, startingAfter: String, source: String, payout: String, limit: Int, expand: [String!], endingBefore: String, currency: String, created: StripeIntOrGetBalanceHistoryCreatedUnionInput): StripeGetBalanceHistory
	balanceHistoryId(id: String!, expand: [String!]): StripeBalanceTransaction
	balanceTransactions(type: String, startingAfter: String, source: String, payout: String, limit: Int, expand: [String!], endingBefore: String, currency: String, created: StripeIntOrGetBalanceTransactionsCreatedUnionInput): StripeGetBalanceTransactions
	balanceTransactionsId(id: String!, expand: [String!]): StripeBalanceTransaction
	billingPortalConfigurations(startingAfter: String, limit: Int, isDefault: Boolean, expand: [String!], endingBefore: String, active: Boolean): StripeGetBillingPortalConfigurations
	billingPortalConfiguration(configuration: String!, expand: [String!]): StripeBillingPortalConfiguration
	charges(transferGroup: String, startingAfter: String, paymentIntent: String, limit: Int, expand: [String!], endingBefore: String, customer: String, created: StripeIntOrGetChargesCreatedUnionInput): StripeGetCharges
	chargesSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetChargesSearch
	charge(charge: String!, expand: [String!]): StripeCharge
	chargesChargeDispute(charge: String!, expand: [String!]): StripeDispute
	chargesChargeRefunds(charge: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetChargesChargeRefunds
	chargesChargeRefundsRefund(refund: String!, charge: String!, expand: [String!]): StripeRefund
	checkoutSessions(subscription: String, startingAfter: String, paymentLink: String, paymentIntent: String, limit: Int, expand: [String!], endingBefore: String, customerDetails: StripeGetCheckoutSessionsCustomerDetailsInput, customer: String): StripeGetCheckoutSessions
	checkoutSession(session: String!, expand: [String!]): StripeCheckoutSession
	checkoutSessionsSessionLineItems(session: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCheckoutSessionsSessionLineItems
	countrySpecs(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCountrySpecs
	countrySpec(country: String!, expand: [String!]): StripeCountrySpec
	coupons(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetCouponsCreatedUnionInput): StripeGetCoupons
	coupon(coupon: String!, expand: [String!]): StripeCoupon
	creditNotes(startingAfter: String, limit: Int, invoice: String, expand: [String!], endingBefore: String, customer: String): StripeGetCreditNotes
	creditNotesPreview(shippingCost: StripeGetCreditNotesPreviewShippingCostInput, refundAmount: Int, refund: String, reason: StripeGetCreditNotesPreviewReason, outOfBandAmount: Int, metadata: JSON, memo: String, lines: [StripeGetCreditNotesPreviewLinesInput!], invoice: String!, expand: [String!], creditAmount: Int, amount: Int): StripeCreditNote
	creditNotesPreviewLines(startingAfter: String, shippingCost: StripeGetCreditNotesPreviewLinesShippingCostInput, refundAmount: Int, refund: String, reason: StripeGetCreditNotesPreviewLinesReason, outOfBandAmount: Int, metadata: JSON, memo: String, lines: [StripeGetCreditNotesPreviewLinesLinesInput!], limit: Int, invoice: String!, expand: [String!], endingBefore: String, creditAmount: Int, amount: Int): StripeGetCreditNotesPreviewLines
	creditNotesCreditNoteLines(creditNote: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCreditNotesCreditNoteLines
	creditNotesId(id: String!, expand: [String!]): StripeCreditNote
	customers(testClock: String, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, email: String, created: StripeIntOrGetCustomersCreatedUnionInput): StripeGetCustomers
	customersSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetCustomersSearch
	customersCustomer(customer: String!, expand: [String!]): StripeDeletedCustomerOrCustomerUnion
	customerBalanceTransactions(customer: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerBalanceTransactions
	customerBalanceTransaction(transaction: String!, customer: String!, expand: [String!]): StripeCustomerBalanceTransaction
	bankAccounts(customer: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerBankAccounts
	bankAccount(id: String!, customer: String!, expand: [String!]): StripeBankAccount
	cards(customer: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerCards
	card(id: String!, customer: String!, expand: [String!]): StripeCard
	cashBalance(customer: String!, expand: [String!]): StripeCashBalance
	customerCashBalanceTransactions(customer: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerCashBalanceTransactions
	customerCashBalanceTransaction(transaction: String!, customer: String!, expand: [String!]): StripeCustomerCashBalanceTransaction
	customersCustomerDiscount(customer: String!, expand: [String!]): StripeDiscount
	customersCustomerPaymentMethods(customer: String!, type: StripeGetCustomersCustomerPaymentMethodsType, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerPaymentMethods
	customersCustomerPaymentMethodsPaymentMethod(paymentMethod: String!, customer: String!, expand: [String!]): StripePaymentMethod
	customersCustomerSources(customer: String!, startingAfter: String, object: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerSources
	paymentSource(id: String!, customer: String!, expand: [String!]): StripePaymentSource
	customersCustomerSubscriptions(customer: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerSubscriptions
	customersCustomerSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, customer: String!, expand: [String!]): StripeSubscription
	customersCustomerSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, customer: String!, expand: [String!]): StripeDiscount
	taxIds(customer: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetCustomersCustomerTaxIds
	taxId(id: String!, customer: String!, expand: [String!]): StripeTaxId
	disputes(startingAfter: String, paymentIntent: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetDisputesCreatedUnionInput, charge: String): StripeGetDisputes
	disputesDispute(dispute: String!, expand: [String!]): StripeDispute
	events(types: [String!], type: String, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, deliverySuccess: Boolean, created: StripeIntOrGetEventsCreatedUnionInput): StripeGetEvents
	event(id: String!, expand: [String!]): StripeEvent
	exchangeRates(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetExchangeRates
	exchangeRate(rateId: String!, expand: [String!]): StripeExchangeRate
	fileLinks(startingAfter: String, limit: Int, file: String, expired: Boolean, expand: [String!], endingBefore: String, created: StripeIntOrGetFileLinksCreatedUnionInput): StripeGetFileLinks
	fileLink(link: String!, expand: [String!]): StripeFileLink
	files(startingAfter: String, purpose: StripeGetFilesPurpose, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetFilesCreatedUnionInput): StripeGetFiles
	file(file: String!, expand: [String!]): StripeFile
	financialConnectionsAccounts(startingAfter: String, session: String, limit: Int, expand: [String!], endingBefore: String, accountHolder: StripeGetFinancialConnectionsAccountsAccountHolderInput): StripeGetFinancialConnectionsAccounts
	financialConnectionsAccountsAccount(account: String!, expand: [String!]): StripeFinancialConnectionsAccount
	financialConnectionsAccountsAccountOwners(account: String!, startingAfter: String, ownership: String!, limit: Int, expand: [String!], endingBefore: String): StripeGetFinancialConnectionsAccountsAccountOwners
	financialConnectionsSessionsSession(session: String!, expand: [String!]): StripeFinancialConnectionsSession
	identityVerificationReports(verificationSession: String, type: StripeGetIdentityVerificationReportsType, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetIdentityVerificationReportsCreatedUnionInput): StripeGetIdentityVerificationReports
	identityVerificationReport(report: String!, expand: [String!]): StripeIdentityVerificationReport
	identityVerificationSessions(status: StripeGetIdentityVerificationSessionsStatus, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetIdentityVerificationSessionsCreatedUnionInput): StripeGetIdentityVerificationSessions
	identityVerificationSession(session: String!, expand: [String!]): StripeIdentityVerificationSession
	invoiceitems(startingAfter: String, pending: Boolean, limit: Int, invoice: String, expand: [String!], endingBefore: String, customer: String, created: StripeIntOrGetInvoiceitemsCreatedUnionInput): StripeGetInvoiceitems
	invoiceitem(invoiceitem: String!, expand: [String!]): StripeInvoiceitem
	invoices(subscription: String, status: StripeGetInvoicesStatus, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, dueDate: StripeIntOrGetInvoicesDueDateUnionInput, customer: String, created: StripeIntOrGetInvoicesCreatedUnionInput, collectionMethod: StripeGetInvoicesCollectionMethod): StripeGetInvoices
	invoicesSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetInvoicesSearch
	invoicesUpcoming(subscriptionTrialFromPlan: Boolean, subscriptionTrialEnd: StripeIntUnionInput, subscriptionStartDate: Int, subscriptionResumeAt: StripeGetInvoicesUpcomingSubscriptionResumeAt, subscriptionProrationDate: Int, subscriptionProrationBehavior: StripeGetInvoicesUpcomingSubscriptionProrationBehavior, subscriptionItems: [StripeGetInvoicesUpcomingSubscriptionItemsInput!], subscriptionDefaultTaxRates: StripeStringOrStringUnionInput, subscriptionCancelNow: Boolean, subscriptionCancelAtPeriodEnd: Boolean, subscriptionCancelAt: StripeIntOrStringUnionInput, subscriptionBillingCycleAnchor: StripeIntUnionInput, subscription: String, schedule: String, invoiceItems: [StripeGetInvoicesUpcomingInvoiceItemsInput!], expand: [String!], discounts: StripeStringOrGetInvoicesUpcomingDiscountsUnionInput, customerDetails: StripeGetInvoicesUpcomingCustomerDetailsInput, customer: String, currency: String, coupon: String, automaticTax: StripeGetInvoicesUpcomingAutomaticTaxInput): StripeInvoice
	invoicesUpcomingLines(subscriptionTrialFromPlan: Boolean, subscriptionTrialEnd: StripeIntUnionInput, subscriptionStartDate: Int, subscriptionResumeAt: StripeGetInvoicesUpcomingLinesSubscriptionResumeAt, subscriptionProrationDate: Int, subscriptionProrationBehavior: StripeGetInvoicesUpcomingLinesSubscriptionProrationBehavior, subscriptionItems: [StripeGetInvoicesUpcomingLinesSubscriptionItemsInput!], subscriptionDefaultTaxRates: StripeStringOrStringUnionInput, subscriptionCancelNow: Boolean, subscriptionCancelAtPeriodEnd: Boolean, subscriptionCancelAt: StripeIntOrStringUnionInput, subscriptionBillingCycleAnchor: StripeIntUnionInput, subscription: String, startingAfter: String, schedule: String, limit: Int, invoiceItems: [StripeGetInvoicesUpcomingLinesInvoiceItemsInput!], expand: [String!], endingBefore: String, discounts: StripeStringOrGetInvoicesUpcomingLinesDiscountsUnionInput, customerDetails: StripeGetInvoicesUpcomingLinesCustomerDetailsInput, customer: String, currency: String, coupon: String, automaticTax: StripeGetInvoicesUpcomingLinesAutomaticTaxInput): StripeGetInvoicesUpcomingLines
	invoicesInvoice(invoice: String!, expand: [String!]): StripeInvoice
	invoicesInvoiceLines(invoice: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetInvoicesInvoiceLines
	issuingAuthorizations(status: StripeGetIssuingAuthorizationsStatus, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetIssuingAuthorizationsCreatedUnionInput, cardholder: String, card: String): StripeGetIssuingAuthorizations
	issuingAuthorization(authorization: String!, expand: [String!]): StripeIssuingAuthorization
	issuingCardholders(type: StripeGetIssuingCardholdersType, status: StripeGetIssuingCardholdersStatus, startingAfter: String, phoneNumber: String, limit: Int, expand: [String!], endingBefore: String, email: String, created: StripeIntOrGetIssuingCardholdersCreatedUnionInput): StripeGetIssuingCardholders
	issuingCardholder(cardholder: String!, expand: [String!]): StripeIssuingCardholder
	issuingCards(type: StripeGetIssuingCardsType, status: StripeGetIssuingCardsStatus, startingAfter: String, limit: Int, last4: String, expand: [String!], expYear: Int, expMonth: Int, endingBefore: String, created: StripeIntOrGetIssuingCardsCreatedUnionInput, cardholder: String): StripeGetIssuingCards
	issuingCard(card: String!, expand: [String!]): StripeIssuingCard
	issuingDisputes(transaction: String, status: StripeGetIssuingDisputesStatus, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetIssuingDisputesCreatedUnionInput): StripeGetIssuingDisputes
	issuingDispute(dispute: String!, expand: [String!]): StripeIssuingDispute
	issuingSettlements(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetIssuingSettlementsCreatedUnionInput): StripeGetIssuingSettlements
	issuingSettlement(settlement: String!, expand: [String!]): StripeIssuingSettlement
	issuingTransactions(type: StripeGetIssuingTransactionsType, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetIssuingTransactionsCreatedUnionInput, cardholder: String, card: String): StripeGetIssuingTransactions
	issuingTransaction(transaction: String!, expand: [String!]): StripeIssuingTransaction
	linkAccountSessionsSession(session: String!, expand: [String!]): StripeFinancialConnectionsSession
	linkedAccounts(startingAfter: String, session: String, limit: Int, expand: [String!], endingBefore: String, accountHolder: StripeGetLinkedAccountsAccountHolderInput): StripeGetLinkedAccounts
	linkedAccountsAccount(account: String!, expand: [String!]): StripeFinancialConnectionsAccount
	linkedAccountsAccountOwners(account: String!, startingAfter: String, ownership: String!, limit: Int, expand: [String!], endingBefore: String): StripeGetLinkedAccountsAccountOwners
	mandate(mandate: String!, expand: [String!]): StripeMandate
	paymentIntents(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, customer: String, created: StripeIntOrGetPaymentIntentsCreatedUnionInput): StripeGetPaymentIntents
	paymentIntentsSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetPaymentIntentsSearch
	paymentIntent(intent: String!, expand: [String!], clientSecret: String): StripePaymentIntent
	paymentLinks(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, active: Boolean): StripeGetPaymentLinks
	paymentLink(paymentLink: String!, expand: [String!]): StripePaymentLink
	paymentLinksPaymentLinkLineItems(paymentLink: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetPaymentLinksPaymentLinkLineItems
	paymentMethods(type: StripeGetPaymentMethodsType, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, customer: String): StripeGetPaymentMethods
	paymentMethodsPaymentMethod(paymentMethod: String!, expand: [String!]): StripePaymentMethod
	payouts(status: String, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, destination: String, created: StripeIntOrGetPayoutsCreatedUnionInput, arrivalDate: StripeIntOrGetPayoutsArrivalDateUnionInput): StripeGetPayouts
	payout(payout: String!, expand: [String!]): StripePayout
	plans(startingAfter: String, product: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetPlansCreatedUnionInput, active: Boolean): StripeGetPlans
	plan(plan: String!, expand: [String!]): StripePlan
	prices(type: StripeGetPricesType, startingAfter: String, recurring: StripeGetPricesRecurringInput, product: String, lookupKeys: [String!], limit: Int, expand: [String!], endingBefore: String, currency: String, created: StripeIntOrGetPricesCreatedUnionInput, active: Boolean): StripeGetPrices
	pricesSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetPricesSearch
	price(price: String!, expand: [String!]): StripePrice
	products(url: String, startingAfter: String, shippable: Boolean, limit: Int, ids: [String!], expand: [String!], endingBefore: String, created: StripeIntOrGetProductsCreatedUnionInput, active: Boolean): StripeGetProducts
	productsSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetProductsSearch
	product(id: String!, expand: [String!]): StripeProduct
	promotionCodes(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, customer: String, created: StripeIntOrGetPromotionCodesCreatedUnionInput, coupon: String, code: String, active: Boolean): StripeGetPromotionCodes
	promotionCode(promotionCode: String!, expand: [String!]): StripePromotionCode
	quotes(testClock: String, status: StripeGetQuotesStatus, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, customer: String): StripeGetQuotes
	quote(quote: String!, expand: [String!]): StripeQuote
	quotesQuoteComputedUpfrontLineItems(quote: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetQuotesQuoteComputedUpfrontLineItems
	quotesQuoteLineItems(quote: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetQuotesQuoteLineItems
	radarEarlyFraudWarnings(startingAfter: String, paymentIntent: String, limit: Int, expand: [String!], endingBefore: String, charge: String): StripeGetRadarEarlyFraudWarnings
	radarEarlyFraudWarning(earlyFraudWarning: String!, expand: [String!]): StripeRadarEarlyFraudWarning
	radarValueListItems(valueList: String!, value: String, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetRadarValueListItemsCreatedUnionInput): StripeGetRadarValueListItems
	radarValueListItem(item: String!, expand: [String!]): StripeRadarValueListItem
	radarValueLists(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetRadarValueListsCreatedUnionInput, contains: String, alias: String): StripeGetRadarValueLists
	radarValueList(valueList: String!, expand: [String!]): StripeRadarValueList
	refunds(startingAfter: String, paymentIntent: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetRefundsCreatedUnionInput, charge: String): StripeGetRefunds
	refundsRefund(refund: String!, expand: [String!]): StripeRefund
	reportingReportRuns(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetReportingReportRunsCreatedUnionInput): StripeGetReportingReportRuns
	reportingReportRun(reportRun: String!, expand: [String!]): StripeReportingReportRun
	reportingReportTypes(expand: [String!]): StripeGetReportingReportTypes
	reportingReportType(reportType: String!, expand: [String!]): StripeReportingReportType
	reviews(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetReviewsCreatedUnionInput): StripeGetReviews
	review(review: String!, expand: [String!]): StripeReview
	setupAttempts(startingAfter: String, setupIntent: String!, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetSetupAttemptsCreatedUnionInput): StripeGetSetupAttempts
	setupIntents(startingAfter: String, paymentMethod: String, limit: Int, expand: [String!], endingBefore: String, customer: String, created: StripeIntOrGetSetupIntentsCreatedUnionInput, attachToSelf: Boolean): StripeGetSetupIntents
	setupIntent(intent: String!, expand: [String!], clientSecret: String): StripeSetupIntent
	shippingRates(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, currency: String, created: StripeIntOrGetShippingRatesCreatedUnionInput, active: Boolean): StripeGetShippingRates
	shippingRate(shippingRateToken: String!, expand: [String!]): StripeShippingRate
	scheduledQueryRuns(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetSigmaScheduledQueryRuns
	scheduledQueryRun(scheduledQueryRun: String!, expand: [String!]): StripeScheduledQueryRun
	source(source: String!, expand: [String!], clientSecret: String): StripeSource
	sourceMandateNotification(source: String!, mandateNotification: String!, expand: [String!]): StripeSourceMandateNotification
	sourceTransactions(source: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetSourcesSourceSourceTransactions
	sourceTransaction(sourceTransaction: String!, source: String!, expand: [String!]): StripeSourceTransaction
	subscriptionItems(subscription: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetSubscriptionItems
	subscriptionItem(item: String!, expand: [String!]): StripeSubscriptionItem
	usageRecordSummaries(subscriptionItem: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummaries
	subscriptionSchedules(startingAfter: String, scheduled: Boolean, releasedAt: StripeIntOrGetSubscriptionSchedulesReleasedAtUnionInput, limit: Int, expand: [String!], endingBefore: String, customer: String, created: StripeIntOrGetSubscriptionSchedulesCreatedUnionInput, completedAt: StripeIntOrGetSubscriptionSchedulesCompletedAtUnionInput, canceledAt: StripeIntOrGetSubscriptionSchedulesCanceledAtUnionInput): StripeGetSubscriptionSchedules
	subscriptionSchedule(schedule: String!, expand: [String!]): StripeSubscriptionSchedule
	subscriptions(testClock: String, status: StripeGetSubscriptionsStatus, startingAfter: String, price: String, limit: Int, expand: [String!], endingBefore: String, customer: String, currentPeriodStart: StripeIntOrGetSubscriptionsCurrentPeriodStartUnionInput, currentPeriodEnd: StripeIntOrGetSubscriptionsCurrentPeriodEndUnionInput, created: StripeIntOrGetSubscriptionsCreatedUnionInput, collectionMethod: StripeGetSubscriptionsCollectionMethod): StripeGetSubscriptions
	subscriptionsSearch(query: String!, page: String, limit: Int, expand: [String!]): StripeGetSubscriptionsSearch
	subscriptionsSubscriptionExposedId(subscriptionExposedId: String!, expand: [String!]): StripeSubscription
	taxCodes(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetTaxCodes
	taxCode(id: String!, expand: [String!]): StripeTaxCode
	taxRates(startingAfter: String, limit: Int, inclusive: Boolean, expand: [String!], endingBefore: String, created: StripeIntOrGetTaxRatesCreatedUnionInput, active: Boolean): StripeGetTaxRates
	taxRate(taxRate: String!, expand: [String!]): StripeTaxRate
	terminalConfigurations(startingAfter: String, limit: Int, isAccountDefault: Boolean, expand: [String!], endingBefore: String): StripeGetTerminalConfigurations
	terminalConfigurationsConfiguration(configuration: String!, expand: [String!]): StripeDeletedTerminalConfigurationOrTerminalConfigurationUnion
	terminalLocations(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetTerminalLocations
	terminalLocationsLocation(location: String!, expand: [String!]): StripeDeletedTerminalLocationOrTerminalLocationUnion
	terminalReaders(status: StripeGetTerminalReadersStatus, startingAfter: String, location: String, limit: Int, expand: [String!], endingBefore: String, deviceType: StripeGetTerminalReadersDeviceType): StripeGetTerminalReaders
	terminalReadersReader(reader: String!, expand: [String!]): StripeDeletedTerminalReaderOrTerminalReaderUnion
	testHelpersTestClocks(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetTestHelpersTestClocks
	testHelpersTestClock(testClock: String!, expand: [String!]): StripeTestHelpersTestClock
	token(token: String!, expand: [String!]): StripeToken
	topups(status: StripeGetTopupsStatus, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetTopupsCreatedUnionInput, amount: StripeIntOrGetTopupsAmountUnionInput): StripeGetTopups
	topup(topup: String!, expand: [String!]): StripeTopup
	transfers(transferGroup: String, startingAfter: String, limit: Int, expand: [String!], endingBefore: String, destination: String, created: StripeIntOrGetTransfersCreatedUnionInput): StripeGetTransfers
	transferReversals(id: String!, startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetTransfersIdReversals
	transfer(transfer: String!, expand: [String!]): StripeTransfer
	transferReversal(transfer: String!, id: String!, expand: [String!]): StripeTransferReversal
	treasuryCreditReversals(status: StripeGetTreasuryCreditReversalsStatus, startingAfter: String, receivedCredit: String, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String): StripeGetTreasuryCreditReversals
	treasuryCreditReversal(creditReversal: String!, expand: [String!]): StripeTreasuryCreditReversal
	treasuryDebitReversals(status: StripeGetTreasuryDebitReversalsStatus, startingAfter: String, resolution: StripeGetTreasuryDebitReversalsResolution, receivedDebit: String, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String): StripeGetTreasuryDebitReversals
	treasuryDebitReversal(debitReversal: String!, expand: [String!]): StripeTreasuryDebitReversal
	treasuryFinancialAccounts(startingAfter: String, limit: Int, expand: [String!], endingBefore: String, created: StripeIntOrGetTreasuryFinancialAccountsCreatedUnionInput): StripeGetTreasuryFinancialAccounts
	treasuryFinancialAccount(financialAccount: String!, expand: [String!]): StripeTreasuryFinancialAccount
	treasuryFinancialAccountFeatures(financialAccount: String!, expand: [String!]): StripeTreasuryFinancialAccountFeatures
	treasuryInboundTransfers(status: StripeGetTreasuryInboundTransfersStatus, startingAfter: String, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String): StripeGetTreasuryInboundTransfers
	treasuryInboundTransfer(id: String!, expand: [String!]): StripeTreasuryInboundTransfer
	treasuryOutboundPayments(status: StripeGetTreasuryOutboundPaymentsStatus, startingAfter: String, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String, customer: String): StripeGetTreasuryOutboundPayments
	treasuryOutboundPayment(id: String!, expand: [String!]): StripeTreasuryOutboundPayment
	treasuryOutboundTransfers(status: StripeGetTreasuryOutboundTransfersStatus, startingAfter: String, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String): StripeGetTreasuryOutboundTransfers
	treasuryOutboundTransfer(outboundTransfer: String!, expand: [String!]): StripeTreasuryOutboundTransfer
	treasuryReceivedCredits(status: StripeGetTreasuryReceivedCreditsStatus, startingAfter: String, linkedFlows: StripeGetTreasuryReceivedCreditsLinkedFlowsInput, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String): StripeGetTreasuryReceivedCredits
	treasuryReceivedCredit(id: String!, expand: [String!]): StripeTreasuryReceivedCredit
	treasuryReceivedDebits(status: StripeGetTreasuryReceivedDebitsStatus, startingAfter: String, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String): StripeGetTreasuryReceivedDebits
	treasuryReceivedDebit(id: String!, expand: [String!]): StripeTreasuryReceivedDebit
	treasuryTransactionEntries(transaction: String, startingAfter: String, orderBy: StripeGetTreasuryTransactionEntriesOrderBy, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String, effectiveAt: StripeIntOrGetTreasuryTransactionEntriesEffectiveAtUnionInput, created: StripeIntOrGetTreasuryTransactionEntriesCreatedUnionInput): StripeGetTreasuryTransactionEntries
	treasuryTransactionEntry(id: String!, expand: [String!]): StripeTreasuryTransactionEntry
	treasuryTransactions(statusTransitions: StripeGetTreasuryTransactionsStatusTransitionsInput, status: StripeGetTreasuryTransactionsStatus, startingAfter: String, orderBy: StripeGetTreasuryTransactionsOrderBy, limit: Int, financialAccount: String!, expand: [String!], endingBefore: String, created: StripeIntOrGetTreasuryTransactionsCreatedUnionInput): StripeGetTreasuryTransactions
	treasuryTransaction(id: String!, expand: [String!]): StripeTreasuryTransaction
	webhookEndpoints(startingAfter: String, limit: Int, expand: [String!], endingBefore: String): StripeGetWebhookEndpoints
	webhookEndpoint(webhookEndpoint: String!, expand: [String!]): StripeWebhookEndpoint
}
type StripeQuote {
	transferData: StripeQuotesResourceTransferData
	totalDetails: StripeQuotesResourceTotalDetails!
	testClock: StripeStringOrTestHelpersTestClockUnion
	subscriptionSchedule: StripeStringOrSubscriptionScheduleUnion
	subscriptionData: StripeQuotesResourceSubscriptionDataSubscriptionData!
	subscription: StripeStringOrSubscriptionUnion
	statusTransitions: StripeQuotesResourceStatusTransitions!
	status: StripeQuoteStatus!
	onBehalfOf: StripeStringOrAccountUnion
	object: StripeQuoteObject!
	number: String
	metadata: JSON!
	livemode: Boolean!
	lineItems: StripeQuoteLineItems
	invoiceSettings: StripeInvoiceSettingQuoteSetting
	invoice: StripeStringOrDeletedInvoiceOrInvoiceUnion
	id: String!
	header: String
	fromQuote: StripeQuotesResourceFromQuote
	footer: String
	expiresAt: Int!
	discounts: [StripeStringOrDiscountUnion!]!
	description: String
	defaultTaxRates: [StripeStringOrTaxRateUnion!]
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	currency: String
	created: Int!
	computed: StripeQuotesResourceComputed!
	collectionMethod: StripeQuoteCollectionMethod!
	automaticTax: StripeQuotesResourceAutomaticTax!
	applicationFeePercent: Float
	applicationFeeAmount: Int
	application: StripeStringOrDeletedApplicationOrApplicationUnion
	amountTotal: Int!
	amountSubtotal: Int!
}
enum StripeQuoteCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
type StripeQuoteLineItems {
	url: String!
	object: StripeQuoteObjectLineItems!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeQuoteObject {
	QUOTE
}
enum StripeQuoteObjectLineItems {
	LIST
}
enum StripeQuoteStatus {
	ACCEPTED
	CANCELED
	DRAFT
	OPEN
}
type StripeQuotesResourceAutomaticTax {
	status: StripeQuotesResourceAutomaticTaxStatus
	enabled: Boolean!
}
enum StripeQuotesResourceAutomaticTaxStatus {
	COMPLETE
	FAILED
	REQUIRES_LOCATION_INPUTS
}
type StripeQuotesResourceComputed {
	upfront: StripeQuotesResourceUpfront!
	recurring: StripeQuotesResourceRecurring
}
type StripeQuotesResourceFromQuote {
	quote: StripeStringOrQuoteUnion!
	isRevision: Boolean!
}
type StripeQuotesResourceRecurring {
	totalDetails: StripeQuotesResourceTotalDetails!
	intervalCount: Int!
	interval: StripeQuotesResourceRecurringInterval!
	amountTotal: Int!
	amountSubtotal: Int!
}
enum StripeQuotesResourceRecurringInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
type StripeQuotesResourceStatusTransitions {
	finalizedAt: Int
	canceledAt: Int
	acceptedAt: Int
}
type StripeQuotesResourceSubscriptionDataSubscriptionData {
	trialPeriodDays: Int
	effectiveDate: Int
	description: String
}
type StripeQuotesResourceTotalDetails {
	breakdown: StripeQuotesResourceTotalDetailsResourceBreakdown
	amountTax: Int!
	amountShipping: Int
	amountDiscount: Int!
}
type StripeQuotesResourceTotalDetailsResourceBreakdown {
	taxes: [StripeLineItemsTaxAmount!]!
	discounts: [StripeLineItemsDiscountAmount!]!
}
type StripeQuotesResourceTransferData {
	destination: StripeStringOrAccountUnion!
	amountPercent: Float
	amount: Int
}
type StripeQuotesResourceUpfront {
	totalDetails: StripeQuotesResourceTotalDetails!
	lineItems: StripeQuotesResourceUpfrontLineItems
	amountTotal: Int!
	amountSubtotal: Int!
}
type StripeQuotesResourceUpfrontLineItems {
	url: String!
	object: StripeQuotesResourceUpfrontObjectLineItems!
	hasMore: Boolean!
	nodes: [StripeItem!]!
}
enum StripeQuotesResourceUpfrontObjectLineItems {
	LIST
}
type StripeRadarEarlyFraudWarning {
	paymentIntent: StripeStringOrPaymentIntentUnion
	object: StripeRadarEarlyFraudWarningObject!
	livemode: Boolean!
	id: String!
	fraudType: String!
	created: Int!
	charge: StripeStringOrChargeUnion!
	actionable: Boolean!
}
enum StripeRadarEarlyFraudWarningObject {
	RADAR_EARLY_FRAUD_WARNING
}
type StripeRadarRadarOptions {
	session: String
}
type StripeRadarReviewResourceLocation {
	region: String
	longitude: Float
	latitude: Float
	country: String
	city: String
}
type StripeRadarReviewResourceSession {
	version: String
	platform: String
	device: String
	browser: String
}
type StripeRadarValueList {
	object: StripeRadarValueListObject!
	name: String!
	metadata: JSON!
	livemode: Boolean!
	listItems: StripeRadarValueListListItems!
	itemType: StripeRadarValueListItemType!
	id: String!
	createdBy: String!
	created: Int!
	alias: String!
}
type StripeRadarValueListItem {
	valueList: String!
	value: String!
	object: StripeRadarValueListItemObject!
	livemode: Boolean!
	id: String!
	createdBy: String!
	created: Int!
}
enum StripeRadarValueListItemObject {
	RADAR_VALUE_LIST_ITEM
}
enum StripeRadarValueListItemType {
	CARD_BIN
	CARD_FINGERPRINT
	CASE_SENSITIVE_STRING
	COUNTRY
	CUSTOMER_ID
	EMAIL
	IP_ADDRESS
	STRING
}
type StripeRadarValueListListItems {
	url: String!
	object: StripeRadarValueListObjectListItems!
	hasMore: Boolean!
	nodes: [StripeRadarValueListItem!]!
}
enum StripeRadarValueListObject {
	RADAR_VALUE_LIST
}
enum StripeRadarValueListObjectListItems {
	LIST
}
type StripeReceivedPaymentMethodDetailsFinancialAccount {
	network: StripeReceivedPaymentMethodDetailsFinancialAccountNetwork!
	id: String!
}
enum StripeReceivedPaymentMethodDetailsFinancialAccountNetwork {
	STRIPE
}
type StripeRecurring {
	usageType: StripeRecurringUsageType!
	intervalCount: Int!
	interval: StripeRecurringInterval!
	aggregateUsage: StripeRecurringAggregateUsage
}
enum StripeRecurringAggregateUsage {
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
	SUM
}
enum StripeRecurringInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
enum StripeRecurringUsageType {
	LICENSED
	METERED
}
type StripeRefund {
	transferReversal: StripeStringOrTransferReversalUnion
	status: String
	sourceTransferReversal: StripeStringOrTransferReversalUnion
	receiptNumber: String
	reason: StripeRefundReason
	paymentIntent: StripeStringOrPaymentIntentUnion
	object: StripeRefundObject!
	nextAction: StripeRefundNextAction
	metadata: JSON
	instructionsEmail: String
	id: String!
	failureReason: String
	failureBalanceTransaction: StripeStringOrBalanceTransactionUnion
	description: String
	currency: String!
	created: Int!
	charge: StripeStringOrChargeUnion
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	amount: Int!
}
type StripeRefundNextAction {
	type: String!
	displayDetails: StripeRefundNextActionDisplayDetails
}
type StripeRefundNextActionDisplayDetails {
	expiresAt: Int!
	emailSent: StripeEmailSent!
}
enum StripeRefundObject {
	REFUND
}
enum StripeRefundReason {
	DUPLICATE
	EXPIRED_UNCAPTURED_CHARGE
	FRAUDULENT
	REQUESTED_BY_CUSTOMER
}
type StripeReportingReportRun {
	succeededAt: Int
	status: String!
	result: StripeFile
	reportType: String!
	parameters: StripeFinancialReportingFinanceReportRunRunParameters!
	object: StripeReportingReportRunObject!
	livemode: Boolean!
	id: String!
	error: String
	created: Int!
}
enum StripeReportingReportRunObject {
	REPORTING_REPORT_RUN
}
type StripeReportingReportType {
	version: Int!
	updated: Int!
	object: StripeReportingReportTypeObject!
	name: String!
	livemode: Boolean!
	id: String!
	defaultColumns: [String!]
	dataAvailableStart: Int!
	dataAvailableEnd: Int!
}
enum StripeReportingReportTypeObject {
	REPORTING_REPORT_TYPE
}
type StripeReserveTransaction {
	object: StripeReserveTransactionObject!
	id: String!
	description: String
	currency: String!
	amount: Int!
}
enum StripeReserveTransactionObject {
	RESERVE_TRANSACTION
}
type StripeReview {
	session: StripeRadarReviewResourceSession
	reason: String!
	paymentIntent: StripeStringOrPaymentIntentUnion
	openedReason: StripeReviewOpenedReason!
	open: Boolean!
	object: StripeReviewObject!
	livemode: Boolean!
	ipAddressLocation: StripeRadarReviewResourceLocation
	ipAddress: String
	id: String!
	created: Int!
	closedReason: StripeReviewClosedReason
	charge: StripeStringOrChargeUnion
	billingZip: String
}
enum StripeReviewClosedReason {
	APPROVED
	DISPUTED
	REDACTED
	REFUNDED
	REFUNDED_AS_FRAUD
}
enum StripeReviewObject {
	REVIEW
}
enum StripeReviewOpenedReason {
	MANUAL
	RULE
}
type StripeRule {
	predicate: String!
	id: String!
	action: String!
}
type StripeScheduledQueryRun {
	title: String!
	status: String!
	sql: String!
	resultAvailableUntil: Int!
	object: StripeScheduledQueryRunObject!
	livemode: Boolean!
	id: String!
	file: StripeFile
	error: StripeSigmaScheduledQueryRunError
	dataLoadTime: Int!
	created: Int!
}
enum StripeScheduledQueryRunObject {
	SCHEDULED_QUERY_RUN
}
type StripeSchedulesPhaseAutomaticTax {
	enabled: Boolean!
}
type StripeSecretServiceResourceScope {
	user: String
	type: StripeSecretServiceResourceScopeType!
}
enum StripeSecretServiceResourceScopeType {
	ACCOUNT
	USER
}
type StripeSepaDebitGeneratedFrom {
	setupAttempt: StripeStringOrSetupAttemptUnion
	charge: StripeStringOrChargeUnion
}
type StripeSetupAttempt {
	usage: String!
	status: String!
	setupIntent: StripeStringOrSetupIntentUnion!
	setupError: StripeApiErrors
	paymentMethodDetails: StripeSetupAttemptPaymentMethodDetails!
	paymentMethod: StripeStringOrPaymentMethodUnion!
	onBehalfOf: StripeStringOrAccountUnion
	object: StripeSetupAttemptObject!
	livemode: Boolean!
	id: String!
	flowDirections: [StripeSetupAttemptFlowDirections!]
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	created: Int!
	attachToSelf: Boolean
	application: StripeStringOrApplicationUnion
}
enum StripeSetupAttemptFlowDirections {
	INBOUND
	OUTBOUND
}
enum StripeSetupAttemptObject {
	SETUP_ATTEMPT
}
type StripeSetupAttemptPaymentMethodDetails {
	usBankAccount: JSON
	type: String!
	sofort: StripeSetupAttemptPaymentMethodDetailsSofort
	sepaDebit: JSON
	link: JSON
	klarna: JSON
	ideal: StripeSetupAttemptPaymentMethodDetailsIdeal
	cardPresent: StripeSetupAttemptPaymentMethodDetailsCardPresent
	card: StripeSetupAttemptPaymentMethodDetailsCard
	boleto: JSON
	blik: JSON
	bancontact: StripeSetupAttemptPaymentMethodDetailsBancontact
	bacsDebit: JSON
	auBecsDebit: JSON
	acssDebit: JSON
}
type StripeSetupAttemptPaymentMethodDetailsBancontact {
	verifiedName: String
	preferredLanguage: StripeSetupAttemptPaymentMethodDetailsBancontactPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: StripeStringOrMandateUnion
	generatedSepaDebit: StripeStringOrPaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum StripeSetupAttemptPaymentMethodDetailsBancontactPreferredLanguage {
	DE
	EN
	FR
	NL
}
type StripeSetupAttemptPaymentMethodDetailsCard {
	threeDSecure: StripeThreeDSecureDetails
}
type StripeSetupAttemptPaymentMethodDetailsCardPresent {
	generatedCard: StripeStringOrPaymentMethodUnion
}
type StripeSetupAttemptPaymentMethodDetailsIdeal {
	verifiedName: String
	ibanLast4: String
	generatedSepaDebitMandate: StripeStringOrMandateUnion
	generatedSepaDebit: StripeStringOrPaymentMethodUnion
	bic: StripeSetupAttemptPaymentMethodDetailsIdealBic
	bank: StripeSetupAttemptPaymentMethodDetailsIdealBank
}
enum StripeSetupAttemptPaymentMethodDetailsIdealBank {
	ABN_AMRO
	ASN_BANK
	BUNQ
	HANDELSBANKEN
	ING
	KNAB
	MONEYOU
	RABOBANK
	REGIOBANK
	REVOLUT
	SNS_BANK
	TRIODOS_BANK
	VAN_LANSCHOT
}
enum StripeSetupAttemptPaymentMethodDetailsIdealBic {
	ABNANL2A
	ASNBNL21
	BUNQNL2A
	FVLBNL22
	HANDNL2A
	INGBNL2A
	KNABNL2H
	MOYONL21
	RABONL2U
	RBRBNL21
	REVOLT21
	SNSBNL2A
	TRIONL2U
}
type StripeSetupAttemptPaymentMethodDetailsSofort {
	verifiedName: String
	preferredLanguage: StripeSetupAttemptPaymentMethodDetailsSofortPreferredLanguage
	ibanLast4: String
	generatedSepaDebitMandate: StripeStringOrMandateUnion
	generatedSepaDebit: StripeStringOrPaymentMethodUnion
	bic: String
	bankName: String
	bankCode: String
}
enum StripeSetupAttemptPaymentMethodDetailsSofortPreferredLanguage {
	DE
	EN
	FR
	NL
}
type StripeSetupIntent {
	usage: String!
	status: StripeSetupIntentStatus!
	singleUseMandate: StripeStringOrMandateUnion
	paymentMethodTypes: [String!]!
	paymentMethodOptions: StripeSetupIntentPaymentMethodOptions
	paymentMethod: StripeStringOrPaymentMethodUnion
	onBehalfOf: StripeStringOrAccountUnion
	object: StripeSetupIntentObject!
	nextAction: StripeSetupIntentNextAction
	metadata: JSON
	mandate: StripeStringOrMandateUnion
	livemode: Boolean!
	latestAttempt: StripeStringOrSetupAttemptUnion
	lastSetupError: StripeApiErrors
	id: String!
	flowDirections: [StripeSetupIntentFlowDirections!]
	description: String
	customer: StripeStringOrDeletedCustomerOrCustomerUnion
	created: Int!
	clientSecret: String
	cancellationReason: StripeSetupIntentCancellationReason
	attachToSelf: Boolean
	application: StripeStringOrApplicationUnion
}
enum StripeSetupIntentCancellationReason {
	ABANDONED
	DUPLICATE
	REQUESTED_BY_CUSTOMER
}
enum StripeSetupIntentFlowDirections {
	INBOUND
	OUTBOUND
}
type StripeSetupIntentNextAction {
	verifyWithMicrodeposits: StripeSetupIntentNextActionVerifyWithMicrodeposits
	useStripeSdk: JSON
	type: String!
	redirectToUrl: StripeSetupIntentNextActionRedirectToUrl
}
type StripeSetupIntentNextActionRedirectToUrl {
	url: String
	returnUrl: String
}
type StripeSetupIntentNextActionVerifyWithMicrodeposits {
	microdepositType: StripeSetupIntentNextActionVerifyWithMicrodepositsMicrodepositType
	hostedVerificationUrl: String!
	arrivalDate: Int!
}
enum StripeSetupIntentNextActionVerifyWithMicrodepositsMicrodepositType {
	AMOUNTS
	DESCRIPTOR_CODE
}
enum StripeSetupIntentObject {
	SETUP_INTENT
}
type StripeSetupIntentPaymentMethodOptions {
	usBankAccount: StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion
	sepaDebit: StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion
	link: StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion
	card: StripeSetupIntentPaymentMethodOptionsCard
	blik: StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion
	acssDebit: StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion
}
type StripeSetupIntentPaymentMethodOptionsAcssDebit {
	verificationMethod: StripeSetupIntentPaymentMethodOptionsAcssDebitVerificationMethod
	mandateOptions: StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebit
	currency: StripeSetupIntentPaymentMethodOptionsAcssDebitCurrency
}
enum StripeSetupIntentPaymentMethodOptionsAcssDebitCurrency {
	CAD
	USD
}
enum StripeSetupIntentPaymentMethodOptionsAcssDebitVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripeSetupIntentPaymentMethodOptionsBlik {
	mandateOptions: StripeSetupIntentPaymentMethodOptionsMandateOptionsBlik
}
type StripeSetupIntentPaymentMethodOptionsCard {
	requestThreeDSecure: StripeSetupIntentPaymentMethodOptionsCardRequestThreeDSecure
	network: StripeSetupIntentPaymentMethodOptionsCardNetwork
	mandateOptions: StripeSetupIntentPaymentMethodOptionsCardMandateOptions
}
type StripeSetupIntentPaymentMethodOptionsCardMandateOptions {
	supportedTypes: [StripeSetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes!]
	startDate: Int!
	reference: String!
	intervalCount: Int
	interval: StripeSetupIntentPaymentMethodOptionsCardMandateOptionsInterval!
	endDate: Int
	description: String
	currency: String!
	amountType: StripeSetupIntentPaymentMethodOptionsCardMandateOptionsAmountType!
	amount: Int!
}
enum StripeSetupIntentPaymentMethodOptionsCardMandateOptionsAmountType {
	FIXED
	MAXIMUM
}
enum StripeSetupIntentPaymentMethodOptionsCardMandateOptionsInterval {
	DAY
	MONTH
	SPORADIC
	WEEK
	YEAR
}
enum StripeSetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes {
	INDIA
}
enum StripeSetupIntentPaymentMethodOptionsCardNetwork {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum StripeSetupIntentPaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
	CHALLENGE_ONLY
}
type StripeSetupIntentPaymentMethodOptionsLink {
	persistentToken: String
}
type StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
	transactionType: StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType
	paymentSchedule: StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule
	intervalDescription: String
	defaultFor: [StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor!]
	customMandateUrl: String
}
enum StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor {
	INVOICE
	SUBSCRIPTION
}
enum StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
	COMBINED
	INTERVAL
	SPORADIC
}
enum StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
	BUSINESS
	PERSONAL
}
type StripeSetupIntentPaymentMethodOptionsMandateOptionsBlik {
	type: StripeSetupIntentPaymentMethodOptionsMandateOptionsBlikType
	offSession: StripeMandateOptionsOffSessionDetailsBlik
	expiresAfter: Int
}
enum StripeSetupIntentPaymentMethodOptionsMandateOptionsBlikType {
	OFF_SESSION
	ON_SESSION
}
type StripeSetupIntentPaymentMethodOptionsSepaDebit {
	mandateOptions: JSON
}
type StripeSetupIntentPaymentMethodOptionsUsBankAccount {
	verificationMethod: StripeSetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod
	financialConnections: StripeLinkedAccountOptionsUsBankAccount
}
enum StripeSetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
enum StripeSetupIntentStatus {
	CANCELED
	PROCESSING
	REQUIRES_ACTION
	REQUIRES_CONFIRMATION
	REQUIRES_PAYMENT_METHOD
	SUCCEEDED
}
type StripeSetupIntentTypeSpecificPaymentMethodOptionsClient {
	verificationMethod: StripeSetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod
}
union StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion = StripeSetupIntentTypeSpecificPaymentMethodOptionsClient | StripeSetupIntentPaymentMethodOptionsAcssDebit
union StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion = StripeSetupIntentTypeSpecificPaymentMethodOptionsClient | StripeSetupIntentPaymentMethodOptionsBlik
union StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion = StripeSetupIntentTypeSpecificPaymentMethodOptionsClient | StripeSetupIntentPaymentMethodOptionsLink
union StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion = StripeSetupIntentTypeSpecificPaymentMethodOptionsClient | StripeSetupIntentPaymentMethodOptionsSepaDebit
union StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion = StripeSetupIntentTypeSpecificPaymentMethodOptionsClient | StripeSetupIntentPaymentMethodOptionsUsBankAccount
enum StripeSetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
	AUTOMATIC
	INSTANT
	MICRODEPOSITS
}
type StripeShipping {
	trackingNumber: String
	phone: String
	name: String
	carrier: String
	address: StripeAddress
}
type StripeShippingRate {
	type: StripeShippingRateType!
	taxCode: StripeStringOrTaxCodeUnion
	taxBehavior: StripeShippingRateTaxBehavior
	object: StripeShippingRateObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	fixedAmount: StripeShippingRateFixedAmount
	displayName: String
	deliveryEstimate: StripeShippingRateDeliveryEstimate
	created: Int!
	active: Boolean!
}
type StripeShippingRateDeliveryEstimate {
	minimum: StripeShippingRateDeliveryEstimateBound
	maximum: StripeShippingRateDeliveryEstimateBound
}
type StripeShippingRateDeliveryEstimateBound {
	value: Int!
	unit: StripeShippingRateDeliveryEstimateBoundUnit!
}
enum StripeShippingRateDeliveryEstimateBoundUnit {
	BUSINESS_DAY
	DAY
	HOUR
	MONTH
	WEEK
}
type StripeShippingRateFixedAmount {
	currencyOptions: JSON
	currency: String!
	amount: Int!
}
enum StripeShippingRateObject {
	SHIPPING_RATE
}
enum StripeShippingRateTaxBehavior {
	EXCLUSIVE
	INCLUSIVE
	UNSPECIFIED
}
enum StripeShippingRateType {
	FIXED_AMOUNT
}
type StripeSigmaScheduledQueryRunError {
	message: String!
}
type StripeSource {
	wechat: StripeSourceTypeWechat
	usage: String
	type: StripeSourceType!
	threeDSecure: StripeSourceTypeThreeDSecure
	status: String!
	statementDescriptor: String
	sourceOrder: StripeSourceOrder
	sofort: StripeSourceTypeSofort
	sepaDebit: StripeSourceTypeSepaDebit
	redirect: StripeSourceRedirectFlow
	receiver: StripeSourceReceiverFlow
	p24: StripeSourceTypeP24
	owner: StripeSourceOwner
	object: StripeSourceObject!
	multibanco: StripeSourceTypeMultibanco
	metadata: JSON
	livemode: Boolean!
	klarna: StripeSourceTypeKlarna
	ideal: StripeSourceTypeIdeal
	id: String!
	giropay: StripeSourceTypeGiropay
	flow: String!
	eps: StripeSourceTypeEps
	customer: String
	currency: String
	created: Int!
	codeVerification: StripeSourceCodeVerificationFlow
	clientSecret: String!
	cardPresent: StripeSourceTypeCardPresent
	card: StripeSourceTypeCard
	bancontact: StripeSourceTypeBancontact
	auBecsDebit: StripeSourceTypeAuBecsDebit
	amount: Int
	alipay: StripeSourceTypeAlipay
	acssDebit: StripeSourceTypeAcssDebit
	achDebit: StripeSourceTypeAchDebit
	achCreditTransfer: StripeSourceTypeAchCreditTransfer
}
type StripeSourceCodeVerificationFlow {
	status: String!
	attemptsRemaining: Int!
}
type StripeSourceMandateNotification {
	type: String!
	status: String!
	source: StripeSource!
	sepaDebit: StripeSourceMandateNotificationSepaDebitData
	reason: String!
	object: StripeSourceMandateNotificationObject!
	livemode: Boolean!
	id: String!
	created: Int!
	bacsDebit: StripeSourceMandateNotificationBacsDebitData
	amount: Int
	acssDebit: StripeSourceMandateNotificationAcssDebitData
}
type StripeSourceMandateNotificationAcssDebitData {
	statementDescriptor: String
}
type StripeSourceMandateNotificationBacsDebitData {
	last4: String
}
enum StripeSourceMandateNotificationObject {
	SOURCE_MANDATE_NOTIFICATION
}
type StripeSourceMandateNotificationSepaDebitData {
	mandateReference: String
	last4: String
	creditorIdentifier: String
}
enum StripeSourceObject {
	SOURCE
}
union StripeSourceOrBankAccountOrCardUnion = StripeSource | StripeBankAccount | StripeCard
union StripeSourceOrCardOrBankAccountUnion = StripeSource | StripeCard | StripeBankAccount
type StripeSourceOrder {
	shipping: StripeShipping
	items: [StripeSourceOrderItem!]
	email: String
	currency: String!
	amount: Int!
}
type StripeSourceOrderItem {
	type: String
	quantity: Int
	parent: String
	description: String
	currency: String
	amount: Int
}
type StripeSourceOwner {
	verifiedPhone: String
	verifiedName: String
	verifiedEmail: String
	verifiedAddress: StripeAddress
	phone: String
	name: String
	email: String
	address: StripeAddress
}
type StripeSourceReceiverFlow {
	refundAttributesStatus: String!
	refundAttributesMethod: String!
	amountReturned: Int!
	amountReceived: Int!
	amountCharged: Int!
	address: String
}
type StripeSourceRedirectFlow {
	url: String!
	status: String!
	returnUrl: String!
	failureReason: String
}
type StripeSourceTransaction {
	type: StripeSourceTransactionType!
	status: String!
	source: String!
	sepaCreditTransfer: StripeSourceTransactionSepaCreditTransferData
	paperCheck: StripeSourceTransactionPaperCheckData
	object: StripeSourceTransactionObject!
	livemode: Boolean!
	id: String!
	gbpCreditTransfer: StripeSourceTransactionGbpCreditTransferData
	currency: String!
	created: Int!
	chfCreditTransfer: StripeSourceTransactionChfCreditTransferData
	amount: Int!
	achCreditTransfer: StripeSourceTransactionAchCreditTransferData
}
type StripeSourceTransactionAchCreditTransferData {
	routingNumber: String
	last4: String
	fingerprint: String
	customerData: String
}
type StripeSourceTransactionChfCreditTransferData {
	senderName: String
	senderIban: String
	senderAddressLine1: String
	senderAddressCountry: String
	reference: String
}
type StripeSourceTransactionGbpCreditTransferData {
	senderSortCode: String
	senderName: String
	senderAccountNumber: String
	reference: String
	last4: String
	fundingMethod: String
	fingerprint: String
}
enum StripeSourceTransactionObject {
	SOURCE_TRANSACTION
}
type StripeSourceTransactionPaperCheckData {
	invoices: String
	availableAt: String
}
type StripeSourceTransactionSepaCreditTransferData {
	senderName: String
	senderIban: String
	reference: String
}
enum StripeSourceTransactionType {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ALIPAY
	BANCONTACT
	CARD
	CARD_PRESENT
	EPS
	GIROPAY
	IDEAL
	KLARNA
	MULTIBANCO
	P_24
	SEPA_DEBIT
	SOFORT
	THREE_D_SECURE
	WECHAT
}
enum StripeSourceType {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ACSS_DEBIT
	ALIPAY
	AU_BECS_DEBIT
	BANCONTACT
	CARD
	CARD_PRESENT
	EPS
	GIROPAY
	IDEAL
	KLARNA
	MULTIBANCO
	P_24
	SEPA_DEBIT
	SOFORT
	THREE_D_SECURE
	WECHAT
}
type StripeSourceTypeAchCreditTransfer {
	swiftCode: String
	routingNumber: String
	refundRoutingNumber: String
	refundAccountHolderType: String
	refundAccountHolderName: String
	fingerprint: String
	bankName: String
	accountNumber: String
}
type StripeSourceTypeAchDebit {
	type: String
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	bankName: String
}
type StripeSourceTypeAcssDebit {
	routingNumber: String
	last4: String
	fingerprint: String
	country: String
	category: String
	bankName: String
	bankAddressPostalCode: String
	bankAddressLine2: String
	bankAddressLine1: String
	bankAddressCity: String
}
type StripeSourceTypeAlipay {
	statementDescriptor: String
	nativeUrl: String
	dataString: String
}
type StripeSourceTypeAuBecsDebit {
	last4: String
	fingerprint: String
	bsbNumber: String
}
type StripeSourceTypeBancontact {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	bic: String
	bankName: String
	bankCode: String
}
type StripeSourceTypeCard {
	tokenizationMethod: String
	threeDSecure: String
	name: String
	last4: String
	funding: String
	fingerprint: String
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	country: String
	brand: String
	addressZipCheck: String
	addressLine1Check: String
}
type StripeSourceTypeCardPresent {
	transactionStatusInformation: String
	terminalVerificationResults: String
	reader: String
	readMethod: String
	posEntryMode: String
	posDeviceId: String
	last4: String
	funding: String
	fingerprint: String
	expYear: Int
	expMonth: Int
	evidenceTransactionCertificate: String
	evidenceCustomerSignature: String
	emvAuthData: String
	dedicatedFileName: String
	dataType: String
	cvmType: String
	country: String
	brand: String
	authorizationResponseCode: String
	authorizationCode: String
	applicationPreferredName: String
	applicationCryptogram: String
}
type StripeSourceTypeEps {
	statementDescriptor: String
	reference: String
}
type StripeSourceTypeGiropay {
	statementDescriptor: String
	bic: String
	bankName: String
	bankCode: String
}
type StripeSourceTypeIdeal {
	statementDescriptor: String
	ibanLast4: String
	bic: String
	bank: String
}
type StripeSourceTypeKlarna {
	shippingLastName: String
	shippingFirstName: String
	shippingDelay: Int
	redirectUrl: String
	purchaseType: String
	purchaseCountry: String
	paymentMethodCategories: String
	payOverTimeRedirectUrl: String
	payOverTimeName: String
	payOverTimeAssetUrlsStandard: String
	payOverTimeAssetUrlsDescriptive: String
	payNowRedirectUrl: String
	payNowName: String
	payNowAssetUrlsStandard: String
	payNowAssetUrlsDescriptive: String
	payLaterRedirectUrl: String
	payLaterName: String
	payLaterAssetUrlsStandard: String
	payLaterAssetUrlsDescriptive: String
	pageTitle: String
	logoUrl: String
	locale: String
	lastName: String
	firstName: String
	clientToken: String
	backgroundImageUrl: String
}
type StripeSourceTypeMultibanco {
	refundIban: String
	refundAccountHolderName: String
	refundAccountHolderAddressState: String
	refundAccountHolderAddressPostalCode: String
	refundAccountHolderAddressLine2: String
	refundAccountHolderAddressLine1: String
	refundAccountHolderAddressCountry: String
	refundAccountHolderAddressCity: String
	reference: String
	entity: String
}
type StripeSourceTypeP24 {
	reference: String
}
type StripeSourceTypeSepaDebit {
	mandateUrl: String
	mandateReference: String
	last4: String
	fingerprint: String
	country: String
	branchCode: String
	bankCode: String
}
type StripeSourceTypeSofort {
	statementDescriptor: String
	preferredLanguage: String
	ibanLast4: String
	country: String
	bic: String
	bankName: String
	bankCode: String
}
type StripeSourceTypeThreeDSecure {
	tokenizationMethod: String
	threeDSecure: String
	name: String
	last4: String
	funding: String
	fingerprint: String
	expYear: Int
	expMonth: Int
	dynamicLast4: String
	cvcCheck: String
	customer: String
	country: String
	card: String
	brand: String
	authenticated: Boolean
	addressZipCheck: String
	addressLine1Check: String
}
type StripeSourceTypeWechat {
	statementDescriptor: String
	qrCodeUrl: String
	prepayId: String
}
type StripeString {
	data: String
}
union StripeStringOrAccountUnion = StripeString | StripeAccount
union StripeStringOrApplicationFeeUnion = StripeString | StripeApplicationFee
union StripeStringOrApplicationUnion = StripeString | StripeApplication
union StripeStringOrBalanceTransactionUnion = StripeString | StripeBalanceTransaction
union StripeStringOrBillingPortalConfigurationUnion = StripeString | StripeBillingPortalConfiguration
union StripeStringOrChargeUnion = StripeString | StripeCharge
union StripeStringOrCreditNoteUnion = StripeString | StripeCreditNote
union StripeStringOrCustomerBalanceTransactionUnion = StripeString | StripeCustomerBalanceTransaction
union StripeStringOrCustomerUnion = StripeString | StripeCustomer
union StripeStringOrDeletedApplicationOrApplicationUnion = StripeString | StripeDeletedApplication | StripeApplication
union StripeStringOrDeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion = StripeString | StripeDeletedCard | StripeDeletedBankAccount | StripeCard | StripeBankAccount
union StripeStringOrDeletedCouponOrCouponUnion = StripeString | StripeDeletedCoupon | StripeCoupon
union StripeStringOrDeletedCustomerOrCustomerUnion = StripeString | StripeDeletedCustomer | StripeCustomer
union StripeStringOrDeletedDiscountOrDiscountUnion = StripeString | StripeDeletedDiscount | StripeDiscount
union StripeStringOrDeletedInvoiceOrInvoiceUnion = StripeString | StripeDeletedInvoice | StripeInvoice
union StripeStringOrDeletedPriceOrPriceUnion = StripeString | StripeDeletedPrice | StripePrice
union StripeStringOrDeletedProductOrProductUnion = StripeString | StripeDeletedProduct | StripeProduct
union StripeStringOrDeletedTaxIdOrTaxIdUnion = StripeString | StripeDeletedTaxId | StripeTaxId
union StripeStringOrDiscountUnion = StripeString | StripeDiscount
union StripeStringOrFileUnion = StripeString | StripeFile
union StripeStringOrFinancialConnectionsAccountOwnershipUnion = StripeString | StripeFinancialConnectionsAccountOwnership
input StripeStringOrGetInvoicesUpcomingAddressCustomerDetailsUnionInput {
	string: String
	stripeGetInvoicesUpcomingAddressCustomerDetailsInput: StripeGetInvoicesUpcomingAddressCustomerDetailsInput
}
input StripeStringOrGetInvoicesUpcomingBillingThresholdsSubscriptionItemsUnionInput {
	string: String
	stripeGetInvoicesUpcomingBillingThresholdsSubscriptionItemsInput: StripeGetInvoicesUpcomingBillingThresholdsSubscriptionItemsInput
}
input StripeStringOrGetInvoicesUpcomingDiscountsInvoiceItemsUnionInput {
	string: String
	stripeGetInvoicesUpcomingDiscountsInvoiceItemsInput: StripeGetInvoicesUpcomingDiscountsInvoiceItemsInput
}
input StripeStringOrGetInvoicesUpcomingDiscountsUnionInput {
	string: String
	stripeGetInvoicesUpcomingDiscountsInput: StripeGetInvoicesUpcomingDiscountsInput
}
input StripeStringOrGetInvoicesUpcomingLinesAddressCustomerDetailsUnionInput {
	string: String
	stripeGetInvoicesUpcomingLinesAddressCustomerDetailsInput: StripeGetInvoicesUpcomingLinesAddressCustomerDetailsInput
}
input StripeStringOrGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsUnionInput {
	string: String
	stripeGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsInput: StripeGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsInput
}
input StripeStringOrGetInvoicesUpcomingLinesDiscountsInvoiceItemsUnionInput {
	string: String
	stripeGetInvoicesUpcomingLinesDiscountsInvoiceItemsInput: StripeGetInvoicesUpcomingLinesDiscountsInvoiceItemsInput
}
input StripeStringOrGetInvoicesUpcomingLinesDiscountsUnionInput {
	string: String
	stripeGetInvoicesUpcomingLinesDiscountsInput: StripeGetInvoicesUpcomingLinesDiscountsInput
}
input StripeStringOrGetInvoicesUpcomingLinesShippingCustomerDetailsUnionInput {
	string: String
	stripeGetInvoicesUpcomingLinesShippingCustomerDetailsInput: StripeGetInvoicesUpcomingLinesShippingCustomerDetailsInput
}
input StripeStringOrGetInvoicesUpcomingShippingCustomerDetailsUnionInput {
	string: String
	stripeGetInvoicesUpcomingShippingCustomerDetailsInput: StripeGetInvoicesUpcomingShippingCustomerDetailsInput
}
union StripeStringOrIdentityVerificationReportUnion = StripeString | StripeIdentityVerificationReport
union StripeStringOrInvoiceUnion = StripeString | StripeInvoice
union StripeStringOrIssuingAuthorizationUnion = StripeString | StripeIssuingAuthorization
union StripeStringOrIssuingCardUnion = StripeString | StripeIssuingCard
union StripeStringOrIssuingCardholderUnion = StripeString | StripeIssuingCardholder
union StripeStringOrIssuingDisputeUnion = StripeString | StripeIssuingDispute
union StripeStringOrIssuingTransactionUnion = StripeString | StripeIssuingTransaction
union StripeStringOrMandateUnion = StripeString | StripeMandate
union StripeStringOrPaymentIntentUnion = StripeString | StripePaymentIntent
union StripeStringOrPaymentLinkUnion = StripeString | StripePaymentLink
union StripeStringOrPaymentMethodUnion = StripeString | StripePaymentMethod
union StripeStringOrPayoutUnion = StripeString | StripePayout
input StripeStringOrPostAccountsAccountBankAccountsBankAccountUnionInput {
	string: String
	stripePostAccountsAccountBankAccountsBankAccountInput: StripePostAccountsAccountBankAccountsBankAccountInput
}
input StripeStringOrPostAccountsAccountDobIndividualUnionInput {
	string: String
	stripePostAccountsAccountDobIndividualInput: StripePostAccountsAccountDobIndividualInput
}
input StripeStringOrPostAccountsAccountExternalAccountsBankAccountUnionInput {
	string: String
	stripePostAccountsAccountExternalAccountsBankAccountInput: StripePostAccountsAccountExternalAccountsBankAccountInput
}
input StripeStringOrPostAccountsAccountPeopleDobUnionInput {
	string: String
	stripePostAccountsAccountPeopleDobInput: StripePostAccountsAccountPeopleDobInput
}
input StripeStringOrPostAccountsAccountPeoplePersonDobUnionInput {
	string: String
	stripePostAccountsAccountPeoplePersonDobInput: StripePostAccountsAccountPeoplePersonDobInput
}
input StripeStringOrPostAccountsAccountPersonsDobUnionInput {
	string: String
	stripePostAccountsAccountPersonsDobInput: StripePostAccountsAccountPersonsDobInput
}
input StripeStringOrPostAccountsAccountPersonsPersonDobUnionInput {
	string: String
	stripePostAccountsAccountPersonsPersonDobInput: StripePostAccountsAccountPersonsPersonDobInput
}
input StripeStringOrPostAccountsBankAccountUnionInput {
	string: String
	stripePostAccountsBankAccountInput: StripePostAccountsBankAccountInput
}
input StripeStringOrPostAccountsDobIndividualUnionInput {
	string: String
	stripePostAccountsDobIndividualInput: StripePostAccountsDobIndividualInput
}
input StripeStringOrPostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesUnionInput {
	string: String
	stripePostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput: StripePostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput
}
input StripeStringOrPostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesUnionInput {
	string: String
	stripePostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput: StripePostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput
}
input StripeStringOrPostChargesCardUnionInput {
	string: String
	stripePostChargesCardInput: StripePostChargesCardInput
}
input StripeStringOrPostChargesDestinationUnionInput {
	string: String
	stripePostChargesDestinationInput: StripePostChargesDestinationInput
}
input StripeStringOrPostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationUnionInput {
	string: String
	stripePostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput: StripePostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput
}
input StripeStringOrPostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationUnionInput {
	string: String
	stripePostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput: StripePostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput
}
input StripeStringOrPostCheckoutSessionsShippingAddressCustomTextUnionInput {
	string: String
	stripePostCheckoutSessionsShippingAddressCustomTextInput: StripePostCheckoutSessionsShippingAddressCustomTextInput
}
input StripeStringOrPostCheckoutSessionsSubmitCustomTextUnionInput {
	string: String
	stripePostCheckoutSessionsSubmitCustomTextInput: StripePostCheckoutSessionsSubmitCustomTextInput
}
input StripeStringOrPostCustomersAddressUnionInput {
	string: String
	stripePostCustomersAddressInput: StripePostCustomersAddressInput
}
input StripeStringOrPostCustomersCustomFieldsInvoiceSettingsUnionInput {
	string: String
	stripePostCustomersCustomFieldsInvoiceSettingsInput: StripePostCustomersCustomFieldsInvoiceSettingsInput
}
input StripeStringOrPostCustomersCustomerAddressUnionInput {
	string: String
	stripePostCustomersCustomerAddressInput: StripePostCustomersCustomerAddressInput
}
input StripeStringOrPostCustomersCustomerBankAccountUnionInput {
	string: String
	stripePostCustomersCustomerBankAccountInput: StripePostCustomersCustomerBankAccountInput
}
input StripeStringOrPostCustomersCustomerBankAccountsBankAccountUnionInput {
	string: String
	stripePostCustomersCustomerBankAccountsBankAccountInput: StripePostCustomersCustomerBankAccountsBankAccountInput
}
input StripeStringOrPostCustomersCustomerBankAccountsCardUnionInput {
	string: String
	stripePostCustomersCustomerBankAccountsCardInput: StripePostCustomersCustomerBankAccountsCardInput
}
input StripeStringOrPostCustomersCustomerCardUnionInput {
	string: String
	stripePostCustomersCustomerCardInput: StripePostCustomersCustomerCardInput
}
input StripeStringOrPostCustomersCustomerCardsBankAccountUnionInput {
	string: String
	stripePostCustomersCustomerCardsBankAccountInput: StripePostCustomersCustomerCardsBankAccountInput
}
input StripeStringOrPostCustomersCustomerCardsCardUnionInput {
	string: String
	stripePostCustomersCustomerCardsCardInput: StripePostCustomersCustomerCardsCardInput
}
input StripeStringOrPostCustomersCustomerCustomFieldsInvoiceSettingsUnionInput {
	string: String
	stripePostCustomersCustomerCustomFieldsInvoiceSettingsInput: StripePostCustomersCustomerCustomFieldsInvoiceSettingsInput
}
input StripeStringOrPostCustomersCustomerRenderingOptionsInvoiceSettingsUnionInput {
	string: String
	stripePostCustomersCustomerRenderingOptionsInvoiceSettingsInput: StripePostCustomersCustomerRenderingOptionsInvoiceSettingsInput
}
input StripeStringOrPostCustomersCustomerShippingUnionInput {
	string: String
	stripePostCustomersCustomerShippingInput: StripePostCustomersCustomerShippingInput
}
input StripeStringOrPostCustomersCustomerSourcesBankAccountUnionInput {
	string: String
	stripePostCustomersCustomerSourcesBankAccountInput: StripePostCustomersCustomerSourcesBankAccountInput
}
input StripeStringOrPostCustomersCustomerSourcesCardUnionInput {
	string: String
	stripePostCustomersCustomerSourcesCardInput: StripePostCustomersCustomerSourcesCardInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsItemsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsBillingThresholdsItemsInput: StripePostCustomersCustomerSubscriptionsBillingThresholdsItemsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsBillingThresholdsInput: StripePostCustomersCustomerSubscriptionsBillingThresholdsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput: StripePostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput: StripePostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostCustomersRenderingOptionsInvoiceSettingsUnionInput {
	string: String
	stripePostCustomersRenderingOptionsInvoiceSettingsInput: StripePostCustomersRenderingOptionsInvoiceSettingsInput
}
input StripeStringOrPostCustomersShippingUnionInput {
	string: String
	stripePostCustomersShippingInput: StripePostCustomersShippingInput
}
input StripeStringOrPostIdentityVerificationSessionsDocumentOptionsUnionInput {
	string: String
	stripePostIdentityVerificationSessionsDocumentOptionsInput: StripePostIdentityVerificationSessionsDocumentOptionsInput
}
input StripeStringOrPostIdentityVerificationSessionsSessionDocumentOptionsUnionInput {
	string: String
	stripePostIdentityVerificationSessionsSessionDocumentOptionsInput: StripePostIdentityVerificationSessionsSessionDocumentOptionsInput
}
input StripeStringOrPostInvoiceitemsDiscountsUnionInput {
	string: String
	stripePostInvoiceitemsDiscountsInput: StripePostInvoiceitemsDiscountsInput
}
input StripeStringOrPostInvoiceitemsInvoiceitemDiscountsUnionInput {
	string: String
	stripePostInvoiceitemsInvoiceitemDiscountsInput: StripePostInvoiceitemsInvoiceitemDiscountsInput
}
input StripeStringOrPostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesCardPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesCustomFieldsUnionInput {
	string: String
	stripePostInvoicesCustomFieldsInput: StripePostInvoicesCustomFieldsInput
}
input StripeStringOrPostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesDiscountsUnionInput {
	string: String
	stripePostInvoicesDiscountsInput: StripePostInvoicesDiscountsInput
}
input StripeStringOrPostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesInvoiceCustomFieldsUnionInput {
	string: String
	stripePostInvoicesInvoiceCustomFieldsInput: StripePostInvoicesInvoiceCustomFieldsInput
}
input StripeStringOrPostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesInvoiceDiscountsUnionInput {
	string: String
	stripePostInvoicesInvoiceDiscountsInput: StripePostInvoicesInvoiceDiscountsInput
}
input StripeStringOrPostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesInvoiceRenderingOptionsUnionInput {
	string: String
	stripePostInvoicesInvoiceRenderingOptionsInput: StripePostInvoicesInvoiceRenderingOptionsInput
}
input StripeStringOrPostInvoicesInvoiceShippingCostUnionInput {
	string: String
	stripePostInvoicesInvoiceShippingCostInput: StripePostInvoicesInvoiceShippingCostInput
}
input StripeStringOrPostInvoicesInvoiceShippingDetailsUnionInput {
	string: String
	stripePostInvoicesInvoiceShippingDetailsInput: StripePostInvoicesInvoiceShippingDetailsInput
}
input StripeStringOrPostInvoicesInvoiceTransferDataUnionInput {
	string: String
	stripePostInvoicesInvoiceTransferDataInput: StripePostInvoicesInvoiceTransferDataInput
}
input StripeStringOrPostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostInvoicesRenderingOptionsUnionInput {
	string: String
	stripePostInvoicesRenderingOptionsInput: StripePostInvoicesRenderingOptionsInput
}
input StripeStringOrPostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput: StripePostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostIssuingDisputesCanceledEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesCanceledEvidenceInput: StripePostIssuingDisputesCanceledEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeCanceledEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeCanceledEvidenceInput: StripePostIssuingDisputesDisputeCanceledEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeDuplicateEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeDuplicateEvidenceInput: StripePostIssuingDisputesDisputeDuplicateEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeFraudulentEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeFraudulentEvidenceInput: StripePostIssuingDisputesDisputeFraudulentEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput: StripePostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeNotReceivedEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeNotReceivedEvidenceInput: StripePostIssuingDisputesDisputeNotReceivedEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeOtherEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeOtherEvidenceInput: StripePostIssuingDisputesDisputeOtherEvidenceInput
}
input StripeStringOrPostIssuingDisputesDisputeServiceNotAsDescribedEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput: StripePostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput
}
input StripeStringOrPostIssuingDisputesDuplicateEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesDuplicateEvidenceInput: StripePostIssuingDisputesDuplicateEvidenceInput
}
input StripeStringOrPostIssuingDisputesFraudulentEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesFraudulentEvidenceInput: StripePostIssuingDisputesFraudulentEvidenceInput
}
input StripeStringOrPostIssuingDisputesMerchandiseNotAsDescribedEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput: StripePostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput
}
input StripeStringOrPostIssuingDisputesNotReceivedEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesNotReceivedEvidenceInput: StripePostIssuingDisputesNotReceivedEvidenceInput
}
input StripeStringOrPostIssuingDisputesOtherEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesOtherEvidenceInput: StripePostIssuingDisputesOtherEvidenceInput
}
input StripeStringOrPostIssuingDisputesServiceNotAsDescribedEvidenceUnionInput {
	string: String
	stripePostIssuingDisputesServiceNotAsDescribedEvidenceInput: StripePostIssuingDisputesServiceNotAsDescribedEvidenceInput
}
input StripeStringOrPostPaymentIntentsAcssDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsAcssDebitPaymentMethodOptionsInput: StripePostPaymentIntentsAcssDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsAddressBillingDetailsPaymentMethodDataUnionInput {
	string: String
	stripePostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput: StripePostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput
}
input StripeStringOrPostPaymentIntentsAffirmPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsAffirmPaymentMethodOptionsInput: StripePostPaymentIntentsAffirmPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsAfterpayClearpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput: StripePostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsAlipayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsAlipayPaymentMethodOptionsInput: StripePostPaymentIntentsAlipayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsAuBecsDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput: StripePostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsBacsDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsBacsDebitPaymentMethodOptionsInput: StripePostPaymentIntentsBacsDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsBancontactPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsBancontactPaymentMethodOptionsInput: StripePostPaymentIntentsBancontactPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsBlikPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsBlikPaymentMethodOptionsInput: StripePostPaymentIntentsBlikPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsBoletoPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsBoletoPaymentMethodOptionsInput: StripePostPaymentIntentsBoletoPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsCardPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsCardPaymentMethodOptionsInput: StripePostPaymentIntentsCardPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsCardPresentPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsCardPresentPaymentMethodOptionsInput: StripePostPaymentIntentsCardPresentPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsCustomerBalancePaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsCustomerBalancePaymentMethodOptionsInput: StripePostPaymentIntentsCustomerBalancePaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsEpsPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsEpsPaymentMethodOptionsInput: StripePostPaymentIntentsEpsPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsFpxPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsFpxPaymentMethodOptionsInput: StripePostPaymentIntentsFpxPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsGiropayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsGiropayPaymentMethodOptionsInput: StripePostPaymentIntentsGiropayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsGrabpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsGrabpayPaymentMethodOptionsInput: StripePostPaymentIntentsGrabpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIdealPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIdealPaymentMethodOptionsInput: StripePostPaymentIntentsIdealPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentAcssDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput {
	string: String
	stripePostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput: StripePostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput
}
input StripeStringOrPostPaymentIntentsIntentAffirmPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentAffirmPaymentMethodOptionsInput: StripePostPaymentIntentsIntentAffirmPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentAlipayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentAlipayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentAlipayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentBacsDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentBancontactPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentBancontactPaymentMethodOptionsInput: StripePostPaymentIntentsIntentBancontactPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentBlikPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentBlikPaymentMethodOptionsInput: StripePostPaymentIntentsIntentBlikPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentBoletoPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentBoletoPaymentMethodOptionsInput: StripePostPaymentIntentsIntentBoletoPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentCardPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentCardPaymentMethodOptionsInput: StripePostPaymentIntentsIntentCardPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentCardPresentPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput: StripePostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput: StripePostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmCardPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmP24PaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmPixPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmShippingUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmShippingInput: StripePostPaymentIntentsIntentConfirmShippingInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput: StripePostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentEpsPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentEpsPaymentMethodOptionsInput: StripePostPaymentIntentsIntentEpsPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentFpxPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentFpxPaymentMethodOptionsInput: StripePostPaymentIntentsIntentFpxPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentGiropayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentGiropayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentGiropayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentGrabpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentIdealPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentIdealPaymentMethodOptionsInput: StripePostPaymentIntentsIntentIdealPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentKlarnaPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput: StripePostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentKonbiniPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput: StripePostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentLinkPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentLinkPaymentMethodOptionsInput: StripePostPaymentIntentsIntentLinkPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentOxxoPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentOxxoPaymentMethodOptionsInput: StripePostPaymentIntentsIntentOxxoPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentP24PaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentP24PaymentMethodOptionsInput: StripePostPaymentIntentsIntentP24PaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentPaynowPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentPaynowPaymentMethodOptionsInput: StripePostPaymentIntentsIntentPaynowPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentPixPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentPixPaymentMethodOptionsInput: StripePostPaymentIntentsIntentPixPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput: StripePostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentPromptpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentSepaDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput: StripePostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentShippingUnionInput {
	string: String
	stripePostPaymentIntentsIntentShippingInput: StripePostPaymentIntentsIntentShippingInput
}
input StripeStringOrPostPaymentIntentsIntentSofortPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentSofortPaymentMethodOptionsInput: StripePostPaymentIntentsIntentSofortPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput: StripePostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsIntentWechatPayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput: StripePostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsKlarnaPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsKlarnaPaymentMethodOptionsInput: StripePostPaymentIntentsKlarnaPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsKonbiniPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsKonbiniPaymentMethodOptionsInput: StripePostPaymentIntentsKonbiniPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsLinkPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsLinkPaymentMethodOptionsInput: StripePostPaymentIntentsLinkPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsOxxoPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsOxxoPaymentMethodOptionsInput: StripePostPaymentIntentsOxxoPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsP24PaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsP24PaymentMethodOptionsInput: StripePostPaymentIntentsP24PaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsPaynowPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsPaynowPaymentMethodOptionsInput: StripePostPaymentIntentsPaynowPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsPixPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsPixPaymentMethodOptionsInput: StripePostPaymentIntentsPixPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput: StripePostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsPromptpayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsPromptpayPaymentMethodOptionsInput: StripePostPaymentIntentsPromptpayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsSepaDebitPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsSepaDebitPaymentMethodOptionsInput: StripePostPaymentIntentsSepaDebitPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsSofortPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsSofortPaymentMethodOptionsInput: StripePostPaymentIntentsSofortPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsUsBankAccountPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsUsBankAccountPaymentMethodOptionsInput: StripePostPaymentIntentsUsBankAccountPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentIntentsWechatPayPaymentMethodOptionsUnionInput {
	string: String
	stripePostPaymentIntentsWechatPayPaymentMethodOptionsInput: StripePostPaymentIntentsWechatPayPaymentMethodOptionsInput
}
input StripeStringOrPostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationUnionInput {
	string: String
	stripePostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput: StripePostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput
}
input StripeStringOrPostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationUnionInput {
	string: String
	stripePostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput: StripePostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput
}
input StripeStringOrPostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationUnionInput {
	string: String
	stripePostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput: StripePostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput
}
input StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCollectionUnionInput {
	string: String
	stripePostPaymentLinksPaymentLinkShippingAddressCollectionInput: StripePostPaymentLinksPaymentLinkShippingAddressCollectionInput
}
input StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCustomTextUnionInput {
	string: String
	stripePostPaymentLinksPaymentLinkShippingAddressCustomTextInput: StripePostPaymentLinksPaymentLinkShippingAddressCustomTextInput
}
input StripeStringOrPostPaymentLinksPaymentLinkSubmitCustomTextUnionInput {
	string: String
	stripePostPaymentLinksPaymentLinkSubmitCustomTextInput: StripePostPaymentLinksPaymentLinkSubmitCustomTextInput
}
input StripeStringOrPostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationUnionInput {
	string: String
	stripePostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput: StripePostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput
}
input StripeStringOrPostPaymentLinksShippingAddressCustomTextUnionInput {
	string: String
	stripePostPaymentLinksShippingAddressCustomTextInput: StripePostPaymentLinksShippingAddressCustomTextInput
}
input StripeStringOrPostPaymentLinksSubmitCustomTextUnionInput {
	string: String
	stripePostPaymentLinksSubmitCustomTextInput: StripePostPaymentLinksSubmitCustomTextInput
}
input StripeStringOrPostPaymentMethodsAddressBillingDetailsUnionInput {
	string: String
	stripePostPaymentMethodsAddressBillingDetailsInput: StripePostPaymentMethodsAddressBillingDetailsInput
}
input StripeStringOrPostPaymentMethodsPaymentMethodAddressBillingDetailsUnionInput {
	string: String
	stripePostPaymentMethodsPaymentMethodAddressBillingDetailsInput: StripePostPaymentMethodsPaymentMethodAddressBillingDetailsInput
}
input StripeStringOrPostPlansProductUnionInput {
	string: String
	stripePostPlansProductInput: StripePostPlansProductInput
}
input StripeStringOrPostProductsIdPackageDimensionsUnionInput {
	string: String
	stripePostProductsIdPackageDimensionsInput: StripePostProductsIdPackageDimensionsInput
}
input StripeStringOrPostQuotesDiscountsUnionInput {
	string: String
	stripePostQuotesDiscountsInput: StripePostQuotesDiscountsInput
}
input StripeStringOrPostQuotesQuoteDiscountsUnionInput {
	string: String
	stripePostQuotesQuoteDiscountsInput: StripePostQuotesQuoteDiscountsInput
}
input StripeStringOrPostQuotesQuoteTransferDataUnionInput {
	string: String
	stripePostQuotesQuoteTransferDataInput: StripePostQuotesQuoteTransferDataInput
}
input StripeStringOrPostQuotesTransferDataUnionInput {
	string: String
	stripePostQuotesTransferDataInput: StripePostQuotesTransferDataInput
}
input StripeStringOrPostSetupIntentsAddressBillingDetailsPaymentMethodDataUnionInput {
	string: String
	stripePostSetupIntentsAddressBillingDetailsPaymentMethodDataInput: StripePostSetupIntentsAddressBillingDetailsPaymentMethodDataInput
}
input StripeStringOrPostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput {
	string: String
	stripePostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput: StripePostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput
}
input StripeStringOrPostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput {
	string: String
	stripePostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput: StripePostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput
}
input StripeStringOrPostSubscriptionItemsBillingThresholdsUnionInput {
	string: String
	stripePostSubscriptionItemsBillingThresholdsInput: StripePostSubscriptionItemsBillingThresholdsInput
}
input StripeStringOrPostSubscriptionItemsItemBillingThresholdsUnionInput {
	string: String
	stripePostSubscriptionItemsItemBillingThresholdsInput: StripePostSubscriptionItemsItemBillingThresholdsInput
}
input StripeStringOrPostSubscriptionSchedulesBillingThresholdsDefaultSettingsUnionInput {
	string: String
	stripePostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput: StripePostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput
}
input StripeStringOrPostSubscriptionSchedulesBillingThresholdsItemsPhasesUnionInput {
	string: String
	stripePostSubscriptionSchedulesBillingThresholdsItemsPhasesInput: StripePostSubscriptionSchedulesBillingThresholdsItemsPhasesInput
}
input StripeStringOrPostSubscriptionSchedulesBillingThresholdsPhasesUnionInput {
	string: String
	stripePostSubscriptionSchedulesBillingThresholdsPhasesInput: StripePostSubscriptionSchedulesBillingThresholdsPhasesInput
}
input StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsUnionInput {
	string: String
	stripePostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput: StripePostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput
}
input StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesUnionInput {
	string: String
	stripePostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput: StripePostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput
}
input StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsPhasesUnionInput {
	string: String
	stripePostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput: StripePostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput
}
input StripeStringOrPostSubscriptionSchedulesScheduleTransferDataDefaultSettingsUnionInput {
	string: String
	stripePostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput: StripePostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput
}
input StripeStringOrPostSubscriptionSchedulesTransferDataDefaultSettingsUnionInput {
	string: String
	stripePostSubscriptionSchedulesTransferDataDefaultSettingsInput: StripePostSubscriptionSchedulesTransferDataDefaultSettingsInput
}
input StripeStringOrPostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsBillingThresholdsItemsUnionInput {
	string: String
	stripePostSubscriptionsBillingThresholdsItemsInput: StripePostSubscriptionsBillingThresholdsItemsInput
}
input StripeStringOrPostSubscriptionsBillingThresholdsUnionInput {
	string: String
	stripePostSubscriptionsBillingThresholdsInput: StripePostSubscriptionsBillingThresholdsInput
}
input StripeStringOrPostSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsPendingInvoiceItemIntervalUnionInput {
	string: String
	stripePostSubscriptionsPendingInvoiceItemIntervalInput: StripePostSubscriptionsPendingInvoiceItemIntervalInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput: StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdBillingThresholdsInput: StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdPauseCollectionInput: StripePostSubscriptionsSubscriptionExposedIdPauseCollectionInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput: StripePostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdTransferDataUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdTransferDataInput: StripePostSubscriptionsSubscriptionExposedIdTransferDataInput
}
input StripeStringOrPostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput {
	string: String
	stripePostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput: StripePostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput
}
input StripeStringOrPostTerminalConfigurationsConfigurationBbposWiseposEUnionInput {
	string: String
	stripePostTerminalConfigurationsConfigurationBbposWiseposEInput: StripePostTerminalConfigurationsConfigurationBbposWiseposEInput
}
input StripeStringOrPostTerminalConfigurationsConfigurationTippingUnionInput {
	string: String
	stripePostTerminalConfigurationsConfigurationTippingInput: StripePostTerminalConfigurationsConfigurationTippingInput
}
input StripeStringOrPostTerminalConfigurationsConfigurationVerifoneP400UnionInput {
	string: String
	stripePostTerminalConfigurationsConfigurationVerifoneP400Input: StripePostTerminalConfigurationsConfigurationVerifoneP400Input
}
input StripeStringOrPostTerminalConfigurationsTippingUnionInput {
	string: String
	stripePostTerminalConfigurationsTippingInput: StripePostTerminalConfigurationsTippingInput
}
input StripeStringOrPostTokensCardUnionInput {
	string: String
	stripePostTokensCardInput: StripePostTokensCardInput
}
input StripeStringOrPostTokensDobIndividualAccountUnionInput {
	string: String
	stripePostTokensDobIndividualAccountInput: StripePostTokensDobIndividualAccountInput
}
input StripeStringOrPostTokensDobPersonUnionInput {
	string: String
	stripePostTokensDobPersonInput: StripePostTokensDobPersonInput
}
input StripeStringOrPostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataUnionInput {
	string: String
	stripePostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput: StripePostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput
}
input StripeStringOrPostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsUnionInput {
	string: String
	stripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput: StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput
}
input StripeStringOrPostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsUnionInput {
	string: String
	stripePostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput: StripePostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput
}
union StripeStringOrPriceUnion = StripeString | StripePrice
union StripeStringOrPromotionCodeUnion = StripeString | StripePromotionCode
union StripeStringOrQuoteUnion = StripeString | StripeQuote
union StripeStringOrRefundUnion = StripeString | StripeRefund
union StripeStringOrReviewUnion = StripeString | StripeReview
union StripeStringOrRuleUnion = StripeString | StripeRule
union StripeStringOrSetupAttemptUnion = StripeString | StripeSetupAttempt
union StripeStringOrSetupIntentUnion = StripeString | StripeSetupIntent
union StripeStringOrShippingRateUnion = StripeString | StripeShippingRate
union StripeStringOrSourceOrCardOrBankAccountUnion = StripeString | StripeSource | StripeCard | StripeBankAccount
input StripeStringOrStringUnionInput {
	string: String
}
union StripeStringOrSubscriptionScheduleUnion = StripeString | StripeSubscriptionSchedule
union StripeStringOrSubscriptionUnion = StripeString | StripeSubscription
union StripeStringOrTaxCodeUnion = StripeString | StripeTaxCode
union StripeStringOrTaxRateUnion = StripeString | StripeTaxRate
union StripeStringOrTerminalLocationUnion = StripeString | StripeTerminalLocation
union StripeStringOrTestHelpersTestClockUnion = StripeString | StripeTestHelpersTestClock
union StripeStringOrTransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion = StripeString | StripeTransferReversal | StripeTransfer | StripeTopup | StripeTaxDeductedAtSource | StripeReserveTransaction | StripeRefund | StripePlatformTaxFee | StripePayout | StripeIssuingTransaction | StripeIssuingDispute | StripeIssuingAuthorization | StripeFeeRefund | StripeDispute | StripeConnectCollectionTransfer | StripeCharge | StripeApplicationFee
union StripeStringOrTransferReversalUnion = StripeString | StripeTransferReversal
union StripeStringOrTransferUnion = StripeString | StripeTransfer
union StripeStringOrTreasuryTransactionUnion = StripeString | StripeTreasuryTransaction
type StripeSubscription {
	trialStart: Int
	trialSettings: StripeSubscriptionsTrialsResourceTrialSettings
	trialEnd: Int
	transferData: StripeSubscriptionTransferData
	testClock: StripeStringOrTestHelpersTestClockUnion
	status: StripeSubscriptionStatus!
	startDate: Int!
	schedule: StripeStringOrSubscriptionScheduleUnion
	pendingUpdate: StripeSubscriptionsResourcePendingUpdate
	pendingSetupIntent: StripeStringOrSetupIntentUnion
	pendingInvoiceItemInterval: StripeSubscriptionPendingInvoiceItemInterval
	paymentSettings: StripeSubscriptionsResourcePaymentSettings
	pauseCollection: StripeSubscriptionsResourcePauseCollection
	onBehalfOf: StripeStringOrAccountUnion
	object: StripeSubscriptionObject!
	nextPendingInvoiceItemInvoice: Int
	metadata: JSON!
	livemode: Boolean!
	latestInvoice: StripeStringOrInvoiceUnion
	items: StripeSubscriptionItems!
	id: String!
	endedAt: Int
	discount: StripeDiscount
	description: String
	defaultTaxRates: [StripeTaxRate!]
	defaultSource: StripeStringOrSourceOrCardOrBankAccountUnion
	defaultPaymentMethod: StripeStringOrPaymentMethodUnion
	daysUntilDue: Int
	customer: StripeStringOrDeletedCustomerOrCustomerUnion!
	currentPeriodStart: Int!
	currentPeriodEnd: Int!
	currency: String!
	created: Int!
	collectionMethod: StripeSubscriptionCollectionMethod!
	canceledAt: Int
	cancelAtPeriodEnd: Boolean!
	cancelAt: Int
	billingThresholds: StripeSubscriptionBillingThresholds
	billingCycleAnchor: Int!
	automaticTax: StripeSubscriptionAutomaticTax!
	applicationFeePercent: Float
	application: StripeStringOrDeletedApplicationOrApplicationUnion
}
type StripeSubscriptionAutomaticTax {
	enabled: Boolean!
}
type StripeSubscriptionBillingThresholds {
	resetBillingCycleAnchor: Boolean
	amountGte: Int
}
enum StripeSubscriptionCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
type StripeSubscriptionItem {
	taxRates: [StripeTaxRate!]
	subscription: String!
	quantity: Int
	price: StripePrice!
	object: StripeSubscriptionItemObject!
	metadata: JSON!
	id: String!
	created: Int!
	billingThresholds: StripeSubscriptionItemBillingThresholds
}
type StripeSubscriptionItemBillingThresholds {
	usageGte: Int
}
enum StripeSubscriptionItemObject {
	SUBSCRIPTION_ITEM
}
type StripeSubscriptionItems {
	url: String!
	object: StripeSubscriptionObjectItems!
	hasMore: Boolean!
	nodes: [StripeSubscriptionItem!]!
}
enum StripeSubscriptionObject {
	SUBSCRIPTION
}
enum StripeSubscriptionObjectItems {
	LIST
}
type StripeSubscriptionPaymentMethodOptionsCard {
	requestThreeDSecure: StripeSubscriptionPaymentMethodOptionsCardRequestThreeDSecure
	network: StripeSubscriptionPaymentMethodOptionsCardNetwork
	mandateOptions: StripeInvoiceMandateOptionsCard
}
enum StripeSubscriptionPaymentMethodOptionsCardNetwork {
	AMEX
	CARTES_BANCAIRES
	DINERS
	DISCOVER
	INTERAC
	JCB
	MASTERCARD
	UNIONPAY
	UNKNOWN
	VISA
}
enum StripeSubscriptionPaymentMethodOptionsCardRequestThreeDSecure {
	ANY
	AUTOMATIC
}
type StripeSubscriptionPendingInvoiceItemInterval {
	intervalCount: Int!
	interval: StripeSubscriptionPendingInvoiceItemIntervalInterval!
}
enum StripeSubscriptionPendingInvoiceItemIntervalInterval {
	DAY
	MONTH
	WEEK
	YEAR
}
type StripeSubscriptionSchedule {
	testClock: StripeStringOrTestHelpersTestClockUnion
	subscription: StripeStringOrSubscriptionUnion
	status: StripeSubscriptionScheduleStatus!
	releasedSubscription: String
	releasedAt: Int
	phases: [StripeSubscriptionSchedulePhaseConfiguration!]!
	object: StripeSubscriptionScheduleObject!
	metadata: JSON
	livemode: Boolean!
	id: String!
	endBehavior: StripeSubscriptionScheduleEndBehavior!
	defaultSettings: StripeSubscriptionSchedulesResourceDefaultSettings!
	customer: StripeStringOrDeletedCustomerOrCustomerUnion!
	currentPhase: StripeSubscriptionScheduleCurrentPhase
	created: Int!
	completedAt: Int
	canceledAt: Int
	application: StripeStringOrDeletedApplicationOrApplicationUnion
}
type StripeSubscriptionScheduleAddInvoiceItem {
	taxRates: [StripeTaxRate!]
	quantity: Int
	price: StripeStringOrDeletedPriceOrPriceUnion!
}
type StripeSubscriptionScheduleConfigurationItem {
	taxRates: [StripeTaxRate!]
	quantity: Int
	price: StripeStringOrDeletedPriceOrPriceUnion!
	metadata: JSON
	billingThresholds: StripeSubscriptionItemBillingThresholds
}
type StripeSubscriptionScheduleCurrentPhase {
	startDate: Int!
	endDate: Int!
}
enum StripeSubscriptionScheduleEndBehavior {
	CANCEL
	NONE
	RELEASE
	RENEW
}
enum StripeSubscriptionScheduleObject {
	SUBSCRIPTION_SCHEDULE
}
type StripeSubscriptionSchedulePhaseConfiguration {
	trialEnd: Int
	transferData: StripeSubscriptionTransferData
	startDate: Int!
	prorationBehavior: StripeSubscriptionSchedulePhaseConfigurationProrationBehavior!
	onBehalfOf: StripeStringOrAccountUnion
	metadata: JSON
	items: [StripeSubscriptionScheduleConfigurationItem!]!
	invoiceSettings: StripeInvoiceSettingSubscriptionScheduleSetting
	endDate: Int!
	description: String
	defaultTaxRates: [StripeTaxRate!]
	defaultPaymentMethod: StripeStringOrPaymentMethodUnion
	currency: String!
	coupon: StripeStringOrDeletedCouponOrCouponUnion
	collectionMethod: StripeSubscriptionSchedulePhaseConfigurationCollectionMethod
	billingThresholds: StripeSubscriptionBillingThresholds
	billingCycleAnchor: StripeSubscriptionSchedulePhaseConfigurationBillingCycleAnchor
	automaticTax: StripeSchedulesPhaseAutomaticTax
	applicationFeePercent: Float
	addInvoiceItems: [StripeSubscriptionScheduleAddInvoiceItem!]!
}
enum StripeSubscriptionSchedulePhaseConfigurationBillingCycleAnchor {
	AUTOMATIC
	PHASE_START
}
enum StripeSubscriptionSchedulePhaseConfigurationCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum StripeSubscriptionSchedulePhaseConfigurationProrationBehavior {
	ALWAYS_INVOICE
	CREATE_PRORATIONS
	NONE
}
enum StripeSubscriptionScheduleStatus {
	ACTIVE
	CANCELED
	COMPLETED
	NOT_STARTED
	RELEASED
}
type StripeSubscriptionSchedulesResourceDefaultSettings {
	transferData: StripeSubscriptionTransferData
	onBehalfOf: StripeStringOrAccountUnion
	invoiceSettings: StripeInvoiceSettingSubscriptionScheduleSetting
	description: String
	defaultPaymentMethod: StripeStringOrPaymentMethodUnion
	collectionMethod: StripeSubscriptionSchedulesResourceDefaultSettingsCollectionMethod
	billingThresholds: StripeSubscriptionBillingThresholds
	billingCycleAnchor: StripeSubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor!
	automaticTax: StripeSubscriptionSchedulesResourceDefaultSettingsAutomaticTax
	applicationFeePercent: Float
}
type StripeSubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
	enabled: Boolean!
}
enum StripeSubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor {
	AUTOMATIC
	PHASE_START
}
enum StripeSubscriptionSchedulesResourceDefaultSettingsCollectionMethod {
	CHARGE_AUTOMATICALLY
	SEND_INVOICE
}
enum StripeSubscriptionStatus {
	ACTIVE
	CANCELED
	INCOMPLETE
	INCOMPLETE_EXPIRED
	PAST_DUE
	PAUSED
	TRIALING
	UNPAID
}
type StripeSubscriptionTransferData {
	destination: StripeStringOrAccountUnion!
	amountPercent: Float
}
type StripeSubscriptionsResourcePauseCollection {
	resumesAt: Int
	behavior: StripeSubscriptionsResourcePauseCollectionBehavior!
}
enum StripeSubscriptionsResourcePauseCollectionBehavior {
	KEEP_AS_DRAFT
	MARK_UNCOLLECTIBLE
	VOID
}
type StripeSubscriptionsResourcePaymentMethodOptions {
	usBankAccount: StripeInvoicePaymentMethodOptionsUsBankAccount
	konbini: JSON
	customerBalance: StripeInvoicePaymentMethodOptionsCustomerBalance
	card: StripeSubscriptionPaymentMethodOptionsCard
	bancontact: StripeInvoicePaymentMethodOptionsBancontact
	acssDebit: StripeInvoicePaymentMethodOptionsAcssDebit
}
type StripeSubscriptionsResourcePaymentSettings {
	saveDefaultPaymentMethod: StripeSubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod
	paymentMethodTypes: [StripeSubscriptionsResourcePaymentSettingsPaymentMethodTypes!]
	paymentMethodOptions: StripeSubscriptionsResourcePaymentMethodOptions
}
enum StripeSubscriptionsResourcePaymentSettingsPaymentMethodTypes {
	ACH_CREDIT_TRANSFER
	ACH_DEBIT
	ACSS_DEBIT
	AU_BECS_DEBIT
	BACS_DEBIT
	BANCONTACT
	BOLETO
	CARD
	CUSTOMER_BALANCE
	FPX
	GIROPAY
	GRABPAY
	IDEAL
	KONBINI
	LINK
	PAYNOW
	PROMPTPAY
	SEPA_DEBIT
	SOFORT
	US_BANK_ACCOUNT
	WECHAT_PAY
}
enum StripeSubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod {
	OFF
	ON_SUBSCRIPTION
}
type StripeSubscriptionsResourcePendingUpdate {
	trialFromPlan: Boolean
	trialEnd: Int
	subscriptionItems: [StripeSubscriptionItem!]
	expiresAt: Int!
	billingCycleAnchor: Int
}
type StripeSubscriptionsTrialsResourceEndBehavior {
	missingPaymentMethod: StripeSubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod!
}
enum StripeSubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod {
	CANCEL
	CREATE_INVOICE
	PAUSE
}
type StripeSubscriptionsTrialsResourceTrialSettings {
	endBehavior: StripeSubscriptionsTrialsResourceEndBehavior!
}
type StripeTaxCode {
	object: StripeTaxCodeObject!
	name: String!
	id: String!
	description: String!
}
enum StripeTaxCodeObject {
	TAX_CODE
}
type StripeTaxDeductedAtSource {
	taxDeductionAccountNumber: String!
	periodStart: Int!
	periodEnd: Int!
	object: StripeTaxDeductedAtSourceObject!
	id: String!
}
enum StripeTaxDeductedAtSourceObject {
	TAX_DEDUCTED_AT_SOURCE
}
type StripeTaxId {
	verification: StripeTaxIdVerification
	value: String!
	type: StripeTaxIdType!
	object: StripeTaxIdObject!
	livemode: Boolean!
	id: String!
	customer: StripeStringOrCustomerUnion
	created: Int!
	country: String
}
enum StripeTaxIdObject {
	TAX_ID
}
enum StripeTaxIdType {
	AE_TRN
	AU_ABN
	AU_ARN
	BG_UIC
	BR_CNPJ
	BR_CPF
	CA_BN
	CA_GST_HST
	CA_PST_BC
	CA_PST_MB
	CA_PST_SK
	CA_QST
	CH_VAT
	CL_TIN
	EG_TIN
	ES_CIF
	EU_OSS_VAT
	EU_VAT
	GB_VAT
	GE_VAT
	HK_BR
	HU_TIN
	ID_NPWP
	IL_VAT
	IN_GST
	IS_VAT
	JP_CN
	JP_RN
	JP_TRN
	KE_PIN
	KR_BRN
	LI_UID
	MX_RFC
	MY_FRP
	MY_ITN
	MY_SST
	NO_VAT
	NZ_GST
	PH_TIN
	RU_INN
	RU_KPP
	SA_VAT
	SG_GST
	SG_UEN
	SI_TIN
	TH_VAT
	TR_TIN
	TW_VAT
	UA_VAT
	UNKNOWN
	US_EIN
	ZA_VAT
}
type StripeTaxIdVerification {
	verifiedName: String
	verifiedAddress: String
	status: StripeTaxIdVerificationStatus!
}
enum StripeTaxIdVerificationStatus {
	PENDING
	UNAVAILABLE
	UNVERIFIED
	VERIFIED
}
type StripeTaxRate {
	taxType: StripeTaxRateTaxType
	state: String
	percentage: Float!
	object: StripeTaxRateObject!
	metadata: JSON
	livemode: Boolean!
	jurisdiction: String
	inclusive: Boolean!
	id: String!
	displayName: String!
	description: String
	created: Int!
	country: String
	active: Boolean!
}
enum StripeTaxRateObject {
	TAX_RATE
}
enum StripeTaxRateTaxType {
	GST
	HST
	JCT
	PST
	QST
	RST
	SALES_TAX
	VAT
}
type StripeTerminalConfiguration {
	verifoneP400: StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
	tipping: StripeTerminalConfigurationConfigurationResourceTipping
	object: StripeTerminalConfigurationObject!
	livemode: Boolean!
	isAccountDefault: Boolean
	id: String!
	bbposWiseposE: StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
}
type StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig {
	smartTipThreshold: Int
	percentages: [Int!]
	fixedAmounts: [Int!]
}
type StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig {
	splashscreen: StripeStringOrFileUnion
}
type StripeTerminalConfigurationConfigurationResourceTipping {
	usd: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	sgd: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	sek: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	nzd: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	nok: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	myr: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	hkd: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	gbp: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	eur: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	dkk: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	czk: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	chf: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	cad: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
	aud: StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig
}
enum StripeTerminalConfigurationObject {
	TERMINAL_CONFIGURATION
}
type StripeTerminalConnectionToken {
	secret: String!
	object: StripeTerminalConnectionTokenObject!
	location: String
}
enum StripeTerminalConnectionTokenObject {
	TERMINAL_CONNECTION_TOKEN
}
type StripeTerminalLocation {
	object: StripeTerminalLocationObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	displayName: String!
	configurationOverrides: String
	address: StripeAddress!
}
enum StripeTerminalLocationObject {
	TERMINAL_LOCATION
}
type StripeTerminalReader {
	status: String
	serialNumber: String!
	object: StripeTerminalReaderObject!
	metadata: JSON!
	location: StripeStringOrTerminalLocationUnion
	livemode: Boolean!
	label: String!
	ipAddress: String
	id: String!
	deviceType: StripeTerminalReaderDeviceType!
	deviceSwVersion: String
	action: StripeTerminalReaderReaderResourceReaderAction
}
enum StripeTerminalReaderDeviceType {
	BBPOS_CHIPPER_2X
	BBPOS_WISEPAD_3
	BBPOS_WISEPOS_E
	SIMULATED_WISEPOS_E
	STRIPE_M_2
	VERIFONE_P400
}
enum StripeTerminalReaderObject {
	TERMINAL_READER
}
type StripeTerminalReaderReaderResourceCart {
	total: Int!
	tax: Int
	lineItems: [StripeTerminalReaderReaderResourceLineItem!]!
	currency: String!
}
type StripeTerminalReaderReaderResourceLineItem {
	quantity: Int!
	description: String!
	amount: Int!
}
type StripeTerminalReaderReaderResourceProcessConfig {
	tipping: StripeTerminalReaderReaderResourceTippingConfig
	skipTipping: Boolean
}
type StripeTerminalReaderReaderResourceProcessPaymentIntentAction {
	processConfig: StripeTerminalReaderReaderResourceProcessConfig
	paymentIntent: StripeStringOrPaymentIntentUnion!
}
type StripeTerminalReaderReaderResourceProcessSetupIntentAction {
	setupIntent: StripeStringOrSetupIntentUnion!
	generatedCard: String
}
type StripeTerminalReaderReaderResourceReaderAction {
	type: StripeTerminalReaderReaderResourceReaderActionType!
	status: StripeTerminalReaderReaderResourceReaderActionStatus!
	setReaderDisplay: StripeTerminalReaderReaderResourceSetReaderDisplayAction
	processSetupIntent: StripeTerminalReaderReaderResourceProcessSetupIntentAction
	processPaymentIntent: StripeTerminalReaderReaderResourceProcessPaymentIntentAction
	failureMessage: String
	failureCode: String
}
enum StripeTerminalReaderReaderResourceReaderActionStatus {
	FAILED
	IN_PROGRESS
	SUCCEEDED
}
enum StripeTerminalReaderReaderResourceReaderActionType {
	PROCESS_PAYMENT_INTENT
	PROCESS_SETUP_INTENT
	SET_READER_DISPLAY
}
type StripeTerminalReaderReaderResourceSetReaderDisplayAction {
	type: StripeTerminalReaderReaderResourceSetReaderDisplayActionType!
	cart: StripeTerminalReaderReaderResourceCart
}
enum StripeTerminalReaderReaderResourceSetReaderDisplayActionType {
	CART
}
type StripeTerminalReaderReaderResourceTippingConfig {
	amountEligible: Int
}
type StripeTestHelpersTestClock {
	status: StripeTestHelpersTestClockStatus!
	object: StripeTestHelpersTestClockObject!
	name: String
	livemode: Boolean!
	id: String!
	frozenTime: Int!
	deletesAfter: Int!
	created: Int!
}
enum StripeTestHelpersTestClockObject {
	TEST_HELPERS_TEST_CLOCK
}
enum StripeTestHelpersTestClockStatus {
	ADVANCING
	INTERNAL_FAILURE
	READY
}
type StripeThreeDSecureDetails {
	version: String
	resultReason: StripeThreeDSecureDetailsResultReason
	result: StripeThreeDSecureDetailsResult
	authenticationFlow: StripeThreeDSecureDetailsAuthenticationFlow
}
enum StripeThreeDSecureDetailsAuthenticationFlow {
	CHALLENGE
	FRICTIONLESS
}
enum StripeThreeDSecureDetailsResult {
	ATTEMPT_ACKNOWLEDGED
	AUTHENTICATED
	EXEMPTED
	FAILED
	NOT_SUPPORTED
	PROCESSING_ERROR
}
enum StripeThreeDSecureDetailsResultReason {
	ABANDONED
	BYPASSED
	CANCELED
	CARD_NOT_ENROLLED
	NETWORK_NOT_SUPPORTED
	PROTOCOL_ERROR
	REJECTED
}
type StripeThreeDSecureUsage {
	supported: Boolean!
}
type StripeToken {
	used: Boolean!
	type: String!
	object: StripeTokenObject!
	livemode: Boolean!
	id: String!
	created: Int!
	clientIp: String
	card: StripeCard
	bankAccount: StripeBankAccount
}
enum StripeTokenObject {
	TOKEN
}
type StripeTopup {
	transferGroup: String
	status: StripeTopupStatus!
	statementDescriptor: String
	source: StripeSource
	object: StripeTopupObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	failureMessage: String
	failureCode: String
	expectedAvailabilityDate: Int
	description: String
	currency: String!
	created: Int!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	amount: Int!
}
enum StripeTopupObject {
	TOPUP
}
enum StripeTopupStatus {
	CANCELED
	FAILED
	PENDING
	REVERSED
	SUCCEEDED
}
type StripeTransfer {
	transferGroup: String
	sourceType: String
	sourceTransaction: StripeStringOrChargeUnion
	reversed: Boolean!
	reversals: StripeTransferReversals!
	object: StripeTransferObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	destinationPayment: StripeStringOrChargeUnion
	destination: StripeStringOrAccountUnion
	description: String
	currency: String!
	created: Int!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	amountReversed: Int!
	amount: Int!
}
type StripeTransferData {
	destination: StripeStringOrAccountUnion!
	amount: Int
}
enum StripeTransferObject {
	TRANSFER
}
enum StripeTransferObjectReversals {
	LIST
}
type StripeTransferReversal {
	transfer: StripeStringOrTransferUnion!
	sourceRefund: StripeStringOrRefundUnion
	object: StripeTransferReversalObject!
	metadata: JSON
	id: String!
	destinationPaymentRefund: StripeStringOrRefundUnion
	currency: String!
	created: Int!
	balanceTransaction: StripeStringOrBalanceTransactionUnion
	amount: Int!
}
enum StripeTransferReversalObject {
	TRANSFER_REVERSAL
}
type StripeTransferReversals {
	url: String!
	object: StripeTransferObjectReversals!
	hasMore: Boolean!
	nodes: [StripeTransferReversal!]!
}
type StripeTransferSchedule {
	weeklyAnchor: String
	monthlyAnchor: Int
	interval: String!
	delayDays: Int!
}
type StripeTransformQuantity {
	round: StripeTransformQuantityRound!
	divideBy: Int!
}
enum StripeTransformQuantityRound {
	DOWN
	UP
}
type StripeTransformUsage {
	round: StripeTransformUsageRound!
	divideBy: Int!
}
enum StripeTransformUsageRound {
	DOWN
	UP
}
type StripeTreasuryCreditReversal {
	transaction: StripeStringOrTreasuryTransactionUnion
	statusTransitions: StripeTreasuryReceivedCreditsResourceStatusTransitions!
	status: StripeTreasuryCreditReversalStatus!
	receivedCredit: String!
	object: StripeTreasuryCreditReversalObject!
	network: StripeTreasuryCreditReversalNetwork!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum StripeTreasuryCreditReversalNetwork {
	ACH
	STRIPE
}
enum StripeTreasuryCreditReversalObject {
	TREASURY_CREDIT_REVERSAL
}
enum StripeTreasuryCreditReversalStatus {
	CANCELED
	POSTED
	PROCESSING
}
type StripeTreasuryDebitReversal {
	transaction: StripeStringOrTreasuryTransactionUnion
	statusTransitions: StripeTreasuryReceivedDebitsResourceStatusTransitions!
	status: StripeTreasuryDebitReversalStatus!
	receivedDebit: String!
	object: StripeTreasuryDebitReversalObject!
	network: StripeTreasuryDebitReversalNetwork!
	metadata: JSON!
	livemode: Boolean!
	linkedFlows: StripeTreasuryReceivedDebitsResourceDebitReversalLinkedFlows
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	currency: String!
	created: Int!
	amount: Int!
}
enum StripeTreasuryDebitReversalNetwork {
	ACH
	CARD
}
enum StripeTreasuryDebitReversalObject {
	TREASURY_DEBIT_REVERSAL
}
enum StripeTreasuryDebitReversalStatus {
	FAILED
	PROCESSING
	SUCCEEDED
}
type StripeTreasuryFinancialAccount {
	supportedCurrencies: [String!]!
	statusDetails: StripeTreasuryFinancialAccountsResourceStatusDetails!
	status: StripeTreasuryFinancialAccountStatus!
	restrictedFeatures: [StripeTreasuryFinancialAccountRestrictedFeatures!]
	platformRestrictions: StripeTreasuryFinancialAccountsResourcePlatformRestrictions
	pendingFeatures: [StripeTreasuryFinancialAccountPendingFeatures!]
	object: StripeTreasuryFinancialAccountObject!
	metadata: JSON
	livemode: Boolean!
	id: String!
	financialAddresses: [StripeTreasuryFinancialAccountsResourceFinancialAddress!]!
	features: StripeTreasuryFinancialAccountFeatures
	created: Int!
	country: String!
	balance: StripeTreasuryFinancialAccountsResourceBalance!
	activeFeatures: [StripeTreasuryFinancialAccountActiveFeatures!]
}
enum StripeTreasuryFinancialAccountActiveFeatures {
	CARD_ISSUING
	DEPOSIT_INSURANCE
	FINANCIAL_ADDRESSES_ABA
	INBOUND_TRANSFERS_ACH
	INTRA_STRIPE_FLOWS
	OUTBOUND_PAYMENTS_ACH
	OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE
	OUTBOUND_TRANSFERS_ACH
	OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE
	REMOTE_DEPOSIT_CAPTURE
}
type StripeTreasuryFinancialAccountFeatures {
	outboundTransfers: StripeTreasuryFinancialAccountsResourceOutboundTransfers
	outboundPayments: StripeTreasuryFinancialAccountsResourceOutboundPayments
	object: StripeTreasuryFinancialAccountFeaturesObject!
	intraStripeFlows: StripeTreasuryFinancialAccountsResourceToggleSettings
	inboundTransfers: StripeTreasuryFinancialAccountsResourceInboundTransfers
	financialAddresses: StripeTreasuryFinancialAccountsResourceFinancialAddressesFeatures
	depositInsurance: StripeTreasuryFinancialAccountsResourceToggleSettings
	cardIssuing: StripeTreasuryFinancialAccountsResourceToggleSettings
}
enum StripeTreasuryFinancialAccountFeaturesObject {
	TREASURY_FINANCIAL_ACCOUNT_FEATURES
}
enum StripeTreasuryFinancialAccountObject {
	TREASURY_FINANCIAL_ACCOUNT
}
enum StripeTreasuryFinancialAccountPendingFeatures {
	CARD_ISSUING
	DEPOSIT_INSURANCE
	FINANCIAL_ADDRESSES_ABA
	INBOUND_TRANSFERS_ACH
	INTRA_STRIPE_FLOWS
	OUTBOUND_PAYMENTS_ACH
	OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE
	OUTBOUND_TRANSFERS_ACH
	OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE
	REMOTE_DEPOSIT_CAPTURE
}
enum StripeTreasuryFinancialAccountRestrictedFeatures {
	CARD_ISSUING
	DEPOSIT_INSURANCE
	FINANCIAL_ADDRESSES_ABA
	INBOUND_TRANSFERS_ACH
	INTRA_STRIPE_FLOWS
	OUTBOUND_PAYMENTS_ACH
	OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE
	OUTBOUND_TRANSFERS_ACH
	OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE
	REMOTE_DEPOSIT_CAPTURE
}
enum StripeTreasuryFinancialAccountStatus {
	CLOSED
	OPEN
}
type StripeTreasuryFinancialAccountsResourceAbaRecord {
	routingNumber: String!
	bankName: String!
	accountNumberLast4: String!
	accountNumber: String
	accountHolderName: String!
}
type StripeTreasuryFinancialAccountsResourceAchToggleSettings {
	statusDetails: [StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: StripeTreasuryFinancialAccountsResourceAchToggleSettingsStatus!
	requested: Boolean!
}
enum StripeTreasuryFinancialAccountsResourceAchToggleSettingsStatus {
	ACTIVE
	PENDING
	RESTRICTED
}
type StripeTreasuryFinancialAccountsResourceBalance {
	outboundPending: JSON!
	inboundPending: JSON!
	cash: JSON!
}
type StripeTreasuryFinancialAccountsResourceClosedStatusDetails {
	reasons: [StripeTreasuryFinancialAccountsResourceClosedStatusDetailsReasons!]!
}
enum StripeTreasuryFinancialAccountsResourceClosedStatusDetailsReasons {
	ACCOUNT_REJECTED
	CLOSED_BY_PLATFORM
	OTHER
}
type StripeTreasuryFinancialAccountsResourceFinancialAddress {
	type: StripeTreasuryFinancialAccountsResourceFinancialAddressType!
	supportedNetworks: [StripeTreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks!]
	aba: StripeTreasuryFinancialAccountsResourceAbaRecord
}
enum StripeTreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks {
	ACH
	US_DOMESTIC_WIRE
}
enum StripeTreasuryFinancialAccountsResourceFinancialAddressType {
	ABA
}
type StripeTreasuryFinancialAccountsResourceFinancialAddressesFeatures {
	aba: StripeTreasuryFinancialAccountsResourceToggleSettings
}
type StripeTreasuryFinancialAccountsResourceInboundTransfers {
	ach: StripeTreasuryFinancialAccountsResourceAchToggleSettings
}
type StripeTreasuryFinancialAccountsResourceOutboundPayments {
	usDomesticWire: StripeTreasuryFinancialAccountsResourceToggleSettings
	ach: StripeTreasuryFinancialAccountsResourceAchToggleSettings
}
type StripeTreasuryFinancialAccountsResourceOutboundTransfers {
	usDomesticWire: StripeTreasuryFinancialAccountsResourceToggleSettings
	ach: StripeTreasuryFinancialAccountsResourceAchToggleSettings
}
type StripeTreasuryFinancialAccountsResourcePlatformRestrictions {
	outboundFlows: StripeTreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows
	inboundFlows: StripeTreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows
}
enum StripeTreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows {
	RESTRICTED
	UNRESTRICTED
}
enum StripeTreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows {
	RESTRICTED
	UNRESTRICTED
}
type StripeTreasuryFinancialAccountsResourceStatusDetails {
	closed: StripeTreasuryFinancialAccountsResourceClosedStatusDetails
}
type StripeTreasuryFinancialAccountsResourceToggleSettings {
	statusDetails: [StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails!]!
	status: StripeTreasuryFinancialAccountsResourceToggleSettingsStatus!
	requested: Boolean!
}
enum StripeTreasuryFinancialAccountsResourceToggleSettingsStatus {
	ACTIVE
	PENDING
	RESTRICTED
}
type StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails {
	restriction: StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction
	resolution: StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution
	code: StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode!
}
enum StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode {
	ACTIVATING
	CAPABILITY_NOT_REQUESTED
	FINANCIAL_ACCOUNT_CLOSED
	REJECTED_OTHER
	REJECTED_UNSUPPORTED_BUSINESS
	REQUIREMENTS_PAST_DUE
	REQUIREMENTS_PENDING_VERIFICATION
	RESTRICTED_BY_PLATFORM
	RESTRICTED_OTHER
}
enum StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution {
	CONTACT_STRIPE
	PROVIDE_INFORMATION
	REMOVE_RESTRICTION
}
enum StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction {
	INBOUND_FLOWS
	OUTBOUND_FLOWS
}
type StripeTreasuryInboundTransfer {
	transaction: StripeStringOrTreasuryTransactionUnion
	statusTransitions: StripeTreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions!
	status: StripeTreasuryInboundTransferStatus!
	statementDescriptor: String!
	returned: Boolean
	originPaymentMethodDetails: StripeInboundTransfers
	originPaymentMethod: String!
	object: StripeTreasuryInboundTransferObject!
	metadata: JSON!
	livemode: Boolean!
	linkedFlows: StripeTreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	failureDetails: StripeTreasuryInboundTransfersResourceFailureDetails
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum StripeTreasuryInboundTransferObject {
	TREASURY_INBOUND_TRANSFER
}
enum StripeTreasuryInboundTransferStatus {
	CANCELED
	FAILED
	PROCESSING
	SUCCEEDED
}
type StripeTreasuryInboundTransfersResourceFailureDetails {
	code: StripeTreasuryInboundTransfersResourceFailureDetailsCode!
}
enum StripeTreasuryInboundTransfersResourceFailureDetailsCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DEBIT_NOT_AUTHORIZED
	INCORRECT_ACCOUNT_HOLDER_ADDRESS
	INCORRECT_ACCOUNT_HOLDER_NAME
	INCORRECT_ACCOUNT_HOLDER_TAX_ID
	INSUFFICIENT_FUNDS
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
type StripeTreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows {
	receivedDebit: String
}
type StripeTreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions {
	succeededAt: Int
	failedAt: Int
	canceledAt: Int
}
type StripeTreasuryOutboundPayment {
	transaction: StripeStringOrTreasuryTransactionUnion!
	statusTransitions: StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions!
	status: StripeTreasuryOutboundPaymentStatus!
	statementDescriptor: String!
	returnedDetails: StripeTreasuryOutboundPaymentsResourceReturnedStatus
	object: StripeTreasuryOutboundPaymentObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	endUserDetails: StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
	destinationPaymentMethodDetails: StripeOutboundPaymentsPaymentMethodDetails
	destinationPaymentMethod: String
	description: String
	customer: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum StripeTreasuryOutboundPaymentObject {
	TREASURY_OUTBOUND_PAYMENT
}
enum StripeTreasuryOutboundPaymentStatus {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
type StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails {
	present: Boolean!
	ipAddress: String
}
type StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type StripeTreasuryOutboundPaymentsResourceReturnedStatus {
	transaction: StripeStringOrTreasuryTransactionUnion!
	code: StripeTreasuryOutboundPaymentsResourceReturnedStatusCode!
}
enum StripeTreasuryOutboundPaymentsResourceReturnedStatusCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
type StripeTreasuryOutboundTransfer {
	transaction: StripeStringOrTreasuryTransactionUnion!
	statusTransitions: StripeTreasuryOutboundTransfersResourceStatusTransitions!
	status: StripeTreasuryOutboundTransferStatus!
	statementDescriptor: String!
	returnedDetails: StripeTreasuryOutboundTransfersResourceReturnedDetails
	object: StripeTreasuryOutboundTransferObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String!
	expectedArrivalDate: Int!
	destinationPaymentMethodDetails: StripeOutboundTransfersPaymentMethodDetails!
	destinationPaymentMethod: String
	description: String
	currency: String!
	created: Int!
	cancelable: Boolean!
	amount: Int!
}
enum StripeTreasuryOutboundTransferObject {
	TREASURY_OUTBOUND_TRANSFER
}
enum StripeTreasuryOutboundTransferStatus {
	CANCELED
	FAILED
	POSTED
	PROCESSING
	RETURNED
}
type StripeTreasuryOutboundTransfersResourceReturnedDetails {
	transaction: StripeStringOrTreasuryTransactionUnion!
	code: StripeTreasuryOutboundTransfersResourceReturnedDetailsCode!
}
enum StripeTreasuryOutboundTransfersResourceReturnedDetailsCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	BANK_ACCOUNT_RESTRICTED
	BANK_OWNERSHIP_CHANGED
	DECLINED
	INCORRECT_ACCOUNT_HOLDER_NAME
	INVALID_ACCOUNT_NUMBER
	INVALID_CURRENCY
	NO_ACCOUNT
	OTHER
}
type StripeTreasuryOutboundTransfersResourceStatusTransitions {
	returnedAt: Int
	postedAt: Int
	failedAt: Int
	canceledAt: Int
}
type StripeTreasuryReceivedCredit {
	transaction: StripeStringOrTreasuryTransactionUnion
	status: StripeTreasuryReceivedCreditStatus!
	reversalDetails: StripeTreasuryReceivedCreditsResourceReversalDetails
	object: StripeTreasuryReceivedCreditObject!
	network: StripeTreasuryReceivedCreditNetwork!
	livemode: Boolean!
	linkedFlows: StripeTreasuryReceivedCreditsResourceLinkedFlows!
	initiatingPaymentMethodDetails: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails!
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: StripeTreasuryReceivedCreditFailureCode
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum StripeTreasuryReceivedCreditFailureCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	OTHER
}
enum StripeTreasuryReceivedCreditNetwork {
	ACH
	CARD
	STRIPE
	US_DOMESTIC_WIRE
}
enum StripeTreasuryReceivedCreditObject {
	TREASURY_RECEIVED_CREDIT
}
enum StripeTreasuryReceivedCreditStatus {
	FAILED
	SUCCEEDED
}
type StripeTreasuryReceivedCreditsResourceLinkedFlows {
	sourceFlowType: String
	sourceFlowDetails: StripeTreasuryReceivedCreditsResourceSourceFlowsDetails
	sourceFlow: String
	issuingTransaction: String
	issuingAuthorization: String
	creditReversal: String
}
type StripeTreasuryReceivedCreditsResourceReversalDetails {
	restrictedReason: StripeTreasuryReceivedCreditsResourceReversalDetailsRestrictedReason
	deadline: Int
}
enum StripeTreasuryReceivedCreditsResourceReversalDetailsRestrictedReason {
	ALREADY_REVERSED
	DEADLINE_PASSED
	NETWORK_RESTRICTED
	OTHER
	SOURCE_FLOW_RESTRICTED
}
type StripeTreasuryReceivedCreditsResourceSourceFlowsDetails {
	type: StripeTreasuryReceivedCreditsResourceSourceFlowsDetailsType!
	payout: StripePayout
	outboundPayment: StripeTreasuryOutboundPayment
	creditReversal: StripeTreasuryCreditReversal
}
enum StripeTreasuryReceivedCreditsResourceSourceFlowsDetailsType {
	CREDIT_REVERSAL
	OTHER
	OUTBOUND_PAYMENT
	PAYOUT
}
type StripeTreasuryReceivedCreditsResourceStatusTransitions {
	postedAt: Int
}
type StripeTreasuryReceivedDebit {
	transaction: StripeStringOrTreasuryTransactionUnion
	status: StripeTreasuryReceivedDebitStatus!
	reversalDetails: StripeTreasuryReceivedDebitsResourceReversalDetails
	object: StripeTreasuryReceivedDebitObject!
	network: StripeTreasuryReceivedDebitNetwork!
	livemode: Boolean!
	linkedFlows: StripeTreasuryReceivedDebitsResourceLinkedFlows!
	initiatingPaymentMethodDetails: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
	id: String!
	hostedRegulatoryReceiptUrl: String
	financialAccount: String
	failureCode: StripeTreasuryReceivedDebitFailureCode
	description: String!
	currency: String!
	created: Int!
	amount: Int!
}
enum StripeTreasuryReceivedDebitFailureCode {
	ACCOUNT_CLOSED
	ACCOUNT_FROZEN
	INSUFFICIENT_FUNDS
	OTHER
}
enum StripeTreasuryReceivedDebitNetwork {
	ACH
	CARD
	STRIPE
}
enum StripeTreasuryReceivedDebitObject {
	TREASURY_RECEIVED_DEBIT
}
enum StripeTreasuryReceivedDebitStatus {
	FAILED
	SUCCEEDED
}
type StripeTreasuryReceivedDebitsResourceDebitReversalLinkedFlows {
	issuingDispute: String
}
type StripeTreasuryReceivedDebitsResourceLinkedFlows {
	issuingTransaction: String
	issuingAuthorization: String
	inboundTransfer: String
	debitReversal: String
}
type StripeTreasuryReceivedDebitsResourceReversalDetails {
	restrictedReason: StripeTreasuryReceivedDebitsResourceReversalDetailsRestrictedReason
	deadline: Int
}
enum StripeTreasuryReceivedDebitsResourceReversalDetailsRestrictedReason {
	ALREADY_REVERSED
	DEADLINE_PASSED
	NETWORK_RESTRICTED
	OTHER
	SOURCE_FLOW_RESTRICTED
}
type StripeTreasuryReceivedDebitsResourceStatusTransitions {
	completedAt: Int
}
type StripeTreasurySharedResourceBillingDetails {
	name: String
	email: String
	address: StripeAddress!
}
type StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails {
	usBankAccount: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount
	type: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType!
	issuingCard: String
	financialAccount: StripeReceivedPaymentMethodDetailsFinancialAccount
	billingDetails: StripeTreasurySharedResourceBillingDetails!
	balance: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance
}
enum StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance {
	PAYMENTS
}
enum StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType {
	BALANCE
	FINANCIAL_ACCOUNT
	ISSUING_CARD
	STRIPE
	US_BANK_ACCOUNT
}
type StripeTreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount {
	routingNumber: String
	last4: String
	bankName: String
}
type StripeTreasuryTransaction {
	statusTransitions: StripeTreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions!
	status: StripeTreasuryTransactionStatus!
	object: StripeTreasuryTransactionObject!
	livemode: Boolean!
	id: String!
	flowType: StripeTreasuryTransactionFlowType!
	flowDetails: StripeTreasuryTransactionsResourceFlowDetails
	flow: String
	financialAccount: String!
	entries: StripeTreasuryTransactionEntries
	description: String!
	currency: String!
	created: Int!
	balanceImpact: StripeTreasuryTransactionsResourceBalanceImpact!
	amount: Int!
}
type StripeTreasuryTransactionEntries {
	url: String!
	object: StripeTreasuryTransactionObjectEntries!
	hasMore: Boolean!
	nodes: [StripeTreasuryTransactionEntry!]!
}
type StripeTreasuryTransactionEntry {
	type: StripeTreasuryTransactionEntryType!
	transaction: StripeStringOrTreasuryTransactionUnion!
	object: StripeTreasuryTransactionEntryObject!
	livemode: Boolean!
	id: String!
	flowType: StripeTreasuryTransactionEntryFlowType!
	flowDetails: StripeTreasuryTransactionsResourceFlowDetails
	flow: String
	financialAccount: String!
	effectiveAt: Int!
	currency: String!
	created: Int!
	balanceImpact: StripeTreasuryTransactionsResourceBalanceImpact!
}
enum StripeTreasuryTransactionEntryFlowType {
	CREDIT_REVERSAL
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	ISSUING_AUTHORIZATION
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_TRANSFER
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
enum StripeTreasuryTransactionEntryObject {
	TREASURY_TRANSACTION_ENTRY
}
enum StripeTreasuryTransactionEntryType {
	CREDIT_REVERSAL
	CREDIT_REVERSAL_POSTING
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	INBOUND_TRANSFER_RETURN
	ISSUING_AUTHORIZATION_HOLD
	ISSUING_AUTHORIZATION_RELEASE
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_PAYMENT_CANCELLATION
	OUTBOUND_PAYMENT_FAILURE
	OUTBOUND_PAYMENT_POSTING
	OUTBOUND_PAYMENT_RETURN
	OUTBOUND_TRANSFER
	OUTBOUND_TRANSFER_CANCELLATION
	OUTBOUND_TRANSFER_FAILURE
	OUTBOUND_TRANSFER_POSTING
	OUTBOUND_TRANSFER_RETURN
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
enum StripeTreasuryTransactionFlowType {
	CREDIT_REVERSAL
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	ISSUING_AUTHORIZATION
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_TRANSFER
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
enum StripeTreasuryTransactionObject {
	TREASURY_TRANSACTION
}
enum StripeTreasuryTransactionObjectEntries {
	LIST
}
enum StripeTreasuryTransactionStatus {
	OPEN
	POSTED
	VOID
}
type StripeTreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions {
	voidAt: Int
	postedAt: Int
}
type StripeTreasuryTransactionsResourceBalanceImpact {
	outboundPending: Int!
	inboundPending: Int!
	cash: Int!
}
type StripeTreasuryTransactionsResourceFlowDetails {
	type: StripeTreasuryTransactionsResourceFlowDetailsType!
	receivedDebit: StripeTreasuryReceivedDebit
	receivedCredit: StripeTreasuryReceivedCredit
	outboundTransfer: StripeTreasuryOutboundTransfer
	outboundPayment: StripeTreasuryOutboundPayment
	issuingAuthorization: StripeIssuingAuthorization
	inboundTransfer: StripeTreasuryInboundTransfer
	debitReversal: StripeTreasuryDebitReversal
	creditReversal: StripeTreasuryCreditReversal
}
enum StripeTreasuryTransactionsResourceFlowDetailsType {
	CREDIT_REVERSAL
	DEBIT_REVERSAL
	INBOUND_TRANSFER
	ISSUING_AUTHORIZATION
	OTHER
	OUTBOUND_PAYMENT
	OUTBOUND_TRANSFER
	RECEIVED_CREDIT
	RECEIVED_DEBIT
}
type StripeUsBankAccountNetworks {
	supported: [StripeUsBankAccountNetworksSupported!]!
	preferred: String
}
enum StripeUsBankAccountNetworksSupported {
	ACH
	US_DOMESTIC_WIRE
}
type StripeUsageRecord {
	timestamp: Int!
	subscriptionItem: String!
	quantity: Int!
	object: StripeUsageRecordObject!
	livemode: Boolean!
	id: String!
}
enum StripeUsageRecordObject {
	USAGE_RECORD
}
type StripeUsageRecordSummary {
	totalUsage: Int!
	subscriptionItem: String!
	period: StripePeriod!
	object: StripeUsageRecordSummaryObject!
	livemode: Boolean!
	invoice: String
	id: String!
}
enum StripeUsageRecordSummaryObject {
	USAGE_RECORD_SUMMARY
}
type StripeVerificationSessionRedaction {
	status: StripeVerificationSessionRedactionStatus!
}
enum StripeVerificationSessionRedactionStatus {
	PROCESSING
	REDACTED
}
type StripeWebhookEndpoint {
	url: String!
	status: String!
	secret: String
	object: StripeWebhookEndpointObject!
	metadata: JSON!
	livemode: Boolean!
	id: String!
	enabledEvents: [String!]!
	description: String
	created: Int!
	application: String
	apiVersion: String
}
enum StripeWebhookEndpointObject {
	WEBHOOK_ENDPOINT
}
schema {
	query: Query
	mutation: Mutation
}
