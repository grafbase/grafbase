---
source: crates/parser-graphql/src/lib.rs
expression: result
---
enum AccelerationUnit {
	seconds_to_100_kilometers_per_hour
	seconds_to_60_miles_per_hour
}
enum AccessType {
	Public
	Restricted
	Private
}
"""
Returns 'OK'
"""
scalar Acknowledgement
"""
Information about an address
"""
type Address {
	"""
	Continent code (2 letters)
	"""
	continent: String
	"""
	Country code (2 letters)
	"""
	country: String
	"""
	County code (2 letters)
	"""
	county: String
	"""
	City
	"""
	city: String
	"""
	Street name
	"""
	street: String
	"""
	Street number
	"""
	number: String
	"""
	Postal code of a location
	"""
	postalCode: String
	"""
	String composed of 3 words which represent the location of an address on the globe. More details: http://w3w.co/<what3Words>
	"""
	what3Words: String
	"""
	Human-readable address of a location
	"""
	formattedAddress: [String]
}
enum AdhocAuthorisationMethod {
	CREDIT_CARD
	DEBIT_CARD
	OTHER
	OTHER_Apple_Pay
	OTHER_Authentication_by_car
	OTHER_Google_Pay
	QR_CODE
	SMS
}
"""
Amenities available near a station
"""
enum Amenities {
	park
	restaurant
	museum
	coffee
	hotel
	shopping
	bathroom
	supermarket
	playground
	pharmacy
}
"""
The amenity model
"""
type Amenity {
	"""
	Unique amenity ID
	"""
	id: ID
	"""
	ID provided by an amenity data source as the row ID
	"""
	externalId: String
	"""
	Name of an amenity
	"""
	name: String
	"""
	Geo location coordinates. This is a GeoJSON Point
	"""
	location: Point
	"""
	Embedded Address
	"""
	address: Address
	"""
	Type of amenity. An amenity can belong to multiple categories
	"""
	type: [String]
	"""
	Rating of an amenity, the value will be between 0.0 and 10.0. If no rating has been given, the value will be set to null
	"""
	rating: Float
	"""
	Computed distance between station and amenity
	"""
	distance: Int
	"""
	Full path URL to amenity foursquare page
	"""
	foursquareUrl: String
	"""
	Date and time when an amenity was created
	"""
	createdAt: String
	"""
	Date and time when an amenity was last updated
	"""
	updatedAt: String
}
"""
Amenity preferences for a route
"""
input AmenityPreferencesInput {
	"""
	Desired amenities near all charge-stops along a route, with a 1 kilometer radius
	"""
	all_charge_stops: [AmenityType!]
	"""
	Scheduled charge stops, with a specified amenity and timeline
	"""
	scheduled_charge_stops: [ScheduledChargeStopInput!]
}
"""
Amenities stats model
"""
type AmenityStats {
	"""
	The amenity type
	"""
	type: String
	"""
	The total number of stations with the specified amenity
	"""
	total: Int
}
"""
A list of amenity types
"""
enum AmenityType {
	park
	restaurant
	museum
	coffee
	hotel
	shopping
	bathroom
	supermarket
	playground
	pharmacy
}
input AuthorizeConnectedVehicleInput {
	"""
	Id from the connected vehicle
	"""
	id: ID!
	"""
	Provider specific options. See the developer portal for more details
	"""
	options: AuthorizeConnectedVehicleOptions!
}
input AuthorizeConnectedVehicleOptions {
	"""
	OAuth code returned as a query parameter on the OAuth callback
	"""
	code: PlainString
}
input AuxiliaryConsumptionInput {
	"""
	Value of the auxiliary power consumption of the vehicle
	"""
	value: Float!
	"""
	Type of auxiliary power consumption of the vehicle
	"""
	type: AuxiliaryConsumptionUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum AuxiliaryConsumptionUnit {
	kilowatt_hour
}
"""
The type of the battery value
"""
enum BatteryInputType {
	kwh
	km
	miles
	percentage
}
input BatteryTemperatureInput {
	"""
	Value of the temperature of the battery
	"""
	value: Float!
	"""
	Type of temperature of the battery
	"""
	type: TemperatureUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
"""
Output of a car query
"""
type Car {
	"""
	Cars unique ID
	"""
	id: ID
	"""
	Naming of a car
	"""
	naming: CarNaming
	"""
	Available connectors for a car
	"""
	connectors: [CarPlug]
	"""
	List of adapters of connectors available for a car
	"""
	adapters: [CarPlug]
	"""
	Battery of a car
	"""
	battery: CarBattery
	"""
	Body of a car
	"""
	body: CarBody
	"""
	Availability of a car
	"""
	availability: CarAvailability
	"""
	Performance of a car
	"""
	performance: CarPerformance
	"""
	Range of a car
	"""
	range: CarRange
	"""
	Media of a car
	"""
	media: CarMedia
	"""
	Routing of a car
	"""
	routing: CarRouting
	"""
	Information about vehicle connectivity
	"""
	connect: Connect
	"""
	ID provided by a car data source as the row ID
	"""
	externalId: String @deprecated(reason: "Will be removed in the future")
	"""
	Car manufacturer
	"""
	make: String @deprecated(reason: "In favor of naming.make")
	"""
	Car model
	"""
	carModel: String @deprecated(reason: "In favor of naming.model")
	"""
	Car edition
	"""
	edition: String @deprecated(reason: "In favor of naming.version")
	"""
	Car model edition. Added by Chargetrip as an alternative for when a car manufacturer does not provide an edition name, or uses the same edition name across all trims or consecutive years
	"""
	chargetripEdition: String @deprecated(reason: "In favor of naming.chargetrip_version")
	"""
	Car version
	"""
	version: String @deprecated(reason: "In favor of naming.edition")
	"""
	Chargetrip's custom real world range provides a carefully calculated display range for all EV models. This is based on our own research and driving data
	"""
	chargetripRange: ChargetripRange @deprecated(reason: "In favor of range.chargetrip_range")
	"""
	Cars that support fast charging have a minimum charging speed of 43 kWh
	"""
	fastChargingSupport: Boolean @deprecated(reason: "In favor of routing.fast_charging_support")
	"""
	Current production mode of a car
	"""
	mode: CarMode @deprecated(reason: "In favor of availability.status")
	"""
	Number of seats
	"""
	seats: Int @deprecated(reason: "In favor of body.seats")
	"""
	Weight in kg
	"""
	weight: Float @deprecated(reason: "In favor of body.weight")
	"""
	Height in mm
	"""
	height: Int @deprecated(reason: "In favor of body.height")
	"""
	Width in mm
	"""
	width: Int @deprecated(reason: "In favor of body.width")
	"""
	Usable battery capacity in kWh
	"""
	batteryUsableKwh: Float @deprecated(reason: "In favor of battery.usable_kwh")
	"""
	Full battery capacity in kWh
	"""
	batteryFullKwh: Float @deprecated(reason: "In favor of battery.full_kwh")
	"""
	Battery efficiency in the city, highway and combined depending on weather conditions
	"""
	batteryEfficiency: CarBatteryEfficiency @deprecated(reason: "In favor of efficiency")
	"""
	Acceleration time from 0 to 100 km/h
	"""
	acceleration: Float @deprecated(reason: "In favor of performance.acceleration")
	"""
	Maximum car speed in km/h
	"""
	topSpeed: Float @deprecated(reason: "In favor of performance.top_speed")
	"""
	Power of a car in Kw
	"""
	power: Float @deprecated(reason: "In favor of drivetrain.power")
	"""
	Engine torque
	"""
	torque: Float @deprecated(reason: "In favor of drivetrain.torque")
	"""
	Extra consumption model
	"""
	consumption: CarExtraConsumption @deprecated(reason: "In favor of routing.consumption")
	"""
	Amount of petrol a similar petrol car would consume per 100 km
	"""
	petrolConsumption: Float @deprecated(reason: "In favor of routing.petrol_consumption")
	"""
	A list of offset data for different charging speeds
	"""
	chargingOffset: JSON @deprecated(reason: "You will receive null values")
	"""
	Images of a car
	"""
	images: [CarImage] @deprecated(reason: "In favor of media.image_list")
	"""
	Images of a car in structured data
	"""
	imagesData: CarImageData @deprecated(reason: "In favor of media.image or media.brand")
}
type CarAvailability {
	"""
	Availability of car
	
	Values:
	   - 0 = Car no longer for sale in any market / region
	   - 1 = Car currently for sale in at least one market / region
	   - 2 = Car expected in market from Date_From (estimated), pre-order open
	   - 3 = Car expected in market from Date_From (estimated), pre-order unkown or not open
	   - 12 = Concept car, nearing production and/or confirmed, pre-order open
	   - 13 = Concept car, nearing production and/or confirmed, pre-order unknown or not open
	   - 22 = Concept car, not close to production and/or unconfirmed, pre-order open
	   - 23 = Concept car, not close to production and/or unconfirmed, pre-order unknown
	   - 91 = Status uncertain, introduction date and/or pricing unclear
	"""
	status: Int
}
type CarBattery {
	"""
	Usable battery capacity in kWh
	"""
	usable_kwh: Float
	"""
	Full battery capacity in kWh
	"""
	full_kwh: Float
}
"""
Deprecated
"""
type CarBatteryEfficiency {
	"""
	Average efficiency measured in kWh/100 km
	"""
	average: Float
	"""
	Worst conditions are based on -10°C and use of heating, measured in kWh/100 km
	"""
	worst: CarEstimationData
	"""
	Best conditions are based on 23°C and no use of A/C, measured in kWh/100 km
	"""
	best: CarEstimationData
}
"""
Battery field estimated
"""
enum CarBatteryFieldEstimations {
	B
	F
	N
	U
}
type CarBody {
	"""
	Width with folded mirrors in mm
	"""
	width: Int
	"""
	Height (average height for adjustable suspensions) in mm
	"""
	height: Int
	"""
	Weight Unladen EU) in kg
	"""
	weight: Int
	"""
	Number of seats
	"""
	seats: Int
}
enum CarConnectivityProvider {
	Enode
}
"""
Deprecated
"""
type CarConsumption {
	"""
	Worst conditions are based on -10°C and use of heating
	"""
	worst: Float
	"""
	Best conditions are based on 23°C and no use of A/C
	"""
	best: Float
}
"""
The consumption of the car
"""
input CarConsumptionInput {
	"""
	Worst conditions are based on -10°C and use of heating
	"""
	worst: Float
	"""
	Best conditions are based on 23°C and no use of A/C
	"""
	best: Float
}
"""
Drivetrain
"""
enum CarDrivetrain {
	BEV
	EREV
}
"""
Deprecated
"""
type CarEstimationData {
	"""
	Estimated battery efficiency on a highway or express roads, in km
	"""
	highway: Float
	"""
	Estimated battery efficiency on city roads, in km
	"""
	city: Float
	"""
	Estimated battery efficiency on highway and city roads combined, in km
	"""
	combined: Float
}
"""
Deprecated
"""
type CarExtraConsumption {
	"""
	Consumption, in kWh, of the auxiliaries
	"""
	aux: CarConsumption
	"""
	Consumption, in kWh, of the battery management system
	"""
	bms: CarConsumption
	"""
	Consumption, in kWh, of a car in idle mode
	"""
	idle: CarConsumption
}
"""
Fuel type
"""
enum CarFuel {
	E
}
type CarImage {
	"""
	Image id
	"""
	id: ID
	"""
	Image type
	"""
	type: CarImageType
	"""
	Full path URL of a large image
	"""
	url: String
	"""
	Height of a large image in pixels
	"""
	height: Int
	"""
	Width of a large image in pixels
	"""
	width: Int
	"""
	Full path URL of a thumbnail image
	"""
	thumbnail_url: String
	"""
	Height of a thumbnail image in pixels
	"""
	thumbnail_height: Int
	"""
	Width of a thumbnail image in pixels
	"""
	thumbnail_width: Int
}
"""
Deprecated
"""
type CarImageData {
	"""
	Full size image of a car
	"""
	image: CarImage
	"""
	Thumbnail of a full size image
	"""
	image_thumbnail: CarImage
	"""
	Full size logo of the maker of a car
	"""
	brand: CarImage
	"""
	Thumbnail of a full size logo of the maker of a car
	"""
	brand_thumbnail: CarImage
}
"""
Available types of images which can be found for a car. Each type has specific image sizes
"""
enum CarImageType {
	provider
	image
	image_thumbnail
	brand
	brand_thumbnail
	placeholder
}
"""
When uploading images to a car, you can select one of this types. The rest of the types are automatically generated by the system
"""
enum CarImageTypeUploadable {
	image
}
"""
The output element of the carList query
"""
type CarList {
	"""
	Cars unique ID
	"""
	id: ID
	"""
	Naming of a car
	"""
	naming: CarListNaming
	"""
	Connectors available for a car
	"""
	connectors: [CarPlug]
	"""
	Adapters of connectors available for a car
	"""
	adapters: [CarPlug]
	"""
	Battery of a car
	"""
	battery: CarListBattery
	"""
	Body of a car
	"""
	body: CarListBody
	"""
	Availability of a car
	"""
	availability: CarListAvailability
	"""
	Range of a car
	"""
	range: CarListRange
	"""
	Media of a car
	"""
	media: CarListMedia
	"""
	Routing of a car
	"""
	routing: CarListRouting
	"""
	Information about vehicle connectivity
	"""
	connect: Connect
	"""
	ID provided by a car data source as the row ID
	"""
	externalId: String @deprecated(reason: "Will be removed in the future")
	"""
	Car manufacturer
	"""
	make: String @deprecated(reason: "In favor of naming.make")
	"""
	Car model
	"""
	carModel: String @deprecated(reason: "In favor of naming.model")
	"""
	Car edition
	"""
	edition: String @deprecated(reason: "In favor of naming.version")
	"""
	Car model edition. Added by Chargetrip as an alternative for when a car manufacturer does not provide an edition name, or uses the same edition name across all trims or consecutive years
	"""
	chargetripEdition: String @deprecated(reason: "In favor of naming.chargetrip_version")
	"""
	Car version
	"""
	version: String @deprecated(reason: "In favor of naming.edition")
	"""
	Chargetrip's custom real world range provides a carefully calculated display range for all EV models. This is based on our own research and driving data
	"""
	chargetripRange: ChargetripRange @deprecated(reason: "In favor of range.chargetrip_range")
	"""
	Cars that support fast charging have a minimum charging speed of 43 kWh
	"""
	fastChargingSupport: Boolean @deprecated(reason: "In favor of routing.fast_charging_support")
	"""
	Current production mode of a car
	"""
	mode: CarMode @deprecated(reason: "In favor of availability.status")
	"""
	Number of seats
	"""
	seats: Int @deprecated(reason: "In favor of body.seats")
	"""
	Usable battery capacity in kWh
	"""
	batteryUsableKwh: Float @deprecated(reason: "In favor of battery.usable_kwh")
	"""
	Full battery capacity in kWh
	"""
	batteryFullKwh: Float @deprecated(reason: "In favor of battery.full_kwh")
	"""
	Images of a car in structured data
	"""
	imagesData: CarImageData @deprecated(reason: "In favor of media.image and media.brand")
	power: Float @deprecated(reason: "You will receive null values")
	acceleration: Float @deprecated(reason: "You will receive null values")
	topSpeed: Float @deprecated(reason: "You will receive null values")
	torque: Float @deprecated(reason: "You will receive null values")
	batteryEfficiency: CarBatteryEfficiency @deprecated(reason: "You will receive null values")
	weight: Float @deprecated(reason: "You will receive null values")
	height: Int @deprecated(reason: "You will receive null values")
	width: Int @deprecated(reason: "You will receive null values")
	consumption: CarExtraConsumption @deprecated(reason: "You will receive null values")
	petrolConsumption: Float @deprecated(reason: "You will receive null values")
	chargingOffset: JSON @deprecated(reason: "You will receive null values")
	auxConsumption: Float @deprecated(reason: "You will receive null values")
	bmsConsumption: Float @deprecated(reason: "You will receive null values")
	dragCoefficient: Float @deprecated(reason: "You will receive null values")
	tirePressure: Float @deprecated(reason: "You will receive null values")
	motorEfficiency: Float @deprecated(reason: "You will receive null values")
	drivelineEfficiency: Float @deprecated(reason: "You will receive null values")
	regenEfficiency: Float @deprecated(reason: "You will receive null values")
	images: [CarImage] @deprecated(reason: "You will receive null values")
}
type CarListAvailability {
	"""
	Availability of car
	
	Values:
	   - 0 = Car no longer for sale in any market / region
	   - 1 = Car currently for sale in at least one market / region
	   - 2 = Car expected in market from Date_From (estimated), pre-order open
	   - 3 = Car expected in market from Date_From (estimated), pre-order unkown or not open
	   - 12 = Concept car, nearing production and/or confirmed, pre-order open
	   - 13 = Concept car, nearing production and/or confirmed, pre-order unknown or not open
	   - 22 = Concept car, not close to production and/or unconfirmed, pre-order open
	   - 23 = Concept car, not close to production and/or unconfirmed, pre-order unknown
	   - 91 = Status uncertain, introduction date and/or pricing unclear
	"""
	status: Int
}
type CarListBattery {
	"""
	Usable battery capacity in kWh
	"""
	usable_kwh: Float
	"""
	Full battery capacity in kWh
	"""
	full_kwh: Float
}
type CarListBody {
	"""
	Number of seats in car
	"""
	seats: Int
}
input CarListFilter {
	"""
	Availability of car

Values:
   - 0 = Car no longer for sale in any market / region
   - 1 = Car currently for sale in at least one market / region
   - 2 = Car expected in market from Date_From (estimated), pre-order open
   - 3 = Car expected in market from Date_From (estimated), pre-order unkown or not open
   - 12 = Concept car, nearing production and/or confirmed, pre-order open
   - 13 = Concept car, nearing production and/or confirmed, pre-order unknown or not open
   - 22 = Concept car, not close to production and/or unconfirmed, pre-order open
   - 23 = Concept car, not close to production and/or unconfirmed, pre-order unknown
   - 91 = Status uncertain, introduction date and/or pricing unclear
	"""
	availability: [Int]
	"""
	Information about vehicle connectivity
	"""
	connect: ConnectFilter
}
type CarListMedia {
	"""
	Latest image of the car
	"""
	image: CarImage
	"""
	Latest maker logo of the car
	"""
	brand: CarImage
	"""
	Latest video of the car
	"""
	video: CarVideo
}
type CarListNaming {
	"""
	Car manufacturer name
	"""
	make: String
	"""
	Car model name
	"""
	model: String
	"""
	Version, edition or submodel of car
	"""
	version: String
	"""
	Another submodel level of car
	"""
	edition: String
	"""
	Car model version. Added by Chargetrip as an alternative for when a car manufacturer does not provide an version name, or uses the same version name across all trims or consecutive years
	"""
	chargetrip_version: String
}
"""
Deprecated
"""
input CarListQuery {
	"""
	Deprecated: Not used anymore
	"""
	make: String
	"""
	Deprecated: Not used anymore
	"""
	model: String
	"""
	Deprecated: Not used anymore
	"""
	version: String
	"""
	Deprecated: Not used anymore
	"""
	chargetrip_version: String
	"""
	Deprecated: Not used anymore
	"""
	mode: CarMode
}
type CarListRange {
	"""
	 Is an index value of what we consider to be the real-world range.
	(Comparable to Range_Real from EV Database.) It is essentially a normalized range to display in the front-end.
	"""
	chargetrip_range: ChargetripRange
	wltp: Float @deprecated(reason: "You will receive null values")
	worst: CarEstimationData @deprecated(reason: "You will receive null values")
	best: CarEstimationData @deprecated(reason: "You will receive null values")
}
type CarListRouting {
	"""
	Cars that support fast charging have a minimum charging speed of 43 kWh
	"""
	fast_charging_support: Boolean
}
type CarMedia {
	"""
	URL to detail page on EV database
	"""
	evdb_details_url: String
	"""
	Latest image
	"""
	image: CarImage
	"""
	Latest maker logo
	"""
	brand: CarImage
	"""
	All images
	"""
	image_list: [CarImage]
	"""
	Latest video
	"""
	video: CarVideo
	"""
	All videos
	"""
	video_list: [CarVideo]
	"""
	URL to detail page on EV database
	"""
	evdb_detail_url: String @deprecated(reason: "Will be removed in the future. Please use evdb_details_url")
}
"""
Mode (state) of the current production
"""
enum CarMode {
	index_only
	production
	concept
}
type CarNaming {
	"""
	Car manufacturer name
	"""
	make: String
	"""
	Car model name
	"""
	model: String
	"""
	Version, edition or submodel of car
	"""
	version: String
	"""
	Another submodel level of car
	"""
	edition: String
	"""
	Car model version. Added by Chargetrip as an alternative for when a car manufacturer does not provide an version name, or uses the same version name across all trims or consecutive years
	"""
	chargetrip_version: String
}
type CarPerformance {
	"""
	Acceleration 0-100 km/h in seconds
	"""
	acceleration: Float
	"""
	Top speed of car in km/h
	"""
	top_speed: Int
}
"""
Car plug model
"""
type CarPlug {
	"""
	Plug type, known as connector standard in OCPI
	"""
	standard: ConnectorType
	"""
	Usable electric power in kW
	"""
	power: Float
	"""
	Maximum electric power in kW
	"""
	max_electric_power: Float
	"""
	Time it takes to charge from 10 to 80% with a fast charger, shown in minutes
	"""
	time: Int
	"""
	Charging speed in km/h
	"""
	speed: Int
}
"""
The output element of the carPremium query
"""
type CarPremium {
	"""
	Unique ID of a car
	"""
	id: ID
	"""
	Internal ID of the successor car trim
	"""
	succesor_id: String
	"""
	Naming of a car
	"""
	naming: CarPremiumNaming
	"""
	Connectors available for a car
	"""
	connectors: [CarPlug]
	"""
	Charge details
	"""
	charge: CarPremiumCharge
	"""
	Fast charge details
	"""
	fast_charge: CarPremiumFastCharge
	"""
	Adapters of connectors available for a car
	"""
	adapters: [CarPlug]
	"""
	Battery of a car
	"""
	battery: CarPremiumBattery
	"""
	Body of a car
	"""
	body: CarPremiumBody
	"""
	Availability of a car
	"""
	availability: CarPremiumAvailability
	"""
	Pricing of a car
	"""
	price: CarPremiumPrice
	"""
	Drivetrain of a car
	"""
	drivetrain: CarPremiumDrivetrain
	"""
	Performance of a car
	"""
	performance: CarPremiumPerformance
	"""
	Range of a car
	"""
	range: CarPremiumRange
	"""
	Efficiency of a car
	"""
	efficiency: CarPremiumEfficiency
	"""
	Safety of a car
	"""
	safety: CarPremiumSafety
	"""
	Media of a car
	"""
	media: CarPremiumMedia
	"""
	Routing of a car
	"""
	routing: CarPremiumRouting
	"""
	Information about vehicle connectivity
	"""
	connect: Connect
}
type CarPremiumAvailability {
	"""
	Availability of car
	
	Values:
	   - 0 = Car no longer for sale in any market/region
	   - 1 = Car currently for sale in at least one market/region
	   - 2 = Car expected in market from Date_From (estimated), pre-order open
	   - 3 = Car expected in market from Date_From (estimated), pre-order unknown or not open
	   - 12 = Concept car, nearing production and/or confirmed, pre-order open
	   - 13 = Concept car, nearing production and/or confirmed, pre-order unknown or not open
	   - 22 = Concept car, not close to production and/or unconfirmed, pre-order open
	   - 23 = Concept car, not close to production and/or unconfirmed, pre-order unknown
	   - 91 = Status uncertain, introduction date and/or pricing unclear
	"""
	status: Int
	"""
	Date of introduction, mm-yyyy
	"""
	date_from: String
	"""
	Indicates if date from field is estimated
	"""
	date_from_is_estimated: Boolean
	"""
	Date last available, mm-yyyy
	"""
	date_to: String
}
type CarPremiumBattery {
	"""
	Usable battery capacity in kWh
	"""
	usable_kwh: Float
	"""
	Full battery capacity in kWh
	"""
	full_kwh: Float
	"""
	Indicates which battery fields are estimated
	"""
	estimated_fields: CarBatteryFieldEstimations
	"""
	Battery thermal management system (active/passive, air/liquid)
	"""
	thermal_management_system: String
	"""
	Duration of battery warranty
	"""
	warranty_period: Float
	"""
	Mileage of battery warranty
	"""
	warranty_mileage: Float
}
type CarPremiumBody {
	"""
	Length in mm
	"""
	length: Int
	"""
	Width with folded mirrors in mm
	"""
	width: Int
	"""
	Width of vehicle in mm, including mirrors
	"""
	full_width: Int
	"""
	Height (average height for adjustable suspensions) in mm
	"""
	height: Int
	"""
	Indicates if length/width/height fields are estimations
	"""
	size_is_estimated: Boolean
	"""
	Wheelbase in mm
	"""
	wheelbase: Int
	"""
	Indicates if wheelbase field is estimated
	"""
	wheelbase_is_estimated: Boolean
	"""
	Weight (unladen EU) in kg
	"""
	weight: Int
	"""
	Indicates if weight field is estimated
	"""
	weight_is_estimated: Boolean
	"""
	Maximum payload allowed for vehicle in kg
	"""
	weight_max_payload: Int
	"""
	Gross Vehicle Weight (GVWR) - (max allowed vehicle weight with payload) in kg
	"""
	max_gross_vehicle_weight: Int
	"""
	Standard luggage capacity in l
	"""
	boot_capacity: Int
	"""
	Storage capacity of front trunk/under the hood (frunk)
	"""
	boot_front_capacity: Int
	"""
	Maximum luggage capacity in l
	"""
	boot_capacity_max: Int
	"""
	Indicates if a tow hitch/towbar can be fitted according to vehicle homologation
	"""
	tow_hitch_compatible: Boolean
	"""
	Maximum unbraked towing weight in kg
	"""
	tow_weight_unbraked: Int
	"""
	Maximum braked towing weight in kg
	"""
	tow_weight_braked: Int
	"""
	Indicates if tow weight fields are estimations
	"""
	tow_weight_is_estimated: Boolean
	"""
	Maximum vertical load / noseweight on tow hitch according to vehicle homologation
	"""
	tow_weight_vertical_load: Int
	"""
	Maximum load on roof of car in kg
	"""
	roof_load_max: Int
	"""
	Body type, listed in local naming convention where applicable
	"""
	body_type: String
	"""
	Segment, listed in local naming convention where applicable
	"""
	segment: String
	"""
	Number of seats
	"""
	seats: Int
	"""
	Indicates whether a car has roof rails as a standard
	"""
	has_roofrails: Boolean
	"""
	Turning circle of vehicle kerb-to-kerb
	"""
	turning_circle: Float
	"""
	Name of vehicle platform used for vehicle (often abbreviated to indicate group platforms)
	"""
	vehicle_platform: String
	"""
	Indicates if the vehicle platform used for vehicle is a dedicated battery electric vehicle platform
	"""
	vehicle_platform_is_dedicated: Boolean
	"""
	Indicates whether a car has roof rails as a standard
	"""
	rooftrails: Boolean @deprecated(reason: "In favor of has_roofrails")
}
type CarPremiumCharge {
	"""
	Location of charge port
	"""
	plug: CarPremiumChargePlug
	"""
	Location of second charge port
	"""
	second_plug: CarPremiumChargeSecondPlug
	"""
	The car standard charge
	"""
	standard: CarPremiumChargeStandardOBC
	"""
	The car alternative charge
	"""
	alternative: CarPremiumChargeAlternativeOBC
	"""
	The car option charge
	"""
	option: CarPremiumChargeOptionOBC
}
type CarPremiumChargeAlternativeOBC {
	"""
	Maximum power OBC can accept to charge a battery (standard OBC)
	"""
	power: Float
	"""
	Number of phases the OBC accepts to achieve maximum power (standard OBC)
	"""
	phases: Int
	"""
	Maximum current the OBC accepts per phase to achieve maximum power (standard OBC)
	"""
	phase_amperage: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC)
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC)
	"""
	charge_speed: Int
	"""
	Charging details for the standard OBC at several charging points
	"""
	table: [CarPremiumChargeOBCTable]
}
type CarPremiumChargeOBCTable {
	"""
	Voltage between phase and neutral for this EVSE (phase voltage)
	"""
	evse_phase_voltage: Int
	"""
	Current per phase for this EVSE (phase current)
	"""
	evse_phase_amperage: Int
	"""
	Number of phases for this EVSE
	"""
	evse_phases: Int
	"""
	Voltage between phase and neutral used by standard OBC (phase voltage)
	"""
	charge_phase_voltage: Int
	"""
	Current per phase used by standard OBC (phase current)
	"""
	charge_phase_amperage: Float
	"""
	Number of phases used by standard OBC
	"""
	charge_phases: Int
	"""
	Power used by standard OBC (before OBC losses)
	"""
	charge_power: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC with this EVSE)
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC with this EVSE)
	"""
	charge_speed: Int
}
type CarPremiumChargeOptionOBC {
	"""
	Maximum power OBC can accept to charge a battery (standard OBC)
	"""
	power: Float
	"""
	Number of phases the OBC accepts to achieve maximum power (standard OBC)
	"""
	phases: Int
	"""
	Maximum current the OBC accepts per phase to achieve maximum power (standard OBC)
	"""
	phase_amperage: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC)
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC)
	"""
	charge_speed: Int
	"""
	Charging details for the standard OBC at several charging points
	"""
	table: [CarPremiumChargeOBCTable]
}
type CarPremiumChargePlug {
	"""
	Type of charge port on vehicle
	"""
	value: ConnectorType
	"""
	Indicates if value is an estimate
	"""
	is_estimated: Boolean
	"""
	Location of charge port
	"""
	location: String
}
type CarPremiumChargePower {
	"""
	Maximum value
	"""
	max: Float
	"""
	Average value
	"""
	average: Float
}
type CarPremiumChargeSecondPlug {
	"""
	Location of charge port
	"""
	location: String
	"""
	Indicates if second charge port is optional
	"""
	is_optional: Boolean
}
type CarPremiumChargeStandardOBC {
	"""
	Maximum power OBC can accept to charge a battery (standard OBC)
	"""
	power: Float
	"""
	Number of phases the OBC accepts to achieve maximum power (standard OBC)
	"""
	phases: Int
	"""
	Maximum current the OBC accepts per phase to achieve maximum power (standard OBC)
	"""
	phase_amperage: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC)
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC)
	"""
	charge_speed: Int
	"""
	Indicates if Charge_Standard fields are estimated
	"""
	is_estimated: Boolean
	"""
	Charging details for the standard OBC at several charging points
	"""
	table: [CarPremiumChargeOBCTable]
}
type CarPremiumDrivetrain {
	"""
	Type of drivetrain
	"""
	type: CarDrivetrain
	"""
	Fuel type
	"""
	fuel: CarFuel
	"""
	Propulsion type
	"""
	propulsion: CarPropulsion
	"""
	Indicates if propulsion field is estimated
	"""
	propulsion_is_estimated: Boolean
	"""
	Maximum (combined) power output in kw
	"""
	power: Int
	"""
	Indicates if power field is estimated
	"""
	power_is_estimated: Boolean
	"""
	Maximum (combined) power output in horsepower (PS)
	"""
	power_hp: Int
	"""
	Maximum (combined) torque output in newton meter
	"""
	torque: Int
	"""
	Indicates if torque field is estimated
	"""
	torque_is_estimated: Boolean
}
type CarPremiumEfficiency {
	"""
	Rated efficiency in WLTP combined cycle
	"""
	wltp: CarPremiumEfficiencyWLTP
	"""
	Rated efficiency in WLTP combined cycle (TEH / least efficient trim)
	"""
	wltp_teh: CarPremiumEfficiencyWLTPTEH
	"""
	Rated efficiency in NEDC combined cycle
	"""
	nedc: CarPremiumEfficiencyNEDC
	"""
	Car efficiency based on RealRange
	"""
	real: CarPremiumEfficiencyReal
}
type CarPremiumEfficiencyNEDC {
	"""
	Rated efficiency in NEDC combined cycle in kWh/100 km
	"""
	value: Float
	"""
	Rated efficiency in NEDC combined cycle presented in gas equivalent, in l/100 km
	"""
	fuel_equivalent: Float
	"""
	Rated vehicle efficiency in NEDC combined cycle (based on value) in kWh/100 km
	"""
	vehicle: Float
	"""
	Rated vehicle efficiency in NEDC combined cycle presented in gas equivalent in l/100 km
	"""
	vehicle_fuel_equivalent: Float
	"""
	Rated CO2 emissions in NEDC combined cycle in battery-only mode (NULL if not NEDC rated) in gr/km
	"""
	co2: Int
}
type CarPremiumEfficiencyReal {
	"""
	Car efficiency based on RealRange (useable battery/range) in kWh/100 km
	"""
	value: Float
	"""
	Car efficiency based on RealRange presented in gas equivalent, in l/100 km
	"""
	fuel_equivalent: Float
	"""
	Worst conditions are based on -10°C and use of heating
	"""
	worst: CarPremiumEfficiencyRealValue
	"""
	Best conditions are based on 23°C and no use of A/C
	"""
	best: CarPremiumEfficiencyRealValue
}
type CarPremiumEfficiencyRealValue {
	"""
	Estimated value on highway or express roads
	"""
	highway: Float
	"""
	Estimated value on city roads
	"""
	city: Float
	"""
	Estimated combined value
	"""
	combined: Float
}
type CarPremiumEfficiencyWLTP {
	"""
	Rated efficiency in WLTP combined cycle in kWh/100 km
	"""
	value: Float
	"""
	Rated efficiency in WLTP combined cycle presented in gas equivalent, in l/100 km
	"""
	fuel_equivalent: Float
	"""
	Rated vehicle efficiency in WLTP combined cycle (based on value) in kWh/100 km
	"""
	vehicle: Float
	"""
	Rated vehicle efficiency in WLTP combined cycle presented in gas equivalent, in l/100 km
	"""
	vehicle_fuel_equivalent: Float
	"""
	Rated CO2 emissions in WLTP combined cycle in battery-only mode (NULL if not WLTP rated) in gr/km
	"""
	co2: Int
}
type CarPremiumEfficiencyWLTPTEH {
	"""
	Rated efficiency in WLTP TEH combined cycle (TEH/least efficient trim)
	"""
	value: Float
	"""
	Rated efficiency in WLTP TEH combined cycle presented in gas equivalent, in l/100 km
	"""
	fuel_equivalent: Float
	"""
	Rated vehicle efficiency in WLTP TEH combined cycle (based on value) in kWh/100 km
	"""
	vehicle: Float
	"""
	Rated vehicle efficiency in WLTP TEH combined cycle presented in gas equivalent, in l/100 km
	"""
	vehicle_fuel_equivalent: Float
	"""
	Rated CO2 emissions in WLTP TEH combined cycle in battery-only mode (NULL if not WLTP TEH rated) in gr/km
	"""
	co2: Int
}
type CarPremiumFastCharge {
	"""
	Location of charge port
	"""
	plug: CarPremiumChargePlug
	"""
	Power during fast charging from 10% to 80% SoC (optimal conditions, fastest charger)
	"""
	power: CarPremiumChargePower
	"""
	Minutes needed to charge from 10% to 80%, with average charging power (optimal conditions, fastest charger)
	"""
	charge_time: Float
	"""
	Charging speed during fast charging from 10% to 80% (optimal conditions, fastest charger)
	"""
	charge_speed: Float
	"""
	Indicates if fast charge is optional in some markets/regions
	"""
	is_optional: Boolean
	"""
	Indicates what fields are estimated
	"""
	is_estimated: Boolean
	"""
	Charging details for fast charging
	"""
	table: [CarPremiumFastChargeTable]
}
type CarPremiumFastChargeTable {
	"""
	Charging details for fast charging (format: ChargerPlug-ChargerPower-AC/DC)
	"""
	format: String
	"""
	Fast charge power
	"""
	power: CarPremiumChargePower
	"""
	Minutes needed to charge from 10% to 80% (optimal conditions)
	"""
	charge_time: Int
	"""
	Charging speed during fast charging from 10% to 80% (optimal conditions)
	"""
	charge_speed: Int
	"""
	Indicates if maximum power during fast charging is limited by the vehicle
	"""
	is_limited: Boolean
	"""
	Indicates if average power during fast charging is limited by the vehicle
	"""
	average_is_limited: Boolean
}
type CarPremiumMedia {
	"""
	URL to detail page on EV database
	"""
	evdb_details_url: String
	"""
	Latest image
	"""
	image: CarImage
	"""
	Latest maker logo
	"""
	brand: CarImage
	"""
	All images
	"""
	image_list: [CarImage]
	"""
	Latest video
	"""
	video: CarVideo
	"""
	All videos
	"""
	video_list: [CarVideo]
	"""
	URL to detail page on EV database
	"""
	evdb_detail_url: String @deprecated(reason: "Will be removed in the future. Please use evdb_details_url")
}
type CarPremiumNaming {
	"""
	Car manufacturer name
	"""
	make: String
	"""
	Car model name
	"""
	model: String
	"""
	Version, edition or submodel of car
	"""
	version: String
	"""
	Another submodel level of car
	"""
	edition: String
	"""
	Car model version. Added by Chargetrip as an alternative for when a car manufacturer does not provide a version name, or uses the same version name across all trims or consecutive years
	"""
	chargetrip_version: String
}
type CarPremiumPerformance {
	"""
	Acceleration 0-100 km/h in seconds
	"""
	acceleration: Float
	"""
	Indicates if acceleration field is estimated
	"""
	acceleration_is_estimated: Boolean
	"""
	Top speed of car in km/h
	"""
	top_speed: Int
	"""
	Indicates if top_speed field is estimated
	"""
	top_speed_is_estimated: Boolean
}
type CarPremiumPrice {
	"""
	Starting price for German market
	"""
	de: CarPremiumPriceValue
	"""
	Starting price for Dutch market
	"""
	nl: CarPremiumPriceValue
	"""
	Starting price for British market
	"""
	uk: CarPremiumPriceValueWithGrant
}
type CarPremiumPriceValue {
	"""
	Starting price for local market
	"""
	value: Int
	"""
	Currency name for local market
	"""
	currency: String
	"""
	Indicates if price value is based on estimates
	"""
	is_estimated: Boolean
	"""
	Indicates if price value is based on estimates
	"""
	estimated: Boolean @deprecated(reason: "In favor of is_estimated")
}
type CarPremiumPriceValueWithGrant {
	"""
	Starting price for local market
	"""
	value: Int
	"""
	Currency name for local market
	"""
	currency: String
	"""
	Indicates if price value is based on estimates
	"""
	is_estimated: Boolean
	"""
	Grant is applied to value
	"""
	grant_applied: Int
	"""
	Indicates if price value is based on estimates
	"""
	estimated: Boolean @deprecated(reason: "In favor of is_estimated")
}
type CarPremiumRange {
	"""
	Rated range in WLTP combined cycle (NULL if not WLTP rated) in km
	"""
	wltp: Int
	"""
	Indicates if WLTP range is estimated (NULL if not WLTP rated)
	"""
	wltp_is_estimated: Boolean
	"""
	Rated range in WLTP (TEH/least efficient trim) combined cycle (NULL if not WLTP rated)
	"""
	wltp_teh: Int
	"""
	Rated range in NEDC combined cycle (NULL if not NEDC rated) in km
	"""
	nedc: Int
	"""
	Indicates if NEDC range is estimated (NULL if not NEDC rated)
	"""
	nedc_is_estimated: Boolean
	"""
	Index range in EV Database RealRange model in km
	"""
	real: Int
	"""
	Indicates if real is estimated
	"""
	real_is_estimated: Boolean
	"""
	Worst conditions are based on -10°C and use of heating
	"""
	worst: CarPremiumRangeValue
	"""
	Best conditions are based on 23°C and no use of A/C
	"""
	best: CarPremiumRangeValue
	"""
	Is an index value of what we consider to be the real-world range. (Comparable to Range_Real from EV Database.) It is essentially a normalized range to display on the front-end.
	"""
	chargetrip_range: ChargetripRange
}
type CarPremiumRangeValue {
	"""
	Estimated value on highway or express roads
	"""
	highway: Int
	"""
	Estimated value on city roads
	"""
	city: Int
	"""
	Estimated combined value
	"""
	combined: Int
}
type CarPremiumRouting {
	"""
	Cars that support fast charging have a minimum charging speed of 43 kWh
	"""
	fast_charging_support: Boolean
	"""
	Drag coefficient
	"""
	drag_coefficient: Float
	"""
	Tire pressure recommended by manufacturer
	"""
	tire_pressure: Float
	"""
	Extra consumption model
	"""
	consumption: CarPremiumRoutingConsumption
	"""
	Amount of petrol that an equivalent petrol car would consume in l/100 km
	"""
	petrol_consumption: Float
}
type CarPremiumRoutingConsumption {
	"""
	Consumption, in kWh, of the auxiliaries
	"""
	aux: CarPremiumRoutingConsumptionValue
	"""
	Consumption, in kWh, of the battery management system
	"""
	bms: CarPremiumRoutingConsumptionValue
	"""
	Consumption, in kWh, of the car in idle mode
	"""
	idle: CarPremiumRoutingConsumptionValue
}
type CarPremiumRoutingConsumptionValue {
	"""
	Best (lowest) consumption in summer
	"""
	best: Float
	"""
	Best (lowest) consumption in winter
	"""
	worst: Float
}
type CarPremiumSafety {
	"""
	Number of seats equipped with ISOFIX
	"""
	isofix_seats: Int
	"""
	EuroNCAP results
	"""
	euro_ncap: CarPremiumSafetyEuroNcap
}
type CarPremiumSafetyEuroNcap {
	"""
	EuroNCAP rating (out of 5 stars)
	"""
	rating: Int
	"""
	EuroNCAP year of rating
	"""
	year: Int
	"""
	EuroNCAP rating of adult protection (out of 100%)
	"""
	adult: Int
	"""
	EuroNCAP rating of child protection (out of 100%)
	"""
	child: Int
	"""
	EuroNCAP rating of vulnerable road users (out of 100%)
	"""
	vru: Int
	"""
	EuroNCAP rating of safety assists (out of 100%)
	"""
	sa: Int
}
"""
Propulsion
"""
enum CarPropulsion {
	AWD
	Front
	Rear
}
type CarRange {
	"""
	Index range in EV Database RealRange model in km
	"""
	real: Int
	"""
	Indicates if real is estimated
	"""
	real_is_estimated: Boolean
	"""
	Worst conditions are based on -10°C and use of heating
	"""
	worst: CarRangeValue
	"""
	Best conditions are based on 23°C and no use of A/C
	"""
	best: CarRangeValue
	"""
	Chargetrip's custom real world range provides a carefully calculated display range for all EV models. This is based on our own research and driving data
	"""
	chargetrip_range: ChargetripRange
	wltp: Float @deprecated(reason: "You will receive null values")
}
type CarRangeValue {
	"""
	Estimated value on the highway or express roads
	"""
	highway: Int
	"""
	Estimated value on the cities road
	"""
	city: Int
	"""
	Estimated combined value
	"""
	combined: Int
}
type CarRouting {
	"""
	Cars that support fast charging have a minimum charging speed of 43 kWh
	"""
	fast_charging_support: Boolean
}
"""
Status of a car
"""
enum CarStatus {
	new
	review
	public
	removed
}
type CarVideo {
	"""
	Video id
	"""
	id: ID
	"""
	Full path URL of a video
	"""
	url: String
}
"""
Charging mode used at charging stations
"""
enum ChargeMode {
	OPTIMIZE_TRAVEL_TIME
	ALWAYS_TO_MAX_CHARGE
}
input ChargeSpeedInput {
	"""
	Value of the charge speed of the battery
	"""
	value: Float!
	"""
	Type of the charge speed of the battery
	"""
	type: ChargeSpeedUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum ChargeSpeedUnit {
	kilowatt_hour
	kilometers_per_hour
	miles_per_hour
}
input ChargeTotalInput {
	"""
	Value of the temperature of the battery
	"""
	value: Float!
	"""
	Type of total charge amount
	"""
	type: StateOfChargeUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
"""
A groupped representation of EVSEs
"""
type Charger {
	"""
	Type of charger
	"""
	standard: ConnectorType
	"""
	Power of a charger
	"""
	power: Float
	"""
	Price of a charger
	"""
	price: String
	"""
	Charging speed
	"""
	speed: StationSpeedType
	"""
	Statuses of all the EVSEs grouped in a charger
	"""
	status: ChargerStatuses
	"""
	Total number of EVSEs grouped in a charger
	"""
	total: Int
}
enum ChargerStatus {
	free
	busy
	unknown
	error
}
"""
Groupping by status of the chargers
"""
type ChargerStatuses {
	"""
	How many are free
	"""
	free: Int
	"""
	How many are busy
	"""
	busy: Int
	"""
	How many are unknown
	"""
	unknown: Int
	"""
	How many are not available
	"""
	error: Int
}
"""
Chargetrip's custom real-world range provides a carefully calculated display range for all electric vehicle models based on our own research and driving data.
CT range is based on the theoretical distance driven using only the electric engine.
Vehicles that do not have a full electric drivetrain type ( all except Battery Electric Vehicles / BEV) therefore return relatively small ranges
"""
type ChargetripRange {
	"""
	Worst conditions are based on -10°C and use of heating
	"""
	worst(unit: DistanceUnit): Float
	"""
	Best conditions are based on 23°C and no use of A/C
	"""
	best(unit: DistanceUnit): Float
}
type ChargingBehaviour {
	"""
	Charging behaviour of users divided in groups, based on real-time information
	"""
	code: ChargingBehaviourCode
	"""
	Description of charging behaviour
	"""
	description: String
}
enum ChargingBehaviourCode {
	URBAN_CHARGING
	FAST_CHARGING
	MIXED_CHARGING
	NOISE_CHARGING
	OVERNIGHT_CHARGING
	OFFICE_CHARGING
}
type Connect {
	"""
	List of connectivity providers to which the vehicle can connect. This field returns null for free users. Please contact customer success for more information.
	"""
	providers: [ConnectProvider!]
}
type ConnectBattery {
	"""
	Estimated range by OEM
	"""
	range: Float
	"""
	Percentage of the battery remaining
	"""
	percentage: Float
	"""
	Capacity of the battery, in kwh
	"""
	capacity: Float
	"""
	Date when the battery data was retrieved, as ISO-8601 date
	"""
	date: DateTime
}
type ConnectCharge {
	"""
	Vehicle is plugged in
	"""
	is_plugged_in: Boolean
	"""
	Vehicle is charging
	"""
	is_charging: Boolean
	"""
	Battery is fully charged
	"""
	is_fully_charged: Boolean
	"""
	Charge limit defined by vehicle owner
	"""
	limit: Int
	"""
	Charge speed, in kwh
	"""
	charge_speed: Float
	"""
	Estimation when charging is completed, as ISO-8601 date
	"""
	fully_charged_at: DateTime
	"""
	Estimated minutes till charged
	"""
	minutes_till_charged: Int
	"""
	Date when the charge data was retrieved, as ISO-8601 date
	"""
	date: DateTime
}
input ConnectFilter {
	"""
	List of connectivity providers to which a vehicle can connect
	"""
	providers: [ConnectProvider]
}
"""
Location of the vehicle
"""
type ConnectLocation {
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: GeometryPoint!
	"""
	Properties object containing meta data about the feature point
	"""
	properties: ConnectLocationProperties
}
"""
Properties of a vehicle location
"""
type ConnectLocationProperties {
	"""
	Date when the location was retrieved, as ISO-8601 date
	"""
	date: DateTime!
}
type ConnectOdometer {
	"""
	Odometer value, distance driven, default in km
	"""
	distance: Float
	"""
	Date when the odometer data was retrieved, as ISO-8601 date
	"""
	date: DateTime
}
enum ConnectProvider {
	Enode
}
enum ConnectScope {
	location
	charge_state
	odometer
}
type ConnectedVehicle {
	"""
	Unique ID of the connected vehicle
	"""
	id: ID!
	"""
	Unique ID of the vehicle
	"""
	vehicle_id: ID!
	"""
	Status of the connected vehicle
	"""
	status: ConnectedVehicleStatus!
	"""
	URL to connect the vehicle to the connectivity provider
	"""
	authorization_url: String
	"""
	Connectivity provider
	"""
	provider: CarConnectivityProvider!
	"""
	Scope for accessing the vehicle
	"""
	scope: [ConnectScope]
	"""
	Custom label for a connected vehicle that can be assigned by a user
	"""
	label: String
	"""
	Vehicle identification number, unique identifier for a vehicle
	"""
	vin: String
}
input ConnectedVehicleListFilter {
	"""
	Status of the connected vehicle
	"""
	status: [ConnectedVehicleStatus!] = "[pending_authorization, pending_removal, authorized]"
}
enum ConnectedVehicleStatus {
	pending_authorization
	authorized
	pending_removal
	removed
}
"""
Connector data which extends OCPI Connector
"""
type Connector {
	"""
	Identifier of a connector within an EVSE. Two connectors may have the same ID as long as they do not belong to the same EVSE object.
	"""
	id: String
	"""
	Standard of an installed connector.
	"""
	standard: ConnectorType
	"""
	Format (socket/cable) of an installed connector.
	"""
	format: OCPIConnectorFormat
	"""
	Type of power of an installed connector. 
	"""
	power_type: OCPIPowerType
	"""
	Maximum voltage of an connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.
	"""
	max_voltage: Int
	"""
	Maximum amperage of a connector, in ampere [A].
	"""
	max_amperage: Int
	"""
	Maximum electric power that can be delivered by a connector, in watt [W]. When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set.
	For example: A DC Charge Point which can deliver up to 920V and up to 400A can be limited to a maximum of 150kW. Depending on the vehicle, it may supply maximum voltage or current, but not both at the same time.
	For AC Charge Points, the amount of phases used can also have influence on the maximum power.
	"""
	max_electric_power: Int
	"""
	Maximum electric power in kW
	"""
	power: Float
	"""
	Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed, if they are not active at the same time: start_date_time and end_date_time period not overlapping.
	When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. This tells the user about the options they have at this Connector, and what the tariff is for every option.
	For a "free of charge" tariff, this field should be set and point to a defined "free of charge" tariff.
	"""
	tariff_ids: [String]
	"""
	URL to an operator’s terms and conditions.
	"""
	terms_and_conditions: String
	"""
	Timestamp when a connector was last updated (or created).
	"""
	last_updated: DateTime
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
	"""
	List of valid charging tariffs
	"""
	tariff: [OCPITariff]
	"""
	Charging prices
	"""
	pricing: Pricing @deprecated(reason: "In favor of custom_properties.pricing")
	"""
	Custom properties of a connector. These are vendor specific and will return null values on the fields that are not supported by your station database
	"""
	custom_properties: ConnectorCustomProperties
}
"""
Custom properties for connectors
"""
type ConnectorCustomProperties {
	"""
	Charging prices
	"""
	pricing: Pricing
	"""
	Custom connector properties for OICP databases. Station databases that not follow the OICP standard return null values
	"""
	oicp: OICPConnectorCustomProperties
}
"""
The socket or plug standard of the charging point.
"""
enum ConnectorType {
	CHADEMO
	DOMESTIC_A
	DOMESTIC_B
	DOMESTIC_C
	DOMESTIC_D
	DOMESTIC_E
	DOMESTIC_F
	DOMESTIC_G
	DOMESTIC_H
	DOMESTIC_I
	DOMESTIC_J
	DOMESTIC_K
	DOMESTIC_L
	DOMESTIC_M
	DOMESTIC_N
	DOMESTIC_O
	IEC_60309_2_single_16
	IEC_60309_2_three_16
	IEC_60309_2_three_32
	IEC_60309_2_three_64
	IEC_62196_T1
	IEC_62196_T1_COMBO
	IEC_62196_T2
	IEC_62196_T2_COMBO
	IEC_62196_T3A
	IEC_62196_T3C
	PANTOGRAPH_BOTTOM_UP
	PANTOGRAPH_TOP_DOWN
	TESLA_R
	TESLA_S
	GB_T
	CHAOJI
	NEMA_5_20
	NEMA_6_30
	NEMA_6_50
	NEMA_10_30
	NEMA_10_50
	NEMA_14_30
	NEMA_14_50
}
enum ConsumptionUnit {
	kilowatt_hours_per_100_kilometers
	watt_hours_per_kilometer
	kilometers_per_kilowatt_hour
	kilowatt_hours_per_100_miles
	watt_hours_per_mile
	miles_per_kilowatt_hour
}
"""
The complete contact information
"""
type Contact {
	"""
	The phone number in international format
	"""
	phone: String
	"""
	The email address
	"""
	email: String
	"""
	The absolute URL of the website
	"""
	website: String
	"""
	The absolute URL of the facebook profile page
	"""
	facebook: String
	"""
	The absolute URL of the twitter profile page
	"""
	twitter: String
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
}
"""
ISO-3166 alpha-2 country codes
"""
enum CountryCodeAlpha2 {
	AD
	AE
	AF
	AG
	AI
	AL
	AM
	AN
	AO
	AQ
	AR
	AS
	AT
	AU
	AW
	AX
	AZ
	BA
	BB
	BD
	BE
	BF
	BG
	BH
	BI
	BJ
	BL
	BM
	BN
	BO
	BQ
	BR
	BS
	BT
	BV
	BW
	BY
	BZ
	CA
	CC
	CD
	CF
	CG
	CH
	CI
	CK
	CL
	CM
	CN
	CO
	CR
	CS
	CU
	CV
	CW
	CX
	CY
	CZ
	DE
	DJ
	DK
	DM
	DO
	DZ
	EC
	EE
	EG
	EH
	ER
	ES
	ET
	FI
	FJ
	FK
	FM
	FO
	FR
	GA
	GB
	GD
	GE
	GF
	GG
	GH
	GI
	GL
	GM
	GN
	GP
	GQ
	GR
	GS
	GT
	GU
	GW
	GY
	HK
	HM
	HN
	HR
	HT
	HU
	ID
	IE
	IL
	IM
	IN
	IO
	IQ
	IR
	IS
	IT
	JE
	JM
	JO
	JP
	KE
	KG
	KH
	KI
	KM
	KN
	KP
	KR
	KW
	KY
	KZ
	LA
	LB
	LC
	LI
	LK
	LR
	LS
	LT
	LU
	LV
	LY
	MA
	MC
	MD
	ME
	MF
	MG
	MH
	MK
	ML
	MM
	MN
	MO
	MP
	MQ
	MR
	MS
	MT
	MU
	MV
	MW
	MX
	MY
	MZ
	NA
	NC
	NE
	NF
	NG
	NI
	NL
	NO
	NP
	NR
	NU
	NZ
	OM
	PA
	PE
	PF
	PG
	PH
	PK
	PL
	PM
	PN
	PR
	PS
	PT
	PW
	PY
	QA
	RE
	RKS
	RO
	RS
	RU
	RW
	SA
	SB
	SC
	SD
	SE
	SG
	SH
	SI
	SJ
	SK
	SL
	SM
	SN
	SO
	SR
	SS
	ST
	SV
	SX
	SY
	SZ
	TC
	TD
	TF
	TG
	TH
	TJ
	TK
	TL
	TM
	TN
	TO
	TR
	TT
	TV
	TW
	TZ
	UA
	UG
	UM
	US
	UY
	UZ
	VA
	VC
	VE
	VG
	VI
	VN
	VU
	WF
	WS
	YE
	YT
	ZA
	ZM
	ZW
}
input CreateConnectedVehicleInput {
	"""
	Id from the vehicle
	"""
	vehicle_id: ID!
	"""
	Connectivity provider used to retrieve data from the vehicle
	"""
	provider: CarConnectivityProvider!
	"""
	Label for a connected vehicle
	"""
	label: PlainString
	"""
	Provider specific options. See the developer portal for more details
	"""
	options: CreateConnectedVehicleOptions!
}
input CreateConnectedVehicleOptions {
	"""
	Redirect uri
	"""
	redirect_uri: PlainString
	"""
	Scope
	"""
	scope: [ConnectScope!]
}
"""
Currency according to the ISO 4217 standard
"""
enum CurrencyUnit {
	EUR
	USD
	GBP
}
"""
The date and time scalar
"""
scalar DateTime
enum DistanceUnit {
	meter
	foot
	kilometer
	mile
}
"""
EVSE data which extends OCPI EVSE
"""
type EVSE {
	"""
	Uniquely identifies an EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual "EVSE ID". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field evse_id for that.
	This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field.
	"""
	uid: String
	"""
	Compliant with the following specification for EVSE ID from "eMI3 standard version V1.0" (http://emi3group.com/documents-links/) "Part 2: business objects." Optional because: if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED.
	"""
	evse_id: String
	"""
	Indicates the current status of an EVSE.
	"""
	status: OCPIStatus
	"""
	Indicates a planned status update of a nEVSE.
	"""
	status_schedule: [OCPIStatusSchedule]
	"""
	List of functionalities that an EVSE is capable of.
	"""
	capabilities: [OCPICapability]
	"""
	List of available connectors on an EVSE.
	"""
	connectors: [Connector]
	"""
	Level on which a Charge Point is located (in garage buildings) in the locally displayed numbering scheme.
	"""
	floor_level: String
	"""
	Coordinates of a EVSE.
	"""
	coordinates: OCPIGeoLocation
	"""
	A number/string printed on the outside of an EVSE for visual identification.
	"""
	physical_reference: String
	"""
	Restrictions that apply to a parking spot.
	"""
	parking_restrictions: [OCPIParkingRestriction]
	"""
	Links to images related to an EVSE such as photos or logos.
	"""
	images: [OCPIImage]
	"""
	Timestamp when this EVSE or one of its Connectors was last updated (or created).
	"""
	last_updated: DateTime
	"""
	Indicates if parking is free or paid.
	"""
	parking_cost: ParkingCost
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
	"""
	Custom properties of an EVSE
	"""
	custom_properties: EvseCustomProperties
}
input ElevationInput {
	"""
	Value of the elevation
	"""
	value: Float!
	"""
	Type of the value of elevation
	"""
	type: DistanceUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum ElevationUnit {
	meter
	foot
}
"""
Email address scalar, email regex with HTML sanitization
"""
scalar Email
enum EmissionRateUnit {
	grams_per_kilometer
	ounces_per_mile
}
enum EmissionUnit {
	gram
	ounce
}
"""
Custom EVSE properties for OICP databases such as the global Hubject database. Station databases that not follow the OICP standard return null values
"""
type EvseCustomProperties {
	"""
	OICP standard custom properties
	"""
	oicp: OICPEvseCustomProperties
}
"""
A GeoJSON Feature<LineString>
"""
type FeatureLineString {
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: LineString!
}
"""
A GeoJSON Feature<MultiPolygon>
"""
type FeatureMultiPolygon {
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: MultiPolygon!
	"""
	Properties of the MultiPolygon Feature
	"""
	properties: PolygonProperties
}
"""
A GeoJSON Feature<Point>
"""
type FeatureMultiPolygonPoint {
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: Point!
	"""
	Optional object where you can store custom data you need in your application.
	"""
	properties: JSON
}
"""
A GeoJSON Feature<Point>
"""
type FeaturePoint {
	"""
	Feature ID
	"""
	id: String
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: Point!
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
}
"""
A GeoJSON Feature<Point> input
"""
input FeaturePointInput {
	"""
	The feature ID
	"""
	id: String
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: PointInput!
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
}
"""
A GeoJSON Feature<Point> input
"""
input FeaturePointPolygonInput {
	"""
	Feature type
	"""
	type: FeatureType!
	"""
	Geometry of the feature
	"""
	geometry: PointInput!
	"""
	Optional object where you can store custom data you need in your application.
	"""
	properties: FeaturePointPolygonPropertiesInput
}
"""
Properties for Feature<Point> input
"""
type FeaturePointPolygonProperties {
	"""
	Name of the location
	"""
	name: String
}
"""
Properties for Feature<Point> input
"""
input FeaturePointPolygonPropertiesInput {
	"""
	Name of the location
	"""
	name: String
}
"""
GeoJSON Feature type
"""
enum FeatureType {
	Feature
}
enum FuelConsumptionUnit {
	liters_per_100_kilometers
	miles_per_gallon
}
"""
Geometry point with GPS coordinates
"""
type GeometryPoint {
	type: PointType!
	coordinates: [Float!]!
}
"""
Navigation service providers available
"""
enum InstructionsFormat {
	Chargetrip
	MapboxV5
}
type Isoline {
	"""
	Isoline id
	"""
	id: ID!
	"""
	Isoline status
	"""
	status: IsolineStatus!
	"""
	Shape of the isoline consisting in a list of multipolygons
	"""
	polygons: [FeatureMultiPolygon]
	"""
	List of the ferries uniting islands formed by the isoline
	"""
	ferries: [FeatureLineString]
	"""
	Origin point of the request
	"""
	origin: FeatureMultiPolygonPoint!
	"""
	Vehicle id
	"""
	vehicle_id: ID!
	"""
	Number of Isolines to be generated representing SoC (default: 1, maximum: 20)
	"""
	polygon_count: Int
	"""
	Season to be taken into account when generating the isoline. Default: current
	"""
	season: RouteSeason
}
enum IsolineFerryConnectionsType {
	none
	single
}
input IsolineInput {
	"""
	Vehicle id
	"""
	vehicle_id: ID!
	"""
	Origin point of the request
	"""
	origin: FeaturePointPolygonInput!
	"""
	Numbers of polygons to be generated (default: 1, maximum: 20)
	"""
	polygon_count: Int = "1"
	"""
	Vehicle should be able to return to the origin point from any point
	"""
	round_trip: Boolean = "false"
	"""
	Climate is on
	"""
	climate_control: Boolean = "true"
	"""
	Season to be taken into account when generating the isoline
	"""
	season: RouteSeason = "current"
	"""
	Polygons precision quality
	"""
	quality: IsolineQuality = "high"
	"""
	Include ferry connections. Single and multiple ferry connections increase the calculation time and the number of polygons.
	"""
	ferry_connections: IsolineFerryConnectionsType = "none"
}
"""
Granularity of the isoline
"""
enum IsolineQuality {
	high
	low
}
"""
Status of the isoline label
"""
enum IsolineStatus {
	done
	pending
	error
}
"""
Any JSON object
"""
scalar JSON
"""
Types of a leg
"""
enum LegType {
	station
	stationVia
	stationAmenity
	via
	final
	stationFinal
}
"""
A GeoJSON LineString
"""
type LineString {
	"""
	LineString type
	"""
	type: LineStringType!
	"""
	List of coordinates arrays with longitude as first value and latitude as second one
	"""
	coordinates: [[Float!]]!
}
"""
GeoJSON LineString type
"""
enum LineStringType {
	LineString
}
"""
Preferred language for the mapping
"""
enum MappingLanguage {
	en
}
"""
Navigation service providers available
"""
enum MappingProvider {
	Chargetrip
	MapboxV5
}
enum MeasurementUnit {
	millimeter
	inch
}
"""
A GeoJSON Polygon
"""
type MultiPolygon {
	"""
	MultiPolygon type
	"""
	type: MultiPolygonType!
	"""
	List of coordinates representing a polygon
	"""
	coordinates: [[[[Float!]]]]!
}
"""
GeoJSON MultiPolygon type
"""
enum MultiPolygonType {
	MultiPolygon
}
type Mutation {
	"""
	[BETA] Create a connected vehicle for a given vehicle id and a connectivity provider
	"""
	createConnectedVehicle(input: CreateConnectedVehicleInput): ConnectedVehicle
	"""
	[BETA] Authorize a connected vehicle
	"""
	authorizeConnectedVehicle(input: AuthorizeConnectedVehicleInput): ConnectedVehicle
	"""
	[BETA] Update a connected vehicle
	"""
	updateConnectedVehicle(input: UpdateConnectedVehicleInput!): ConnectedVehicle
	"""
	[BETA] Remove a connected vehicle and revoke access
	"""
	removeConnectedVehicle(input: RemoveConnectedVehicleInput!): ConnectedVehicle
	"""
	[BETA] Generate a set of consumption based Isolines
	"""
	createIsoline(input: IsolineInput!): ID
	"""
	[BETA] Start a new navigation session on top of an existing route
	"""
	startNavigation(input: NavigationStartInput!): ID
	"""
	[BETA] Update the navigation session
	"""
	updateNavigation(input: NavigationUpdateInput!): Acknowledgement
	"""
	[BETA] Recalculate the current navigation route
	"""
	recalculateNavigation(input: NavigationRecalculateInput!): Acknowledgement
	"""
	[BETA] End a navigation session
	"""
	finishNavigation(input: NavigationFinishInput!): Acknowledgement
	"""
	Add a new review.
	If the `x-token` header is send for a valid user, the review will belong to it, otherwise will be added for an anonymouse user
	"""
	addReview(review: ReviewAdd!): Review!
	"""
	Remove a review added by an authenticated user.
	The `x-token` header is mandatory in order to authorize the user who wants to remove a review.
	In case it is not sent, an error will occur.
	In case the review was not found or belongs to another user an error will occur.
	This is a premium feature, contact Chargetrip for more information.
	"""
	deleteUserReview(id: ID!): Review!
	"""
	Create a new route from the route input and its ID
	"""
	newRoute(input: RequestInput): ID
}
"""
The navigation session data
"""
type Navigation {
	"""
	ID of the navigation session
	"""
	id: ID!
	"""
	The current route used for navigation
	"""
	route_id: ID!
	"""
	The current route alternative used for navigation
	"""
	route_alternative_id: ID!
	"""
	The state of a navigation session. The status can be driving, charging, finished, or error
	"""
	state: NavigationState!
	"""
	State of charge at the last known location
	"""
	state_of_charge(unit: StateOfChargeUnit = "kilowatt_hour"): Float!
	"""
	Last known location
	"""
	last_known_location: Point!
	"""
	Next charging station
	"""
	next_station: NavigationStation
	"""
	A set of alternative charging stations to next station
	"""
	alternative_stations: [NavigationStation!]!
	"""
	Navigation instructions
	"""
	instructions: JSON
}
"""
Input for the navigation recalculate
"""
input NavigationFinishInput {
	"""
	ID of the navigation session
	"""
	id: ID!
	"""
	Current coordinates
	"""
	current_location: PointInput!
}
input NavigationInstructionsInput {
	"""
	Turn by turn instructions format for a route
	"""
	instructions_format: InstructionsFormat!
	"""
	Preferred navigation instructions language. Default: en
	"""
	language: MappingLanguage = "en"
	"""
	Number of decimals used for the Google Polyline encoding Algorithm. Allowed values are 5 or 6, the default is 5
	"""
	precision: Int = "5"
}
"""
Input for the navigation recalculate
"""
input NavigationRecalculateInput {
	"""
	ID of the navigation session
	"""
	id: ID!
	"""
	State of charge at origin
	"""
	state_of_charge: StateOfChargeInput
	"""
	Origin location of a new route
	"""
	current_location: PointInput!
	"""
	Via points of a new route. If this field is not sent, the original via points will be used
	"""
	via: [FeaturePointInput!]
	"""
	Telemetry data input
	"""
	telemetry: TelemetryInput
}
"""
Input for the navigation start
"""
input NavigationStartInput {
	"""
	ID of the route of the navigation session
	"""
	route_id: ID!
	"""
	ID of the route alternative of the navigation session
	"""
	route_alternative_id: ID
	"""
	Current coordinates
	"""
	current_location: PointInput!
	"""
	Instruction input format
	"""
	instructions: NavigationInstructionsInput!
}
"""
State of navigation session
"""
enum NavigationState {
	driving
	charging
	finished
	error
}
"""
Navigation session station type
"""
type NavigationStation {
	"""
	The ID as string of the charging station
	"""
	station_id: ID!
	"""
	GPS location of the charging station
	"""
	station_location: Point!
	"""
	An array with all GPS locations of via points until the next charging station
	"""
	via: [Point!]!
	"""
	Estimated state of charge, at arrival on the next charging station
	"""
	estimated_state_of_charge(unit: StateOfChargeUnit = "kilowatt_hour"): Float!
	"""
	Estimated consumption, in kWh, from last the known location until the next charging station
	"""
	estimated_consumption: Float!
	"""
	Estimated duration, in seconds, from the last known location until the next charging station
	"""
	estimated_duration: Int!
}
"""
Input for the navigation update
"""
input NavigationUpdateInput {
	"""
	ID of the navigation session
	"""
	id: ID!
	"""
	A list of locations that were collected since the last update
	"""
	location_data: [NavigationUpdateLocationsInput!]!
	"""
	Telemetry data input
	"""
	telemetry: TelemetryInput
}
"""
Properties of the location
"""
input NavigationUpdateLocationPropertiesInput {
	"""
	Current route leg index corresponding to a location
	"""
	route_leg: Int!
	"""
	Speed at a location
	"""
	speed: VehicleSpeedInput
	"""
	UNIX timestamp at location, in seconds
	"""
	timestamp: Int!
	"""
	Elevation information
	"""
	elevation: ElevationInput
}
"""
Input for the navigation update locations
"""
input NavigationUpdateLocationsInput {
	"""
	GPS location
	"""
	geometry: PointInput!
	"""
	Extra information about the location
	"""
	properties: NavigationUpdateLocationPropertiesInput!
}
"""
The non empty string scalar
"""
scalar NonEmptyString
"""
This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.
"""
type OCPIAdditionalGeoLocation {
	"""
	Latitude of the point in decimal degree. Example: 50.770774. Decimal separator: "." Regex: -?[0-9]{1,2}\.[0-9]{5,7}
	"""
	latitude: String
	"""
	Longitude of the point in decimal degree. Example: -126.104965. Decimal separator: "." Regex: -?[0-9]{1,3}\.[0-9]{5,7}
	"""
	longitude: String
	"""
	Name of the point in local language or as written at the location. For example the street name of a parking lot entrance or it’s number.
	"""
	name: OCPIDisplayText
}
"""
The capabilities of an EVSE.
"""
enum OCPICapability {
	CHARGING_PROFILE_CAPABLE
	CHARGING_PREFERENCES_CAPABLE
	CHIP_CARD_SUPPORT
	CONTACTLESS_CARD_SUPPORT
	CREDIT_CARD_PAYABLE
	DEBIT_CARD_PAYABLE
	PED_TERMINAL
	REMOTE_START_STOP_CAPABLE
	RESERVABLE
	RFID_READER
	TOKEN_GROUP_CAPABLE
	UNLOCK_CAPABLE
	START_SESSION_CONNECTOR_REQUIRED
}
"""
The format of the connector, whether it is a socket or a plug.
"""
enum OCPIConnectorFormat {
	SOCKET
	CABLE
}
"""
Deprecated: Please use ConnectorType instead
"""
enum OCPIConnectorType {
	CHADEMO
	DOMESTIC_A
	DOMESTIC_B
	DOMESTIC_C
	DOMESTIC_D
	DOMESTIC_E
	DOMESTIC_F
	DOMESTIC_G
	DOMESTIC_H
	DOMESTIC_I
	DOMESTIC_J
	DOMESTIC_K
	DOMESTIC_L
	DOMESTIC_M
	DOMESTIC_N
	DOMESTIC_O
	IEC_60309_2_single_16
	IEC_60309_2_three_16
	IEC_60309_2_three_32
	IEC_60309_2_three_64
	IEC_62196_T1
	IEC_62196_T1_COMBO
	IEC_62196_T2
	IEC_62196_T2_COMBO
	IEC_62196_T3A
	IEC_62196_T3C
	PANTOGRAPH_BOTTOM_UP
	PANTOGRAPH_TOP_DOWN
	TESLA_R
	TESLA_S
	GB_T
	CHAOJI
	NEMA_5_20
	NEMA_6_30
	NEMA_6_50
	NEMA_10_30
	NEMA_10_50
	NEMA_14_30
	NEMA_14_50
}
enum OCPIDayOfWeek {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}
type OCPIDisplayText {
	"""
	Language Code ISO 639-1
	"""
	language: String
	"""
	Text to be displayed to an end user. No markup, html etc. allowed.
	"""
	text: String
}
"""
This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff.
"""
type OCPIEnergyMix {
	"""
	True if the power is 100% from regenerative sources
	"""
	is_green_energy: Boolean
	"""
	Key-value pairs (enum + percentage) of energy sources of this location’s tariff.
	"""
	energy_sources: [OCPIEnergySource]
	"""
	Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.
	"""
	environ_impact: [OCPIEnvironmentalImpact]
	"""
	Name of the energy supplier, delivering the energy for this location or tariff.*
	"""
	supplier_name: String
	"""
	Name of the energy suppliers product/tariff plan used at this location.*
	"""
	energy_product_name: String
}
type OCPIEnergySource {
	"""
	The type of energy source.
	"""
	source: OCPIEnergySourceCategory
	"""
	Percentage of this source (0-100) in the mix.
	"""
	percentage: Int
}
"""
Categories of energy sources.
"""
enum OCPIEnergySourceCategory {
	NUCLEAR
	GENERAL_FOSSIL
	COAL
	GAS
	GENERAL_GREEN
	SOLAR
	WIND
	WATER
}
"""
Amount of waste produced/emitted per kWh.
"""
type OCPIEnvironmentalImpact {
	"""
	The environmental impact category of this value.
	"""
	category: OCPIEnvironmentalImpactCategory
	"""
	Amount of this portion in g/kWh.
	"""
	amount: Float
}
"""
Categories of environmental impact values.
"""
enum OCPIEnvironmentalImpactCategory {
	NUCLEAR_WASTE
	CARBON_DIOXIDE
}
"""
Specifies one exceptional period for opening or access hours.
"""
type OCPIExceptionalPeriod {
	"""
	Begin of the exception. In UTC, time_zone field can be used to convert to local time.
	"""
	period_begin: DateTime
	"""
	End of the exception. In UTC, time_zone field can be used to convert to local time.
	"""
	period_end: DateTime
}
enum OCPIFacility {
	HOTEL
	RESTAURANT
	CAFE
	MALL
	SUPERMARKET
	SPORT
	RECREATION_AREA
	NATURE
	MUSEUM
	BIKE_SHARING
	BUS_STOP
	TAXI_STAND
	TRAM_STOP
	METRO_STATION
	TRAIN_STATION
	AIRPORT
	PARKING_LOT
	CARPOOL_PARKING
	FUEL_STATION
	WIFI
}
"""
This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84.
"""
type OCPIGeoLocation {
	"""
	Latitude of the point in decimal degree. Example: 50.770774. Decimal separator: "." Regex: -?[0-9]{1,2}\.[0-9]{5,7}
	"""
	latitude: String
	"""
	Longitude of the point in decimal degree. Example: -126.104965. Decimal separator: "." Regex: -?[0-9]{1,3}\.[0-9]{5,7}
	"""
	longitude: String
}
"""
Opening and access hours of the location.
"""
type OCPIHours {
	"""
	True to represent 24 hours a day and 7 days a week, except the given exceptions.
	"""
	twentyfourseven: Boolean
	"""
	Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.
	"""
	regular_hours: [OCPIRegularHours]
	"""
	Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.
	"""
	exceptional_openings: [OCPIExceptionalPeriod]
	"""
	Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.
	"""
	exceptional_closings: [OCPIExceptionalPeriod]
}
type OCPIImage {
	"""
	URL from where the image data can be fetched through a web browser.
	"""
	url: String
	"""
	URL from where a thumbnail of the image can be fetched through a webbrowser.
	"""
	thumbnail: String
	"""
	Category of an image
	"""
	category: OCPIImageCategory
	"""
	Image type: gif, jpeg, png, svg
	"""
	type: String
	"""
	Width of the full scale image
	"""
	width: Int
	"""
	Height of the full scale image
	"""
	height: Int
}
"""
The category of an image to obtain the correct usage in a user presentation. The category has to be set accordingly to the image content in order to guarantee the right usage.
"""
enum OCPIImageCategory {
	CHARGER
	ENTRANCE
	LOCATION
	NETWORK
	OPERATOR
	OTHER
	OWNER
}
"""
This value, if provided, represents the restriction to the parking spot for different purposes.
"""
enum OCPIParkingRestriction {
	EV_ONLY
	PLUGGED
	DISABLED
	CUSTOMERS
	MOTORCYCLES
}
"""
Reflects the general type of the charge point’s location. May be used for user information.
"""
enum OCPIParkingType {
	ALONG_MOTORWAY
	PARKING_GARAGE
	PARKING_LOT
	ON_DRIVEWAY
	ON_STREET
	UNDERGROUND_GARAGE
}
enum OCPIPowerType {
	AC_1_PHASE
	AC_3_PHASE
	AC_2_PHASE
	AC_2_PHASE_SPLIT
	DC
}
type OCPIPrice {
	"""
	Price/Cost excluding VAT.
	"""
	excl_vat: Float
	"""
	Price/Cost including VAT.
	"""
	incl_vat: Float
}
type OCPIPriceComponent {
	"""
	Type of tariff dimension.
	"""
	type: OCPITariffDimensionType
	"""
	Price per unit (excl. VAT) for this tariff dimension.
	"""
	price: Float
	"""
	Applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable. Not providing a VAT is different from 0% VAT, which would be a value of 0.0 here.
	"""
	vat: Float
	"""
	Minimum amount to be billed. This unit will be billed in this step_size blocks. For example: if type is TIME and step_size has a value of 300, then time will be billed in blocks of 5 minutes. If 6 minutes were used, 10 minutes (2 blocks of step_size) will be billed.
	"""
	step_size: Int
}
"""
Regular recurring operation or access hours.
"""
type OCPIRegularHours {
	"""
	Number of days in the week, from Monday (1) till Sunday (7)
	"""
	weekday: Int
	"""
	Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: "18:15". Hour/Minute separator: ":" Regex: ([0-1][0-9]|2[1-3]):[0-5][0-9].
	"""
	period_begin: String
	"""
	End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.
	"""
	period_end: String
}
enum OCPIReservationRestrictionType {
	RESERVATION
	RESERVATION_EXPIRES
}
"""
The status of an EVSE.
"""
enum OCPIStatus {
	AVAILABLE
	BLOCKED
	CHARGING
	INOPERATIVE
	OUTOFORDER
	PLANNED
	REMOVED
	RESERVED
	UNKNOWN
}
"""
This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: "This station will be running as of tomorrow. Today it is still planned and under construction.
"""
type OCPIStatusSchedule {
	"""
	Begin of the scheduled period.
	"""
	period_begin: DateTime
	"""
	End of the scheduled period, if known.
	"""
	period_end: DateTime
	"""
	Status value during the scheduled period.
	"""
	status: OCPIStatus
}
type OCPITariff {
	"""
	ISO-3166 alpha-2 country code of the CPO that owns this tariff
	"""
	country_code: String
	"""
	CPO ID of the CPO that owns this tariff (following the ISO-15118 standard)
	"""
	party_id: String
	"""
	Uniquely identifies the tariff within the CPO’s platform (and suboperator platforms)
	"""
	id: String
	"""
	ISO-4217 code of the currency of this tariff.
	"""
	currency: String
	"""
	Defines the type of the tariff. This allows for distinction in case of given charging preferences. When omitted, this tariff is valid for all sessions
	"""
	type: OCPITariffType
	"""
	List of alternative tariff information texts, in multiple languages
	"""
	tariff_alt_text: [OCPIDisplayText]
	"""
	URL to a web page that contains an explanation of the tariff information in human readable form
	"""
	tariff_alt_url: String
	"""
	When this field is set, a charging session with this tariff will cost at least the amount shown. This is different from a FLAT fee (start tariff, transaction fee), as a FLAT fee is a fixed amount that must be paid for any charging session. A minimum price indicates that when the cost of a charging session is lower than this amount, the cost of the session will be equal to this amount
	"""
	min_price: OCPIPrice
	"""
	When this field is set, a charging session with this tariff will NOT cost more than this amount
	"""
	max_price: OCPIPrice
	"""
	List of tariff elements
	"""
	elements: [OCPITariffElement]
	"""
	Time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active
	"""
	start_date_time: DateTime
	"""
	Time after which this tariff is no longer valid, in UTC, time_zone field if the location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future
	"""
	end_date_time: DateTime
	"""
	Details about the energy supplied with this tariff
	"""
	energy_mix: OCPIEnergyMix
	"""
	Timestamp when this tariff was last updated (or created)
	"""
	last_updated: DateTime
}
enum OCPITariffDimensionType {
	ENERGY
	FLAT
	PARKING_TIME
	TIME
}
type OCPITariffElement {
	"""
	List of price components that describe the pricing of a tariff.
	"""
	price_components: [OCPIPriceComponent]
	"""
	Restrictions that describe the applicability of a tariff.
	"""
	restrictions: [OCPITariffRestrictions]
}
type OCPITariffRestrictions {
	"""
	Start time of day in local time, the time zone is defined in the time_zone field of the Location, for example 13:30, valid from this time of the day. Must be in 24h format with leading zeros. Hour/Minute separator: ":" Regex: ([0-1][0-9]|2[1-3]):[0-5][0-9]
	"""
	start_time: String
	"""
	End time of day in local time, the time zone is defined in the time_zone field of the Location, for example 19:45, valid until this time of the day. Same syntax as start_time.
	"""
	end_time: String
	"""
	Start date in local time, the time zone is defined in the time_zone field of the Location, for example: 2015-12-24, valid from this day. Regex: ([12][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])
	"""
	start_date: String
	"""
	End date in local time, the time zone is defined in the time_zone field of the Location, for example: 2015-12-27, valid until this day (exclusive). Same syntax as start_date
	"""
	end_date: String
	"""
	Minimum consumed energy in kWh, for example 20, valid from this amount of energy being used
	"""
	min_kwh: Float
	"""
	Maximum consumed energy in kWh, for example 50, valid until this amount of energy being used
	"""
	max_kwh: Float
	"""
	Sum of the minimum current in over all phases, for example 5. When the EV is charging with more than the defined amount of current, this tariff element is/becomes active. If the charging current is or becomes lower, this tariff element is not or no longer valid and becomes inactive. This does not describe the minimum current over the entire charging session. This restriction can make a tariff element become active when the charging current is above the defined value, but the tariff element MUST no longer be active when the charging current drops below the defined value
	"""
	min_current: Float
	"""
	Sum of the maximum current in over all phases, for example 20. When the EV is charging with less than the defined amount of current, this tariff element becomes/is active. If the charging current is or becomes higher, this tariff element is not or no longer valid and becomes inactive. This describes NOT the maximum current over the entire Charging Session. This restriction can make a tariff element become active when the charging current is below this value, but the tariff element MUST  no longer be active when the charging current raises above the defined value
	"""
	max_current: Float
	"""
	Minimum power in kW, for example 5. When the EV is charging with more than the defined amount of power, this tariff element is/becomes active. If the charging power is or becomes lower, this tariff element is not or no longer valid and becomes inactive. This does not describe the minimum power over the entire charging session. This restriction can make a tariff element become active when the charging power is above this value, but the TariffElement MUST no longer be active when the charging power drops below the defined value
	"""
	min_power: Float
	"""
	Maximum power in kW, for example 20. When the EV is charging with less than the defined amount of power, this tariff element becomes/is active. If the charging power is or becomes higher, this tariff element is not or no longer valid and becomes inactive. This does not describe the maximum power over the entire charging session. This restriction can make a tariff element become active when the charging power is below this value, but the TariffElement MUST no longer be active when the charging power raises above the defined value
	"""
	max_power: Float
	"""
	Minimum duration in seconds the charging session MUST last (inclusive). When the duration of a charging session is longer than the defined value, this TariffElement is or becomes active. Before that moment, this tariff element is not yet active
	"""
	min_duration: Float
	"""
	Maximum duration in seconds the charging session MUST last (exclusive). When the duration of a charging session is shorter than the defined value, this tariff element is or becomes active. After that moment, this tariff element is no longer active
	"""
	max_duration: Float
	"""
	Which day(s) of the week this tariff element is active.
	"""
	day_of_week: OCPIDayOfWeek
	"""
	When this field is present, the tariff element describes reservation costs. A reservation starts when the reservation is made, and ends when the drivers starts charging on the reserved EVSE/Location, or when the reservation expires. A reservation can only have: FLAT and TIME TariffDimensions, where TIME is for the duration of the reservation
	"""
	reservation: OCPIReservationRestrictionType
}
enum OCPITariffType {
	AD_HOC_PAYMENT
	PROFILE_CHEAP
	PROFILE_FAST
	PROFILE_GREEN
	REGULAR
}
"""
List of charging modes that are supported
"""
enum OICPChargingModes {
	mode_1
	mode_2
	mode_3
	mode_4
	chademo
}
"""
Custom connector properties for OICP databases. Station databases that not follow the OICP standard return null values
"""
type OICPConnectorCustomProperties {
	"""
	Returns whether the connector is able to deliver different power outputs
	"""
	dynamic_power_level: Boolean
	"""
	List of charging modes that are supported as specified by IEC 61851-1
	"""
	charging_modes: [OICPChargingModes!]
}
"""
List of authentication modes that are supported
"""
enum OICPEvseAuthenticationMode {
	nfc_rfid_classic
	nfc_rfid_desfire
	pnc
	remote
	direct_payment
	no_authentication_required
}
"""
Custom EVSE properties for OICP databases such as the global Hubject database. Station databases that not follow the OICP standard return null values
"""
type OICPEvseCustomProperties {
	"""
	List of authentication modes that are supported
	"""
	authentication_modes: [OICPEvseAuthenticationMode!]!
	"""
	Returns a value if the EVSE has a limited capacity (e.g. built-in battery). Values are in kWh
	"""
	max_capacity: Int
	"""
	List of payment options that are supported
	"""
	payment_options: [OICPPaymentOptions!]!
	"""
	List of value added services that are supported
	"""
	value_added_services: [OICPValueAddedServices!]!
	"""
	List of additional info by locale
	"""
	additional_info: [OICPEvseCustomPropertiesAdditionalInfo!]
	"""
	When the value is set to false this station does not support remote start and stop by Hubject
	"""
	is_hubject_compatible: Boolean!
	"""
	Name of the charging point manufacturer
	"""
	hardware_manufacturer: String
}
type OICPEvseCustomPropertiesAdditionalInfo {
	"""
	The language in which the additional info text is provided
	"""
	lang: String
	"""
	Additional info text value
	"""
	value: String
}
"""
List of payment options that are supported
"""
enum OICPPaymentOptions {
	no_payment
	direct
	contract
}
"""
Custom station properties for OICP databases such as the global Hubject database. Station databases that not follow the OICP standard return null values
"""
type OICPStationCustomProperties {
	"""
	Returns whether the station is a parking facility
	"""
	parking_facility: Boolean
	"""
	Returns an identifier for the precise parking spot. Eg. 36 or 12-1
	"""
	parking_spot: String
	"""
	Returns information on how the charging station provides metering law data
	"""
	calibration_law_data_availability: String!
	"""
	Identification of the corresponding clearing house in the event that roaming between different clearing houses must be processed in the future
	"""
	clearinghouse_id: String
}
"""
List of value added services that are supported
"""
enum OICPValueAddedServices {
	reservation
	dynamic_pricing
	parking_sensors
	maximum_power_charging
	predictive_charge_point_usage
	charging_plans
	roof_provided
	none
}
input OdometerInput {
	"""
	Value of the vehicle's odometer
	"""
	value: Float!
	"""
	Type of the value of the vehicle's odometer
	"""
	type: DistanceUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
"""
The operator data which extends OCPI BusinessDetails
"""
type Operator {
	"""
	Unique operator ID
	"""
	id: ID
	"""
	External ID of an operator provided by the operator data source
	"""
	external_id: String
	"""
	Name of an operator
	"""
	name: String
	"""
	Link to an operator’s website
	"""
	website: String
	"""
	Image link to an operator’s logo
	"""
	logo: OCPIImage
	"""
	Deprecated: Not used anymore, please use countries property instead
	"""
	country: String
	"""
	ISO-3166 alpha-2 country codes an operator is active in.
	"""
	countries: [CountryCodeAlpha2!]
	"""
	Contact information
	"""
	contact: Contact
	"""
	Ranking level on which the operator is placed or null in case the operator is not on any ranking level
	"""
	ranking: Int
	"""
	Flag which indicates if the operator is in the excluded list
	"""
	excluded: Boolean
}
"""
Filter which can be applied to retrieve the operator list action
"""
input OperatorListFilter {
	"""
	ISO-3166 alpha-2 country codes an operator is active in.
	"""
	countries: [CountryCodeAlpha2!]
	"""
	List of ranking level(s) to be retrieved. Valid values are 1 to 10
	"""
	ranking: [Int!]
	"""
	Only retrieve operators that are in the excluded list
	"""
	excluded: Boolean
}
"""
Filter which can be applied to retrieve the operator list action
"""
input OperatorListQuery {
	"""
	Unique operator ID
	"""
	id: ID
	"""
	External ID of an operator provided by an operator data source
	"""
	external_id: String
	"""
	Exact name
	"""
	name: String
	"""
	Exact country code
	"""
	country: String
}
input OutsideTempInput {
	"""
	Value of the outside temperature
	"""
	value: Float!
	"""
	Type of the value of the outside temperature
	"""
	type: TemperatureUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum ParkingCost {
	free
	paid
}
type PathSegment {
	"""
	Elevation (altitude) in meters
	"""
	elevation: Int
	"""
	Average speed, in km/h, for this route path segment
	"""
	averageSpeed: Float
	"""
	Consumption, in kWh, of a route path segment
	"""
	consumption: Float
	"""
	Consumption, in kWh per km, of a route path segment
	"""
	consumptionPerKm: Float
	"""
	Distance, in meters, of a route path segment
	"""
	distance: Float
	"""
	Duration, in seconds, of a route path segment
	"""
	duration: Float
	"""
	State of charge, in kWh, of a route path segment
	"""
	stateOfCharge: Float
}
"""
The `PlainString` scalar type represents textual data, represented as UTF-8 character sequences.
The PlainString type represents free-form human-readable text with HTML sanitization.
"""
scalar PlainString
"""
A GeoJSON Point
"""
type Point {
	"""
	Point type
	"""
	type: PointType!
	"""
	The coordinates array with longitude as first value and latitude as second one
	"""
	coordinates: [Float!]!
}
"""
A GeoJSON Point input
"""
input PointInput {
	"""
	Point type
	"""
	type: PointType!
	"""
	Coordinates [longitude, latitude]
	"""
	coordinates: [Float!]!
}
"""
GeoJSON Point type
"""
enum PointType {
	Point
}
"""
Polygon properties
"""
type PolygonProperties {
	"""
	Index of the feature inside the list
	"""
	index: Int
}
input PowerInput {
	"""
	Value of the positive or negative power. When negative the vehicle is charging
	"""
	value: Float!
	"""
	Type of the value of the power
	"""
	type: PowerUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
"""
The list of powers for the speed type
"""
type PowerList {
	"""
	The maximum power the plug provides in kW
	"""
	power: Float
	"""
	The total number of stations with the specified power
	"""
	total: Int
}
"""
Power stats model
"""
type PowerStats {
	"""
	The charging speed type for the specified power
	"""
	type: StationSpeedType
	"""
	The list of powers for the speed type
	"""
	powers: [PowerList]
}
enum PowerUnit {
	kilowatt
	horsepower
}
enum PressureUnit {
	bar
	pounds_per_square_inch
}
"""
The price model
"""
type Price {
	"""
	The value of the price
	"""
	value: String
	"""
	The currency of the price
	"""
	currency: String
	"""
	The pricing model
	"""
	model: String
	"""
	The value of the price which should be display by the frontend
	"""
	displayValue: String
}
type Pricing {
	"""
	Unique ID of a price
	"""
	id: String
	"""
	Price details
	"""
	price_list: [PricingList]
}
type PricingList {
	"""
	(MSP) Mobility Service Provider
	"""
	partner: String
	"""
	Product details
	"""
	product: PricingListProduct
	"""
	Price product elements
	"""
	elements: [PricingListElement]
}
type PricingListElement {
	"""
	Price element type.
	"""
	type: PricingListElementType
	"""
	Price of the element type without VAT.
	"""
	price_excl_vat: Float
	"""
	VAT percentage to apply
	"""
	vat: Float
}
enum PricingListElementType {
	ENERGY
	FLAT
	TIME
	PARKING_TIME
}
type PricingListProduct {
	"""
	Name of the payment card or subscription. If name is 'Adhoc price' the price is the CPO price
	"""
	name: String
	"""
	Description of the product
	"""
	description: String
	"""
	Subscription type
	"""
	subscription_type: String
	"""
	Subscription fee without VAT
	"""
	subscription_fee_excl_vat: Float
	"""
	Currency
	"""
	currency: String
}
type Query {
	"""
	Get a full list of amenities around a station
	"""
	amenityList(stationId: ID!): [Amenity]
	"""
	Get information about a car by its ID
	"""
	car(id: ID, externalId: Int): Car
	"""
	Car premium data provides even more information about your car: tire pressure, prices, drivetrain data, and more. Please contact us for access to premium data.
	"""
	carPremium(id: ID): CarPremium
	"""
	Get a full list of cars
	"""
	carList(query: CarListQuery, search: String, filter: CarListFilter, size: Int, page: Int): [CarList]
	"""
	[BETA] Get a connected vehicles by id
	"""
	connectedVehicle(id: ID!): ConnectedVehicle
	"""
	[BETA] Get the connected vehicles for the current user
	"""
	connectedVehicleList(filter: ConnectedVehicleListFilter, size: Int = "10", page: Int = "0"): [ConnectedVehicle]
	"""
	[BETA] Retrieve live vehicle data by connected vehicle id
	"""
	connectedVehicleData(id: ID!): VehicleData
	"""
	[BETA] Get an isoline by ID
	"""
	isoline(id: ID!): Isoline
	"""
	[BETA] Get a navigation session by ID
	"""
	navigation(id: ID!): Navigation
	"""
	Get a full list of operators
	"""
	operatorList(query: OperatorListQuery, search: String, filter: OperatorListFilter, size: Int, page: Int): [Operator]
	"""
	Get information about an operator by its ID
	"""
	operator(id: ID!): Operator
	"""
	Get all reviews of a station by the station ID
	"""
	reviewList(stationId: ID!, size: Int, page: Int): [Review!]
	"""
	Get all reviews of stations that were added by an authenticated user.
	The `x-token` header is mandatory in order to authorize the user who wants to retrieve all the reviews added by him/her.
	This is a premium feature, contact Chargetrip for more information.
	"""
	userReviewList(size: Int, page: Int): [Review!]
	"""
	Get a route by ID
	"""
	route(id: ID!): Route
	"""
	Retrieve information about a route path segment
	"""
	routePath(id: ID!, location: PointInput!, alternativeId: ID): RoutePath
	"""
	Get the station statistics
	"""
	stationStats: StationStats
	"""
	Get information about a station by its ID
	"""
	station(id: ID, evse_id: String): Station
	"""
	Get a full list of stations
	"""
	stationList(query: StationListQuery, filter: StationListFilter, search: String, size: Int, page: Int): [Station]
	"""
	Search for stations around a GeoJSON point with a specific distance in meters
	"""
	stationAround(query: StationAroundQuery, filter: StationAroundFilter, search: String, size: Int, page: Int): [Station]
	"""
	Get information about a tariff by the tariff ID
	"""
	tariff(id: ID!): OCPITariff
	"""
	Get the full list of tariffs
	"""
	tariffList(size: Int, page: Int): [OCPITariff]
	"""
	Deprecated: This query will be removed in favor of navigation query and subscription. Mapping can be retrieved via the instructions field.
	"""
	navigationMapping(id: ID!, provider: MappingProvider!, precision: Int, language: MappingLanguage): JSON
	"""
	[BETA] Get information about a vehicle by its ID.
	"""
	vehicle(id: ID!, country: CountryCodeAlpha2): Vehicle
	"""
	[BETA] Vehicle premium data provides even more information about your vehicle: tire pressure, prices, drivetrain data, and more. Please contact us for access to premium data.
	"""
	vehiclePremium(id: ID!, country: CountryCodeAlpha2): VehiclePremium
	"""
	[BETA] Get a full list of vehicles.
	"""
	vehicleList(search: String, filter: VehicleListFilter, country: CountryCodeAlpha2, size: Int = "10", page: Int = "0"): [VehicleList]
}
input RemoveConnectedVehicleInput {
	"""
	Id from the connected vehicle
	"""
	id: ID!
}
"""
EV specific data for a route request
"""
type RequestEv {
	"""
	Internal ID of a Vehicle
	"""
	id: ID
	"""
	EV battery specific data
	"""
	battery: RequestEvBattery
	"""
	Supported plugs for an EV
	"""
	plugs: [RequestEvPlug]
	"""
	Supported adapters of plugs for an EV
	"""
	adapters: [RequestEvPlug]
	"""
	Minimum desired power of chargers
	"""
	minPower: Int
	"""
	Climate is on. The default is true
	"""
	climate: Boolean
	"""
	Cargo weight, in kg
	"""
	cargo: Float
	"""
	The number of passengers on board
	"""
	numberOfPassengers: Int @deprecated(reason: "In favor of occupants")
	"""
	Number of occupants
	"""
	occupants: Int
	"""
	Consumption specific to an EV or inputed by a request
	"""
	consumption: RequestEvConsumption
}
type RequestEvBattery {
	"""
	Usable capacity of the battery used to compute the route. If this in not filled in, value as the vehicle battery.usable_kwh
	"""
	capacity: RequestEvBatteryValue
	"""
	Usable capacity of a battery, in kWh. This value is computed from the provided capacity value
	"""
	capacityKwh: Float
	"""
	Current amount of energy in a battery. If this is not filled in, we assume the battery is full and it will be equal to the battery.usable_kwh
	"""
	stateOfCharge: RequestEvBatteryValue
	"""
	Current amount of energy in a battery, in kWh. This value is computed from the provided state of charge
	"""
	stateOfChargeKwh: Float
	"""
	Desired final amount of energy in a battery. If this is not filled in, it will be set to 20% of the vehicle battery.usable_kwh
	"""
	finalStateOfCharge: RequestEvBatteryValue
	"""
	Desired final amount of energy in a battery, in kWh. This value is computed from the provided final state of charge
	"""
	finalStateOfChargeKwh: Float
}
input RequestEvBatteryInput {
	"""
	Usable capacity of a battery used to compute a route. We recommend you stay between 50% and 150%. If this in not filled in, we assume it is the same value as the vehicle battery.usable_kwh
	"""
	capacity: RequestEvBatteryInputValue
	"""
	Current amount of energy in a battery. If this is not filled in, we assume the battery is full and we fill it in with vehicle battery.usable_kwh
	"""
	stateOfCharge: RequestEvBatteryInputValue
	"""
	Desired final amount of energy in a battery. The value should be between 0 and 80% of the vehicle battery.usable_kwh If this is not filled in, we assume it is 20% of the vehicle battery.usable_kwh
	"""
	finalStateOfCharge: RequestEvBatteryInputValue
}
input RequestEvBatteryInputValue {
	"""
	Value of a desired final amount of energy in a battery
	"""
	value: Float!
	"""
	Type of a desired final amount of energy in a battery
	"""
	type: BatteryInputType!
}
type RequestEvBatteryValue {
	"""
	Value of the desired final amount of energy in a battery
	"""
	value: Float!
	"""
	Type of the desired final amount of energy in a battery
	"""
	type: BatteryInputType!
}
type RequestEvConsumption {
	"""
	Consumption, in kWh, of the auxiliaries
	"""
	aux: CarConsumption
	"""
	The consumption, in kWh, of the battery management system
	"""
	bms: CarConsumption
	"""
	The consumption, in kWh, of the vehicle in idle mode
	"""
	idle: CarConsumption
}
input RequestEvConsumptionInput {
	"""
	Consumption, in kWh, of the auxiliaries
	"""
	aux: CarConsumptionInput
	"""
	Consumption, in kWh, of the battery management system
	"""
	bms: CarConsumptionInput
	"""
	Consumption, in kWh, of the vehicle in idle mode
	"""
	idle: CarConsumptionInput
}
input RequestEvInput {
	"""
	Internal ID of a Vehicle
	"""
	id: ID!
	"""
	The EV battery specific data
	"""
	battery: RequestEvBatteryInput
	"""
	Supported plugs of an EV
	"""
	plugs: [RequestEvPlugInput]
	"""
	Supported adapters of plugs of an EV
	"""
	adapters: [RequestEvPlugInput]
	"""
	Minimum desired power of chargers
	"""
	minPower: Int
	"""
	Flag which indicates if the climate is on. The default is true
	"""
	climate: Boolean
	"""
	Number of occupants
	"""
	occupants: Int
	"""
	Cargo weight, in kg
	"""
	cargo: Int
	"""
	Consumption specific to the EV or inputted by the request
	"""
	consumption: RequestEvConsumptionInput
	"""
	Deprecated
	"""
	auxConsumption: Float
	"""
	Deprecated
	"""
	bmsConsumption: Float
}
type RequestEvPlug {
	"""
	Type of the plug
	"""
	standard: ConnectorType
	"""
	Maximum charging speed for a plug
	"""
	chargingPower: Float
}
input RequestEvPlugInput {
	"""
	Type of a plug
	"""
	standard: ConnectorType!
	"""
	Maximum charging speed for this plug
	"""
	chargingPower: Float!
}
input RequestInput {
	"""
	EV specific data for a route request
	"""
	ev: RequestEvInput!
	"""
	Route request data
	"""
	routeRequest: RequestRouteInput!
	"""
	Telemetry data used to overwrite routing parameters
	"""
	telemetry: JSON
}
type RequestRoute {
	"""
	Requested amenities near the stations, within a 1 kilometer radius
	"""
	amenities: [String] @deprecated(reason: "Will be removed. Use the amenity preferences instead")
	"""
	Amenity preferences for a route
	"""
	amenity_preferences: RouteAmenityPreferences
	"""
	Requested operators
	"""
	operatorIds: [String] @deprecated(reason: "Will be removed. Use the operators property instead")
	"""
	Preferred operators are required. In case there are no preferred operators the route cannot be calculated
	"""
	operatorRequired: Boolean @deprecated(reason: "Will be removed. Use the operators property instead")
	"""
	Encourage the route to use preferred operators. In case there are no preferred operators the route can still be calculated
	"""
	operatorPrefer: Boolean @deprecated(reason: "Will be removed. Use the operators property instead")
	"""
	Operator prioritization for a route
	"""
	operators: RouteOperators
	"""
	Season
	"""
	season: RouteSeason
	"""
	Percentage for the minimum limit of the battery capacity before a recharge. The value should be between 0 and 60, with a default of 10%
	"""
	safeRiskMargin: Int
	"""
	Origin of a route
	"""
	origin: FeaturePoint
	"""
	Destination of a route
	"""
	destination: FeaturePoint
	"""
	Locations where a route will stop
	"""
	via: [FeaturePoint]
	"""
	Radius in meters for alternative stations along a route (min 500 - max 5000)
	"""
	stationsAlongRouteRadius: Int
	"""
	Flag indicating wether the turn-by-turn navigation instructions should be prepared. Disclaimer: The functionality is under active development and the final API is a subject to change. Not ready for production
	"""
	instructions: Boolean
	"""
	Mode that indicates if we optimize the charging time or always charge to the maximum capacity
	"""
	chargeMode: ChargeMode
}
input RequestRouteInput {
	"""
	Deprecated: in favor of amenity preferences. A list of desired amenities near the stations, with a 1 kilometer radius
	"""
	amenities: [String]
	"""
	Amenity preferences for a route
	"""
	amenity_preferences: AmenityPreferencesInput
	"""
	Deprecated: in favor of operators. A list of requested operators
	"""
	operatorIds: [String]
	"""
	Deprecated: in favor of operators. Flag which indicates if the operators are required
	"""
	operatorRequired: Boolean
	"""
	Deprecated: in favor of operators. Flag which indicates if the preferred operators should be loaded
	"""
	operatorPrefer: Boolean
	"""
	Operator prioritization for a route
	"""
	operators: RouteOperatorsInput
	"""
	Optional flag to specify the season
	"""
	season: RouteSeason
	"""
	Percentage for a minimum limit of a battery capacity before a recharge. The value should be between 0 and 60, with a default of 10%
	"""
	safeRiskMargin: Int
	"""
	Mode that indicates if we optimize the charging time or always charge to the maximum capacity
	"""
	chargeMode: ChargeMode
	"""
	Origin of a route
	"""
	origin: FeaturePointInput!
	"""
	Destination of a route
	"""
	destination: FeaturePointInput!
	"""
	An optional list of locations where we should stop
	"""
	via: [FeaturePointInput]
	"""
	Alternative stations along a route within a specified radius in meters (minimum 500, maximum 5000)
	"""
	stationsAlongRouteRadius: Int
	"""
	Deprecated: all routes will have turn-by-turn instructions prepared. Boolean will be ignored
	"""
	instructions: Boolean
}
type RequestUser {
	"""
	ID of the user
	"""
	id: ID
}
"""
The review model
"""
type Review {
	"""
	ID of a review
	"""
	id: ID!
	"""
	Station for which a review was provided
	"""
	station: Station
	"""
	User who added a review. If a review was added by an anonymous user, this will be null
	"""
	user: ReviewUser
	"""
	Rating of a review
	"""
	rating: Int
	"""
	Message of a review
	"""
	message: String
	"""
	Locale of a message
	"""
	locale: String
	"""
	Vehicle that was provided/selected by a user
	"""
	ev: Car
	"""
	Plug type that was provided/selected by a user
	"""
	plugType: ConnectorType
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
	"""
	Boolean tags for a station review
	"""
	tags: ReviewTags
	"""
	Date and time when a review was created
	"""
	createdAt: String
	"""
	Date and time when a review was updated
	"""
	updatedAt: String
}
"""
Form input to add a new review
"""
input ReviewAdd {
	"""
	Station ID for which a review is provided
	"""
	stationId: String!
	"""
	Rating of a review
	"""
	rating: Int!
	"""
	Review message
	"""
	message: String
	"""
	Locale of a message
	"""
	locale: String
	"""
	ID of the vehicle that was provided/selected by a user
	"""
	ev: String
	"""
	Plug type that was provided/selected by a user
	"""
	plugType: ConnectorType
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
	"""
	Boolean tags for a station review
	"""
	tags: ReviewTagsInput
}
"""
Form input for edit an existing review
"""
input ReviewEdit {
	"""
	Rating of a review
	"""
	rating: Int!
	"""
	Review message
	"""
	message: String
	"""
	Locale of a message
	"""
	locale: String
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
	"""
	Boolean tags for a station review
	"""
	tags: ReviewTagsInput
}
"""
Statistical information for reviews of a station
"""
type ReviewStats {
	"""
	Average of all reviews
	"""
	rating: Float
	"""
	'Total number of reviews
	"""
	count: Int
}
"""
Boolean tags for the station review
"""
type ReviewTags {
	"""
	Flag which indicates if the station was working when the review was added
	"""
	working: Boolean
	"""
	Flag which indicates if the user recommended the station when the review was added
	"""
	recommended: Boolean
}
"""
Boolean tags for a station review
"""
input ReviewTagsInput {
	"""
	Flag which indicates if a station was working when the review was added
	"""
	working: Boolean
	"""
	Flag which indicates if a user recommended a station when the review was added
	"""
	recommended: Boolean
}
"""
Special format for the user of a review
"""
type ReviewUser {
	"""
	User full name. If a review was added by an anonymous user, this will be null
	"""
	name: String
	"""
	User ID
	"""
	id: ID @deprecated(reason: "Not sent back anymore, will be null")
	"""
	First name
	"""
	firstName: String @deprecated(reason: "Please use name instead")
	"""
	Last name
	"""
	lastName: String @deprecated(reason: "Please use name instead")
}
type Route {
	"""
	Recommended route
	"""
	route: RouteAlternative
	"""
	Available alternatives
	"""
	alternatives: [RouteAlternative]
	"""
	EV specific data for a route request
	"""
	ev: RequestEv
	"""
	Route telemetry data
	"""
	telemetry: JSON
	user: RequestUser @deprecated(reason: "You will receive null values")
	"""
	Route request data
	"""
	routeRequest: RequestRoute
	"""
	Application who requested a route
	"""
	app: RouteApp
	"""
	Route status
	"""
	status: RouteStatus
}
type RouteAlternative {
	"""
	ID of a route alternative
	"""
	id: ID
	"""
	Type of alternative route
	"""
	type: RouteAlternativeType
	"""
	Number of charges along a route
	"""
	charges: Int
	"""
	Number of available charges along a route
	"""
	chargesAvailable: Int
	"""
	Number of occupied charges along a route
	"""
	chargesOccupied: Int
	"""
	Number of unknown charges along a route
	"""
	chargesUnknown: Int
	"""
	Number of out of order charges along a route
	"""
	chargesOutOfOrder: Int
	"""
	Total distance of a route in meters
	"""
	distance: Int
	"""
	Total duration of a route, including charge time, in seconds
	"""
	duration: Int
	"""
	Total energy used for a route in kWh
	"""
	consumption: Float
	"""
	Total time required to charge for an entire route, in seconds
	"""
	chargeTime: Float
	"""
	Amenity ranking for an alternative
	"""
	amenityRanking: Int @deprecated(reason: "Will be removed in the future")
	"""
	Range, in meters, available at the beginning of a trip
	"""
	rangeStart: Int
	"""
	Total energy in a battery at the beginning of a trip, in kWh
	"""
	rangeStartKwh: Float
	"""
	Total energy in a battery at the beginning of a trip, in percentage
	"""
	rangeStartPercentage: Int
	"""
	Remaining range, in meters, at the end of a trip
	"""
	rangeEnd: Int
	"""
	Remaining range, energy in kWh, at the end of a trip
	"""
	rangeEndKwh: Float
	"""
	Remaining range, energy in percentage, at the end of a trip
	"""
	rangeEndPercentage: Int
	"""
	Text information about a route direction
	"""
	via: String
	"""
	Polyline containing encoded coordinates
	"""
	polyline(decimals: Int): String
	"""
	Path elevation, distance, duration, consumption and speed values, grouped into 100 segments
	"""
	pathPlot: [PathSegment]
	"""
	Elevation values. Each elevationPlot has a hundred points, independent of the length of a route
	"""
	elevationPlot: [Float] @deprecated(reason: "Will be removed in the future; Use the pathPlot property")
	"""
	Total number of meters which are going up on a route
	"""
	elevationUp: Float
	"""
	Total number of meters which are going down on a route
	"""
	elevationDown: Float
	"""
	Highest value from the elevation array
	"""
	elevationMax: Float
	"""
	Money and CO2 saving information
	"""
	saving: RouteAlternativeSaving
	"""
	Legs of the route
	"""
	legs: [RouteLeg]
	"""
	List of raw turn-by-turn navigation instructions
	"""
	instructions: [RouteInstruction]
	"""
	Alternative stations along a route within specified radius in meters. Only if it was provided at newRoute mutation
	"""
	stationsAlongRoute: [RouteStationsAlong]
	"""
	Tags of a route alternative. Values: road, highway, toll, ferry, etc.
	"""
	tags: [RouteTagType]
}
type RouteAlternativeSaving {
	"""
	Total amount of CO2, in grams, which would be used with a petrol vehicle
	"""
	co2: String
	"""
	Money saved by a user driving this route with the electric vehicle
	"""
	money: String
	"""
	Currency
	"""
	currency: String
	"""
	Average gas price with which the calculation was made
	"""
	averageGasPrice: String
	"""
	Average energy price with which the calculation was made
	"""
	averageEnergyPrice: String
}
"""
Types of an alternative route
"""
enum RouteAlternativeType {
	fastest
	bestMatching
	alternative
}
"""
Amenity preferences for a route
"""
type RouteAmenityPreferences {
	"""
	Desired amenities near all charge-stops along a route, with a 1 kilometer radius
	"""
	all_charge_stops: [AmenityType!]
	"""
	Scheduled charge stops, with a specified amenity and timeline
	"""
	scheduled_charge_stops: [RouteScheduledChargeStop!]
}
type RouteApp {
	"""
	ID of the app who requested a route
	"""
	id: ID
}
type RouteInstruction {
	"""
	Information about the points on the polyline
	"""
	points: RouteInstructionPoints
	"""
	Sign of the instruction. See `RouteInstructionSign`
	"""
	sign: RouteInstructionSign
	"""
	Name of the street on which the instruction is
	"""
	name: String
	"""
	Distance, in meters, of the current route instruction
	"""
	distance: Int
	"""
	Duration, in seconds, of the current route instruction
	"""
	time: Int
	"""
	Exit number on a roundabout. This field exists only on sign `USE_ROUNDABOUT` (6), otherwise is null
	"""
	exit_number: Int
	"""
	Curvature angle between the roundabout and street you exit the roundabout. This field exists only on sign USE_ROUNDABOUT (6), otherwise is null
	"""
	turn_angle: Float
}
type RouteInstructionPoints {
	"""
	Number of polyline points which are included in this instruction
	"""
	size: Int
	"""
	The interval of points that are included in this instruction, an array with 2 values, where the first value is the index of the polyline where the interval starts. The second value is where it ends
	"""
	interval: [Int]
}
"""
Sign belonging to the instruction indicating the main maneuver
"""
enum RouteInstructionSign {
	UNKNOWN
	U_TURN_UNKNOWN
	U_TURN_LEFT
	KEEP_LEFT
	LEAVE_ROUNDABOUT
	TURN_SHARP_LEFT
	TURN_LEFT
	TURN_SLIGHT_LEFT
	CONTINUE_ON_STREET
	TURN_SLIGHT_RIGHT
	TURN_RIGHT
	TURN_SHARP_RIGHT
	FINISH
	REACHED_VIA
	REACHED_CHARGING_STATION
	USE_ROUNDABOUT
	KEEP_RIGHT
	U_TURN_RIGHT
	PT_START_TRIP
	PT_TRANSFER
	PT_END_TRIP
	IGNORE
}
type RouteLeg {
	"""
	ID of a leg
	"""
	id: ID
	"""
	Distance from the start to the end of a leg, in meters
	"""
	distance: Int
	"""
	Total drive time from the start to the end of a leg, in seconds
	"""
	duration: Int
	"""
	Total energy used in a leg in kWh
	"""
	consumption: Float
	"""
	Range, in meters, available at the beginning of a leg
	"""
	rangeStart: Int
	"""
	Total energy in a battery at the beginning of a leg, in kWh
	"""
	rangeStartKwh: Float
	"""
	Total energy in a battery at the beginning of a trip, in percentage
	"""
	rangeStartPercentage: Int
	"""
	Range, in meters, available at the end of a leg
	"""
	rangeEnd: Int
	"""
	Total energy left in a battery at the end of a leg, in kWh
	"""
	rangeEndKwh: Float
	"""
	Remaining range, energy in percentage, at the end of a trip
	"""
	rangeEndPercentage: Int
	"""
	Origin point location
	"""
	origin: FeaturePoint
	"""
	Destination point location
	"""
	destination: FeaturePoint
	"""
	Type of a leg
	"""
	type: LegType
	"""
	Name of a destination. This is the station name in case a user should charge or the name of the location in case this was provided
	"""
	name: String
	"""
	ID of a station
	"""
	stationId: String
	"""
	ID of an operator
	"""
	operatorId: String
	"""
	Name of an operator
	"""
	operatorName: String
	"""
	Ranking of an operator
	"""
	operatorRanking: Int
	"""
	Total time required to charge a battery until 80%, in seconds
	"""
	chargeTime: Int
	"""
	Recommended EVSE where to charge
	"""
	evse: EVSE
	"""
	Recommended connector for charging
	"""
	connector: Connector
	"""
	Number of compatible plugs available at a charge station
	"""
	plugsAvailable: Int
	"""
	Number of compatible plugs occupied at a charge station
	"""
	plugsOccupied: Int
	"""
	Number of compatible plugs unknown at a charge station
	"""
	plugsUnknown: Int
	"""
	Number of compatible plugs out of order at a charge station
	"""
	plugsOutOfOrder: Int
	"""
	Total number of compatible plugs at a charge station
	"""
	plugsCount: Int
	"""
	Polyline containing encoded coordinates
	"""
	polyline(decimals: Int): String
	"""
	Steps of a leg
	"""
	steps: [RouteStep]
	"""
	Tags of a leg. Values: road, highway, toll, ferry
	"""
	tags: [RouteTagType]
	"""
	Cargo weight in a vehicle for the duration of a leg, in kg
	"""
	cargo: Float
	"""
	Number of occupants in a vehicle for the duration of a leg
	"""
	occupants: Int
}
"""
Prioritized operators for a route calculation
"""
type RouteOperators {
	"""
	Flag indicating if the operators ranking should be preferred or required
	"""
	type: RouteOperatorsType
	"""
	Ranking of an operator with multiple levels, each level having it's own penalty value
	"""
	ranking: RouteOperatorsRanking
	"""
	Operator IDs which should be excluded from a route
	"""
	exclude: [ID]
}
"""
Prioritized operators for a route calculation
"""
input RouteOperatorsInput {
	"""
	Flag indicating if the operators ranking should be preferred or required
	"""
	type: RouteOperatorsType
	"""
	Ranking of an operator with multiple levels, each level having it's own penalty value
	"""
	ranking: RouteOperatorsRankingInput
	"""
	Operator IDs which should be excluded from a route
	"""
	exclude: [ID]
}
"""
Ranking configuration for prioritized operators
"""
type RouteOperatorsRanking {
	"""
	Level 1 (most significant) for operator ranking
	"""
	level1: [ID]
	"""
	Level 2 for operator ranking
	"""
	level2: [ID]
	"""
	Level 3 for operator ranking
	"""
	level3: [ID]
	"""
	Level 4 for operator ranking
	"""
	level4: [ID]
	"""
	Level 5 for operator ranking
	"""
	level5: [ID]
	"""
	Level 6 for operator ranking
	"""
	level6: [ID]
	"""
	Level 7 for operator ranking
	"""
	level7: [ID]
	"""
	Level 8 for operator ranking
	"""
	level8: [ID]
	"""
	Level 9 for operator ranking
	"""
	level9: [ID]
	"""
	Level 10 (least significant) for operator ranking
	"""
	level10: [ID]
}
"""
Ranking configuration for prioritized operators
"""
input RouteOperatorsRankingInput {
	"""
	Level 1 (most significant) for operator ranking
	"""
	level1: [ID]
	"""
	Level 2 for operator ranking
	"""
	level2: [ID]
	"""
	Level 3 for operator ranking
	"""
	level3: [ID]
	"""
	Level 4 for operator ranking
	"""
	level4: [ID]
	"""
	Level 5 for operator ranking
	"""
	level5: [ID]
	"""
	Level 6 for operator ranking
	"""
	level6: [ID]
	"""
	Level 7 for operator ranking
	"""
	level7: [ID]
	"""
	Level 8 for operator ranking
	"""
	level8: [ID]
	"""
	Level 9 for operator ranking
	"""
	level9: [ID]
	"""
	Level 10 (least significant) for operator ranking
	"""
	level10: [ID]
}
"""
Type of operator prioritization for a route
"""
enum RouteOperatorsType {
	none
	preferred
	required
}
type RoutePath {
	"""
	GeoJSON location of a route path segment
	"""
	location: Point
	"""
	Elevation (altitude) in meters
	"""
	elevation: Int
	"""
	Average speed, in km/h, for this route path segment
	"""
	averageSpeed: Float
	"""
	Recommended speed, in km/h for this route path segment to optimise the consumption
	"""
	recommendedSpeed: Float
	"""
	Consumption, in kWh, of a route path segment
	"""
	consumption: Float
	"""
	Consumption, in kWh per km, of a route path segment
	"""
	consumptionPerKm: Float
	"""
	Distance, in meters, of a route path segment
	"""
	distance: Float
	"""
	Duration, in seconds, of a route path segment
	"""
	duration: Float
	"""
	State of charge, in kWh, of a route path segment
	"""
	stateOfCharge: Float
}
"""
Scheduled charge stop along a route
"""
type RouteScheduledChargeStop {
	"""
	List of amenity types
	"""
	types: [AmenityType]
	"""
	Duration at the amenity, in seconds
	"""
	duration: Int
	"""
	Maximum allowed offset from the stop_after value in seconds. Default is 1800
	"""
	offset: Int
	"""
	Desired drive time before a scheduled stop after leaving the previous stop, in seconds
	"""
	stop_after: Int
	"""
	Maximum distance from a station to an amenity, in meters
	"""
	max_distance_from_station: Int
}
"""
The season of the route
"""
enum RouteSeason {
	summer
	winter
	current
}
type RouteStationsAlong {
	"""
	The ID of station
	"""
	id: String
	"""
	Geojson location of a station
	"""
	location: Point
	"""
	Speed of a station. A station along a route can be either fast or turbo
	"""
	speed: StationSpeedType
	"""
	Status of a station
	"""
	status: ChargerStatus
	"""
	The station uses a preferred operator
	"""
	preferredOperator: Boolean
	"""
	Distance in meters between station and route path
	"""
	distance: Int
}
"""
The status of a route. The status can be pending, processing, done, not_found or error
"""
enum RouteStatus {
	pending
	processing
	done
	not_found
	error
}
type RouteStep {
	"""
	ID of a step
	"""
	id: ID
	"""
	Type of a step
	"""
	type: StepType
	"""
	Polyline containing encoded coordinates
	"""
	polyline(decimals: Int): String
	"""
	Distance from the start to the end of a step, in meters
	"""
	distance: Int
	"""
	Total drive time from the start to the end of a step, in seconds
	"""
	duration: Int
	"""
	Total energy used in a step in kWh
	"""
	consumption: Float
}
"""
Tags of a route
"""
enum RouteTagType {
	road
	highway
	toll
	ferry
	walking
	crossborder
}
"""
Scheduled charge stop along a route
"""
input ScheduledChargeStopInput {
	"""
	List of amenity types
	"""
	types: [AmenityType!]!
	"""
	Duration at the amenity, in seconds. The value should be between 900 and 86400
	"""
	duration: Int!
	"""
	Maximum allowed offset from the stop_after value in seconds. Default is 1800
	"""
	offset: Int = "1800"
	"""
	Desired drive time for a scheduled stop after leaving the origin point, in seconds
	"""
	stop_after: Int!
	"""
	Maximum distance from a station to an amenity, in meters. The value should be between 0 and 1000. Default is 1000
	"""
	max_distance_from_station: Int = "1000"
}
enum SpeedUnit {
	kilometers_per_hour
	miles_per_hour
}
"""
Standards(plug type) stats model
"""
type StandardStats {
	"""
	The plug type
	"""
	type: ConnectorType
	"""
	The total number of stations with the specified plug
	"""
	total: Int
}
input StateOfChargeInput {
	"""
	Value of the state of charge of the vehicle
	"""
	value: Float!
	"""
	Type of the state of charge of the vehicle
	"""
	type: StateOfChargeUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum StateOfChargeUnit {
	kilometer
	mile
	kilowatt_hour
	percentage
}
"""
Station data which extends OCPI Location
"""
type Station {
	"""
	Review of a station
	"""
	review: ReviewStats
	"""
	Unique ID of a station
	"""
	id: ID!
	"""
	ISO-3166 alpha-2 country code of a station
	"""
	country_code: String
	"""
	CPO ID of a CPO that 'owns' this station (following the ISO-15118 standard)
	"""
	party_id: String
	"""
	Defines if a location may be published on a website or app etc.
	When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to show this location.
	When the same location has EVSEs that may be published and may not be published, two 'locations' should be created
	"""
	publish: Boolean
	"""
	Name of a charging station
	"""
	name: String
	"""
	Street/block name and house number if available
	"""
	address: String
	"""
	City or town
	"""
	city: String
	"""
	Postal code of a location, may only be omitted when a location has no postal code: in some countries charging locations at highways don’t have postal codes.
	"""
	postal_code: String
	"""
	State or province of a location, only to be used when relevant
	"""
	state: String
	"""
	ISO 3166-1 alpha-3 code for the country of this station
	"""
	country: String
	"""
	Coordinates of a location
	"""
	coordinates: OCPIGeoLocation
	"""
	Geographical location of related points relevant to a user
	"""
	related_locations: [OCPIAdditionalGeoLocation]
	"""
	Type of parking at a charge point location
	"""
	parking_type: OCPIParkingType
	"""
	EVSEs that belong to a station
	"""
	evses: [EVSE]
	"""
	Human-readable directions on how to reach a station
	"""
	directions: [OCPIDisplayText]
	"""
	Information about an operator
	"""
	operator: Operator
	"""
	Information about a suboperator if applicable
	"""
	suboperator: Operator
	"""
	Information about an owner if available
	"""
	owner: Operator
	"""
	Facilities a charging station belongs to
	"""
	facilities: [OCPIFacility]
	"""
	Value from the IANA time zone database representing the time zone of a location. Examples: "Europe/Oslo", "Europe/Zurich". (http://www.iana.org/time-zones)
	"""
	time_zone: String
	"""
	Times when an EVSEs at a location can be accessed for charging
	"""
	opening_times: OCPIHours
	"""
	Indicates if the EVSEs are still charging outside the opening hours. E.g. when a parking garage closes its barriers overnight, is it allowed to charge till the next morning? Default: true
	"""
	charging_when_closed: Boolean
	"""
	Links to images related to a location such as photos or logos
	"""
	images: [OCPIImage]
	"""
	Details of the energy supplied at a location
	"""
	energy_mix: OCPIEnergyMix
	"""
	Timestamp when a location, or one of its EVSEs or Connectors were last updated (or created)
	"""
	last_updated: DateTime
	"""
	ID provided by a station data source
	"""
	external_id: String
	"""
	GeoJSON location of a charging station
	"""
	location: Point
	"""
	Elevation (altitude) level
	"""
	elevation: Int
	"""
	Groups of EVSEs by power and type
	"""
	chargers: [Charger]
	"""
	Amenities located at this location
	"""
	amenities: JSON
	"""
	Enriched information about the physical address of a station
	"""
	physical_address: Address
	"""
	Optional object where you can store custom data you need in your application. This extends the current functionalities we offer
	"""
	properties: JSON
	"""
	A flag that indicates if a station has real-time information about the availability of its connectors
	"""
	realtime: Boolean
	"""
	A flag that indicates if a station is on private property
	"""
	private: Boolean
	"""
	Connectors grouped by power
	"""
	power: JSON
	"""
	Station availability
	"""
	predicted_availability: [StationPredictedAvailability] @deprecated(reason: "predicted_availability, no value will be sent. Deprecated in favor of predicted_occupancy")
	"""
	Predicted station occupancy
	"""
	predicted_occupancy: [StationPredictedOccupancy] @deprecated(reason: "In favor of custom_properties.predicted_occupancy")
	"""
	Charging speed for a station
	"""
	speed: StationSpeedType
	"""
	Global status for a station
	"""
	status: ChargerStatus
	"""
	Custom properties of a station. These are vendor specific and will return null values on the fields that are not supported by your station database
	"""
	custom_properties: StationCustomProperties
}
"""
Filter which can be applied to retrieve the station around list action
"""
input StationAroundFilter {
	"""
	The GeoJSON Point of the center of the around me circle
	"""
	location: PointInput
	"""
	Distance, in meters, to search around
	"""
	distance: Int
	"""
	Powers in kWh
	"""
	powers: [Float]
	"""
	Amenities available near a station
	"""
	amenities: [Amenities]
	"""
	Station speed
	"""
	power_groups: [StationSpeedType]
	"""
	Station socket or plug standards
	"""
	connectors: [ConnectorType]
	"""
	Flag that allows you to return only available stations
	"""
	available_only: Boolean
	"""
	Flag indicating if only stations that are owned by an operator from a clients ranking list are returned
	"""
	preferred_operator: Boolean
}
"""
Deprecated: Replaced by filter & search params
"""
input StationAroundQuery {
	"""
	The GeoJSON Point of the center of the around me circle
	"""
	location: PointInput
	"""
	Distance, in meters, to search around
	"""
	distance: Int
	"""
	Power in kWh
	"""
	power: [Float]
	"""
	Amenities available near a station. Values: restaurant, bathroom, supermarket, playground, coffee, shopping, museum, hotel, park
	"""
	amenities: [String]
}
type StationCustomProperties {
	"""
	List of eMSP cards accepted at a charging station
	"""
	roaming: [StationRoaming]
	"""
	Phone number for assistance at a charging station
	"""
	support_phone_number: String
	"""
	Charging behavior of a station
	"""
	charging_behaviour: ChargingBehaviour
	"""
	Shows how reliable a charging station is (1 to 5; 1 = unreliable, 5 = reliable), taking into account the charging behaviour history and error values
	"""
	reliability_score: Int
	"""
	List of available ad hoc payment methods
	"""
	adhoc_authorisation_method: [AdhocAuthorisationMethod]
	"""
	Predicted station occupancy
	"""
	predicted_occupancy: [StationPredictedOccupancy]
	"""
	Type of access to the charging station
	"""
	access_type: AccessType
	"""
	Custom station properties for OICP databases such as the global Hubject database. Station databases that not follow the OICP standard return null values
	"""
	oicp: OICPStationCustomProperties
}
"""
Filter which can be applied to retrieve the station list action
"""
input StationListFilter {
	"""
	Powers in kWh
	"""
	powers: [Float]
	"""
	Amenities available near a station
	"""
	amenities: [Amenities]
	"""
	Station speed
	"""
	power_groups: [StationSpeedType]
	"""
	Station socket or plug standards
	"""
	connectors: [ConnectorType]
	"""
	Flag that allows you to return only available stations
	"""
	available_only: Boolean
	"""
	Flag indicating if only stations that are owned by an operator from a clients ranking list are returned
	"""
	preferred_operator: Boolean
}
"""
Deprecated: Replaced by filter & search params
"""
input StationListQuery {
	"""
	ID of the station
	"""
	id: ID
	"""
	External ID of the station provided by the station data source
	"""
	external_id: String
	"""
	Exact name
	"""
	name: String
}
"""
Station availability for each weekday and hour
"""
type StationPredictedAvailability {
	"""
	Number of weekday from 1 (monday) to 7 (sunday)
	"""
	weekday: Int
	"""
	The prediction for each hour 0-23 from 1 to 5 (1 - very busy ... 5 very quiet (free))
	"""
	prediction: [Int]
}
"""
Station occupancy for each weekday and hour
"""
type StationPredictedOccupancy {
	"""
	Number of weekday from 1 (monday) to 7 (sunday)
	"""
	weekday: Int
	"""
	Occupancy on a scale from 1 to 10, where 1 means free for charging and 10 means fully occupied
	"""
	occupancy: Int
	"""
	Start of the period of the occupancy prediction (string of 'hh-mmZ' format)
	"""
	period_begin: String
	"""
	End of the period of the occupancy prediction (string of 'hh-mmZ' format)
	"""
	period_end: String
}
type StationRoaming {
	"""
	Name of the EMSP provider
	"""
	emsp: String
	"""
	Name of the card accepted at a charging station
	"""
	card: String
	"""
	Link to native Android app for card accepted at a charging station
	"""
	android_app_link: String
	"""
	Link to native iOS app for card accepted at a charging station
	"""
	ios_app_link: String
}
"""
The station speed type
"""
enum StationSpeedType {
	slow
	fast
	turbo
}
"""
The station stats model
"""
type StationStats {
	"""
	Stations count grouped by standards
	"""
	standards: [StandardStats]
	"""
	Stations count grouped by power
	"""
	power: [PowerStats]
	"""
	Stations count grouped by amenities
	"""
	amenities: [AmenityStats]
}
"""
Types of a route step
"""
enum StepType {
	road
	highway
	toll
	ferry
	walking
	crossborder
}
type Subscription {
	"""
	[BETA] Subscribe to a connected vehicle.
	"""
	connectedVehicle(id: ID!): ConnectedVehicle
	"""
	[BETA] Subscribe to an isoline label in order to receive updates
	"""
	isoline(id: ID!): Isoline
	"""
	[BETA] Subscribe to navigation session system event updates. We strongly recommend using this at all times to not miss any updates
	"""
	navigationUpdatedById(id: ID!): Navigation
	"""
	Subscription for a specific route was updated in the system event
	"""
	routeUpdatedById(id: ID!): Route
}
type Telemetry {
	"""
	Value of the auxiliary power consumption of the vehicle
	"""
	auxiliary_consumption(unit: AuxiliaryConsumptionUnit = "kilowatt_hour"): Float
	"""
	Battery current in ampere
	"""
	battery_current: Float
	"""
	Value of the temperature of the battery
	"""
	battery_temperature(unit: TemperatureUnit = "Celsius"): Float
	"""
	Battery voltage in volts
	"""
	battery_voltage: Float
	"""
	Is the vehicle currently charging
	"""
	is_charging: Boolean
	"""
	Value of the rate of charge of the battery
	"""
	charge_speed(unit: ChargeSpeedUnit = "kilowatt_hour"): Float
	"""
	Value of the amount of battery charged
	"""
	charge_total(unit: StateOfChargeUnit = "kilowatt_hour"): Float
	"""
	Value of the current weight of the occupants
	"""
	total_occupant_weight(unit: WeightUnit = "kilogram"): Float
	"""
	Value of the current weight of the cargo
	"""
	total_cargo_weight(unit: WeightUnit = "kilogram"): Float
	"""
	Value of the current elevation
	"""
	elevation(unit: ElevationUnit = "meter"): Float
	"""
	Current heading in degrees
	"""
	heading: Float
	"""
	RPM of the motor
	"""
	motor_rpm: Int
	"""
	Number of occupants present in the vehicle
	"""
	occupants: Int
	"""
	Value of the vehicle's odometer
	"""
	odometer(unit: DistanceUnit = "kilometer"): Float
	"""
	Value of the outside temperature
	"""
	outside_temperature(unit: TemperatureUnit = "Celsius"): Float
	"""
	Vehicle is in park, neutral or turned off
	"""
	is_parked: Boolean
	"""
	Value of the positive or negative power. When negative the vehicle is charging
	"""
	power(unit: PowerUnit = "kilowatt"): Float
	"""
	Value of the state of charge of the vehicle
	"""
	state_of_charge(unit: StateOfChargeUnit = "kilowatt_hour"): Float
	"""
	Values for the average tire pressures of all wheels, starting from the front side right to left and to the rear
	"""
	tire_pressure(unit: PressureUnit = "bar"): [Float!]
	"""
	UNIX timestamp in seconds
	"""
	timestamp: Int
	"""
	Value of the vehicle speed
	"""
	vehicle_speed(unit: SpeedUnit = "kilometers_per_hour"): Float
	"""
	Custom input fields can be added based on telemetry architecture
	"""
	custom: JSON
}
input TelemetryInput {
	"""
	Average auxiliary power consumption
	"""
	auxiliary_consumption: AuxiliaryConsumptionInput
	"""
	Battery current in ampere
	"""
	battery_current: Float
	"""
	Battery temperature
	"""
	battery_temperature: BatteryTemperatureInput
	"""
	Battery voltage in volts
	"""
	battery_voltage: Float
	"""
	Is the vehicle currently charging
	"""
	is_charging: Boolean
	"""
	Rate of charge
	"""
	charge_speed: ChargeSpeedInput
	"""
	Amount charged
	"""
	charge_total: ChargeTotalInput
	"""
	Cumulated weight of the occupants
	"""
	total_occupant_weight: TotalOccupantWeightInput
	"""
	Weight of the cargo
	"""
	total_cargo_weight: TotalCargoWeightInput
	"""
	Current elevation
	"""
	elevation: ElevationInput
	"""
	Current heading in degrees
	"""
	heading: Float
	"""
	RPM of the motor
	"""
	motor_rpm: Int
	"""
	Number of occupants in the vehicle
	"""
	occupants: Int
	"""
	Mileage or odometer reading
	"""
	odometer: OdometerInput
	"""
	Outside temperature
	"""
	outside_temperature: OutsideTempInput
	"""
	Vehicle is in park, neutral or turned off
	"""
	is_parked: Boolean
	"""
	Vehicle power
	"""
	power: PowerInput
	"""
	Battery state of charge
	"""
	state_of_charge: StateOfChargeInput
	"""
	Average tire pressures of all wheels, starting from the front side right to left and to the rear
	"""
	tire_pressure: TirePressureInput
	"""
	UNIX timestamp in seconds
	"""
	timestamp: Int
	"""
	Vehicle speed
	"""
	vehicle_speed: VehicleSpeedInput
	"""
	Custom input fields can be added based on telemetry architecture
	"""
	custom: JSON
}
enum TelemetryInputSource {
	manual
	telemetry
}
enum TemperatureUnit {
	Celsius
	Fahrenheit
}
input TirePressureInput {
	"""
	Values for the tire pressure, starting from the front side right to left and to the rear
	"""
	value: [Float!]!
	"""
	Type of the value of pressure
	"""
	type: PressureUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum TorqueUnit {
	newton_meter
	foot_pound
}
input TotalCargoWeightInput {
	"""
	Value of the current weight of the cargo
	"""
	value: Float!
	"""
	Type of the current weight of the cargo
	"""
	type: WeightUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
input TotalOccupantWeightInput {
	"""
	Value of the current weight of the occupants
	"""
	value: Float!
	"""
	Type of the current weight of the occupants
	"""
	type: WeightUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
enum TurningCircleUnit {
	meter
	foot
}
input UpdateConnectedVehicleInput {
	"""
	Id from the connected vehicle
	"""
	id: ID!
	"""
	New label for a connected vehicle
	"""
	label: PlainString
}
"""
The File Upload scalar
"""
scalar Upload
"""
Output of a vehicle query.
"""
type Vehicle {
	"""
	Vehicles unique ID.
	"""
	id: ID!
	"""
	Naming of the vehicle.
	"""
	naming: VehicleNaming!
	"""
	Drivetrain of the vehicle.
	"""
	drivetrain: VehicleDrivetrain!
	"""
	Available connectors for the vehicle.
	"""
	connectors: [VehicleConnector!]!
	"""
	Adapters for the connectors of the vehicle.
	"""
	adapters: [VehicleConnector!]!
	"""
	Battery of the vehicle.
	"""
	battery: VehicleBattery!
	"""
	Body of the vehicle.
	"""
	body: VehicleBody!
	"""
	Availability of the vehicle.
	"""
	availability: VehicleAvailability!
	"""
	Performance of the vehicle.
	"""
	performance: VehiclePerformance
	"""
	Range of the vehicle.
	"""
	range: VehicleRange!
	"""
	Media of the vehicle.
	"""
	media: VehicleMedia!
	"""
	Routing of the vehicle.
	"""
	routing: VehicleRouting!
	"""
	Information about vehicle connectivity.
	"""
	connect: Connect!
	"""
	Regions in which the vehicle is available. Based on the continent code (CC) standard.
	"""
	region: [VehicleRegion!]!
	"""
	Vehicle intended use. Can be passenger, cargo, or utility.
	"""
	purpose: VehiclePurpose!
	"""
	Type of vehicle.
	"""
	type: VehicleType!
}
type VehicleAvailability {
	"""
	Availability of the vehicle.
	"""
	status: VehicleAvailabilityStatus!
}
"""
Availability status of a vehicle.
"""
enum VehicleAvailabilityStatus {
	no_longer_available
	available
	release_date_announced_preorderable
	release_date_announced
	concept_vehicle_preorderable
	concept_vehicle
	concept_vehicle_release_date_tba_preorderable
	concept_vehicle_release_date_tba
	uncertain
}
type VehicleBattery {
	"""
	Full battery capacity in kWh.
	"""
	full_kwh: Float!
	"""
	Usable battery capacity in kWh.
	"""
	usable_kwh: Float!
}
"""
Battery field estimated.
"""
enum VehicleBatteryFieldEstimations {
	B
	F
	N
	U
}
type VehicleBody {
	"""
	Width with folded mirrors, default in mm.
	"""
	width(unit: MeasurementUnit): Float!
	"""
	Height (average height for adjustable suspensions), default in mm.
	"""
	height(unit: MeasurementUnit): Float!
	"""
	Weight (unladen), default in kg.
	"""
	weight: VehicleBodyWeight!
	"""
	Number of seats.
	"""
	seats: Int!
}
type VehicleBodyWeight {
	"""
	Minimum weight, default in kg.
	"""
	minimum(unit: WeightUnit): Float
	"""
	Nominal weight, default in kg.
	"""
	nominal(unit: WeightUnit): Float
	"""
	Maximal weight, default in kg.
	"""
	maximal(unit: WeightUnit): Float
}
"""
Vehicle plug model.
"""
type VehicleConnector {
	"""
	Connector type, known as connector standard in OCPI.
	"""
	standard: ConnectorType!
	"""
	Usable electric power in kW.
	"""
	power: Float!
	"""
	Maximum electric power in kW.
	"""
	max_electric_power: Float!
	"""
	Time it takes to charge from 10 to 80% with a fast charger, shown in minutes.
	"""
	time: Int!
	"""
	Charging speed, default in kmph.
	"""
	speed(unit: SpeedUnit): Float!
}
"""
The consumption of the vehicle.
"""
input VehicleConsumptionInput {
	"""
	Worst conditions are based on -10°C and use of heating.
	"""
	worst: Float
	"""
	Best conditions are based on 23°C and no use of A/C.
	"""
	best: Float
}
type VehicleData {
	"""
	Battery data
	"""
	battery: ConnectBattery
	"""
	Charge data
	"""
	charge: ConnectCharge
	"""
	Location data
	"""
	location: ConnectLocation
	"""
	Odometer data
	"""
	odometer: ConnectOdometer
}
enum VehicleDataProvider {
	chargetrip
	evdatabase
}
type VehicleDrivetrain {
	"""
	Type of drivetrain.
	"""
	type: VehicleDrivetrainType!
}
"""
Drivetrain.
"""
enum VehicleDrivetrainType {
	BEV
	EREV
	HEV
	PHEV
}
"""
Fuel type.
"""
enum VehicleFuel {
	D
	E
	P
}
type VehicleImage {
	"""
	Image id.
	"""
	id: ID
	"""
	Image type.
	"""
	type: VehicleImageType!
	"""
	Full path URL of a large image.
	"""
	url: String!
	"""
	Height of a large image in pixels.
	"""
	height: Int!
	"""
	Width of a large image in pixels.
	"""
	width: Int!
	"""
	Full path URL of a thumbnail image.
	"""
	thumbnail_url: String!
	"""
	Height of a thumbnail image in pixels.
	"""
	thumbnail_height: Int!
	"""
	Width of a thumbnail image in pixels.
	"""
	thumbnail_width: Int!
}
"""
Available types of images which can be found for a vehicle. Each type has specific image sizes.
"""
enum VehicleImageType {
	provider
	image
	image_thumbnail
	image_premium
	premium_image_thumbnail
	brand
	brand_thumbnail
	placeholder
}
"""
When uploading images to a vehicle, you can select one of this types. The rest of the types are automatically generated by the system.
"""
enum VehicleImageTypeUploadable {
	image
	image_premium
}
"""
The output element of the vehicleList query.
"""
type VehicleList {
	"""
	Vehicles unique ID.
	"""
	id: ID!
	"""
	Naming of the vehicle.
	"""
	naming: VehicleListNaming!
	"""
	Drivetrain of the vehicle.
	"""
	drivetrain: VehicleDrivetrain!
	"""
	Connectors available for the vehicle.
	"""
	connectors: [VehicleConnector!]!
	"""
	Adapters available for the vehicle.
	"""
	adapters: [VehicleConnector!]!
	"""
	Battery of the vehicle.
	"""
	battery: VehicleListBattery!
	"""
	Body of the vehicle.
	"""
	body: VehicleListBody!
	"""
	Availability of the vehicle.
	"""
	availability: VehicleListAvailability!
	"""
	Range of the vehicle.
	"""
	range: VehicleListRange!
	"""
	Media of the vehicle.
	"""
	media: VehicleListMedia!
	"""
	Routing of the vehicle.
	"""
	routing: VehicleListRouting!
	"""
	Information about vehicle connectivity.
	"""
	connect: Connect!
	"""
	Regions in which the vehicle is available. Based on the continent code (CC) standard.
	"""
	region: [VehicleRegion!]!
	"""
	Vehicle intended use. Can be passenger, cargo, or utility.
	"""
	purpose: VehiclePurpose!
	"""
	Type of vehicle.
	"""
	type: VehicleType!
}
type VehicleListAvailability {
	"""
	Availability of the vehicle.
	"""
	status: VehicleAvailabilityStatus!
}
type VehicleListBattery {
	"""
	Full battery capacity in kWh.
	"""
	full_kwh: Float!
	"""
	Usable battery capacity in kWh.
	"""
	usable_kwh: Float!
}
type VehicleListBody {
	"""
	Number of seats in a vehicle.
	"""
	seats: Int!
}
input VehicleListFilter {
	"""
	Availability of a vehicle.
	"""
	availability: [VehicleAvailabilityStatus!]
	"""
	Drivetrain type of a vehicle.
	"""
	drivetrain: [VehicleDrivetrainType!]
	"""
	Information about vehicle connectivity.
	"""
	connect: ConnectFilter
	"""
	Regions in which the vehicle is available. Based on the continent code (CC) standard.
	"""
	region: [VehicleRegion!]
	"""
	Vehicle intended use. Can be passenger, cargo, or utility.
	"""
	purpose: [VehiclePurpose!]
	"""
	Type of vehicle.
	"""
	type: [VehicleType!]
}
type VehicleListMedia {
	"""
	Featured image of the vehicle from a 45-degree angle.
	"""
	image: VehicleImage!
	"""
	Latest maker logo of the vehicle.
	"""
	brand: VehicleImage!
	"""
	Latest video of the vehicle.
	"""
	video: VehicleVideo
}
type VehicleListNaming {
	"""
	Vehicle manufacturer name.
	"""
	make: String!
	"""
	Vehicle model name.
	"""
	model: String!
	"""
	Version, edition or submodel of the vehicle.
	"""
	version: String
	"""
	Another submodel level of the vehicle.
	"""
	edition: String
	"""
	Vehicle model version. Added by Chargetrip as an alternative for when a vehicle manufacturer does not provide an version name, or uses the same version name across all trims or consecutive years.
	"""
	chargetrip_version: String!
}
type VehicleListRange {
	"""
	Chargetrip's custom real-world range provides a carefully calculated display range for all electric vehicle models based on our own research and driving data.
	CT range is based on the theoretical distance driven using only the electric engine.
	Vehicles that do not have a full electric drivetrain type ( all except Battery Electric Vehicles / BEV) therefore return relatively small ranges.
	"""
	chargetrip_range: ChargetripRange!
}
type VehicleListRouting {
	"""
	Vehicles that support fast charging have a minimum charging speed of 43 kWh.
	"""
	fast_charging_support: Boolean!
}
type VehicleMedia {
	"""
	Featured image of the vehicle from a 45-degree angle.
	"""
	image: VehicleImage!
	"""
	Latest maker logo.
	"""
	brand: VehicleImage!
	"""
	All images of the vehicle.
	"""
	image_list: [VehicleImage!]!
	"""
	Latest video.
	"""
	video: VehicleVideo
	"""
	All videos of the vehicle.
	"""
	video_list: [VehicleVideo!]
}
"""
Mode (state) of the current production.
"""
enum VehicleMode {
	index_only
	production
	concept
}
type VehicleNaming {
	"""
	Vehicle manufacturer name.
	"""
	make: String!
	"""
	Vehicle model name.
	"""
	model: String!
	"""
	Version, edition or submodel of the vehicle.
	"""
	version: String
	"""
	Another submodel level of the vehicle.
	"""
	edition: String
	"""
	Vehicle model version. Added by Chargetrip as an alternative for when a vehicle manufacturer does not provide an version name, or uses the same version name across all trims or consecutive years.
	"""
	chargetrip_version: String!
}
type VehiclePerformance {
	"""
	Acceleration in seconds, default in kmph to 100.
	"""
	acceleration(unit: AccelerationUnit): Float
	"""
	Top speed of the vehicle, default in kmph.
	"""
	top_speed(unit: SpeedUnit): Float
}
"""
The output element of the vehiclePremium query.
"""
type VehiclePremium {
	"""
	Vehicles unique ID.
	"""
	id: ID!
	"""
	Internal ID of the successor vehicle trim.
	"""
	succesor_id: String
	"""
	Naming of the vehicle.
	"""
	naming: VehiclePremiumNaming!
	"""
	Connectors available for the vehicle.
	"""
	connectors: [VehicleConnector!]!
	"""
	Charge details.
	"""
	charge: VehiclePremiumCharge!
	"""
	Fast charge details.
	"""
	fast_charge: VehiclePremiumFastCharge!
	"""
	Adapters of connectors available for a connectors of the vehicle.
	"""
	adapters: [VehicleConnector!]!
	"""
	Battery of the vehicle.
	"""
	battery: VehiclePremiumBattery!
	"""
	Body of the vehicle.
	"""
	body: VehiclePremiumBody!
	"""
	Availability of the vehicle.
	"""
	availability: VehiclePremiumAvailability!
	"""
	Pricing of the vehicle.
	"""
	price: VehiclePremiumPrice!
	"""
	Drivetrain of the vehicle.
	"""
	drivetrain: VehiclePremiumDrivetrain!
	"""
	Performance of the vehicle.
	"""
	performance: VehiclePremiumPerformance
	"""
	Range of the vehicle.
	"""
	range: VehiclePremiumRange!
	"""
	Efficiency of the vehicle.
	"""
	efficiency: VehiclePremiumEfficiency!
	"""
	Safety of the vehicle.
	"""
	safety: VehiclePremiumSafety
	"""
	Media of the vehicle.
	"""
	media: VehiclePremiumMedia!
	"""
	Routing of the vehicle.
	"""
	routing: VehiclePremiumRouting!
	"""
	Information about vehicle connectivity.
	"""
	connect: Connect!
	"""
	Regions in which the vehicle is available. Based on the continent code (CC) standard.
	"""
	region: [VehicleRegion!]!
	"""
	Vehicle intended use. Can be passenger, cargo, or utility.
	"""
	purpose: VehiclePurpose!
	"""
	Type of vehicle.
	"""
	type: VehicleType!
}
type VehiclePremiumAvailability {
	"""
	Availability of the vehicle.
	"""
	status: VehicleAvailabilityStatus!
	"""
	Date of introduction, mm-yyyy.
	"""
	date_from: String
	"""
	Indicates if date from field is estimated.
	"""
	date_from_is_estimated: Boolean
	"""
	Date last available, mm-yyyy.
	"""
	date_to: String
}
type VehiclePremiumBattery {
	"""
	Usable battery capacity in kWh.
	"""
	usable_kwh: Float!
	"""
	Full battery capacity in kWh.
	"""
	full_kwh: Float!
	"""
	Indicates which battery fields are estimated.
	"""
	estimated_fields: VehicleBatteryFieldEstimations
	"""
	Battery thermal management system (active/passive, air/liquid).
	"""
	thermal_management_system: String
	"""
	Duration of battery warranty.
	"""
	warranty_period: Float
	"""
	Mileage of battery warranty.
	"""
	warranty_mileage: Float
	"""
	Chemistry of the battery.
	"""
	chemistry: String
	"""
	Manufacturer of the battery.
	"""
	manufacturer: String
	"""
	Number of battery modules.
	"""
	modules: Float
	"""
	Number of cells in the battery pack, can include configuration (s = serial, p = parallel).
	"""
	cells: String
	"""
	Weight of the battery pack.
	"""
	weight: Float
	"""
	Nominal voltage of battery.
	"""
	nominal_voltage: Float
}
type VehiclePremiumBody {
	"""
	Length, default in mm.
	"""
	length(unit: MeasurementUnit): Float
	"""
	Width with folded mirrors, default in mm.
	"""
	width(unit: MeasurementUnit): Float!
	"""
	Width of vehicle including mirrors, default in mm.
	"""
	full_width(unit: MeasurementUnit): Float
	"""
	Height (average height for adjustable suspensions), default in mm.
	"""
	height(unit: MeasurementUnit): Float!
	"""
	Indicates if length/width/height fields are estimations.
	"""
	size_is_estimated: Boolean
	"""
	Wheelbase, default in mm.
	"""
	wheelbase(unit: MeasurementUnit): Float
	"""
	Indicates if wheelbase field is estimated.
	"""
	wheelbase_is_estimated: Boolean
	"""
	Weight (unladen EU).
	"""
	weight: VehicleBodyWeight!
	"""
	Maximum allowed vehicle weight with payload.
	"""
	weight_gvwr: VehicleBodyWeight
	"""
	Maximum allowed vehicle and trailer weight with payload.
	"""
	weight_gtw: VehicleBodyWeight
	"""
	Allowed payload weight.
	"""
	weight_payload: VehicleBodyWeight
	"""
	Indicates if weight field is estimated.
	"""
	weight_is_estimated: Boolean
	"""
	Maximum payload allowed for the vehicle, default in kg.
	"""
	weight_max_payload(unit: WeightUnit): Float
	"""
	Gross Vehicle Weight (GVWR) - (max allowed vehicle weight with payload), default in kg.
	"""
	max_gross_vehicle_weight(unit: WeightUnit): Float
	"""
	Standard luggage capacity, default in l.
	"""
	boot_capacity(unit: VolumeUnit): Float
	"""
	Storage capacity of front trunk/under the hood (frunk), default in l.
	"""
	boot_front_capacity: Float
	"""
	Maximum luggage capacity, default in l.
	"""
	boot_capacity_max(unit: VolumeUnit): Float
	"""
	Indicates if a tow hitch/towbar can be fitted according to vehicle homologation.
	"""
	tow_hitch_compatible: Boolean
	"""
	Maximum unbraked towing weight, default in kg.
	"""
	tow_weight_unbraked(unit: WeightUnit): Float
	"""
	Maximum braked towing weight, default in kg.
	"""
	tow_weight_braked(unit: WeightUnit): Float
	"""
	Indicates if tow weight fields are estimations.
	"""
	tow_weight_is_estimated: Boolean
	"""
	Maximum vertical load / noseweight on tow hitch according to vehicle homologation, default in kg.
	"""
	tow_weight_vertical_load(unit: WeightUnit): Float
	"""
	Maximum load on roof of the vehicle, default in kg.
	"""
	roof_load_max(unit: WeightUnit): Float
	"""
	Body type, listed in local naming convention where applicable.
	"""
	body_type: String
	"""
	Segment, listed in local naming convention where applicable.
	"""
	segment: String
	"""
	Number of seats.
	"""
	seats: Int!
	"""
	Indicates whether a vehicle has roof rails as a standard.
	"""
	has_roofrails: Boolean
	"""
	Turning circle of the vehicle kerb-to-kerb, default in meters.
	"""
	turning_circle(unit: TurningCircleUnit): Float
	"""
	Name of the vehicle platform used for vehicle (often abbreviated to indicate group platforms).
	"""
	vehicle_platform: String
	"""
	Indicates if the vehicle platform used for vehicle is a dedicated battery electric vehicle platform.
	"""
	vehicle_platform_is_dedicated: Boolean
}
type VehiclePremiumCharge {
	"""
	Information about the main connector.
	"""
	plug: VehiclePremiumChargePlug
	"""
	Information about vehicles secondary onboard charger.
	"""
	second_plug: VehiclePremiumChargeSecondPlug
	"""
	Information about the vehicle standard onboard charger.
	"""
	standard: VehiclePremiumChargeStandardOBC
	"""
	Optional upgrade for the standard onboard charger when available.
	"""
	option: VehiclePremiumChargeOptionOBC
	"""
	Alternative upgrade for the standard onboard charger when available.
	"""
	alternative: VehiclePremiumChargeAlternativeOBC
}
type VehiclePremiumChargeAlternativeOBC {
	"""
	Maximum power OBC can accept to charge a battery (standard OBC).
	"""
	power: Float
	"""
	Number of phases the OBC accepts to achieve maximum power (standard OBC).
	"""
	phases: Int
	"""
	Maximum current the OBC accepts per phase to achieve maximum power (standard OBC).
	"""
	phase_amperage: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC).
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC), default in kmph.
	"""
	charge_speed(unit: ChargeSpeedUnit): Float
	"""
	Charging details for the standard OBC at several charging points.
	"""
	table: [VehiclePremiumChargeOBCTable]
}
type VehiclePremiumChargeOBCTable {
	"""
	Voltage between phase and neutral for this EVSE (phase voltage).
	"""
	evse_phase_voltage: Int
	"""
	Current per phase for this EVSE (phase current).
	"""
	evse_phase_amperage: Int
	"""
	Number of phases for this EVSE.
	"""
	evse_phases: Int
	"""
	Voltage between phase and neutral used by standard OBC (phase voltage).
	"""
	charge_phase_voltage: Int
	"""
	Current per phase used by standard OBC (phase current).
	"""
	charge_phase_amperage: Float
	"""
	Number of phases used by standard OBC.
	"""
	charge_phases: Int
	"""
	Power used by standard OBC (before OBC losses).
	"""
	charge_power: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC with this EVSE).
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC with this EVSE), default in kmph.
	"""
	charge_speed(unit: ChargeSpeedUnit): Float
}
type VehiclePremiumChargeOptionOBC {
	"""
	Maximum power OBC can accept to charge a battery (standard OBC).
	"""
	power: Float
	"""
	Number of phases the OBC accepts to achieve maximum power (standard OBC).
	"""
	phases: Int
	"""
	Maximum current the OBC accepts per phase to achieve maximum power (standard OBC).
	"""
	phase_amperage: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC).
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC), default in kmph.
	"""
	charge_speed(unit: ChargeSpeedUnit): Float
	"""
	Charging details for the standard OBC at several charging points.
	"""
	table: [VehiclePremiumChargeOBCTable]
}
type VehiclePremiumChargePlug {
	"""
	Type of charge port on vehicle.
	"""
	value: ConnectorType
	"""
	Indicates if value is an estimate.
	"""
	is_estimated: Boolean
	"""
	Location of charge port.
	"""
	location: String
}
type VehiclePremiumChargePower {
	"""
	Maximum value.
	"""
	max: Float
	"""
	Average value.
	"""
	average: Float
}
type VehiclePremiumChargeSecondPlug {
	"""
	Location of charge port.
	"""
	location: String
	"""
	Indicates if second charge port is optional.
	"""
	is_optional: Boolean
}
type VehiclePremiumChargeStandardOBC {
	"""
	Maximum power OBC can accept to charge a battery (standard OBC).
	"""
	power: Float
	"""
	Number of phases the OBC accepts to achieve maximum power (standard OBC).
	"""
	phases: Int
	"""
	Maximum current the OBC accepts per phase to achieve maximum power (standard OBC).
	"""
	phase_amperage: Float
	"""
	Minutes needed to charge from 0% to 100% (standard OBC).
	"""
	charge_time: Int
	"""
	Charging speed when charging at maximum power (standard OBC), default in kmph.
	"""
	charge_speed(unit: ChargeSpeedUnit): Float
	"""
	Indicates if Charge_Standard fields are estimated.
	"""
	is_estimated: Boolean
	"""
	Charging details for the standard OBC at several charging points.
	"""
	table: [VehiclePremiumChargeOBCTable]
}
type VehiclePremiumDrivetrain {
	"""
	Type of drivetrain.
	"""
	type: VehicleDrivetrainType!
	"""
	Fuel type.
	"""
	fuel: VehicleFuel
	"""
	Propulsion type.
	"""
	propulsion: VehiclePropulsion
	"""
	Indicates if propulsion field is estimated.
	"""
	propulsion_is_estimated: Boolean
	"""
	Maximum (combined) power output, default in kw.
	"""
	power(unit: PowerUnit): Float
	"""
	Indicates if power field is estimated.
	"""
	power_is_estimated: Boolean
	"""
	Maximum (combine) power output, default in horsepower (PS).
	"""
	power_hp(unit: PowerUnit): Float
	"""
	Maximum (combine) torque output, default in newton meter.
	"""
	torque(unit: TorqueUnit): Float
	"""
	Indicates if torque field is estimated.
	"""
	torque_is_estimated: Boolean
}
type VehiclePremiumEfficiency {
	"""
	Rated efficiency in WLTP combined cycle.
	"""
	wltp: VehiclePremiumEfficiencyWLTP
	"""
	Rated efficiency in WLTP combined cycle (TEH / least efficient trim).
	"""
	wltp_teh: VehiclePremiumEfficiencyWLTPTEH
	"""
	Rated efficiency in NEDC combined cycle.
	"""
	nedc: VehiclePremiumEfficiencyNEDC
	"""
	Vehicle efficiency based on provider range.
	"""
	provider: VehiclePremiumEfficiencyProvider
}
type VehiclePremiumEfficiencyNEDC {
	"""
	Rated efficiency in NEDC combined cycle, default in kWh/100 km.
	"""
	value(unit: ConsumptionUnit): Float
	"""
	Rated efficiency in NEDC combined cycle presented in gas equivalent, default in l/100 km.
	"""
	fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Rated vehicle efficiency in NEDC combined cycle (based on value), default in kWh/100 km.
	"""
	vehicle(unit: ConsumptionUnit): Float
	"""
	Rated vehicle efficiency in NEDC combined cycle presented in gas equivalent, default in l/100 km.
	"""
	vehicle_fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Rated CO2 emissions in NEDC combined cycle in battery-only mode (NULL if not NEDC rated), default in gr/km.
	"""
	co2(unit: EmissionRateUnit): Float
}
type VehiclePremiumEfficiencyProvider {
	"""
	Vehicle efficiency based on RealRange (usable battery/range), default in kWh/100 km.
	"""
	value(unit: ConsumptionUnit): Float
	"""
	Vehicle efficiency based on RealRange presented in gas equivalent, default in l/100 km.
	"""
	fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Worst conditions are based on -10°C and use of heating.
	"""
	worst: VehiclePremiumEfficiencyProviderValue
	"""
	Best conditions are based on 23°C and no use of A/C.
	"""
	best: VehiclePremiumEfficiencyProviderValue
}
type VehiclePremiumEfficiencyProviderValue {
	"""
	Estimated value on highway or express roads, default in km.
	"""
	highway(unit: DistanceUnit): Float
	"""
	Estimated value on city roads, default in km.
	"""
	city(unit: DistanceUnit): Float
	"""
	Estimated combined value, default in km.
	"""
	combined(unit: DistanceUnit): Float
}
type VehiclePremiumEfficiencyWLTP {
	"""
	Rated efficiency in WLTP combined cycle, default in kWh/100 km.
	"""
	value(unit: ConsumptionUnit): Float
	"""
	Rated efficiency in WLTP combined cycle presented in gas equivalent, default in l/100 km.
	"""
	fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Rated vehicle efficiency in WLTP combined cycle (based on value), default in kWh/100 km.
	"""
	vehicle(unit: ConsumptionUnit): Float
	"""
	Rated vehicle efficiency in WLTP combined cycle presented in gas equivalent, default in l/100 km.
	"""
	vehicle_fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Rated CO2 emissions in WLTP combined cycle in battery-only mode (NULL if not WLTP rated), default in gr/km.
	"""
	co2(unit: EmissionRateUnit): Float
}
type VehiclePremiumEfficiencyWLTPTEH {
	"""
	Rated efficiency in WLTP TEH combined cycle (TEH/least efficient trim).
	"""
	value(unit: ConsumptionUnit): Float
	"""
	Rated efficiency in WLTP TEH combined cycle presented in gas equivalent, default in l/100 km.
	"""
	fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Rated vehicle efficiency in WLTP TEH combined cycle (based on value), default in kWh/100 km.
	"""
	vehicle(unit: ConsumptionUnit): Float
	"""
	Rated vehicle efficiency in WLTP TEH combined cycle presented in gas equivalent, default in l/100 km.
	"""
	vehicle_fuel_equivalent(unit: FuelConsumptionUnit): Float
	"""
	Rated CO2 emissions in WLTP TEH combined cycle in battery-only mode (NULL if not WLTP TEH rated), default in gr/km.
	"""
	co2(unit: EmissionRateUnit): Float
}
type VehiclePremiumFastCharge {
	"""
	Details about the connector.
	"""
	plug: VehiclePremiumChargePlug
	"""
	Power during fast charging from 10% to 80% SoC (optimal conditions, fastest charger).
	"""
	power: VehiclePremiumChargePower
	"""
	Minutes needed to charge from 10% to 80%, with average charging power (optimal conditions, fastest charger).
	"""
	charge_time: Float
	"""
	Charging speed during fast charging from 10% to 80% (optimal conditions, fastest charger), default is kmph.
	"""
	charge_speed(unit: ChargeSpeedUnit): Float
	"""
	Indicates if fast charge is optional in some markets/regions.
	"""
	is_optional: Boolean
	"""
	Indicates what fields are estimated.
	"""
	is_estimated: Boolean
	"""
	Charging details for fast charging.
	"""
	table: [VehiclePremiumFastChargeTable]
}
type VehiclePremiumFastChargeTable {
	"""
	Charging details for fast charging (format: ChargerConnector-ChargerPower-AC/DC).
	"""
	format: String
	"""
	Fast charge power.
	"""
	power: VehiclePremiumChargePower
	"""
	Minutes needed to charge from 10% to 80% (optimal conditions).
	"""
	charge_time: Int
	"""
	Charging speed during fast charging from 10% to 80% (optimal conditions), default is kmph.
	"""
	charge_speed(unit: ChargeSpeedUnit): Float
	"""
	Indicates if maximum power during fast charging is limited by the vehicle.
	"""
	is_limited: Boolean
	"""
	Indicates if average power during fast charging is limited by the vehicle.
	"""
	average_is_limited: Boolean
}
type VehiclePremiumMedia {
	"""
	URL for more details.
	"""
	provider_details_url: String
	"""
	Featured image of the vehicle from a 45-degree angle.
	"""
	image: VehicleImage!
	"""
	Latest maker logo.
	"""
	brand: VehicleImage!
	"""
	All images of the vehicle.
	"""
	image_list: [VehicleImage!]!
	"""
	Latest video.
	"""
	video: VehicleVideo
	"""
	All videos of the vehicle.
	"""
	video_list: [VehicleVideo!]
	"""
	URL of the OEM page for this vehicle.
	"""
	oem_details_url: String
}
type VehiclePremiumNaming {
	"""
	Vehicle manufacturer name.
	"""
	make: String!
	"""
	Vehicle model name.
	"""
	model: String!
	"""
	Version, edition or submodel of the vehicle.
	"""
	version: String
	"""
	Another submodel level of the vehicle.
	"""
	edition: String
	"""
	Vehicle model version. Added by Chargetrip as an alternative for when a vehicle manufacturer does not provide a version name, or uses the same version name across all trims or consecutive years.
	"""
	chargetrip_version: String!
	"""
	Vehicle model length version.
	"""
	length_version: String
	"""
	Vehicle model height version.
	"""
	height_version: String
}
type VehiclePremiumPerformance {
	"""
	Acceleration 0-100 km/h, default in seconds.
	"""
	acceleration(unit: AccelerationUnit): Float
	"""
	Indicates if acceleration field is estimated.
	"""
	acceleration_is_estimated: Boolean
	"""
	Top speed of the vehicle, default in km/h.
	"""
	top_speed(unit: SpeedUnit): Float
	"""
	Indicates if top_speed field is estimated.
	"""
	top_speed_is_estimated: Boolean
}
type VehiclePremiumPrice {
	"""
	Starting price for German market.
	"""
	DE: VehiclePremiumPriceValueWithGrant
	"""
	Starting price for Dutch market.
	"""
	NL: VehiclePremiumPriceValueWithGrant
	"""
	Starting price for British market.
	"""
	GB: VehiclePremiumPriceValueWithGrant
}
type VehiclePremiumPriceValueWithGrant {
	"""
	Starting price for local market expressed in the currency in the field currency.
	"""
	value(unit: CurrencyUnit): Float
	"""
	Currency in which the value without optional field conversion is expressed.
	"""
	currency: CurrencyUnit
	"""
	Indicates if price value is based on estimates.
	"""
	is_estimated: Boolean
	"""
	Grant is applied to value.
	"""
	grant_applied: Int
}
type VehiclePremiumRange {
	"""
	Rated range in WLTP combined cycle (NULL if not WLTP rated), default in km.
	"""
	wltp(unit: ConsumptionUnit): Float
	"""
	Indicates if WLTP range is estimated (NULL if not WLTP rated).
	"""
	wltp_is_estimated: Boolean
	"""
	Rated range in WLTP (TEH/least efficient trim) combined cycle (NULL if not WLTP rated).
	"""
	wltp_teh: Int
	"""
	Rated range in NEDC combined cycle (NULL if not NEDC rated), default in km.
	"""
	nedc(unit: ConsumptionUnit): Float
	"""
	Indicates if NEDC range is estimated (NULL if not NEDC rated).
	"""
	nedc_is_estimated: Boolean
	"""
	Index range, default in km.
	"""
	provider(unit: ConsumptionUnit): Float
	"""
	Indicates if index range is estimated.
	"""
	provider_is_estimated: Boolean
	"""
	Worst conditions are based on -10°C and use of heating.
	"""
	worst: VehiclePremiumRangeValue!
	"""
	Best conditions are based on 23°C and no use of A/C.
	"""
	best: VehiclePremiumRangeValue!
	"""
	Chargetrip's custom real-world range provides a carefully calculated display range for all electric vehicle models based on our own research and driving data.
	CT range is based on the theoretical distance driven using only the electric engine.
	Vehicles that do not have a full electric drivetrain type ( all except Battery Electric Vehicles / BEV) therefore return relatively small ranges.
	"""
	chargetrip_range: ChargetripRange!
}
type VehiclePremiumRangeValue {
	"""
	Estimated value on highway or express roads, default in km.
	"""
	highway(unit: DistanceUnit): Float!
	"""
	Estimated value on city roads, default in km.
	"""
	city(unit: DistanceUnit): Float!
	"""
	Estimated combined value, default in km.
	"""
	combined(unit: DistanceUnit): Float!
}
type VehiclePremiumRouting {
	"""
	Vehicles that support fast charging have a minimum charging speed of 43 kWh.
	"""
	fast_charging_support: Boolean!
	"""
	Drag coefficient.
	"""
	drag_coefficient: Float!
	"""
	Tire pressure recommended by manufacturer, default in bar.
	"""
	tire_pressure(unit: PressureUnit): Float!
	"""
	Extra consumption model.
	"""
	consumption: VehiclePremiumRoutingConsumption
	"""
	Amount of petrol that an equivalent petrol vehicle would consume, default in l/100 km.
	"""
	fuel_consumption(unit: FuelConsumptionUnit): Float
}
type VehiclePremiumRoutingConsumption {
	"""
	Consumption, in kWh, of the auxiliaries.
	"""
	aux: VehiclePremiumRoutingConsumptionValue
	"""
	Consumption, in kWh, of the battery management system.
	"""
	bms: VehiclePremiumRoutingConsumptionValue
	"""
	Consumption, in kWh, of the vehicle in idle mode.
	"""
	idle: VehiclePremiumRoutingConsumptionValue
}
type VehiclePremiumRoutingConsumptionValue {
	"""
	Best (lowest) consumption in summer.
	"""
	best: Float
	"""
	Best (lowest) consumption in winter.
	"""
	worst: Float
}
type VehiclePremiumSafety {
	"""
	Number of seats equipped with ISOFIX.
	"""
	isofix_seats: Int
	"""
	EuroNCAP results.
	"""
	euro_ncap: VehiclePremiumSafetyEuroNcap
}
type VehiclePremiumSafetyEuroNcap {
	"""
	EuroNCAP rating (out of 5 stars).
	"""
	rating: Int
	"""
	EuroNCAP year of rating.
	"""
	year: Int
	"""
	EuroNCAP rating of adult protection (out of 100%).
	"""
	adult: Int
	"""
	EuroNCAP rating of child protection (out of 100%).
	"""
	child: Int
	"""
	EuroNCAP rating of vulnerable road users (out of 100%).
	"""
	vru: Int
	"""
	EuroNCAP rating of safety assists (out of 100%).
	"""
	sa: Int
}
"""
Propulsion.
"""
enum VehiclePropulsion {
	AWD
	Front
	Rear
}
"""
Status of a vehicle provider.
"""
enum VehicleProviderStatus {
	new
	attached
	detached
	archived
}
enum VehiclePurpose {
	passenger
	cargo
	utility
}
type VehicleRange {
	"""
	Index range, default in km.
	"""
	provider(unit: DistanceUnit): Float
	"""
	Indicates if index range is estimated.
	"""
	provider_is_estimated: Boolean
	"""
	Worst conditions are based on -10°C and use of heating.
	"""
	worst: VehicleRangeValue!
	"""
	Best conditions are based on 23°C and no use of A/C.
	"""
	best: VehicleRangeValue!
	"""
	Chargetrip's custom real-world range provides a carefully calculated display range for all electric vehicle models based on our own research and driving data.
	CT range is based on the theoretical distance driven using only the electric engine.
	Vehicles that do not have a full electric drivetrain type ( all except Battery Electric Vehicles / BEV) therefore return relatively small ranges.
	"""
	chargetrip_range: ChargetripRange!
}
type VehicleRangeValue {
	"""
	Estimated value on the highway or express roads, default in km.
	"""
	highway(unit: DistanceUnit): Float!
	"""
	Estimated value on the cities road, default in km.
	"""
	city(unit: DistanceUnit): Float!
	"""
	Estimated combined value, default in km.
	"""
	combined(unit: DistanceUnit): Float!
}
enum VehicleRegion {
	AF
	AS
	EU
	NA
	OC
	SA
}
type VehicleRouting {
	"""
	Vehicles that support fast charging have a minimum charging speed of 43 kWh.
	"""
	fast_charging_support: Boolean!
}
input VehicleSpeedInput {
	"""
	Value of the vehicle speed
	"""
	value: Float!
	"""
	Type of the vehicle speed
	"""
	type: SpeedUnit!
	"""
	Source of inputted data, defaults to 'manual'
	"""
	source: TelemetryInputSource = "manual"
}
"""
Status of a vehicle.
"""
enum VehicleStatus {
	draft
	public
	private
	archived
}
enum VehicleType {
	motorcycle
	microcar
	car
	pickup
	van
	bus
	truck
	utility
}
type VehicleVideo {
	"""
	Video id.
	"""
	id: ID
	"""
	Full path URL of a video.
	"""
	url: String
}
enum VolumeUnit {
	liter
	cubic_meter
	cubic_foot
}
enum WeightUnit {
	kilogram
	pound
}
schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

