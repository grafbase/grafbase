---
source: crates/integration-tests/tests/federation/introspection.rs
expression: schema
---
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime
input IDCollectionFilterInput {
	in: [ID!]
}
type Mutation {
	"""
	Create a Todo
	"""
	todoCreate(input: TodoCreateInput!): TodoCreatePayload
	"""
	Create multiple Todo
	"""
	todoCreateMany(input: [TodoCreateManyInput!]!): TodoCreateManyPayload
	"""
	Delete a Todo by ID or unique field
	"""
	todoDelete(by: TodoByInput!): TodoDeletePayload
	"""
	Delete multiple Todo
	"""
	todoDeleteMany(input: [TodoDeleteManyInput!]!): TodoDeleteManyPayload
	"""
	Update a Todo
	"""
	todoUpdate(by: TodoByInput!, input: TodoUpdateInput!): TodoUpdatePayload
	"""
	Update multiple Todo
	"""
	todoUpdateMany(input: [TodoUpdateManyInput!]!): TodoUpdateManyPayload
}
enum OrderByDirection {
	ASC
	DESC
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}
type Query {
	"""
	Query a single Todo by an ID or a unique field
	"""
	todo(by: TodoByInput!): Todo
	"""
	Paginated query to fetch the whole list of `Todo`.
	"""
	todoCollection(after: String, before: String, filter: TodoCollectionFilterInput, first: Int, last: Int, orderBy: TodoOrderByInput): TodoConnection
}
type Todo @key(fields: "id") {
	"""
	when the model was created
	"""
	createdAt: DateTime!
	"""
	Unique identifier
	"""
	id: ID!
	title: String!
	"""
	when the model was updated
	"""
	updatedAt: DateTime!
}
input TodoByInput {
	id: ID
}
input TodoCollectionFilterInput {
	id: IDCollectionFilterInput
}
type TodoConnection {
	edges: [TodoEdge]
	"""
	Information to aid in pagination
	"""
	pageInfo: PageInfo!
}
"""
Input to create a Todo
"""
input TodoCreateInput {
	title: String!
}
input TodoCreateManyInput {
	input: TodoCreateInput!
}
type TodoCreateManyPayload {
	todoCollection: [Todo!]!
}
type TodoCreatePayload {
	todo: Todo
}
input TodoDeleteManyInput {
	by: TodoByInput!
}
type TodoDeleteManyPayload {
	deletedIds: [ID!]!
}
type TodoDeletePayload {
	deletedId: ID!
}
type TodoEdge {
	cursor: String!
	node: Todo!
}
input TodoOrderByInput {
	createdAt: OrderByDirection
}
"""
Input to update a Todo
"""
input TodoUpdateInput {
	title: String
}
input TodoUpdateManyInput {
	by: TodoByInput!
	input: TodoUpdateInput!
}
type TodoUpdateManyPayload {
	todoCollection: [Todo!]!
}
type TodoUpdatePayload {
	todo: Todo
}

