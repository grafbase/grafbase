---
source: engine/crates/integration-tests/tests/federation/introspection.rs
expression: introspection_to_sdl(response.into_data())
---
type ApiResponse {
  code: Int
  message: String
  type: String
}

type Category {
  id: Int
  name: String
}

input CategoryInput {
  id: Int
  name: String
}

enum FindPetsByStatusStatus {
  AVAILABLE
  PENDING
  SOLD
}

scalar JSON

type Mutation {
  addPet(input: PetInput!): Pet
  createUsersWithListInput(input: [UserInput!]): User
  placeOrder(input: OrderInput): Order
  updatePet(input: PetInput!): Pet
  uploadFile(additionalMetadata: String, petId: Int!): ApiResponse
}

type Order {
  complete: Boolean
  id: Int
  petId: Int
  quantity: Int
  shipDate: String
  status: OrderStatus
}

input OrderInput {
  id: Int
  petId: Int
  complete: Boolean
  quantity: Int
  shipDate: String
  status: OrderStatus
}

enum OrderStatus {
  APPROVED
  DELIVERED
  PLACED
}

type Pet {
  category: Category
  id: Int
  name: String!
  photoUrls: [String!]!
  status: PetStatus
  tags: [Tag!]
}

input PetInput {
  id: Int
  name: String!
  status: PetStatus
  category: CategoryInput
  photoUrls: [String!]!
  tags: [TagInput!]
}

enum PetStatus {
  AVAILABLE
  PENDING
  SOLD
}

type Query {
  findPetsByStatus(status: FindPetsByStatusStatus): [Pet!]
  findPetsByTags(tags: [String!]): [Pet!]
  inventory: JSON
  loginUser(password: String, username: String): String
  order(orderId: Int!): Order
  pet(petId: Int!): Pet
  user(username: String!): User
}

type Tag {
  id: Int
  name: String
}

input TagInput {
  id: Int
  name: String
}

type User {
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
  phone: String
  userStatus: Int
  username: String
}

input UserInput {
  id: Int
  password: String
  username: String
  email: String
  firstName: String
  lastName: String
  phone: String
  userStatus: Int
}
