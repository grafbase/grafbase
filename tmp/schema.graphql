extend schema @experimental(codegen: true)
extend schema @auth(rules: [{ allow: public }])
extend schema
    @cache(
        rules: [
            {
                types: ["Query"]
                maxAge: 60
                staleWhileRevalidate: 60
                mutationInvalidation: type
            }
        ]
    )
extend schema
    @graphql(
        name: "Storyblok"
        namespace: true
        url: "https://gapi-us.storyblok.com/v1/api"
        headers: [{ name: "Token", value: "{{ env.STORYBLOK_ACCESS_TOKEN }}" }]
    )
    @graphql(
        name: "StoryblokDraft"
        namespace: true
        url: "https://gapi-us.storyblok.com/v1/api"
        headers: [
            { name: "Token", value: "{{ env.STORYBLOK_DRAFT_ACCESS_TOKEN }}" }
        ]
    )
    @graphql(name: "DB", namespace: true, url: "{{ env.GQL_DB }}")
    @graphql(name: "SEO", namespace: true, url: "{{ env.GQL_SEO }}")
    @graphql(name: "Reviews", namespace: true, url: "{{ env.GQL_REVIEWS }}")
    @graphql(name: "Analytics", namespace: true, url: "{{ env.GQL_ANALYTICS }}")
    @graphql(name: "Partners", namespace: true, url: "{{ env.GQL_PARTNERS }}")
    @graphql(name: "Meta", namespace: true, url: "{{ env.GQL_META }}")
    @graphql(name: "Search", namespace: true, url: "{{ env.GQL_SEARCH }}")
    @graphql(
        name: "Personalization"
        namespace: true
        url: "{{ env.GQL_PERSONALIZATION }}"
    )
extend type PartnersProviderDeals {
    itineraries(exact: Boolean!): SearchProviderDealItinerariesResult
        @join(
            select: "search {providerDealItineraries(id: $id, countryId: $countryId, sailingStartDate: $sailingStartDate, sailingEndDate: $sailingEndDate, sailingDateType: $sailingDateType, shipId: $shipId, destinationId: $destinationId, length: $length, exact: $exact)}"
        )
}
extend type PartnersProviderDeals {
    ship: DbShips @join(select: "db {ship(id: $shipId)}")
}
extend type PartnersProviderDeals {
    destination: DbDestinations
        @join(select: "db {destination(id: $destinationId)}")
}
extend type PartnersProviderDeals {
    departurePort: DbDeparturePorts
        @join(select: "db {departurePort(id: $departurePortId)}")
}
extend type DbShips {
    maidenDate: String @join(select: "meta {shipMaidenDate(shipId: $id)}")
}
extend type DbShips {
    maidenYear: Float @join(select: "meta {shipMaidenYear(shipId: $id)}")
}
extend type DbShips {
    primaryImage: MetaImage
        @join(select: "meta {shipPrimaryImage(shipId: $id)}")
}
extend type PartnersShips {
    maidenDate: String @join(select: "meta {shipMaidenDate(shipId: $id)}")
}
extend type PartnersShips {
    maidenYear: Float @join(select: "meta {shipMaidenYear(shipId: $id)}")
}
extend type PartnersShips {
    primaryImage: MetaImage
        @join(select: "meta {shipPrimaryImage(shipId: $id)}")
}
extend type ReviewsShips {
    maidenDate: String @join(select: "meta {shipMaidenDate(shipId: $id)}")
}
extend type ReviewsShips {
    maidenYear: Float @join(select: "meta {shipMaidenYear(shipId: $id)}")
}
extend type ReviewsShips {
    primaryImage: MetaImage
        @join(select: "meta {shipPrimaryImage(shipId: $id)}")
}
extend type SearchShips {
    maidenDate: String @join(select: "meta {shipMaidenDate(shipId: $id)}")
}
extend type SearchShips {
    maidenYear: Float @join(select: "meta {shipMaidenYear(shipId: $id)}")
}
extend type SearchShips {
    primaryImage: MetaImage
        @join(select: "meta {shipPrimaryImage(shipId: $id)}")
}
extend type DbShips {
    categoryRating(category: ReviewsReviewCategory!): Float
        @join(
            select: "reviews {shipsCategoryRating(shipId: $id, cruiseLineId: $cruiseLineId, category: $category)}"
        )
}
extend type DbShips {
    reviews(
        sortByHelpfulVotes: Boolean!
        maxAge: String!
        minimumRating: Float! = 3
        maximumRating: Float! = 5
        limit: Float! = 4
    ): [MetaSearchReviewsResults]
        @join(
            select: "meta {shipsReviews(shipId: $id, sortByHelpfulVotes: $sortByHelpfulVotes, maxAge: $maxAge, minimumRating: $minimumRating, maximumRating: $maximumRating, limit: $limit)}"
        )
}
extend type MetaShips {
    seo(countryId: Float!): DbSeo
        @join(select: "db {shipsSeo(shipId: $id, countryId: $countryId)}")
}
extend type MetaShips {
    mappedImage(identifier: DbSubjectImageType!): DbImages
        @join(
            select: "db {shipsMappedImage(shipId: $id, identifier: $identifier)}"
        )
}
extend type MetaShips {
    image: String @join(select: "db {shipsImage(shipId: $id)}")
}
extend type MetaShips {
    mappedImages(identifier: [String!], countryId: Float): [DbImageMappings]
        @join(
            select: "db {shipsMappedImages(shipId: $id, identifier: $identifier, countryId: $countryId)}"
        )
}
extend type MetaShips {
    snippets(
        countryId: Float!
        snippetType: DbShipSnippetTitle!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippets(shipId: $id, countryId: $countryId, snippetType: $snippetType)}"
        )
}
extend type MetaShips {
    hasUserPhotos: Boolean @join(select: "db {shipsHasUserPhotos(shipId: $id)}")
}
extend type MetaShips {
    hasItineraries: Boolean
        @join(select: "db {shipsHasItineraries(shipId: $id)}")
}
extend type MetaShips {
    snippetsForTypes(
        countryId: Float!
        snippetTypes: [DbShipSnippetTitle]!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippetsForTypes(shipId: $id, countryId: $countryId, snippetTypes: $snippetTypes)}"
        )
}
extend type MetaShips {
    attributes: DbShipAttributes
        @join(select: "db {shipsAttributes(shipId: $id)}")
}
extend type MetaShips {
    ratio: String @join(select: "db {shipsRatio(shipId: $id)}")
}
extend type MetaShips {
    amenitiesByType(countryId: Float!): DbShipAmenityResponse
        @join(
            select: "db {shipsAmenitiesByType(shipId: $id, countryId: $countryId)}"
        )
}
extend type MetaShips {
    destinations(countryId: Float!): [DbDestinations]
        @join(
            select: "db {shipsDestinations(shipId: $id, countryId: $countryId)}"
        )
}
extend type MetaShips {
    ports(countryId: Float!): [DbPorts]
        @join(select: "db {shipsPorts(shipId: $id, countryId: $countryId)}")
}
extend type MetaShips {
    pastSailings(date: Date, afterDate: Date): [DbStoredSailings]
        @join(
            select: "db {shipsPastSailings(shipId: $id, date: $date, afterDate: $afterDate)}"
        )
}
extend type MetaShips {
    cruisersChoiceAwards(countryId: Float): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type MetaShips {
    cruisersChoiceDestinationAwards(
        countryId: Float
    ): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceDestinationAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type MetaShips {
    editorsPicksAwards(countryId: Float): [DbEditorsPicksCategories]
        @join(
            select: "db {shipsEditorsPicksAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type MetaShips {
    editorsPicksResults: [DbEditorsPicksResults]
        @join(select: "db {shipsEditorsPicksResults(shipId: $id)}")
}
extend type MetaShips {
    cruiseStyles: [DbCruiseStyles]
        @join(select: "db {shipsCruiseStyles(shipId: $id)}")
}
extend type MetaShips {
    totalShoreExcursions: Float
        @join(select: "db {shipsTotalShoreExcursions(shipId: $id)}")
}
extend type PartnersShips {
    seo(countryId: Float!): DbSeo
        @join(select: "db {shipsSeo(shipId: $id, countryId: $countryId)}")
}
extend type PartnersShips {
    mappedImage(identifier: DbSubjectImageType!): DbImages
        @join(
            select: "db {shipsMappedImage(shipId: $id, identifier: $identifier)}"
        )
}
extend type PartnersShips {
    image: String @join(select: "db {shipsImage(shipId: $id)}")
}
extend type PartnersShips {
    mappedImages(identifier: [String!], countryId: Float): [DbImageMappings]
        @join(
            select: "db {shipsMappedImages(shipId: $id, identifier: $identifier, countryId: $countryId)}"
        )
}
extend type PartnersShips {
    snippets(
        countryId: Float!
        snippetType: DbShipSnippetTitle!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippets(shipId: $id, countryId: $countryId, snippetType: $snippetType)}"
        )
}
extend type PartnersShips {
    hasUserPhotos: Boolean @join(select: "db {shipsHasUserPhotos(shipId: $id)}")
}
extend type PartnersShips {
    hasItineraries: Boolean
        @join(select: "db {shipsHasItineraries(shipId: $id)}")
}
extend type PartnersShips {
    snippetsForTypes(
        countryId: Float!
        snippetTypes: [DbShipSnippetTitle]!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippetsForTypes(shipId: $id, countryId: $countryId, snippetTypes: $snippetTypes)}"
        )
}
extend type PartnersShips {
    attributes: DbShipAttributes
        @join(select: "db {shipsAttributes(shipId: $id)}")
}
extend type PartnersShips {
    ratio: String @join(select: "db {shipsRatio(shipId: $id)}")
}
extend type PartnersShips {
    amenitiesByType(countryId: Float!): DbShipAmenityResponse
        @join(
            select: "db {shipsAmenitiesByType(shipId: $id, countryId: $countryId)}"
        )
}
extend type PartnersShips {
    destinations(countryId: Float!): [DbDestinations]
        @join(
            select: "db {shipsDestinations(shipId: $id, countryId: $countryId)}"
        )
}
extend type PartnersShips {
    ports(countryId: Float!): [DbPorts]
        @join(select: "db {shipsPorts(shipId: $id, countryId: $countryId)}")
}
extend type PartnersShips {
    pastSailings(date: Date, afterDate: Date): [DbStoredSailings]
        @join(
            select: "db {shipsPastSailings(shipId: $id, date: $date, afterDate: $afterDate)}"
        )
}
extend type PartnersShips {
    cruisersChoiceAwards(countryId: Float): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type PartnersShips {
    cruisersChoiceDestinationAwards(
        countryId: Float
    ): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceDestinationAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type PartnersShips {
    editorsPicksAwards(countryId: Float): [DbEditorsPicksCategories]
        @join(
            select: "db {shipsEditorsPicksAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type PartnersShips {
    editorsPicksResults: [DbEditorsPicksResults]
        @join(select: "db {shipsEditorsPicksResults(shipId: $id)}")
}
extend type PartnersShips {
    cruiseStyles: [DbCruiseStyles]
        @join(select: "db {shipsCruiseStyles(shipId: $id)}")
}
extend type PartnersShips {
    totalShoreExcursions: Float
        @join(select: "db {shipsTotalShoreExcursions(shipId: $id)}")
}
extend type ReviewsShips {
    seo(countryId: Float!): DbSeo
        @join(select: "db {shipsSeo(shipId: $id, countryId: $countryId)}")
}
extend type ReviewsShips {
    mappedImage(identifier: DbSubjectImageType!): DbImages
        @join(
            select: "db {shipsMappedImage(shipId: $id, identifier: $identifier)}"
        )
}
extend type ReviewsShips {
    image: String @join(select: "db {shipsImage(shipId: $id)}")
}
extend type ReviewsShips {
    mappedImages(identifier: [String!], countryId: Float): [DbImageMappings]
        @join(
            select: "db {shipsMappedImages(shipId: $id, identifier: $identifier, countryId: $countryId)}"
        )
}
extend type ReviewsShips {
    snippets(
        countryId: Float!
        snippetType: DbShipSnippetTitle!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippets(shipId: $id, countryId: $countryId, snippetType: $snippetType)}"
        )
}
extend type ReviewsShips {
    hasUserPhotos: Boolean @join(select: "db {shipsHasUserPhotos(shipId: $id)}")
}
extend type ReviewsShips {
    hasItineraries: Boolean
        @join(select: "db {shipsHasItineraries(shipId: $id)}")
}
extend type ReviewsShips {
    snippetsForTypes(
        countryId: Float!
        snippetTypes: [DbShipSnippetTitle]!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippetsForTypes(shipId: $id, countryId: $countryId, snippetTypes: $snippetTypes)}"
        )
}
extend type ReviewsShips {
    attributes: DbShipAttributes
        @join(select: "db {shipsAttributes(shipId: $id)}")
}
extend type ReviewsShips {
    ratio: String @join(select: "db {shipsRatio(shipId: $id)}")
}
extend type ReviewsShips {
    amenitiesByType(countryId: Float!): DbShipAmenityResponse
        @join(
            select: "db {shipsAmenitiesByType(shipId: $id, countryId: $countryId)}"
        )
}
extend type ReviewsShips {
    destinations(countryId: Float!): [DbDestinations]
        @join(
            select: "db {shipsDestinations(shipId: $id, countryId: $countryId)}"
        )
}
extend type ReviewsShips {
    ports(countryId: Float!): [DbPorts]
        @join(select: "db {shipsPorts(shipId: $id, countryId: $countryId)}")
}
extend type ReviewsShips {
    pastSailings(date: Date, afterDate: Date): [DbStoredSailings]
        @join(
            select: "db {shipsPastSailings(shipId: $id, date: $date, afterDate: $afterDate)}"
        )
}
extend type ReviewsShips {
    cruisersChoiceAwards(countryId: Float): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type ReviewsShips {
    cruisersChoiceDestinationAwards(
        countryId: Float
    ): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceDestinationAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type ReviewsShips {
    editorsPicksAwards(countryId: Float): [DbEditorsPicksCategories]
        @join(
            select: "db {shipsEditorsPicksAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type ReviewsShips {
    editorsPicksResults: [DbEditorsPicksResults]
        @join(select: "db {shipsEditorsPicksResults(shipId: $id)}")
}
extend type ReviewsShips {
    cruiseStyles: [DbCruiseStyles]
        @join(select: "db {shipsCruiseStyles(shipId: $id)}")
}
extend type ReviewsShips {
    totalShoreExcursions: Float
        @join(select: "db {shipsTotalShoreExcursions(shipId: $id)}")
}
extend type SearchShips {
    seo(countryId: Float!): DbSeo
        @join(select: "db {shipsSeo(shipId: $id, countryId: $countryId)}")
}
extend type SearchShips {
    mappedImage(identifier: DbSubjectImageType!): DbImages
        @join(
            select: "db {shipsMappedImage(shipId: $id, identifier: $identifier)}"
        )
}
extend type SearchShips {
    image: String @join(select: "db {shipsImage(shipId: $id)}")
}
extend type SearchShips {
    mappedImages(identifier: [String!], countryId: Float): [DbImageMappings]
        @join(
            select: "db {shipsMappedImages(shipId: $id, identifier: $identifier, countryId: $countryId)}"
        )
}
extend type SearchShips {
    snippets(
        countryId: Float!
        snippetType: DbShipSnippetTitle!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippets(shipId: $id, countryId: $countryId, snippetType: $snippetType)}"
        )
}
extend type SearchShips {
    hasUserPhotos: Boolean @join(select: "db {shipsHasUserPhotos(shipId: $id)}")
}
extend type SearchShips {
    hasItineraries: Boolean
        @join(select: "db {shipsHasItineraries(shipId: $id)}")
}
extend type SearchShips {
    snippetsForTypes(
        countryId: Float!
        snippetTypes: [DbShipSnippetTitle]!
    ): [DbShipSnippets]
        @join(
            select: "db {shipsSnippetsForTypes(shipId: $id, countryId: $countryId, snippetTypes: $snippetTypes)}"
        )
}
extend type SearchShips {
    attributes: DbShipAttributes
        @join(select: "db {shipsAttributes(shipId: $id)}")
}
extend type SearchShips {
    ratio: String @join(select: "db {shipsRatio(shipId: $id)}")
}
extend type SearchShips {
    amenitiesByType(countryId: Float!): DbShipAmenityResponse
        @join(
            select: "db {shipsAmenitiesByType(shipId: $id, countryId: $countryId)}"
        )
}
extend type SearchShips {
    destinations(countryId: Float!): [DbDestinations]
        @join(
            select: "db {shipsDestinations(shipId: $id, countryId: $countryId)}"
        )
}
extend type SearchShips {
    ports(countryId: Float!): [DbPorts]
        @join(select: "db {shipsPorts(shipId: $id, countryId: $countryId)}")
}
extend type SearchShips {
    pastSailings(date: Date, afterDate: Date): [DbStoredSailings]
        @join(
            select: "db {shipsPastSailings(shipId: $id, date: $date, afterDate: $afterDate)}"
        )
}
extend type SearchShips {
    cruisersChoiceAwards(countryId: Float): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type SearchShips {
    cruisersChoiceDestinationAwards(
        countryId: Float
    ): [DbCruisersChoiceCategories]
        @join(
            select: "db {shipsCruisersChoiceDestinationAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type SearchShips {
    editorsPicksAwards(countryId: Float): [DbEditorsPicksCategories]
        @join(
            select: "db {shipsEditorsPicksAwards(shipId: $id, countryId: $countryId)}"
        )
}
extend type SearchShips {
    editorsPicksResults: [DbEditorsPicksResults]
        @join(select: "db {shipsEditorsPicksResults(shipId: $id)}")
}
extend type SearchShips {
    cruiseStyles: [DbCruiseStyles]
        @join(select: "db {shipsCruiseStyles(shipId: $id)}")
}
extend type SearchShips {
    totalShoreExcursions: Float
        @join(select: "db {shipsTotalShoreExcursions(shipId: $id)}")
}
extend type DbDeparturePorts {
    itineraryCount(
        ipCountryId: Float!
        departureDateInterval: Float! = 3
    ): Float
        @join(
            select: "meta {departurePortsItineraryCount(departurePortsId: $id, ipCountryId: $ipCountryId, departureDateInterval: $departureDateInterval)}"
        )
}
extend type DbCruiseLines {
    totalReviewCount: Float
        @join(select: "meta {totalCruiselineReviewCount(cruiseLineId: $id)}")
}
extend type DbPorts {
    itineraryCount(
        ipCountryId: Float!
        departureDateInterval: Float! = 3
    ): Float
        @join(
            select: "meta {portsItineraryCount(portsId: $id, ipCountryId: $ipCountryId, departureDateInterval: $departureDateInterval)}"
        )
}
extend type ReviewsDestinations {
    ports: [DbPorts] @join(select: "db {destinationsPorts(destinationId: $id)}")
}
extend type ReviewsDestinations {
    image(countryId: Float!): String
        @join(
            select: "db {destinationsImage(destinationId: $id, countryId: $countryId)}"
        )
}
extend type ReviewsDestinations {
    ships: [DbShips] @join(select: "db {destinationsShips(destinationId: $id)}")
}
extend type PartnersDestinations {
    ports: [DbPorts] @join(select: "db {destinationsPorts(destinationId: $id)}")
}
extend type PartnersDestinations {
    image(countryId: Float!): String
        @join(
            select: "db {destinationsImage(destinationId: $id, countryId: $countryId)}"
        )
}
extend type PartnersDestinations {
    ships: [DbShips] @join(select: "db {destinationsShips(destinationId: $id)}")
}
extend type MetaDestinations {
    ports: [DbPorts] @join(select: "db {destinationsPorts(destinationId: $id)}")
}
extend type MetaDestinations {
    image(countryId: Float!): String
        @join(
            select: "db {destinationsImage(destinationId: $id, countryId: $countryId)}"
        )
}
extend type MetaDestinations {
    ships: [DbShips] @join(select: "db {destinationsShips(destinationId: $id)}")
}
extend type MetaCruiseLineDeparturePort {
    name: String
        @join(
            select: "db {cruiseLineDeparturePortName(cruiseLineDeparturePortId: $id)}"
        )
}
extend type MetaCruiseLineDeparturePort {
    seoName: String
        @join(
            select: "db {cruiseLineDeparturePortSeoName(cruiseLineDeparturePortId: $id)}"
        )
}
extend type MetaCruiseLineDestination {
    name: String
        @join(
            select: "db {cruiseLineDestinationName(cruiseLineDestinationId: $id)}"
        )
}
extend type MetaCruiseLineDestination {
    seoName: String
        @join(
            select: "db {cruiseLineDestinationSeoName(cruiseLineDestinationId: $id)}"
        )
}
extend type MetaCruiseLineShip {
    name: String @join(select: "db {cruiseLineShipName(cruiseLineShipId: $id)}")
}
extend type MetaCruiseLineShip {
    seoName: String
        @join(select: "db {cruiseLineShipSeoName(cruiseLineShipId: $id)}")
}
extend type MetaItineraryShip {
    cruiseStyleIds: [Float]
        @join(select: "db {itineraryShipCruiseStyleIds(itineraryShipId: $id)}")
}
extend type MetaItineraryPort {
    mappedImages(identifier: DbSubjectImageType!): [DbImages]
        @join(
            select: "db {itineraryPortMappedImages(itineraryPortId: $id, identifier: $identifier)}"
        )
}
extend type MetaItineraryPort {
    cruisersChoiceCategories(
        countryId: Float!
        awardYear: Float!
    ): [DbCruisersChoiceCategories]
        @join(
            select: "db {itineraryShipCruisersChoiceCategories(itineraryShipId: $id, countryId: $countryId, awardYear: $awardYear)}"
        )
}
extend type MetaReviewBy {
    totalHelpfulVotes: Float
        @join(
            select: "db {reviewByTotalHelpfulVotes(reviewByUsername: $username)}"
        )
}
extend type MetaReviewBy {
    totalReviews: Float
        @join(select: "db {reviewByTotalReviews(reviewByUsername: $username)}")
}
extend type ReviewsReviewEntries {
    port: DbPorts
        @join(
            select: "db {reviewEntriesPort(subjectId: $subjectId, subjectReferenceId: $subjectReferenceId)}"
        )
}
extend type ReviewsReviewEntries {
    shoreExcursion: DbShoreExcursions
        @join(
            select: "db {reviewEntriesShoreExcursion(subjectId: $subjectId, subjectReferenceId: $subjectReferenceId)}"
        )
}
extend type ReviewsReviews {
    cabinCategory: DbCabinCategoriesUnion
        @join(
            select: "db {reviewsCabinCategory(shipId: $shipId, cabinCategoryCode: $cabinCategoryCode)}"
        )
}
extend type ReviewsReviews {
    images: [DbUserImages] @join(select: "db {reviewsImages(reviewsId: $id)}")
}
extend type ReviewsReviews {
    user: DbSsoUser
        @join(select: "db {reviewsUser(userId: $userId, imsId: $imsId)}")
}
extend type ReviewsReviews {
    departurePort: DbDeparturePorts
        @join(
            select: "db {reviewsDeparturePort(embarkationPortId: $embarkationPortId)}"
        )
}
extend type ReviewsReviews {
    itinerary: DbItineraries
        @join(
            select: "db {reviewsItinerary(cruisedOn: $cruisedOn, cruiseLength: $cruiseLength, shipId: $shipId)}"
        )
}
extend type ReviewsReviews {
    destinations: [DbDestinations]
        @join(
            select: "db {reviewsDestinations(cruisedOn: $cruisedOn, cruiseLength: $cruiseLength, shipId: $shipId, destinationId: $destinationId)}"
        )
}
extend type SearchItineraries {
    destination: DbDestinations
        @join(select: "db{destination(id: $destinationId)}")
}
extend type SearchItineraries {
    ship: DbShips @join(select: "db{ship(id: $shipId)}")
}
extend type Query {
    hello(name: String): String! @resolver(name: "hello")
}
