use grafbase_sdk::test::{DynamicSchema, TestConfigBuilder, TestRunner};
use indoc::indoc;

#[tokio::test]
async fn test_example() {
    // Run the tests with `cargo test`.

    // Create a subgraph with a single field
    let subgraph = DynamicSchema::builder(r#"type Query { hi: String }"#)
        .with_resolver("Query", "hi", String::from("hello"))
        .into_subgraph("test")
        .unwrap();

    let config = indoc! {r#"
        # The extension config is added automatically by the test runner.
        # Add here any additional configuration for the Grafbase Gateway.
    "#};

    // The test configuration is built with the subgraph and networking enabled.
    // You must have the CLI and Grafbase Gateway for this to work. If you do not have
    // them in the PATH, you can specify the paths to the executables with the `.with_cli` and
    // `.with_gateway` methods.
    let config = TestConfigBuilder::new()
        .with_subgraph(subgraph)
        .enable_networking()
        .build(config)
        .unwrap();

    // A runner for building the extension, and executing the Grafbase Gateway together
    // with the subgraphs. The runner composes all subgraphs into a federated schema.
    let runner = TestRunner::new(config).await.unwrap();

    let result: serde_json::Value = runner
        .graphql_query(r#"query { hi }"#)
        .send()
        .await
        .unwrap();

    // The result is compared against a snapshot.
    insta::assert_json_snapshot!(result, @r#"
    {
      "data": {
        "hi": "hello"
      }
    }
    "#);
}
