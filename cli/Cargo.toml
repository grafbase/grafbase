[package]
version = "0.99.2"
name = "grafbase"
description = "The Grafbase command line interface"
categories = ["command-line-utilities"]
readme = "README.md"
edition.workspace = true
license.workspace = true
homepage.workspace = true
keywords.workspace = true
repository.workspace = true

[dependencies]
assert_matches.workspace = true
axum = { workspace = true, features = ["http1", "tokio"] }
backtrace.workspace = true
chrono.workspace = true
clap = { workspace = true, features = ["cargo", "wrap_help", "derive", "env"] }
clap_complete.workspace = true
cli-table = { workspace = true, default-features = false }
color-print.workspace = true
colored.workspace = true
const_format.workspace = true
crossterm.workspace = true
cynic = { workspace = true, features = ["http-reqwest"] }
dirs.workspace = true
expect-test.workspace = true
flate2.workspace = true
fslock.workspace = true
futures.workspace = true
futures-util.workspace = true
grafbase-mcp = { path = "../crates/mcp" }
ignore.workspace = true
indicatif.workspace = true
indoc.workspace = true
inquire.workspace = true
log.workspace = true
mimalloc.workspace = true
notify-debouncer-full.workspace = true
os_type.workspace = true
reqwest = { workspace = true, features = [
    "rustls-tls",
    "rustls-tls-native-roots",
    "stream",
    "json",
    "multipart",
], default-features = false }
rustls = { workspace = true, features = ["aws-lc-rs", "tls12"] }
serde.workspace = true
serde-dynamic-string.workspace = true
serde-toml-merge.workspace = true
serde_derive.workspace = true
serde_json.workspace = true
slugify.workspace = true
strum = { workspace = true, features = ["derive"] }
syntect.workspace = true
tar.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = ["full"] }
tokio-stream.workspace = true
tokio-util = { workspace = true, features = ["futures-io", "compat"] }
toml.workspace = true
tower-http = { workspace = true, features = ["trace", "fs", "set-header"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["env-filter"] }
url.workspace = true
urlencoding.workspace = true
uuid = { workspace = true, features = ["v4"] }
webbrowser.workspace = true
which.workspace = true

anyhow.workspace = true
askama.workspace = true
convert_case.workspace = true
cynic-parser = { workspace = true, features = ["report"] }
engine.workspace = true
engine-auth.workspace = true
extension.workspace = true
extension-catalog.workspace = true
federated-server.workspace = true
gateway-config.workspace = true
grafbase-graphql-introspection.workspace = true
grafbase-telemetry.workspace = true
grafbase-workspace-hack.workspace = true
graph-ref.workspace = true
graphql-composition.workspace = true
graphql-lint.workspace = true
graphql-schema-validation.workspace = true
runtime.workspace = true
runtime-local.workspace = true
semver.workspace = true
serde_valid.workspace = true
wasi-component-loader.workspace = true
wasmparser.workspace = true

[dev-dependencies]
graphql-mocks.workspace = true
integration-tests = { path = "../crates/integration-tests" }

duct.workspace = true
http.workspace = true
insta = { workspace = true, features = ["json", "redactions", "yaml"] }
rand.workspace = true
regex.workspace = true
reqwest.workspace = true
tempfile.workspace = true
wiremock.workspace = true

[build-dependencies]
cynic-codegen.workspace = true

[[bin]]
name = "grafbase"

[lints]
workspace = true
