name: cli

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - '*'

permissions:
  # Allow checks read
  checks: write
  # Allow repo checkout
  contents: write
  # Allow PRs read
  pull-requests: read

env:
  GRAFBASE_SKIP_ASSET_VERSION_CHECK: 'true'
  ASSETS_VERSION: 'release/949c313-2023-02-06'
  PROD_ASSETS: assets.grafbase.com
  CARGO_TERM_COLOR: 'always'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  detect-change-type:
    runs-on: ubuntu-latest
    outputs:
      cli: ${{ steps.filter.outputs.cli }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Path filter check
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            cli:
              - 'cli/**'

  lint:
    needs: [detect-change-type]
    if: ${{ needs.detect-change-type.outputs.cli == 'true' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Rust job init
        uses: ./.github/actions/init_rust_job
        with:
          platform: linux
          cache-key: ${{ runner.os }}-${{ runner.arch }}-cargo-dev-${{ hashFiles('cli/Cargo.lock') }}

      - name: Fetch CDN assets
        uses: ./.github/actions/cdn_assets
        with:
          cdn: ${{ env.PROD_ASSETS }}
          assets_version: ${{ env.ASSETS_VERSION }}

      - name: Sanitize
        uses: ./.github/actions/sanitize
        with:
          test: false

      - name: Individual package build
        shell: bash
        run: |
          set -euo pipefail
          cd cli/crates
          # The actual features used for each dependency depends on what is being built simultaneously.
          # However, each package is published individually, so we're checking that all packages compile
          # with only their defined features.
          # See: https://github.com/rust-lang/cargo/issues/4463
          (cd common && cargo check)
          (cd server && cargo check)
          (cd backend && cargo check)
          (cd cli && cargo check)

  windows:
    needs: [lint]
    runs-on: windows-latest
    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Rust job init
        uses: ./.github/actions/init_rust_job
        with:
          platform: windows
          cache-key: ${{ runner.os }}-${{ runner.arch }}-cargo-release-${{ hashFiles('cli/Cargo.lock') }}

      - name: Fetch CDN assets
        uses: ./.github/actions/cdn_assets
        with:
          cdn: ${{ env.PROD_ASSETS }}
          assets_version: ${{ env.ASSETS_VERSION }}

      - if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        name: Sanitize
        uses: ./.github/actions/sanitize
        with:
          lint: false

      - name: Build release
        run: |
          cd cli
          cargo build --release --target x86_64-pc-windows-msvc

      - if: startsWith(github.ref, 'refs/tags/')
        name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.ref_name }}-windows
          path: |
            cli/target/x86_64-pc-windows-msvc/release/grafbase.exe

  linux:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Rust job init
        uses: ./.github/actions/init_rust_job
        with:
          platform: linux
          cache-key: ${{ runner.os }}-${{ runner.arch }}-cargo-release-${{ hashFiles('cli/Cargo.lock') }}

      - name: Fetch CDN assets
        uses: ./.github/actions/cdn_assets
        with:
          cdn: ${{ env.PROD_ASSETS }}
          assets_version: ${{ env.ASSETS_VERSION }}

      - if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        name: Sanitize
        uses: ./.github/actions/sanitize
        with:
          lint: false

      - name: Build release
        run: |
          cd cli
          cargo build --release --target x86_64-unknown-linux-musl

      - if: startsWith(github.ref, 'refs/tags/')
        name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.ref_name }}-linux
          path: |
            cli/target/x86_64-unknown-linux-musl/release/grafbase

  darwin:
    needs: [lint]
    runs-on: macos-latest
    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Rust job init
        uses: ./.github/actions/init_rust_job
        with:
          platform: macos
          cache-key: ${{ runner.os }}-${{ runner.arch }}-cargo-release-${{ hashFiles('cli/Cargo.lock') }}

      - name: Fetch CDN assets
        uses: ./.github/actions/cdn_assets
        with:
          cdn: ${{ env.PROD_ASSETS }}
          assets_version: ${{ env.ASSETS_VERSION }}

      - if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        name: Sanitize
        uses: ./.github/actions/sanitize
        with:
          lint: false

      - name: Build aarch64 release
        run: |
          cd cli
          cargo build --release --target aarch64-apple-darwin

      - name: Build x86_64 release
        run: |
          cd cli
          cargo build --release --target x86_64-apple-darwin

      - if: startsWith(github.ref, 'refs/tags/')
        name: Upload aarch binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.ref_name }}-aarch64-apple-darwin
          path: cli/target/aarch64-apple-darwin/release/grafbase

      - if: startsWith(github.ref, 'refs/tags/')
        name: Upload x86_64 binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.ref_name }}-x86_64-apple-darwin
          path: cli/target/x86_64-apple-darwin/release/grafbase

  release:
    needs: [windows, linux, darwin]
    if: startsWith(github.ref, 'refs/tags/')
    uses: ./.github/workflows/cli-partial-release.yml
    with:
      draft: false
      tag: ${{ github.ref_name }}
    secrets:
      CRATES_ACCESS_TOKEN: ${{ secrets.CRATES_ACCESS_TOKEN }}
      NPM_ACCESS_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
