name: CLI / binaries

on: [push, workflow_dispatch]

permissions:
  # Allow checks read
  checks: write
  # Allow repo checkout
  contents: write

jobs:
  windows:
    runs-on: windows-latest

    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Move CLI to root
        run: |
          shopt -s extglob
          rm -r !("cli")
          mv cli/* .
          rm -r cli
        shell: bash

      - run: echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        # FIXME: We use rust-toolchain.toml to specify targets, etc. Unfortunately,
        # the action doesn't support it yet (https://github.com/actions-rs/toolchain/issues/208).
        # Once it does, we should be able to remove the `with` block entirely.
        with:
          profile: minimal
          toolchain: "1.62"
          target: x86_64-pc-windows-msvc
          override: true

      - name: Set up a Rust-specific cache
        uses: actions/cache@v3
        timeout-minutes: 5
        continue-on-error: true
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-${{ runner.arch }}-${{ github.job }}-${{ hashFiles('Cargo.lock', 'Cargo.toml') }}

      - name: Fetch assets
        run: |
          Invoke-WebRequest -Uri "https://temp-artifact-storage.s3.eu-west-3.amazonaws.com/assets.zip" -OutFile assets.zip
          Remove-Item -Recurse -Force ./crates/server/assets
          Expand-Archive assets.zip -DestinationPath ./crates/server/assets

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: "--target x86_64-pc-windows-msvc"

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: grafbase-x86_64-pc-windows-msvc.exe
          path: |
            target/x86_64-pc-windows-msvc/release/grafbase

  linux:
    runs-on: ubuntu-latest

    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Move CLI to root
        run: |
          shopt -s extglob
          rm -r !("cli")
          mv cli/* .
          rm -r cli

      # FIXME: Drop when https://github.com/actions-rs/toolchain/issues/126 is fixed.
      - name: Create `rust-toolchain`
        run: |
          grep -Po '(?<=^channel = ")\d+\.\d+(\.\d+)?(?=")' rust-toolchain.toml > rust-toolchain && rm rust-toolchain.toml

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        # FIXME: We use rust-toolchain.toml to specify targets, etc. Unfortunately,
        # the action doesn't support it yet (https://github.com/actions-rs/toolchain/issues/208).
        # Once it does, we should be able to remove the `with` block entirely.
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: x86_64-unknown-linux-musl
          override: true

      - name: Set up a Rust-specific cache
        uses: actions/cache@v3
        timeout-minutes: 5
        continue-on-error: true
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-${{ runner.arch }}-${{ github.job }}-${{ hashFiles('Cargo.lock', 'Cargo.toml') }}

      - name: Fetch assets
        run: |
          curl https://temp-artifact-storage.s3.eu-west-3.amazonaws.com/assets.zip --output assets.zip
          unzip assets.zip
          rm -r crates/server/assets
          mv assets crates/server/assets

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: "--target x86_64-unknown-linux-musl"

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: grafbase-x86_64-unknown-linux-musl
          path: |
            target/x86_64-unknown-linux-musl/release/grafbase

  darwin:
    runs-on: macos-latest

    steps:
      - name: Get sources
        uses: actions/checkout@v3

      - name: Move CLI to root
        run: |
          shopt -s extglob
          rm -r !("cli")
          mv cli/* .
          rm -r cli

      - name: Install grep
        run: |
          brew install grep

      # FIXME: Drop when https://github.com/actions-rs/toolchain/issues/126 is fixed.
      - name: Create `rust-toolchain`
        run: |
          ggrep -Po '(?<=^channel = ")\d+\.\d+(\.\d+)?(?=")' rust-toolchain.toml > rust-toolchain && rm rust-toolchain.toml

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        # FIXME: We use rust-toolchain.toml to specify targets, etc. Unfortunately,
        # the action doesn't support it yet (https://github.com/actions-rs/toolchain/issues/208).
        # Once it does, we should be able to remove the `with` block entirely.
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: x86_64-apple-darwin
          override: false

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        # FIXME: We use rust-toolchain.toml to specify targets, etc. Unfortunately,
        # the action doesn't support it yet (https://github.com/actions-rs/toolchain/issues/208).
        # Once it does, we should be able to remove the `with` block entirely.
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: aarch64-apple-darwin
          override: false

      - name: Set up a Rust-specific cache
        uses: actions/cache@v3
        timeout-minutes: 5
        continue-on-error: true
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-${{ runner.arch }}-${{ github.job }}-${{ hashFiles('Cargo.lock', 'Cargo.toml') }}

      - name: Fetch assets
        run: |
          curl https://temp-artifact-storage.s3.eu-west-3.amazonaws.com/assets.zip --output assets.zip
          unzip assets.zip
          rm -r crates/server/assets
          mv assets crates/server/assets

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: "--target aarch64-apple-darwin"

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: "--target x86_64-apple-darwin"

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: grafbase-x86_64-apple-darwin
          path: |
            target/x86_64-apple-darwin/release/grafbase

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: grafbase-aarch64-apple-darwin
          path: |
            target/aarch64-apple-darwin/release/grafbase
