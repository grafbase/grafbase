directive @join__unionMember(graph: join__Graph!, member: String!) on UNION

directive @join__implements(graph: join__Graph!, interface: String!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String) on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  overrideLabel: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__type(
  graph: join__Graph
  key: join__FieldSet
  extension: Boolean = false
  resolvable: Boolean = true
  isInterfaceObject: Boolean = false
) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

directive @join__owner(graph: join__Graph!) on OBJECT

directive @composite__lookup on FIELD_DEFINITION

directive @composite__is(field: composite__FieldSelectionMap!) on FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Timestamp data type represented as a string in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.sss)
"""
scalar Timestamp

"""
UUID data type represented as a string in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
"""
scalar UUID

"""
Decimal data type with arbitrary precision, represented as a string containing a numeric value
"""
scalar Decimal

"""
Currency amount data type represented as a string with a numeric value and optional currency symbol
"""
scalar Money

scalar join__FieldSet

scalar composite__FieldSelectionMap

type Inventory
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgTable", arguments: { name: "inventory" })
  @extension__directive(
    graph: INVENTORY
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["id"], type: PRIMARY }
  )
  @extension__directive(
    graph: INVENTORY
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["sku"], type: UNIQUE }
  )
  @join__type(graph: INVENTORY, key: "id", resolvable: false)
  @join__type(graph: INVENTORY, key: "sku", resolvable: false)
  @join__type(graph: PRODUCTS, key: "sku", resolvable: false) {
  id: UUID!
    @extension__directive(
      graph: INVENTORY
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "id", type: UUID }
    )
    @join__field(graph: INVENTORY)
  quantity: Int!
    @extension__directive(
      graph: INVENTORY
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "quantity", type: INT }
    )
    @join__field(graph: INVENTORY)
  sku: String!
    @extension__directive(
      graph: INVENTORY
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "sku", type: VARCHAR }
    )
  updatedAt: Timestamp!
    @extension__directive(
      graph: INVENTORY
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "updated_at", type: TIMESTAMP }
    )
    @join__field(graph: INVENTORY)
  variant: Variant!
    @composite__derive(graph: INVENTORY)
    @composite__is(graph: INVENTORY, field: "{ sku: sku }")
    @join__field(graph: INVENTORY)
  warehouseLocation: String
    @extension__directive(
      graph: INVENTORY
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "warehouse_location", type: VARCHAR }
    )
    @join__field(graph: INVENTORY)
}

"""
The connection type for Inventory
"""
type InventoryConnection
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgConnection", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  A list of edges
  """
  edges: [InventoryEdge!]!
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

"""
Return type when creating many inventories
"""
type InventoryCreateManyPayload
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgMutation", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  Returned item(s) from the mutation
  """
  returning: [InventoryReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when creating one Inventory
"""
type InventoryCreatePayload
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgMutation", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  Returned item(s) from the mutation
  """
  returning: InventoryReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when deleting many inventories
"""
type InventoryDeleteManyPayload
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgMutation", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  Returned item(s) from the mutation
  """
  returning: [InventoryReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when deleting one Inventory
"""
type InventoryDeletePayload
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgMutation", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  Returned item(s) from the mutation
  """
  returning: InventoryReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
An edge in a connection. Contains the node and its cursor
"""
type InventoryEdge @join__type(graph: INVENTORY) {
  """
  A cursor for use in pagination
  """
  cursor: String!
  """
  The item at the end of the edge
  """
  node: Inventory!
}

"""
Return type containing fields of the mutated or created Inventory object
"""
type InventoryReturning
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgReturning", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  The value of the id field
  """
  id: UUID!
  """
  The value of the quantity field
  """
  quantity: Int!
  """
  The value of the sku field
  """
  sku: String!
  """
  The value of the updatedAt field
  """
  updatedAt: Timestamp!
  """
  The value of the warehouseLocation field
  """
  warehouseLocation: String
}

"""
Return type when updating many inventories
"""
type InventoryUpdateManyPayload
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgMutation", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  Returned item(s) from the mutation
  """
  returning: [InventoryReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when updating one Inventory
"""
type InventoryUpdatePayload
  @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgMutation", arguments: { type: "Inventory" })
  @join__type(graph: INVENTORY) {
  """
  Returned item(s) from the mutation
  """
  returning: InventoryReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Information about pagination in a collection of objects
"""
type PageInfo @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  The cursor of the last item in the page
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  The cursor of the first item in the page
  """
  startCursor: String
}

type Variant
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgTable", arguments: { name: "variants" })
  @extension__directive(
    graph: PRODUCTS
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["id"], type: PRIMARY }
  )
  @extension__directive(
    graph: PRODUCTS
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["sku"], type: UNIQUE }
  )
  @join__type(graph: INVENTORY, key: "sku", resolvable: false)
  @join__type(graph: PRODUCTS, key: "id", resolvable: false)
  @join__type(graph: PRODUCTS, key: "sku", resolvable: false) {
  createdAt: Timestamp!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "created_at", type: TIMESTAMP }
    )
    @join__field(graph: PRODUCTS)
  id: UUID!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgColumn", arguments: { name: "id", type: UUID })
    @join__field(graph: PRODUCTS)
  inventory: Inventory!
    @composite__derive(graph: PRODUCTS)
    @composite__is(graph: PRODUCTS, field: "{ sku: sku }")
    @join__field(graph: PRODUCTS)
  name: String
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "name", type: VARCHAR }
    )
    @join__field(graph: PRODUCTS)
  price: Money
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "price", type: MONEY }
    )
    @join__field(graph: PRODUCTS)
  product: Product!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgRelation"
      arguments: { name: "variants_to_products", fields: ["productId"], references: ["id"] }
    )
    @join__field(graph: PRODUCTS)
  productId: UUID!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "product_id", type: UUID }
    )
    @join__field(graph: PRODUCTS)
  sku: String!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "sku", type: VARCHAR }
    )
  updatedAt: Timestamp!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "updated_at", type: TIMESTAMP }
    )
    @join__field(graph: PRODUCTS)
}

type Product
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgTable", arguments: { name: "products" })
  @extension__directive(
    graph: PRODUCTS
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["id"], type: PRIMARY }
  )
  @extension__directive(
    graph: PRODUCTS
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["sku"], type: UNIQUE }
  )
  @extension__directive(
    graph: PRODUCTS
    extension: POSTGRES
    name: "pgKey"
    arguments: { fields: ["slug"], type: UNIQUE }
  )
  @join__type(graph: PRODUCTS, key: "id", resolvable: false)
  @join__type(graph: PRODUCTS, key: "sku", resolvable: false)
  @join__type(graph: PRODUCTS, key: "slug", resolvable: false) {
  createdAt: Timestamp!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "created_at", type: TIMESTAMP }
    )
  description: String
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "description", type: TEXT }
    )
  id: UUID!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgColumn", arguments: { name: "id", type: UUID })
  name: String!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "name", type: VARCHAR }
    )
  price: Decimal!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "price", type: NUMERIC }
    )
  sku: String!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "sku", type: VARCHAR }
    )
  slug: String!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "slug", type: VARCHAR }
    )
  updatedAt: Timestamp!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgColumn"
      arguments: { name: "updated_at", type: TIMESTAMP }
    )
  variants(
    "Filter the related Variant instances"
    filter: VariantFilterInput
    "Select the first Variant instances"
    first: Int
    "Select the last Variant instances"
    last: Int
    "Select the Variant instances before the given cursor"
    before: String
    "Select the Variant instances after the given cursor"
    after: String
    "Order the Variant instances by the given fields"
    orderBy: [VariantOrderByInput!]
  ): VariantConnection!
    @extension__directive(
      graph: PRODUCTS
      extension: POSTGRES
      name: "pgRelation"
      arguments: { name: "variants_to_products" }
    )
}

"""
The connection type for Product
"""
type ProductConnection
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgConnection", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  A list of edges
  """
  edges: [ProductEdge!]!
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

"""
Return type when creating many products
"""
type ProductCreateManyPayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: [ProductReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when creating one Product
"""
type ProductCreatePayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: ProductReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when deleting many products
"""
type ProductDeleteManyPayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: [ProductReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when deleting one Product
"""
type ProductDeletePayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: ProductReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
An edge in a connection. Contains the node and its cursor
"""
type ProductEdge @join__type(graph: PRODUCTS) {
  """
  A cursor for use in pagination
  """
  cursor: String!
  """
  The item at the end of the edge
  """
  node: Product!
}

"""
Return type containing fields of the mutated or created Product object
"""
type ProductReturning
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgReturning", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  The value of the createdAt field
  """
  createdAt: Timestamp!
  """
  The value of the description field
  """
  description: String
  """
  The value of the id field
  """
  id: UUID!
  """
  The value of the name field
  """
  name: String!
  """
  The value of the price field
  """
  price: Decimal!
  """
  The value of the sku field
  """
  sku: String!
  """
  The value of the slug field
  """
  slug: String!
  """
  The value of the updatedAt field
  """
  updatedAt: Timestamp!
}

"""
Return type when updating many products
"""
type ProductUpdateManyPayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: [ProductReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when updating one Product
"""
type ProductUpdatePayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Product" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: ProductReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
The connection type for Variant
"""
type VariantConnection
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgConnection", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  A list of edges
  """
  edges: [VariantEdge!]!
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}

"""
Return type when creating many variants
"""
type VariantCreateManyPayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: [VariantReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when creating one Variant
"""
type VariantCreatePayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: VariantReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when deleting many variants
"""
type VariantDeleteManyPayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: [VariantReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when deleting one Variant
"""
type VariantDeletePayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: VariantReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
An edge in a connection. Contains the node and its cursor
"""
type VariantEdge @join__type(graph: PRODUCTS) {
  """
  A cursor for use in pagination
  """
  cursor: String!
  """
  The item at the end of the edge
  """
  node: Variant!
}

"""
Return type containing fields of the mutated or created Variant object
"""
type VariantReturning
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgReturning", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  The value of the createdAt field
  """
  createdAt: Timestamp!
  """
  The value of the id field
  """
  id: UUID!
  """
  The value of the name field
  """
  name: String
  """
  The value of the price field
  """
  price: Money
  """
  The value of the productId field
  """
  productId: UUID!
  """
  The value of the sku field
  """
  sku: String!
  """
  The value of the updatedAt field
  """
  updatedAt: Timestamp!
}

"""
Return type when updating many variants
"""
type VariantUpdateManyPayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: [VariantReturning]!
  """
  The number of rows mutated
  """
  rowCount: Int!
}

"""
Return type when updating one Variant
"""
type VariantUpdatePayload
  @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgMutation", arguments: { type: "Variant" })
  @join__type(graph: PRODUCTS) {
  """
  Returned item(s) from the mutation
  """
  returning: VariantReturning
  """
  The number of rows mutated
  """
  rowCount: Int!
}

type Query {
  """
  Query and paginate multiple inventories
  """
  inventoryInventories(
    "Filter for Inventory"
    filter: InventoryFilterInput
    "Limit the number of results, from the beginning"
    first: Int
    "Limit the number of results, from the end"
    last: Int
    "Cursor for pagination, select items before the cursor. Use together with `last`."
    before: String
    "Cursor for pagination, select items after the cursor. Use together with `first`."
    after: String
    "Order the results by selected fields"
    orderBy: [InventoryOrderByInput!]
  ): InventoryConnection!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgSelectMany", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Query a unique Inventory
  """
  inventoryInventory("Input for unique Inventory lookup" lookup: InventoryLookupInput!): Inventory
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgSelectOne", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Lookup multiple inventories for subgraph joins
  """
  inventoryInventoryLookup(
    "Filter inventories with an array of keys"
    lookup: InventoryManyLookupInput @inaccessible
  ): [Inventory]!
    @inaccessible
    @composite__lookup(graph: INVENTORY)
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgLookup", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Query a unique Product
  """
  productsProduct("Input for unique Product lookup" lookup: ProductLookupInput!): Product
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgSelectOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Lookup multiple products for subgraph joins
  """
  productsProductLookup(
    "Filter products with an array of keys"
    lookup: ProductManyLookupInput @inaccessible
  ): [Product]!
    @inaccessible
    @composite__lookup(graph: PRODUCTS)
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgLookup", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Query and paginate multiple products
  """
  productsProducts(
    "Filter for Product"
    filter: ProductFilterInput
    "Limit the number of results, from the beginning"
    first: Int
    "Limit the number of results, from the end"
    last: Int
    "Cursor for pagination, select items before the cursor. Use together with `last`."
    before: String
    "Cursor for pagination, select items after the cursor. Use together with `first`."
    after: String
    "Order the results by selected fields"
    orderBy: [ProductOrderByInput!]
  ): ProductConnection!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgSelectMany", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Query a unique Variant
  """
  productsVariant("Input for unique Variant lookup" lookup: VariantLookupInput!): Variant
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgSelectOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Lookup multiple variants for subgraph joins
  """
  productsVariantLookup(
    "Filter variants with an array of keys"
    lookup: VariantManyLookupInput @inaccessible
  ): [Variant]!
    @inaccessible
    @composite__lookup(graph: PRODUCTS)
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgLookup", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Query and paginate multiple variants
  """
  productsVariants(
    "Filter for Variant"
    filter: VariantFilterInput
    "Limit the number of results, from the beginning"
    first: Int
    "Limit the number of results, from the end"
    last: Int
    "Cursor for pagination, select items before the cursor. Use together with `last`."
    before: String
    "Cursor for pagination, select items after the cursor. Use together with `first`."
    after: String
    "Order the results by selected fields"
    orderBy: [VariantOrderByInput!]
  ): VariantConnection!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgSelectMany", arguments: {})
    @join__field(graph: PRODUCTS)
}

type Mutation {
  """
  Create a single Inventory
  """
  inventoryInventoryCreate(
    "Input for creating a single Inventory"
    input: InventoryInventoryCreateInput!
  ): InventoryCreatePayload!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgInsertOne", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Create multiple inventories
  """
  inventoryInventoryCreateMany(
    "Input for creating multiple Inventory instances"
    input: [InventoryInventoryCreateInput!]!
  ): InventoryCreateManyPayload!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgInsertMany", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Delete a unique Inventory
  """
  inventoryInventoryDelete(
    "Lookup input for unique Inventory deletion"
    lookup: InventoryLookupInput!
  ): InventoryDeletePayload!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgDeleteOne", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Delete multiple inventories
  """
  inventoryInventoryDeleteMany(
    "Filter for Inventory deletion"
    filter: InventoryFilterInput
  ): InventoryDeleteManyPayload!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgDeleteMany", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Update a unique Inventory
  """
  inventoryInventoryUpdate(
    "Lookup input for unique Inventory update"
    lookup: InventoryLookupInput!
    "Input for updating a Inventory"
    input: InventoryInventoryUpdateInput
  ): InventoryUpdatePayload!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgUpdateOne", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Update multiple inventories
  """
  inventoryInventoryUpdateMany(
    "Filter for updating multiple Inventory instances"
    filter: InventoryFilterInput
    "Input for updating multiple Inventory instances"
    input: InventoryInventoryUpdateInput
  ): InventoryUpdateManyPayload!
    @extension__directive(graph: INVENTORY, extension: POSTGRES, name: "pgUpdateMany", arguments: {})
    @join__field(graph: INVENTORY)
  """
  Create a single Product
  """
  productsProductCreate(
    "Input for creating a single Product"
    input: ProductsProductCreateInput!
  ): ProductCreatePayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgInsertOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Create multiple products
  """
  productsProductCreateMany(
    "Input for creating multiple Product instances"
    input: [ProductsProductCreateInput!]!
  ): ProductCreateManyPayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgInsertMany", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Delete a unique Product
  """
  productsProductDelete("Lookup input for unique Product deletion" lookup: ProductLookupInput!): ProductDeletePayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgDeleteOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Delete multiple products
  """
  productsProductDeleteMany("Filter for Product deletion" filter: ProductFilterInput): ProductDeleteManyPayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgDeleteMany", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Update a unique Product
  """
  productsProductUpdate(
    "Lookup input for unique Product update"
    lookup: ProductLookupInput!
    "Input for updating a Product"
    input: ProductsProductUpdateInput
  ): ProductUpdatePayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgUpdateOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Update multiple products
  """
  productsProductUpdateMany(
    "Filter for updating multiple Product instances"
    filter: ProductFilterInput
    "Input for updating multiple Product instances"
    input: ProductsProductUpdateInput
  ): ProductUpdateManyPayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgUpdateMany", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Create a single Variant
  """
  productsVariantCreate(
    "Input for creating a single Variant"
    input: ProductsVariantCreateInput!
  ): VariantCreatePayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgInsertOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Create multiple variants
  """
  productsVariantCreateMany(
    "Input for creating multiple Variant instances"
    input: [ProductsVariantCreateInput!]!
  ): VariantCreateManyPayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgInsertMany", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Delete a unique Variant
  """
  productsVariantDelete("Lookup input for unique Variant deletion" lookup: VariantLookupInput!): VariantDeletePayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgDeleteOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Delete multiple variants
  """
  productsVariantDeleteMany("Filter for Variant deletion" filter: VariantFilterInput): VariantDeleteManyPayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgDeleteMany", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Update a unique Variant
  """
  productsVariantUpdate(
    "Lookup input for unique Variant update"
    lookup: VariantLookupInput!
    "Input for updating a Variant"
    input: ProductsVariantUpdateInput
  ): VariantUpdatePayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgUpdateOne", arguments: {})
    @join__field(graph: PRODUCTS)
  """
  Update multiple variants
  """
  productsVariantUpdateMany(
    "Filter for updating multiple Variant instances"
    filter: VariantFilterInput
    "Input for updating multiple Variant instances"
    input: ProductsVariantUpdateInput
  ): VariantUpdateManyPayload!
    @extension__directive(graph: PRODUCTS, extension: POSTGRES, name: "pgUpdateMany", arguments: {})
    @join__field(graph: PRODUCTS)
}

"""
Specifies the direction for ordering results.
"""
enum OrderDirection @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  ASC
  DESC
}

enum join__Graph {
  INVENTORY @join__graph(name: "inventory")
  PRODUCTS @join__graph(name: "products")
}

enum extension__Link {
  POSTGRES
    @extension__link(
      url: "https://grafbase.com/extensions/postgres/0.4.8"
      schemaDirectives: [
        { graph: INVENTORY, name: "pgDatabase", arguments: { name: "inventory" } }
        { graph: PRODUCTS, name: "pgDatabase", arguments: { name: "products" } }
      ]
    )
}

"""
Search filter input for Int type.
"""
input IntFilterInput @oneOf @join__type(graph: INVENTORY) {
  """
  The value is exactly the one given
  """
  eq: Int
  """
  The value is not the one given
  """
  ne: Int
  """
  The value is greater than the one given
  """
  gt: Int
  """
  The value is less than the one given
  """
  lt: Int
  """
  The value is greater than, or equal to the one given
  """
  gte: Int
  """
  The value is less than, or equal to the one given
  """
  lte: Int
  """
  The value is in the given array of values
  """
  in: [Int!]
  """
  The value is not in the given array of values
  """
  nin: [Int!]
  """
  A negation of the given filter
  """
  not: IntFilterInput
}

"""
Update input for Int type.
"""
input IntUpdateInput @oneOf @join__type(graph: INVENTORY) {
  """
  Replaces the value of a field with the specified value.
  """
  set: Int
  """
  Increments the value of a field by the specified value.
  """
  increment: Int
  """
  Decrements the value of a field by the specified value.
  """
  decrement: Int
  """
  Multiplies the value of a field by the specified value.
  """
  multiply: Int
  """
  Divides the value of a field by the specified value.
  """
  divide: Int
}

"""
Filter input type for Inventory objects.
"""
input InventoryFilterInput @oneOf @join__type(graph: INVENTORY) {
  """
  Filter by the given id
  """
  id: UUIDFilterInput
  """
  Filter by the given sku
  """
  sku: StringFilterInput
  """
  Filter by the given quantity
  """
  quantity: IntFilterInput
  """
  Filter by the given warehouseLocation
  """
  warehouseLocation: StringFilterInput
  """
  Filter by the given updatedAt
  """
  updatedAt: TimestampFilterInput
  """
  All of the filters must match
  """
  ALL: [InventoryFilterInput]
  """
  None of the filters must match
  """
  NONE: [InventoryFilterInput]
  """
  At least one of the filters must match
  """
  ANY: [InventoryFilterInput]
}

"""
Input for creating a new Inventory
"""
input InventoryInventoryCreateInput @join__type(graph: INVENTORY) {
  """
  Set field value for id
  """
  id: UUID
  """
  Set field value for sku
  """
  sku: String!
  """
  Set field value for quantity
  """
  quantity: Int
  """
  Set field value for warehouseLocation
  """
  warehouseLocation: String
  """
  Set field value for updatedAt
  """
  updatedAt: Timestamp
}

"""
Input for updating an existing Inventory
"""
input InventoryInventoryUpdateInput @join__type(graph: INVENTORY) {
  """
  Update field value for id
  """
  id: UUIDUpdateInput
  """
  Update field value for sku
  """
  sku: StringUpdateInput
  """
  Update field value for quantity
  """
  quantity: IntUpdateInput
  """
  Update field value for warehouseLocation
  """
  warehouseLocation: StringUpdateInput
  """
  Update field value for updatedAt
  """
  updatedAt: TimestampUpdateInput
}

"""
Input type to select a unique Inventory
"""
input InventoryLookupInput @oneOf @join__type(graph: INVENTORY) {
  """
  Select by the 'id' field
  """
  id: UUID
  """
  Select by the 'sku' field
  """
  sku: String
}

"""
Lookup input type for Inventory objects for subgraph joins.
"""
input InventoryManyLookupInput @oneOf @inaccessible @join__type(graph: INVENTORY) {
  """
  Select by the 'id' field
  """
  id: [UUID!] @inaccessible
  """
  Select by the 'sku' field
  """
  sku: [String!] @inaccessible
}

"""
Specifies the ordering for Inventory results.
"""
input InventoryOrderByInput @oneOf @join__type(graph: INVENTORY) {
  """
  Order inventories by id
  """
  id: OrderDirection
  """
  Order inventories by sku
  """
  sku: OrderDirection
  """
  Order inventories by quantity
  """
  quantity: OrderDirection
  """
  Order inventories by warehouseLocation
  """
  warehouseLocation: OrderDirection
  """
  Order inventories by updatedAt
  """
  updatedAt: OrderDirection
}

"""
Search filter input for String type.
"""
input StringFilterInput @oneOf @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  The value is exactly the one given
  """
  eq: String
  """
  The value is not the one given
  """
  ne: String
  """
  The value is greater than the one given
  """
  gt: String
  """
  The value is less than the one given
  """
  lt: String
  """
  The value is greater than, or equal to the one given
  """
  gte: String
  """
  The value is less than, or equal to the one given
  """
  lte: String
  """
  The value is in the given array of values
  """
  in: [String!]
  """
  The value is not in the given array of values
  """
  nin: [String!]
  """
  A negation of the given filter
  """
  not: StringFilterInput
  """
  The given input is part of the column value
  """
  like: String
}

"""
Update input for String type.
"""
input StringUpdateInput @oneOf @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  Replaces the value of a field with the specified value.
  """
  set: String
}

"""
Search filter input for Timestamp type.
"""
input TimestampFilterInput @oneOf @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  The value is exactly the one given
  """
  eq: Timestamp
  """
  The value is not the one given
  """
  ne: Timestamp
  """
  The value is greater than the one given
  """
  gt: Timestamp
  """
  The value is less than the one given
  """
  lt: Timestamp
  """
  The value is greater than, or equal to the one given
  """
  gte: Timestamp
  """
  The value is less than, or equal to the one given
  """
  lte: Timestamp
  """
  The value is in the given array of values
  """
  in: [Timestamp!]
  """
  The value is not in the given array of values
  """
  nin: [Timestamp!]
  """
  A negation of the given filter
  """
  not: TimestampFilterInput
}

"""
Update input for Timestamp type.
"""
input TimestampUpdateInput @oneOf @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  Replaces the value of a field with the specified value.
  """
  set: Timestamp
}

"""
Search filter input for UUID type.
"""
input UUIDFilterInput @oneOf @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  The value is exactly the one given
  """
  eq: UUID
  """
  The value is not the one given
  """
  ne: UUID
  """
  The value is greater than the one given
  """
  gt: UUID
  """
  The value is less than the one given
  """
  lt: UUID
  """
  The value is greater than, or equal to the one given
  """
  gte: UUID
  """
  The value is less than, or equal to the one given
  """
  lte: UUID
  """
  The value is in the given array of values
  """
  in: [UUID!]
  """
  The value is not in the given array of values
  """
  nin: [UUID!]
  """
  A negation of the given filter
  """
  not: UUIDFilterInput
}

"""
Update input for UUID type.
"""
input UUIDUpdateInput @oneOf @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) {
  """
  Replaces the value of a field with the specified value.
  """
  set: UUID
}

"""
Search filter input for Decimal type.
"""
input DecimalFilterInput @oneOf @join__type(graph: PRODUCTS) {
  """
  The value is exactly the one given
  """
  eq: Decimal
  """
  The value is not the one given
  """
  ne: Decimal
  """
  The value is greater than the one given
  """
  gt: Decimal
  """
  The value is less than the one given
  """
  lt: Decimal
  """
  The value is greater than, or equal to the one given
  """
  gte: Decimal
  """
  The value is less than, or equal to the one given
  """
  lte: Decimal
  """
  The value is in the given array of values
  """
  in: [Decimal!]
  """
  The value is not in the given array of values
  """
  nin: [Decimal!]
  """
  A negation of the given filter
  """
  not: DecimalFilterInput
}

"""
Update input for Decimal type.
"""
input DecimalUpdateInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Replaces the value of a field with the specified value.
  """
  set: Decimal
  """
  Increments the value of a field by the specified value.
  """
  increment: Decimal
  """
  Decrements the value of a field by the specified value.
  """
  decrement: Decimal
  """
  Multiplies the value of a field by the specified value.
  """
  multiply: Decimal
  """
  Divides the value of a field by the specified value.
  """
  divide: Decimal
}

"""
Search filter input for Money type.
"""
input MoneyFilterInput @oneOf @join__type(graph: PRODUCTS) {
  """
  The value is exactly the one given
  """
  eq: Money
  """
  The value is not the one given
  """
  ne: Money
  """
  The value is greater than the one given
  """
  gt: Money
  """
  The value is less than the one given
  """
  lt: Money
  """
  The value is greater than, or equal to the one given
  """
  gte: Money
  """
  The value is less than, or equal to the one given
  """
  lte: Money
  """
  The value is in the given array of values
  """
  in: [Money!]
  """
  The value is not in the given array of values
  """
  nin: [Money!]
  """
  A negation of the given filter
  """
  not: MoneyFilterInput
}

"""
Update input for Money type.
"""
input MoneyUpdateInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Replaces the value of a field with the specified value.
  """
  set: Money
  """
  Increments the value of a field by the specified value.
  """
  increment: Money
  """
  Decrements the value of a field by the specified value.
  """
  decrement: Money
  """
  Multiplies the value of a field by the specified value.
  """
  multiply: Money
  """
  Divides the value of a field by the specified value.
  """
  divide: Money
}

"""
Filter input type for Product objects.
"""
input ProductFilterInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Filter by the given name
  """
  name: StringFilterInput
  """
  Filter by the given id
  """
  id: UUIDFilterInput
  """
  Filter by the given sku
  """
  sku: StringFilterInput
  """
  Filter by the given updatedAt
  """
  updatedAt: TimestampFilterInput
  """
  All of the filters must match
  """
  ALL: [ProductFilterInput]
  """
  None of the filters must match
  """
  NONE: [ProductFilterInput]
  """
  At least one of the filters must match
  """
  ANY: [ProductFilterInput]
  """
  Filter by the given slug
  """
  slug: StringFilterInput
  """
  Filter by the related Variant objects
  """
  variants: VariantCollectionFilterInput
  """
  Filter by the given description
  """
  description: StringFilterInput
  """
  Filter by the given price
  """
  price: DecimalFilterInput
  """
  Filter by the given createdAt
  """
  createdAt: TimestampFilterInput
}

"""
Input type to select a unique Product
"""
input ProductLookupInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Select by the 'id' field
  """
  id: UUID
  """
  Select by the 'sku' field
  """
  sku: String
  """
  Select by the 'slug' field
  """
  slug: String
}

"""
Lookup input type for Product objects for subgraph joins.
"""
input ProductManyLookupInput @oneOf @inaccessible @join__type(graph: PRODUCTS) {
  """
  Select by the 'id' field
  """
  id: [UUID!] @inaccessible
  """
  Select by the 'sku' field
  """
  sku: [String!] @inaccessible
  """
  Select by the 'slug' field
  """
  slug: [String!] @inaccessible
}

"""
Specifies the ordering for Product results.
"""
input ProductOrderByInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Order products by name
  """
  name: OrderDirection
  """
  Order products by id
  """
  id: OrderDirection
  """
  Order products by sku
  """
  sku: OrderDirection
  """
  Order products by updatedAt
  """
  updatedAt: OrderDirection
  """
  Order products by slug
  """
  slug: OrderDirection
  """
  Order products by description
  """
  description: OrderDirection
  """
  Order products by price
  """
  price: OrderDirection
  """
  Order products by createdAt
  """
  createdAt: OrderDirection
}

"""
Input for creating a new Product
"""
input ProductsProductCreateInput @join__type(graph: PRODUCTS) {
  """
  Set field value for name
  """
  name: String!
  """
  Set field value for id
  """
  id: UUID
  """
  Set field value for sku
  """
  sku: String!
  """
  Set field value for updatedAt
  """
  updatedAt: Timestamp
  """
  Set field value for slug
  """
  slug: String!
  """
  Set field value for description
  """
  description: String
  """
  Set field value for price
  """
  price: Decimal!
  """
  Set field value for createdAt
  """
  createdAt: Timestamp
}

"""
Input for updating an existing Product
"""
input ProductsProductUpdateInput @join__type(graph: PRODUCTS) {
  """
  Update field value for name
  """
  name: StringUpdateInput
  """
  Update field value for id
  """
  id: UUIDUpdateInput
  """
  Update field value for sku
  """
  sku: StringUpdateInput
  """
  Update field value for updatedAt
  """
  updatedAt: TimestampUpdateInput
  """
  Update field value for slug
  """
  slug: StringUpdateInput
  """
  Update field value for description
  """
  description: StringUpdateInput
  """
  Update field value for price
  """
  price: DecimalUpdateInput
  """
  Update field value for createdAt
  """
  createdAt: TimestampUpdateInput
}

"""
Input for creating a new Variant
"""
input ProductsVariantCreateInput @join__type(graph: PRODUCTS) {
  """
  Set field value for name
  """
  name: String
  """
  Set field value for id
  """
  id: UUID
  """
  Set field value for sku
  """
  sku: String!
  """
  Set field value for updatedAt
  """
  updatedAt: Timestamp
  """
  Set field value for price
  """
  price: Money
  """
  Set field value for createdAt
  """
  createdAt: Timestamp
  """
  Set field value for productId
  """
  productId: UUID!
}

"""
Input for updating an existing Variant
"""
input ProductsVariantUpdateInput @join__type(graph: PRODUCTS) {
  """
  Update field value for name
  """
  name: StringUpdateInput
  """
  Update field value for id
  """
  id: UUIDUpdateInput
  """
  Update field value for sku
  """
  sku: StringUpdateInput
  """
  Update field value for updatedAt
  """
  updatedAt: TimestampUpdateInput
  """
  Update field value for price
  """
  price: MoneyUpdateInput
  """
  Update field value for createdAt
  """
  createdAt: TimestampUpdateInput
  """
  Update field value for productId
  """
  productId: UUIDUpdateInput
}

"""
Filter input type for Variant collections
"""
input VariantCollectionFilterInput @join__type(graph: PRODUCTS) {
  """
  The object is related to an object with the given fields
  """
  contains: VariantFilterInput
}

"""
Filter input type for Variant objects.
"""
input VariantFilterInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Filter by the given name
  """
  name: StringFilterInput
  """
  Filter by the given id
  """
  id: UUIDFilterInput
  """
  Filter by the given sku
  """
  sku: StringFilterInput
  """
  Filter by the given updatedAt
  """
  updatedAt: TimestampFilterInput
  """
  All of the filters must match
  """
  ALL: [VariantFilterInput]
  """
  None of the filters must match
  """
  NONE: [VariantFilterInput]
  """
  At least one of the filters must match
  """
  ANY: [VariantFilterInput]
  """
  Filter by the given price
  """
  price: MoneyFilterInput
  """
  Filter by the given createdAt
  """
  createdAt: TimestampFilterInput
  """
  Filter by the given productId
  """
  productId: UUIDFilterInput
  """
  Filter by the related Product object
  """
  product: ProductFilterInput
}

"""
Input type to select a unique Variant
"""
input VariantLookupInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Select by the 'id' field
  """
  id: UUID
  """
  Select by the 'sku' field
  """
  sku: String
}

"""
Lookup input type for Variant objects for subgraph joins.
"""
input VariantManyLookupInput @oneOf @inaccessible @join__type(graph: PRODUCTS) {
  """
  Select by the 'id' field
  """
  id: [UUID!] @inaccessible
  """
  Select by the 'sku' field
  """
  sku: [String!] @inaccessible
}

"""
Specifies the ordering for Variant results.
"""
input VariantOrderByInput @oneOf @join__type(graph: PRODUCTS) {
  """
  Order variants by name
  """
  name: OrderDirection
  """
  Order variants by id
  """
  id: OrderDirection
  """
  Order variants by sku
  """
  sku: OrderDirection
  """
  Order variants by updatedAt
  """
  updatedAt: OrderDirection
  """
  Order variants by price
  """
  price: OrderDirection
  """
  Order variants by createdAt
  """
  createdAt: OrderDirection
  """
  Order variants by productId
  """
  productId: OrderDirection
  """
  Order Variant results by Product fields
  """
  product: ProductOrderByInput
}
