/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  mutation CommentAdd($content: String!, $authorId: ID!, $itemId: ID!) {\n    commentCreate(\n      input: {\n        content: $content\n        author: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      comment {\n        __typename\n      }\n    }\n  }\n": types.CommentAddDocument,
    "\n  mutation ItemCommentDelete($id: ID!) {\n    commentDelete(by: { id: $id }) {\n      deletedId\n    }\n  }\n": types.ItemCommentDeleteDocument,
    "\n  mutation ItemVote($vote: Boolean!, $authorId: ID!, $itemId: ID!) {\n    voteCreate(\n      input: {\n        positive: $vote\n        user: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      vote {\n        __typename\n      }\n    }\n  }\n": types.ItemVoteDocument,
    "\n  mutation ItemVoteUpdate($id: ID!, $vote: Boolean!) {\n    voteUpdate(by: { id: $id }, input: { positive: $vote }) {\n      vote {\n        __typename\n      }\n    }\n  }\n": types.ItemVoteUpdateDocument,
    "\n  query Viewer($email: Email!) {\n    user(by: { email: $email }) {\n      id\n      name\n      email\n      imageUrl\n      createdAt\n      items(first: 3) {\n        edges {\n          __typename\n        }\n      }\n    }\n  }\n": types.ViewerDocument,
    "\n  mutation UserCreateLogin($name: String!, $email: Email!, $imageUrl: String!) {\n    userCreate(input: { name: $name, email: $email, imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n": types.UserCreateLoginDocument,
    "\n  mutation UserUpdateLogin($id: ID!, $imageUrl: String!) {\n    userUpdate(by: { id: $id }, input: { imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n": types.UserUpdateLoginDocument,
    "\n  query ItemsList($after: String) {\n    itemCollection(first: 4, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          title\n          comments(first: 100) {\n            edges {\n              node {\n                __typename\n              }\n            }\n          }\n          votes(first: 100) {\n            edges {\n              node {\n                id\n                positive\n                user {\n                  id\n                }\n              }\n            }\n          }\n          author {\n            id\n            name\n            imageUrl\n          }\n          url\n          createdAt\n        }\n      }\n    }\n  }\n": types.ItemsListDocument,
    "\n  query ItemOne($id: ID!, $afterComments: String) {\n    item(by: { id: $id }) {\n      id\n      title\n      comments(first: 6, after: $afterComments) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        edges {\n          node {\n            id\n            content\n            createdAt\n            author {\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n      votes(first: 100) {\n        edges {\n          node {\n            id\n            positive\n            user {\n              id\n            }\n          }\n        }\n      }\n      author {\n        id\n        name\n        imageUrl\n      }\n      url\n      createdAt\n    }\n  }\n": types.ItemOneDocument,
    "\n  mutation ItemOneDelete($id: ID!) {\n    itemDelete(by: { id: $id }) {\n      deletedId\n    }\n  }\n": types.ItemOneDeleteDocument,
    "\n  mutation Item($title: String!, $url: URL!, $authorId: ID!) {\n    itemCreate(\n      input: { title: $title, url: $url, author: { link: $authorId } }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n": types.ItemDocument,
    "\n  query UsersList($after: String) {\n    userCollection(first: 10, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          name\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n": types.UsersListDocument,
};

export function graphql(source: "\n  mutation CommentAdd($content: String!, $authorId: ID!, $itemId: ID!) {\n    commentCreate(\n      input: {\n        content: $content\n        author: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      comment {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CommentAdd($content: String!, $authorId: ID!, $itemId: ID!) {\n    commentCreate(\n      input: {\n        content: $content\n        author: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      comment {\n        __typename\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemCommentDelete($id: ID!) {\n    commentDelete(by: { id: $id }) {\n      deletedId\n    }\n  }\n"): (typeof documents)["\n  mutation ItemCommentDelete($id: ID!) {\n    commentDelete(by: { id: $id }) {\n      deletedId\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemVote($vote: Boolean!, $authorId: ID!, $itemId: ID!) {\n    voteCreate(\n      input: {\n        positive: $vote\n        user: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      vote {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ItemVote($vote: Boolean!, $authorId: ID!, $itemId: ID!) {\n    voteCreate(\n      input: {\n        positive: $vote\n        user: { link: $authorId }\n        item: { link: $itemId }\n      }\n    ) {\n      vote {\n        __typename\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemVoteUpdate($id: ID!, $vote: Boolean!) {\n    voteUpdate(by: { id: $id }, input: { positive: $vote }) {\n      vote {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ItemVoteUpdate($id: ID!, $vote: Boolean!) {\n    voteUpdate(by: { id: $id }, input: { positive: $vote }) {\n      vote {\n        __typename\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query Viewer($email: Email!) {\n    user(by: { email: $email }) {\n      id\n      name\n      email\n      imageUrl\n      createdAt\n      items(first: 3) {\n        edges {\n          __typename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Viewer($email: Email!) {\n    user(by: { email: $email }) {\n      id\n      name\n      email\n      imageUrl\n      createdAt\n      items(first: 3) {\n        edges {\n          __typename\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation UserCreateLogin($name: String!, $email: Email!, $imageUrl: String!) {\n    userCreate(input: { name: $name, email: $email, imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  mutation UserCreateLogin($name: String!, $email: Email!, $imageUrl: String!) {\n    userCreate(input: { name: $name, email: $email, imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n"];
export function graphql(source: "\n  mutation UserUpdateLogin($id: ID!, $imageUrl: String!) {\n    userUpdate(by: { id: $id }, input: { imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  mutation UserUpdateLogin($id: ID!, $imageUrl: String!) {\n    userUpdate(by: { id: $id }, input: { imageUrl: $imageUrl }) {\n      __typename\n    }\n  }\n"];
export function graphql(source: "\n  query ItemsList($after: String) {\n    itemCollection(first: 4, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          title\n          comments(first: 100) {\n            edges {\n              node {\n                __typename\n              }\n            }\n          }\n          votes(first: 100) {\n            edges {\n              node {\n                id\n                positive\n                user {\n                  id\n                }\n              }\n            }\n          }\n          author {\n            id\n            name\n            imageUrl\n          }\n          url\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ItemsList($after: String) {\n    itemCollection(first: 4, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          title\n          comments(first: 100) {\n            edges {\n              node {\n                __typename\n              }\n            }\n          }\n          votes(first: 100) {\n            edges {\n              node {\n                id\n                positive\n                user {\n                  id\n                }\n              }\n            }\n          }\n          author {\n            id\n            name\n            imageUrl\n          }\n          url\n          createdAt\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query ItemOne($id: ID!, $afterComments: String) {\n    item(by: { id: $id }) {\n      id\n      title\n      comments(first: 6, after: $afterComments) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        edges {\n          node {\n            id\n            content\n            createdAt\n            author {\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n      votes(first: 100) {\n        edges {\n          node {\n            id\n            positive\n            user {\n              id\n            }\n          }\n        }\n      }\n      author {\n        id\n        name\n        imageUrl\n      }\n      url\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query ItemOne($id: ID!, $afterComments: String) {\n    item(by: { id: $id }) {\n      id\n      title\n      comments(first: 6, after: $afterComments) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        edges {\n          node {\n            id\n            content\n            createdAt\n            author {\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n      votes(first: 100) {\n        edges {\n          node {\n            id\n            positive\n            user {\n              id\n            }\n          }\n        }\n      }\n      author {\n        id\n        name\n        imageUrl\n      }\n      url\n      createdAt\n    }\n  }\n"];
export function graphql(source: "\n  mutation ItemOneDelete($id: ID!) {\n    itemDelete(by: { id: $id }) {\n      deletedId\n    }\n  }\n"): (typeof documents)["\n  mutation ItemOneDelete($id: ID!) {\n    itemDelete(by: { id: $id }) {\n      deletedId\n    }\n  }\n"];
export function graphql(source: "\n  mutation Item($title: String!, $url: URL!, $authorId: ID!) {\n    itemCreate(\n      input: { title: $title, url: $url, author: { link: $authorId } }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Item($title: String!, $url: URL!, $authorId: ID!) {\n    itemCreate(\n      input: { title: $title, url: $url, author: { link: $authorId } }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query UsersList($after: String) {\n    userCollection(first: 10, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          name\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersList($after: String) {\n    userCollection(first: 10, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          name\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;