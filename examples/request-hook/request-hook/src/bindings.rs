// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod component {
    #[allow(dead_code)]
    pub mod grafbase {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Error thrown when accessing the headers. Headers names or values
            /// must not contain any special characters.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum HeaderError {
                /// the given header value is not valid
                InvalidHeaderValue,
                /// the given header name is not valid
                InvalidHeaderName,
            }
            impl HeaderError {
                pub fn name(&self) -> &'static str {
                    match self {
                        HeaderError::InvalidHeaderValue => "invalid-header-value",
                        HeaderError::InvalidHeaderName => "invalid-header-name",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        HeaderError::InvalidHeaderValue => "the given header value is not valid",
                        HeaderError::InvalidHeaderName => "the given header name is not valid",
                    }
                }
            }
            impl ::core::fmt::Debug for HeaderError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("HeaderError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for HeaderError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for HeaderError {}

            impl HeaderError {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> HeaderError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => HeaderError::InvalidHeaderValue,
                        1 => HeaderError::InvalidHeaderName,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Error variant sent if failing to write to access log.
            #[derive(Clone)]
            pub enum LogError {
                /// The log channel is over capacity. The data is returned to the caller.
                ChannelFull(_rt::Vec<u8>),
                /// The channel is closed.
                ChannelClosed,
            }
            impl ::core::fmt::Debug for LogError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LogError::ChannelFull(e) => f.debug_tuple("LogError::ChannelFull").field(e).finish(),
                        LogError::ChannelClosed => f.debug_tuple("LogError::ChannelClosed").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for LogError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for LogError {}
            /// A context object is available in all hooks during the whole request
            /// lifecycle. It can be used to store custom data in one hook and make it
            /// available in the hooks executed later in the request.
            ///
            /// This resource provides mutable access to the context and is available only
            /// in the gateway request hook.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Context {
                handle: _rt::Resource<Context>,
            }

            impl Context {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Context {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]context"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// The context as a read-only object.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SharedContext {
                handle: _rt::Resource<SharedContext>,
            }

            impl SharedContext {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for SharedContext {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]shared-context"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Provides access to the request headers. Available in a mutable form
            /// only in the gateway request hook.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Headers {
                handle: _rt::Resource<Headers>,
            }

            impl Headers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Headers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]headers"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Cache status of a subgraph call.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum CacheStatus {
                /// All data fetched from cache.
                Hit,
                /// Some data fetched from cache.
                PartialHit,
                /// Cache miss
                Miss,
            }
            impl ::core::fmt::Debug for CacheStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        CacheStatus::Hit => f.debug_tuple("CacheStatus::Hit").finish(),
                        CacheStatus::PartialHit => f.debug_tuple("CacheStatus::PartialHit").finish(),
                        CacheStatus::Miss => f.debug_tuple("CacheStatus::Miss").finish(),
                    }
                }
            }

            impl CacheStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> CacheStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => CacheStatus::Hit,
                        1 => CacheStatus::PartialHit,
                        2 => CacheStatus::Miss,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// An error response can be used to inject an error to the GraphQL response.
            #[derive(Clone)]
            pub struct Error {
                /// The error message.
                pub message: _rt::String,
                /// Adds the given extensions to the response extensions. The first item in
                /// the tuple is the extension key, and the second item is the extension value.
                /// The extension value can be string-encoded JSON, which will be converted as
                /// JSON in the response. It can also be just a string, which will be converted as
                /// a JSON string in the response.
                pub extensions: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("message", &self.message)
                        .field("extensions", &self.extensions)
                        .finish()
                }
            }
            /// An HTTP error response.
            #[derive(Clone)]
            pub struct ErrorResponse {
                /// HTTP status code. Must be a valid status code. If not, the status code will be 500.
                pub status_code: u16,
                /// List of GraphQL errors.
                pub errors: _rt::Vec<Error>,
            }
            impl ::core::fmt::Debug for ErrorResponse {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ErrorResponse")
                        .field("status-code", &self.status_code)
                        .field("errors", &self.errors)
                        .finish()
                }
            }
            impl ::core::fmt::Display for ErrorResponse {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for ErrorResponse {}
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                /// Fetches a context value with the given name, if existing.
                pub fn get(&self, name: &str) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]context.get"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                /// Stores a context value with the given name.
                pub fn set(&self, name: &str, value: &str) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]context.set"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1.cast_mut(), len1);
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                /// Deletes a context value with the given name. Returns the value
                /// if existing.
                pub fn delete(&self, name: &str) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]context.delete"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SharedContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Fetches a context value with the given name, if existing.
                pub fn get(&self, name: &str) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]shared-context.get"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SharedContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Sends the data to the access log.
                pub fn log_access(&self, data: &[u8]) -> Result<(), LogError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]shared-context.log-access"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v7 = match l3 {
                                        0 => {
                                            let e7 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;

                                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                                            };
                                            LogError::ChannelFull(e7)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            LogError::ChannelClosed
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SharedContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current trace-id.
                pub fn trace_id(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]shared-context.trace-id"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Headers {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets a header value with the given name.
                pub fn get(&self, name: &str) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]headers.get"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Headers {
                #[allow(unused_unsafe, clippy::all)]
                /// Sets the header value with the given name. Returns an error if the given name
                /// is not a valid header name.
                pub fn set(&self, name: &str, value: &str) -> Result<(), HeaderError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]headers.set"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(1).cast::<u8>());

                                    HeaderError::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Headers {
                #[allow(unused_unsafe, clippy::all)]
                /// Deletes a header value with the given name.
                pub fn delete(&self, name: &str) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:grafbase/types")]
                        extern "C" {
                            #[link_name = "[method]headers.delete"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod component {
        #[allow(dead_code)]
        pub mod grafbase {
            #[allow(dead_code, clippy::all)]
            pub mod gateway_request {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Headers = super::super::super::super::component::grafbase::types::Headers;
                pub type ErrorResponse = super::super::super::super::component::grafbase::types::ErrorResponse;
                pub type Context = super::super::super::super::component::grafbase::types::Context;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_on_gateway_request_cabi<T: Guest>(arg0: i32, arg1: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::on_gateway_request(
                        super::super::super::super::component::grafbase::types::Context::from_handle(arg0 as u32),
                        super::super::super::super::component::grafbase::types::Headers::from_handle(arg1 as u32),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::component::grafbase::types::ErrorResponse {
                                status_code: status_code2,
                                errors: errors2,
                            } = e;
                            *ptr1.add(4).cast::<u16>() = (_rt::as_i32(status_code2)) as u16;
                            let vec9 = errors2;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(vec9.len() * 16, 4);
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9.add(i * 16);
                                {
                                    let super::super::super::super::component::grafbase::types::Error {
                                        message: message3,
                                        extensions: extensions3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(4).cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec8 = extensions3;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(vec8.len() * 16, 4);
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8.add(i * 16);
                                        {
                                            let (t5_0, t5_1) = e;
                                            let vec6 = (t5_0.into_bytes()).into_boxed_slice();
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            ::core::mem::forget(vec6);
                                            *base.add(4).cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = (t5_1.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base.add(12).cast::<usize>() = len7;
                                            *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len8;
                                    *base.add(8).cast::<*mut u8>() = result8;
                                }
                            }
                            *ptr1.add(12).cast::<usize>() = len9;
                            *ptr1.add(8).cast::<*mut u8>() = result9;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_on_gateway_request<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l10 = *arg0.add(8).cast::<*mut u8>();
                            let l11 = *arg0.add(12).cast::<usize>();
                            let base12 = l10;
                            let len12 = l11;
                            for i in 0..len12 {
                                let base = base12.add(i * 16);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l7 = *base.add(8).cast::<*mut u8>();
                                    let l8 = *base.add(12).cast::<usize>();
                                    let base9 = l7;
                                    let len9 = l8;
                                    for i in 0..len9 {
                                        let base = base9.add(i * 16);
                                        {
                                            let l3 = *base.add(0).cast::<*mut u8>();
                                            let l4 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l3, l4, 1);
                                            let l5 = *base.add(8).cast::<*mut u8>();
                                            let l6 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l5, l6, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base9, len9 * 16, 4);
                                }
                            }
                            _rt::cabi_dealloc(base12, len12 * 16, 4);
                        }
                    }
                }
                pub trait Guest {
                    /// The hook is called in the federated gateway just before authentication. It can be used
                    /// to read and modify the request headers. The context object is provided in a mutable form,
                    /// allowing storage for the subsequent hooks to read.
                    ///
                    /// If returning an error from the hook, the request processing is stopped and the given error
                    /// returned to the client.
                    fn on_gateway_request(context: Context, headers: Headers) -> Result<(), ErrorResponse>;
                }
                #[doc(hidden)]

                macro_rules! __export_component_grafbase_gateway_request_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "component:grafbase/gateway-request#on-gateway-request"]
          unsafe extern "C" fn export_on_gateway_request(arg0: i32,arg1: i32,) -> *mut u8 {
            $($path_to_types)*::_export_on_gateway_request_cabi::<$ty>(arg0, arg1)
          }
          #[export_name = "cabi_post_component:grafbase/gateway-request#on-gateway-request"]
          unsafe extern "C" fn _post_return_on_gateway_request(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_on_gateway_request::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_component_grafbase_gateway_request_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_hooks_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::grafbase::gateway_request::__export_component_grafbase_gateway_request_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::grafbase::gateway_request);
  )
}
#[doc(inline)]
pub(crate) use __export_hooks_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:hooks:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1877] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd9\x0d\x01A\x02\x01\
A\x07\x01B=\x01m\x02\x14invalid-header-value\x13invalid-header-name\x04\0\x0chea\
der-error\x03\0\0\x01p}\x01q\x02\x0cchannel-full\x01\x02\0\x0echannel-closed\0\0\
\x04\0\x09log-error\x03\0\x03\x04\0\x07context\x03\x01\x04\0\x0eshared-context\x03\
\x01\x04\0\x07headers\x03\x01\x01r\x02\x10parent-type-names\x0afield-names\x04\0\
\x0fedge-definition\x03\0\x08\x01r\x01\x09type-names\x04\0\x0fnode-definition\x03\
\0\x0a\x01p\x02\x01r\x04\x06methods\x03urls\x0bstatus-code{\x1don-operation-resp\
onse-outputs\x0c\x04\0\x15executed-http-request\x03\0\x0d\x01r\x02\x05countw\x0c\
data-is-null\x7f\x04\0\x0bfield-error\x03\0\x0f\x01r\x01\x05countw\x04\0\x0drequ\
est-error\x03\0\x11\x01q\x04\x07success\0\0\x0bfield-error\x01\x10\0\x0drequest-\
error\x01\x12\0\x0frefused-request\0\0\x04\0\x17graphql-response-status\x03\0\x13\
\x01ks\x01r\x07\x04name\x15\x08documents\x13prepare-duration-msw\x0bcached-plan\x7f\
\x0bduration-msw\x06status\x14\x1con-subgraph-response-outputs\x0c\x04\0\x12exec\
uted-operation\x03\0\x16\x01r\x03\x12connection-time-msw\x10response-time-msw\x0b\
status-code{\x04\0\x11subgraph-response\x03\0\x18\x01m\x03\x03hit\x0bpartial-hit\
\x04miss\x04\0\x0ccache-status\x03\0\x1a\x01q\x05\x15internal-server-error\0\0\x0a\
hook-error\0\0\x0drequest-error\0\0\x0crate-limited\0\0\x08response\x01\x19\0\x04\
\0\x1fsubgraph-request-execution-kind\x03\0\x1c\x01p\x1d\x01r\x07\x0dsubgraph-na\
mes\x06methods\x03urls\x0aexecutions\x1e\x0ccache-status\x1b\x11total-duration-m\
sw\x0ahas-errors\x7f\x04\0\x19executed-subgraph-request\x03\0\x1f\x01o\x02ss\x01\
p!\x01r\x02\x07messages\x0aextensions\"\x04\0\x05error\x03\0#\x01p$\x01r\x02\x0b\
status-code{\x06errors%\x04\0\x0eerror-response\x03\0&\x01h\x05\x01@\x02\x04self\
(\x04names\0\x15\x04\0\x13[method]context.get\x01)\x01@\x03\x04self(\x04names\x05\
values\x01\0\x04\0\x13[method]context.set\x01*\x04\0\x16[method]context.delete\x01\
)\x01h\x06\x01@\x02\x04self+\x04names\0\x15\x04\0\x1a[method]shared-context.get\x01\
,\x01j\0\x01\x04\x01@\x02\x04self+\x04data\x02\0-\x04\0![method]shared-context.l\
og-access\x01.\x01@\x01\x04self+\0s\x04\0\x1f[method]shared-context.trace-id\x01\
/\x01h\x07\x01@\x02\x04self0\x04names\0\x15\x04\0\x13[method]headers.get\x011\x01\
j\0\x01\x01\x01@\x03\x04self0\x04names\x05values\02\x04\0\x13[method]headers.set\
\x013\x04\0\x16[method]headers.delete\x011\x03\x01\x18component:grafbase/types\x05\
\0\x02\x03\0\0\x07headers\x02\x03\0\0\x0eerror-response\x02\x03\0\0\x07context\x01\
B\x0b\x02\x03\x02\x01\x01\x04\0\x07headers\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0e\
error-response\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x07context\x03\0\x04\x01i\x05\
\x01i\x01\x01j\0\x01\x03\x01@\x02\x07context\x06\x07headers\x07\0\x08\x04\0\x12o\
n-gateway-request\x01\x09\x04\x01\"component:grafbase/gateway-request\x05\x04\x04\
\x01\x18component:grafbase/hooks\x04\0\x0b\x0b\x01\0\x05hooks\x03\0\0\0G\x09prod\
ucers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x06\
0.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
