// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: products.proto

package products

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_GetProduct_FullMethodName         = "/products.ProductService/GetProduct"
	ProductService_BatchGetProducts_FullMethodName   = "/products.ProductService/BatchGetProducts"
	ProductService_GetProductParts_FullMethodName    = "/products.ProductService/GetProductParts"
	ProductService_GetProductsForPart_FullMethodName = "/products.ProductService/GetProductsForPart"
	ProductService_SearchProducts_FullMethodName     = "/products.ProductService/SearchProducts"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// Get a single product by ID
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	// Batch get products by IDs
	BatchGetProducts(ctx context.Context, in *BatchGetProductsRequest, opts ...grpc.CallOption) (*BatchGetProductsResponse, error)
	// Get all parts for a specific product with quantities
	GetProductParts(ctx context.Context, in *GetProductPartsRequest, opts ...grpc.CallOption) (*GetProductPartsResponse, error)
	// Get all products that use a specific part
	GetProductsForPart(ctx context.Context, in *GetProductsForPartRequest, opts ...grpc.CallOption) (*GetProductsForPartResponse, error)
	// Search products with optional filters
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) BatchGetProducts(ctx context.Context, in *BatchGetProductsRequest, opts ...grpc.CallOption) (*BatchGetProductsResponse, error) {
	out := new(BatchGetProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_BatchGetProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductParts(ctx context.Context, in *GetProductPartsRequest, opts ...grpc.CallOption) (*GetProductPartsResponse, error) {
	out := new(GetProductPartsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductParts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductsForPart(ctx context.Context, in *GetProductsForPartRequest, opts ...grpc.CallOption) (*GetProductsForPartResponse, error) {
	out := new(GetProductsForPartResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductsForPart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error) {
	out := new(SearchProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_SearchProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// Get a single product by ID
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	// Batch get products by IDs
	BatchGetProducts(context.Context, *BatchGetProductsRequest) (*BatchGetProductsResponse, error)
	// Get all parts for a specific product with quantities
	GetProductParts(context.Context, *GetProductPartsRequest) (*GetProductPartsResponse, error)
	// Get all products that use a specific part
	GetProductsForPart(context.Context, *GetProductsForPartRequest) (*GetProductsForPartResponse, error)
	// Search products with optional filters
	SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductServiceServer) BatchGetProducts(context.Context, *BatchGetProductsRequest) (*BatchGetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetProducts not implemented")
}
func (UnimplementedProductServiceServer) GetProductParts(context.Context, *GetProductPartsRequest) (*GetProductPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductParts not implemented")
}
func (UnimplementedProductServiceServer) GetProductsForPart(context.Context, *GetProductsForPartRequest) (*GetProductsForPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsForPart not implemented")
}
func (UnimplementedProductServiceServer) SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_BatchGetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).BatchGetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_BatchGetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).BatchGetProducts(ctx, req.(*BatchGetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductParts(ctx, req.(*GetProductPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductsForPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsForPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductsForPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductsForPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductsForPart(ctx, req.(*GetProductsForPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_SearchProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SearchProducts(ctx, req.(*SearchProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "BatchGetProducts",
			Handler:    _ProductService_BatchGetProducts_Handler,
		},
		{
			MethodName: "GetProductParts",
			Handler:    _ProductService_GetProductParts_Handler,
		},
		{
			MethodName: "GetProductsForPart",
			Handler:    _ProductService_GetProductsForPart_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _ProductService_SearchProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products.proto",
}
