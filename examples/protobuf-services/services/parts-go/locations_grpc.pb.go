// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: locations.proto

package locations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocationService_GetLocation_FullMethodName       = "/locations.LocationService/GetLocation"
	LocationService_BatchGetLocations_FullMethodName = "/locations.LocationService/BatchGetLocations"
	LocationService_SearchLocations_FullMethodName   = "/locations.LocationService/SearchLocations"
)

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	// Get a single location by ID
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	// Batch get locations by IDs
	BatchGetLocations(ctx context.Context, in *BatchGetLocationsRequest, opts ...grpc.CallOption) (*BatchGetLocationsResponse, error)
	// Search locations with optional filters
	SearchLocations(ctx context.Context, in *SearchLocationsRequest, opts ...grpc.CallOption) (*SearchLocationsResponse, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, LocationService_GetLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) BatchGetLocations(ctx context.Context, in *BatchGetLocationsRequest, opts ...grpc.CallOption) (*BatchGetLocationsResponse, error) {
	out := new(BatchGetLocationsResponse)
	err := c.cc.Invoke(ctx, LocationService_BatchGetLocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) SearchLocations(ctx context.Context, in *SearchLocationsRequest, opts ...grpc.CallOption) (*SearchLocationsResponse, error) {
	out := new(SearchLocationsResponse)
	err := c.cc.Invoke(ctx, LocationService_SearchLocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	// Get a single location by ID
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	// Batch get locations by IDs
	BatchGetLocations(context.Context, *BatchGetLocationsRequest) (*BatchGetLocationsResponse, error)
	// Search locations with optional filters
	SearchLocations(context.Context, *SearchLocationsRequest) (*SearchLocationsResponse, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedLocationServiceServer) BatchGetLocations(context.Context, *BatchGetLocationsRequest) (*BatchGetLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetLocations not implemented")
}
func (UnimplementedLocationServiceServer) SearchLocations(context.Context, *SearchLocationsRequest) (*SearchLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLocations not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_BatchGetLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).BatchGetLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_BatchGetLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).BatchGetLocations(ctx, req.(*BatchGetLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_SearchLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).SearchLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_SearchLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).SearchLocations(ctx, req.(*SearchLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "locations.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocation",
			Handler:    _LocationService_GetLocation_Handler,
		},
		{
			MethodName: "BatchGetLocations",
			Handler:    _LocationService_BatchGetLocations_Handler,
		},
		{
			MethodName: "SearchLocations",
			Handler:    _LocationService_SearchLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locations.proto",
}
