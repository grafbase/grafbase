// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: parts.proto

package parts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartService_GetPart_FullMethodName       = "/parts.PartService/GetPart"
	PartService_BatchGetParts_FullMethodName = "/parts.PartService/BatchGetParts"
	PartService_SearchParts_FullMethodName   = "/parts.PartService/SearchParts"
)

// PartServiceClient is the client API for PartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartServiceClient interface {
	// Get a single part by ID
	GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error)
	// Batch get parts by IDs
	BatchGetParts(ctx context.Context, in *BatchGetPartsRequest, opts ...grpc.CallOption) (*BatchGetPartsResponse, error)
	// Search parts with optional filters
	SearchParts(ctx context.Context, in *SearchPartsRequest, opts ...grpc.CallOption) (*SearchPartsResponse, error)
}

type partServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartServiceClient(cc grpc.ClientConnInterface) PartServiceClient {
	return &partServiceClient{cc}
}

func (c *partServiceClient) GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error) {
	out := new(GetPartResponse)
	err := c.cc.Invoke(ctx, PartService_GetPart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) BatchGetParts(ctx context.Context, in *BatchGetPartsRequest, opts ...grpc.CallOption) (*BatchGetPartsResponse, error) {
	out := new(BatchGetPartsResponse)
	err := c.cc.Invoke(ctx, PartService_BatchGetParts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) SearchParts(ctx context.Context, in *SearchPartsRequest, opts ...grpc.CallOption) (*SearchPartsResponse, error) {
	out := new(SearchPartsResponse)
	err := c.cc.Invoke(ctx, PartService_SearchParts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartServiceServer is the server API for PartService service.
// All implementations must embed UnimplementedPartServiceServer
// for forward compatibility
type PartServiceServer interface {
	// Get a single part by ID
	GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error)
	// Batch get parts by IDs
	BatchGetParts(context.Context, *BatchGetPartsRequest) (*BatchGetPartsResponse, error)
	// Search parts with optional filters
	SearchParts(context.Context, *SearchPartsRequest) (*SearchPartsResponse, error)
	mustEmbedUnimplementedPartServiceServer()
}

// UnimplementedPartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartServiceServer struct {
}

func (UnimplementedPartServiceServer) GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPart not implemented")
}
func (UnimplementedPartServiceServer) BatchGetParts(context.Context, *BatchGetPartsRequest) (*BatchGetPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetParts not implemented")
}
func (UnimplementedPartServiceServer) SearchParts(context.Context, *SearchPartsRequest) (*SearchPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchParts not implemented")
}
func (UnimplementedPartServiceServer) mustEmbedUnimplementedPartServiceServer() {}

// UnsafePartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartServiceServer will
// result in compilation errors.
type UnsafePartServiceServer interface {
	mustEmbedUnimplementedPartServiceServer()
}

func RegisterPartServiceServer(s grpc.ServiceRegistrar, srv PartServiceServer) {
	s.RegisterService(&PartService_ServiceDesc, srv)
}

func _PartService_GetPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).GetPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartService_GetPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).GetPart(ctx, req.(*GetPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_BatchGetParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).BatchGetParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartService_BatchGetParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).BatchGetParts(ctx, req.(*BatchGetPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_SearchParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).SearchParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartService_SearchParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).SearchParts(ctx, req.(*SearchPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartService_ServiceDesc is the grpc.ServiceDesc for PartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parts.PartService",
	HandlerType: (*PartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPart",
			Handler:    _PartService_GetPart_Handler,
		},
		{
			MethodName: "BatchGetParts",
			Handler:    _PartService_BatchGetParts_Handler,
		},
		{
			MethodName: "SearchParts",
			Handler:    _PartService_SearchParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parts.proto",
}
