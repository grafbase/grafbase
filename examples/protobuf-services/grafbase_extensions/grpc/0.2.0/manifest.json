{"manifest":"v1","id":{"name":"grpc","version":"0.2.0"},"type":{"Resolver":{"directives":["grpcMethod"]}},"sdk_version":"0.17.4","minimum_gateway_version":"0.42.0","description":"Integrate the Grafbase Gateway with your gRPC services declaratively.","sdl":"\"\"\"\nA method in a GRPC service.\n\"\"\"\ndirective @grpcMethod(\n  \"\"\"\n  The service the method belongs to. Services are defined with @protoServices and configured in gateway configuration.\n  \"\"\"\n  service: String!\n  \"\"\"\n  The name of the GRPC method.\n  \"\"\"\n  method: String!\n) on FIELD_DEFINITION\n\n\"\"\"\nDefines protocol buffer services.\n\"\"\"\ndirective @protoServices(definitions: [ProtoServiceDefinition!]!) on SCHEMA\n\ninput ProtoServiceDefinition {\n  \"\"\"\n  The name of the service.\n  \"\"\"\n  name: String!\n  \"\"\"\n  The service's methods.\n  \"\"\"\n  methods: [ProtoMethodDefinition!]!\n}\n\ninput ProtoMethodDefinition {\n  \"\"\"\n  The name of the method.\n  \"\"\"\n  name: String!\n  \"\"\"\n  The method's input type.\n  \"\"\"\n  inputType: String!\n  \"\"\"\n  The method's output type.\n  \"\"\"\n  outputType: String!\n  \"\"\"\n  Whether the method is server streaming. Server streaming methods can only be used in subscriptions.\n  \"\"\"\n  serverStreaming: Boolean\n}\n\n\"\"\"\nDefines protocol buffer messages.\n\"\"\"\ndirective @protoMessages(definitions: [ProtoMessageDefinition!]!) on SCHEMA\n\n\"\"\"\nA protocol buffers message. See @protoMessages.\n\"\"\"\ninput ProtoMessageDefinition {\n  \"\"\"\n  The name of the message.\n  \"\"\"\n  name: String!\n  \"\"\"\n  The message's fields.\n  \"\"\"\n  fields: [ProtoFieldDefinition!]!\n}\n\n\"\"\"\nA field in a protocol buffers message. See @protoMessages.\n\"\"\"\ninput ProtoFieldDefinition {\n  \"\"\"\n  The field's name.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The field's number.\n  \"\"\"\n  number: Int!\n\n  \"\"\"\n  Whether the field is repeated.\n  \"\"\"\n  repeated: Boolean\n\n  \"\"\"\n  The protocol buffer type of the field.\n  \"\"\"\n  type: String!\n}\n\ndirective @protoEnums(definitions: [ProtoEnumDefinition!]!) on SCHEMA\n\ninput ProtoEnumDefinition {\n  \"\"\"\n  The name of the enum.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The enum's values.\n  \"\"\"\n  values: [ProtoEnumValueDefinition!]!\n}\n\ndirective @protoEnumValues(definitions: [ProtoEnumValueDefinition!]!) on SCHEMA\n\ninput ProtoEnumValueDefinition {\n  \"\"\"\n  The name of the enum value.\n  \"\"\"\n  name: String!\n\n  \"\"\"\n  The enum value's number.\n  \"\"\"\n  number: Int!\n}\n","readme":"# gRPC extension\n\nThis extension allows exposing gRPC services as part of your federated GraphQL API. The extension assumes protocol buffer payloads for the communication between the Gateway and the gRPC services.\n\nThe core directive is `@grpcMethod`. It can be used on any output field, like so:\n\n```graphql\ntype Query {\n  getFeature(input: PointInput!): Feature\n    @grpcMethod(service: \"routeguide.RouteGuide\", method: \"GetFeature\")\n}\n```\n\nIt takes the following arguments:\n\n- `service`: The name of the gRPC service.\n- `method`: The name of the gRPC method.\n- `input`: The input type of the gRPC method. It can be `\"*\"` to use the whole input, or a specific transformation. See the docs for [InputValueSet](https://grafbase.com/docs/reference/extensions/grafbase-spec/v1.0#inputvalueset). It defaults to `\"*\"`.\n\nThe service must also be defined on a schema definition, along with the required types:\n\n```graphql\nextend schema\n  @link(url: \"https://grafbase.com/extensions/grpc/0.2.0\", import: [\"@grpcMethod\", \"@protoMessages\", \"@protoServices\"])\n  @protoMessages(definitions: [\n    {\n      name: \"Point\"\n      fields: [\n        { name: \"latitude\", type: \"int32\", number: 1 }\n        { name: \"longitude\", type: \"int32\", number: 2 }\n      ]\n    },\n    {\n      name: \"Feature\"\n      fields: [\n        { name: \"name\", type: \"string\", number: 1 }\n        { name: \"location\", type: \"Point\", number: 2 }\n      ]\n    }\n  ])\n  @protoServices(definitions: [\n    {\n      name: \"routeguide.RouteGuide\"\n      methods: [\n        { name: \"GetFeature\", inputType: \"Point\", outputType: \"Feature\" }\n      ]\n    }}\n  ])\n```\n\nAs you can imagine, these definitions can get verbose over time. See the following section for the recommended approach to generating them.\n\nOnce your services are defined in your GraphQL schema, you must define how to connect to them in your Gateway configuration file. For example:\n\n```toml\n[[extensions.grpc.config.services]]\nname = \"routeguide.RouteGuide\"\naddress = \"http://routeguide.mydomain.local\"\n\n[[extensions.grpc.config.services]]\nname = \"internal.Pricing\"\naddress = \"{{ env.PRICING_SERVICE_URL }}\"\n```\n\n## Generation of virtual subgraph schemas from Protobuf definitions\n\nThere is a companion tool to this extension, that can generate a subgraph schema for your gRPC services from the protocol buffer definitions: [protoc-gen-grafbase-subgraph](https://github.com/grafbase/grafbase/tree/main/crates/protoc-gen-grafbase-subgraph). See its [README](https://github.com/grafbase/grafbase/tree/main/crates/protoc-gen-grafbase-subgraph/README.md) for instructions on using it with `protoc` and `buf`.\n\n## Conventions\n\nThe conversion between JSON and protobuf types follows the conventions defined in the [ProtoJSON format](https://protobuf.dev/programming-guides/json/) documentation.\n\n## Features\n\n- Server streaming for methods on subscription fields.\n- Client streaming methods are supported, but only one message can be sent. Please reach out if you are interested in more extensive support.\n- Well-known types support, with the ProtoJSON mapping:\n  - [x] Value types (`BoolValue`, `BytesValue`, etc.)\n  - [x] `Duration`\n  - [x] `Empty`\n  - [x] `FieldMask`\n  - [ ] `Struct`, `ListValue`, `Value`...\n  - [ ] `Any`\n  - [ ] Reflection\n","repository_url":"https://github.com/grafbase/extensions/tree/main/extensions/grpc","license":"Apache-2.0","permissions":["network"]}