syntax = "proto3";

package parts;

import "grafbase/options.proto";

option go_package = "github.com/grafbase/grafbase/examples/grpc-composite-schemas/parts";

// Part represents a component part in the system
message Part {
  option (grafbase.graphql.key) = { fields: "id" };
  option (grafbase.graphql.key) = { fields: "part_number" };
  option (grafbase.graphql.derive_field) = {entity: "locations_Location", name: "warehouse", is: "{ id: warehouse_id }"};

  string id = 1;
  string part_number = 2;
  string name = 3;
  string description = 4;
  double cost = 5;
  string supplier = 6;
  string warehouse_id = 7;
  int32 quantity_available = 8;
  string category = 9;
  bool is_critical = 10;
}

// Request message for getting a single part
message GetPartRequest {
  string id = 1;
}

// Response message for getting a single part
message GetPartResponse {
  Part part = 1;
}

// Request message for batch getting parts
message BatchGetPartsRequest {
  repeated string ids = 1;
}

// Response message for batch getting parts
message BatchGetPartsResponse {
  repeated Part parts = 1;
}

// Request message for searching parts with filters
message SearchPartsRequest {
  // Filter by name (partial match)
  string name = 1;
  // Filter by category
  string category = 2;
  // Filter by supplier
  string supplier = 3;
  // Filter by warehouse ID
  string warehouse_id = 4;
  // Filter by minimum quantity available
  int32 min_quantity = 5;
  // Filter by is_critical flag
  bool is_critical = 6;
  // Filter by minimum cost
  double min_cost = 7;
  // Filter by maximum cost
  double max_cost = 8;
  // Filter by part number (partial match)
  string part_number = 9;
}

// Response message for searching parts
message SearchPartsResponse {
  repeated Part parts = 1;
}

// PartService provides operations for managing parts
service PartService {
  option (grafbase.graphql.default_to_query_fields) = true;
  option (grafbase.graphql.subgraph_name) = "parts";

  // Get a single part by ID
  rpc GetPart(GetPartRequest) returns (GetPartResponse);

  // Batch get parts by IDs
  rpc BatchGetParts(BatchGetPartsRequest) returns (BatchGetPartsResponse) {
      option (grafbase.graphql.lookup) = {};
      option (grafbase.graphql.argument_is) = "{ ids: [id] }";
  }

  // Search parts with optional filters
  rpc SearchParts(SearchPartsRequest) returns (SearchPartsResponse);
}
