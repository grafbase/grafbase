extend schema
  @link(url: "https://grafbase.com/extensions/grpc/0.2.0", import: ["@protoServices", "@protoEnums", "@protoMessages", "@grpcMethod"])
  @link(url: "https://specs.grafbase.com/composite-schemas/v1", import: ["@key", "@derive", "@is", "@lookup", "@require"])
  @protoServices(
    definitions: [
      {
        name: "products.ProductService"
        methods: [
          {
            name: "GetProduct"
            inputType: ".products.GetProductRequest"
            outputType: ".products.GetProductResponse"
          }
          {
            name: "BatchGetProducts"
            inputType: ".products.BatchGetProductsRequest"
            outputType: ".products.BatchGetProductsResponse"
          }
          {
            name: "GetProductParts"
            inputType: ".products.GetProductPartsRequest"
            outputType: ".products.GetProductPartsResponse"
          }
          {
            name: "GetProductsForPart"
            inputType: ".products.GetProductsForPartRequest"
            outputType: ".products.GetProductsForPartResponse"
          }
          {
            name: "SearchProducts"
            inputType: ".products.SearchProductsRequest"
            outputType: ".products.SearchProductsResponse"
          }
        ]
      }
    ]
  )
  @protoMessages(
    definitions: [
      {
        name: ".products.Product"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "sku"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "name"
            number: 3
            repeated: false
            type: "string"
          }
          {
            name: "description"
            number: 4
            repeated: false
            type: "string"
          }
          {
            name: "price"
            number: 5
            repeated: false
            type: "double"
          }
          {
            name: "warehouse_id"
            number: 6
            repeated: false
            type: "string"
          }
          {
            name: "quantity_in_stock"
            number: 7
            repeated: false
            type: "int32"
          }
          {
            name: "category"
            number: 8
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".products.ProductPart"
        fields: [
          {
            name: "product_id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "part_id"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "quantity_required"
            number: 3
            repeated: false
            type: "int32"
          }
        ]
      }
      {
        name: ".products.GetProductRequest"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".products.GetProductResponse"
        fields: [
          {
            name: "product"
            number: 1
            repeated: false
            type: ".products.Product"
          }
        ]
      }
      {
        name: ".products.BatchGetProductsRequest"
        fields: [
          {
            name: "ids"
            number: 1
            repeated: true
            type: "string"
          }
        ]
      }
      {
        name: ".products.BatchGetProductsResponse"
        fields: [
          {
            name: "products"
            number: 1
            repeated: true
            type: ".products.Product"
          }
        ]
      }
      {
        name: ".products.GetProductPartsRequest"
        fields: [
          {
            name: "product_id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".products.GetProductPartsResponse"
        fields: [
          {
            name: "product_parts"
            number: 1
            repeated: true
            type: ".products.ProductPart"
          }
        ]
      }
      {
        name: ".products.GetProductsForPartRequest"
        fields: [
          {
            name: "part_id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".products.GetProductsForPartResponse"
        fields: [
          {
            name: "product_parts"
            number: 1
            repeated: true
            type: ".products.ProductPart"
          }
        ]
      }
      {
        name: ".products.SearchProductsRequest"
        fields: [
          {
            name: "name"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "category"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "min_price"
            number: 3
            repeated: false
            type: "double"
          }
          {
            name: "max_price"
            number: 4
            repeated: false
            type: "double"
          }
          {
            name: "warehouse_id"
            number: 5
            repeated: false
            type: "string"
          }
          {
            name: "min_quantity"
            number: 6
            repeated: false
            type: "int32"
          }
          {
            name: "sku"
            number: 7
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".products.SearchProductsResponse"
        fields: [
          {
            name: "products"
            number: 1
            repeated: true
            type: ".products.Product"
          }
        ]
      }
    ]
  )

type Query {
"""
Get a single product by ID
"""
  products_ProductService_GetProduct(input: products_GetProductRequestInput): products_GetProductResponse @grpcMethod(service: "products.ProductService", method: "GetProduct")
"""
Batch get products by IDs
"""
  products_ProductService_BatchGetProducts(input: products_BatchGetProductsRequestInput @is(field: "{ ids: [id] }")): products_BatchGetProductsResponse @grpcMethod(service: "products.ProductService", method: "BatchGetProducts") @lookup
"""
Get all parts for a specific product with quantities
"""
  products_ProductService_GetProductParts(input: products_GetProductPartsRequestInput): products_GetProductPartsResponse @grpcMethod(service: "products.ProductService", method: "GetProductParts")
"""
Get all products that use a specific part
"""
  products_ProductService_GetProductsForPart(input: products_GetProductsForPartRequestInput): products_GetProductsForPartResponse @grpcMethod(service: "products.ProductService", method: "GetProductsForPart")
"""
Search products with optional filters
"""
  products_ProductService_SearchProducts(input: products_SearchProductsRequestInput): products_SearchProductsResponse @grpcMethod(service: "products.ProductService", method: "SearchProducts")
}

"64 bit signed integer" scalar I64
"64 bit unsigned integer" scalar U64

"""
Request message for getting a single product
"""
input products_GetProductRequestInput {
  id: String
}

"""
Request message for batch getting products
"""
input products_BatchGetProductsRequestInput {
  ids: [String!]
}

"""
Request message for getting parts for a product
"""
input products_GetProductPartsRequestInput {
  product_id: String
}

"""
Request message for getting products that use a part
"""
input products_GetProductsForPartRequestInput {
  part_id: String
}

"""
Request message for searching products with filters
"""
input products_SearchProductsRequestInput {
"""
Filter by name (partial match)
"""
  name: String
"""
Filter by category
"""
  category: String
"""
Filter by minimum price
"""
  min_price: Float
"""
Filter by maximum price
"""
  max_price: Float
"""
Filter by warehouse ID
"""
  warehouse_id: String
"""
Filter by minimum quantity in stock
"""
  min_quantity: Int
"""
Filter by SKU (partial match)
"""
  sku: String
}

type products_Product @key(fields: "id") @key(fields: "sku") {
  id: String!
  sku: String!
  name: String!
  description: String!
  price: Float!
  warehouse_id: String!
  quantity_in_stock: Int!
  category: String!
  warehouse: locations_Location @derive @is(field: "{ id: warehouse_id }")
  parts(input: products_GetProductPartsRequestInput @require(field: "{ product_id: id }")): products_GetProductPartsResponse @grpcMethod(service: "products.ProductService", method: "GetProductParts")
}

"""
ProductPart represents the relationship between a product and a part
 with the quantity of parts needed to build one unit of the product
"""
type products_ProductPart @key(fields: "product_id part_id") {
  product_id: String!
  part_id: String!
"""
How many units of this part are needed per product
"""
  quantity_required: Int!
  product: products_Product @derive @is(field: "{ id: product_id }")
  part: parts_Part @derive @is(field: "{ id: part_id }")
}

"""
Response message for getting a single product
"""
type products_GetProductResponse {
  product: products_Product
}

"""
Response message for batch getting products
"""
type products_BatchGetProductsResponse {
  products: [products_Product!]
}

"""
Response message for getting parts for a product
"""
type products_GetProductPartsResponse {
  product_parts: [products_ProductPart!]
}

"""
Response message for getting products that use a part
"""
type products_GetProductsForPartResponse {
  product_parts: [products_ProductPart!]
}

"""
Response message for searching products
"""
type products_SearchProductsResponse {
  products: [products_Product!]
}

type locations_Location @key(fields: "id") {
  id: String!
}

type parts_Part @key(fields: "id") {
  id: String!
}
