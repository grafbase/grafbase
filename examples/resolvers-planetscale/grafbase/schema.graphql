extend type Query {
  product(by: ProductByInput!): Product @resolver(name: "products/single")
  products(first: Int, last: Int, before: String, after: String): [Product]
    @resolver(name: "products/all")
}

extend type Mutation {
  productCreate(input: ProductCreateInput!): Product
    @resolver(name: "products/create")
  productUpdate(by: ProductByInput!, input: ProductUpdateInput!): Product
    @resolver(name: "products/update")
  productDelete(by: ProductByInput!): ProductDeletePayload
    @resolver(name: "products/delete")
}

type Product {
  id: ID!
  name: String!
  slug: String!
  price: Int!
  onSale: Boolean @default(value: false)
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductByInput {
  id: ID
  slug: String
}

input ProductCreateInput {
  name: String!
  slug: String!
  price: Int!
  onSale: Boolean = true
}

input ProductUpdateInput {
  name: String
  slug: String
  price: Int
  onSale: Boolean
}

type ProductDeletePayload {
  deleted: Boolean!
}
