// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package authorizationtypes represents the imported interface "grafbase:sdk/authorization-types".
//
// For a query like:
// ```graphql
// query { products { id name } }
// ```
// If `Product.name` is decorated with an authorization directive, then authorize-query
// will receive it
// as a query item with all the directive arguments that can be computed before execution.
// So InputValueSet but
// not FieldSet for example.
// If the directive also relies on response data, authorize-response will all `Product.name`
// fields in the response as response element items.
// `Product.name` itself will be a response element that will have a reference to
// the query element.
package authorizationtypes

import (
	sdkerror "example.com/grafbase-go-extension/grafbase/sdk/error"
	"example.com/grafbase-go-extension/grafbase/sdk/schema"
	"go.bytecodealliance.org/cm"
)

// Error represents the type alias "grafbase:sdk/authorization-types#error".
//
// See [sdkerror.Error] for more information.
type Error = sdkerror.Error

// DirectiveSite represents the type alias "grafbase:sdk/authorization-types#directive-site".
//
// See [schema.DirectiveSite] for more information.
type DirectiveSite = schema.DirectiveSite

// AuthorizationDecisionsDenySome represents the record "grafbase:sdk/authorization-types#authorization-decisions-deny-some".
//
//	record authorization-decisions-deny-some {
//		element-to-error: list<tuple<u32, u32>>,
//		errors: list<error>,
//	}
type AuthorizationDecisionsDenySome struct {
	_ cm.HostLayout `json:"-"`
	// For elements
	ElementToError cm.List[[2]uint32] `json:"element-to-error"`
	Errors         cm.List[Error]     `json:"errors"`
}

// AuthorizationDecisions represents the variant "grafbase:sdk/authorization-types#authorization-decisions".
//
//	variant authorization-decisions {
//		grant-all,
//		deny-all(error),
//		deny-some(authorization-decisions-deny-some),
//	}
type AuthorizationDecisions cm.Variant[uint8, ErrorShape, Error]

// AuthorizationDecisionsGrantAll returns a [AuthorizationDecisions] of case "grant-all".
func AuthorizationDecisionsGrantAll() AuthorizationDecisions {
	var data struct{}
	return cm.New[AuthorizationDecisions](0, data)
}

// GrantAll returns true if [AuthorizationDecisions] represents the variant case "grant-all".
func (self *AuthorizationDecisions) GrantAll() bool {
	return self.Tag() == 0
}

// AuthorizationDecisionsDenyAll returns a [AuthorizationDecisions] of case "deny-all".
func AuthorizationDecisionsDenyAll(data Error) AuthorizationDecisions {
	return cm.New[AuthorizationDecisions](1, data)
}

// DenyAll returns a non-nil *[Error] if [AuthorizationDecisions] represents the variant case "deny-all".
func (self *AuthorizationDecisions) DenyAll() *Error {
	return cm.Case[Error](self, 1)
}

// AuthorizationDecisionsDenySome_ returns a [AuthorizationDecisions] of case "deny-some".
func AuthorizationDecisionsDenySome_(data AuthorizationDecisionsDenySome) AuthorizationDecisions {
	return cm.New[AuthorizationDecisions](2, data)
}

// DenySome returns a non-nil *[AuthorizationDecisionsDenySome] if [AuthorizationDecisions] represents the variant case "deny-some".
func (self *AuthorizationDecisions) DenySome() *AuthorizationDecisionsDenySome {
	return cm.Case[AuthorizationDecisionsDenySome](self, 2)
}

var _AuthorizationDecisionsStrings = [3]string{
	"grant-all",
	"deny-all",
	"deny-some",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v AuthorizationDecisions) String() string {
	return _AuthorizationDecisionsStrings[v.Tag()]
}

// QueryElement represents the record "grafbase:sdk/authorization-types#query-element".
//
//	record query-element {
//		id: u32,
//		site: directive-site,
//		arguments: list<u8>,
//	}
type QueryElement struct {
	_ cm.HostLayout `json:"-"`
	// Unique id.
	ID uint32 `json:"id"`

	// the field or type on which the directive was applied
	Site DirectiveSite `json:"site"`

	// directive arguments encoded in CBOR.
	Arguments cm.List[uint8] `json:"arguments"`
}

// QueryElements represents the record "grafbase:sdk/authorization-types#query-elements".
//
// Elements in the query that require authorization
//
//	record query-elements {
//		directive-names: list<tuple<string, u32, u32>>,
//		elements: list<query-element>,
//	}
type QueryElements struct {
	_ cm.HostLayout `json:"-"`
	// Tuple of directive name and a range over the `elements` list it's associated with.
	DirectiveNames cm.List[cm.Tuple3[string, uint32, uint32]] `json:"directive-names"`

	// Represents an element of the query associated with the directive
	Elements cm.List[QueryElement] `json:"elements"`
}

// ResponseElement represents the record "grafbase:sdk/authorization-types#response-element".
//
//	record response-element {
//		query-element-id: u32,
//		items-range: tuple<u32, u32>,
//	}
type ResponseElement struct {
	_ cm.HostLayout `json:"-"`
	// Query element id this response element is associated with.
	QueryElementID uint32 `json:"query-element-id"`

	// Range of the items associated with this response element.
	ItemsRange [2]uint32 `json:"items-range"`
}

// ResponseElements represents the record "grafbase:sdk/authorization-types#response-elements".
//
//	record response-elements {
//		directive-names: list<tuple<string, u32, u32>>,
//		elements: list<response-element>,
//		items: list<list<u8>>,
//	}
type ResponseElements struct {
	_ cm.HostLayout `json:"-"`
	// Tuple of directive name and a range over the `elements` list it's associated with.
	DirectiveNames cm.List[cm.Tuple3[string, uint32, uint32]] `json:"directive-names"`

	// Represents an element of the response associated with the directive
	Elements cm.List[ResponseElement] `json:"elements"`

	// directive arguments which depend on the response encoded in CBOR for each response
	// item.
	Items cm.List[cm.List[uint8]] `json:"items"`
}
