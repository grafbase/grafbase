// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package token represents the imported interface "grafbase:sdk/token".
package token

import (
	"go.bytecodealliance.org/cm"
)

// Token represents the variant "grafbase:sdk/token#token".
//
// A token represents an authenticated user identity.
//
//	variant token {
//		anonymous,
//		bytes(list<u8>),
//	}
type Token cm.Variant[uint8, cm.List[uint8], cm.List[uint8]]

// TokenAnonymous returns a [Token] of case "anonymous".
//
// Anonymous user without any metadata.
func TokenAnonymous() Token {
	var data struct{}
	return cm.New[Token](0, data)
}

// Anonymous returns true if [Token] represents the variant case "anonymous".
func (self *Token) Anonymous() bool {
	return self.Tag() == 0
}

// TokenBytes returns a [Token] of case "bytes".
//
// The raw binary token data.
func TokenBytes(data cm.List[uint8]) Token {
	return cm.New[Token](1, data)
}

// Bytes returns a non-nil *[cm.List[uint8]] if [Token] represents the variant case "bytes".
func (self *Token) Bytes() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 1)
}

var _TokenStrings = [2]string{
	"anonymous",
	"bytes",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Token) String() string {
	return _TokenStrings[v.Tag()]
}
