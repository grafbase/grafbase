// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package schema represents the imported interface "grafbase:sdk/schema".
//
// Replicates the GraphQL type system:
// https://spec.graphql.org/October2021/#sec-Type-System
package schema

import (
	"go.bytecodealliance.org/cm"
)

// DefinitionID represents the u32 "grafbase:sdk/schema#definition-id".
//
// Unique identifier across all definitions in the schema
//
//	type definition-id = u32
type DefinitionID uint32

// RootTypes represents the record "grafbase:sdk/schema#root-types".
//
// GraphQL root types
//
//	record root-types {
//		query-id: option<definition-id>,
//		mutation-id: option<definition-id>,
//		subscription-id: option<definition-id>,
//	}
type RootTypes struct {
	_              cm.HostLayout           `json:"-"`
	QueryID        cm.Option[DefinitionID] `json:"query-id"`
	MutationID     cm.Option[DefinitionID] `json:"mutation-id"`
	SubscriptionID cm.Option[DefinitionID] `json:"subscription-id"`
}

// WrappingType represents the enum "grafbase:sdk/schema#wrapping-type".
//
//	enum wrapping-type {
//		non-null,
//		%list
//	}
type WrappingType uint8

const (
	WrappingTypeNonNull WrappingType = iota
	WrappingTypeList
)

var _WrappingTypeStrings = [2]string{
	"non-null",
	"list",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e WrappingType) String() string {
	return _WrappingTypeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e WrappingType) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *WrappingType) UnmarshalText(text []byte) error {
	return _WrappingTypeUnmarshalCase(e, text)
}

var _WrappingTypeUnmarshalCase = cm.CaseUnmarshaler[WrappingType](_WrappingTypeStrings[:])

// Ty represents the record "grafbase:sdk/schema#ty".
//
//	record ty {
//		wrapping: list<wrapping-type>,
//		definition-id: definition-id,
//	}
type Ty struct {
	_            cm.HostLayout         `json:"-"`
	Wrapping     cm.List[WrappingType] `json:"wrapping"`
	DefinitionID DefinitionID          `json:"definition-id"`
}

// Directive represents the record "grafbase:sdk/schema#directive".
//
//	record directive {
//		name: string,
//		arguments: list<u8>,
//	}
type Directive struct {
	_    cm.HostLayout `json:"-"`
	Name string        `json:"name"`

	// encoded in CBOR
	Arguments cm.List[uint8] `json:"arguments"`
}

// ScalarDefinition represents the record "grafbase:sdk/schema#scalar-definition".
//
//	record scalar-definition {
//		id: definition-id,
//		name: string,
//		specified-by-url: option<string>,
//		directives: list<directive>,
//	}
type ScalarDefinition struct {
	_              cm.HostLayout      `json:"-"`
	ID             DefinitionID       `json:"id"`
	Name           string             `json:"name"`
	SpecifiedByURL cm.Option[string]  `json:"specified-by-url"`
	Directives     cm.List[Directive] `json:"directives"`
}

// ObjectDefinition represents the record "grafbase:sdk/schema#object-definition".
//
//	record object-definition {
//		id: definition-id,
//		name: string,
//		interface-ids: list<definition-id>,
//		field-ids: list<definition-id>,
//		directives: list<directive>,
//	}
type ObjectDefinition struct {
	_            cm.HostLayout         `json:"-"`
	ID           DefinitionID          `json:"id"`
	Name         string                `json:"name"`
	InterfaceIds cm.List[DefinitionID] `json:"interface-ids"`
	FieldIds     cm.List[DefinitionID] `json:"field-ids"`
	Directives   cm.List[Directive]    `json:"directives"`
}

// InterfaceDefinition represents the record "grafbase:sdk/schema#interface-definition".
//
//	record interface-definition {
//		id: definition-id,
//		name: string,
//		interface-ids: list<definition-id>,
//		field-ids: list<definition-id>,
//		directives: list<directive>,
//	}
type InterfaceDefinition struct {
	_            cm.HostLayout         `json:"-"`
	ID           DefinitionID          `json:"id"`
	Name         string                `json:"name"`
	InterfaceIds cm.List[DefinitionID] `json:"interface-ids"`
	FieldIds     cm.List[DefinitionID] `json:"field-ids"`
	Directives   cm.List[Directive]    `json:"directives"`
}

// UnionDefinition represents the record "grafbase:sdk/schema#union-definition".
//
//	record union-definition {
//		id: definition-id,
//		name: string,
//		member-types: list<definition-id>,
//		directives: list<directive>,
//	}
type UnionDefinition struct {
	_           cm.HostLayout         `json:"-"`
	ID          DefinitionID          `json:"id"`
	Name        string                `json:"name"`
	MemberTypes cm.List[DefinitionID] `json:"member-types"`
	Directives  cm.List[Directive]    `json:"directives"`
}

// InputValueDefinition represents the record "grafbase:sdk/schema#input-value-definition".
//
//	record input-value-definition {
//		id: definition-id,
//		name: string,
//		ty: ty,
//		directives: list<directive>,
//	}
type InputValueDefinition struct {
	_          cm.HostLayout      `json:"-"`
	ID         DefinitionID       `json:"id"`
	Name       string             `json:"name"`
	Ty         Ty                 `json:"ty"`
	Directives cm.List[Directive] `json:"directives"`
}

// InputObjectDefinition represents the record "grafbase:sdk/schema#input-object-definition".
//
//	record input-object-definition {
//		id: definition-id,
//		name: string,
//		input-fields: list<input-value-definition>,
//		directives: list<directive>,
//	}
type InputObjectDefinition struct {
	_           cm.HostLayout                 `json:"-"`
	ID          DefinitionID                  `json:"id"`
	Name        string                        `json:"name"`
	InputFields cm.List[InputValueDefinition] `json:"input-fields"`
	Directives  cm.List[Directive]            `json:"directives"`
}

// FieldDefinition represents the record "grafbase:sdk/schema#field-definition".
//
//	record field-definition {
//		id: definition-id,
//		name: string,
//		ty: ty,
//		parent-type-id: definition-id,
//		arguments: list<input-value-definition>,
//		directives: list<directive>,
//	}
type FieldDefinition struct {
	_            cm.HostLayout                 `json:"-"`
	ID           DefinitionID                  `json:"id"`
	Name         string                        `json:"name"`
	Ty           Ty                            `json:"ty"`
	ParentTypeID DefinitionID                  `json:"parent-type-id"`
	Arguments    cm.List[InputValueDefinition] `json:"arguments"`
	Directives   cm.List[Directive]            `json:"directives"`
}

// EnumValue represents the record "grafbase:sdk/schema#enum-value".
//
//	record enum-value {
//		name: string,
//		directives: list<directive>,
//	}
type EnumValue struct {
	_          cm.HostLayout      `json:"-"`
	Name       string             `json:"name"`
	Directives cm.List[Directive] `json:"directives"`
}

// EnumDefinition represents the record "grafbase:sdk/schema#enum-definition".
//
//	record enum-definition {
//		id: definition-id,
//		name: string,
//		values: list<enum-value>,
//		directives: list<directive>,
//	}
type EnumDefinition struct {
	_          cm.HostLayout      `json:"-"`
	ID         DefinitionID       `json:"id"`
	Name       string             `json:"name"`
	Values     cm.List[EnumValue] `json:"values"`
	Directives cm.List[Directive] `json:"directives"`
}

// TypeDefinition represents the variant "grafbase:sdk/schema#type-definition".
//
//	variant type-definition {
//		scalar(scalar-definition),
//		object(object-definition),
//		%interface(interface-definition),
//		union(union-definition),
//		%enum(enum-definition),
//		input-object(input-object-definition),
//	}
type TypeDefinition cm.Variant[uint8, ObjectDefinitionShape, ObjectDefinition]

// TypeDefinitionScalar returns a [TypeDefinition] of case "scalar".
func TypeDefinitionScalar(data ScalarDefinition) TypeDefinition {
	return cm.New[TypeDefinition](0, data)
}

// Scalar returns a non-nil *[ScalarDefinition] if [TypeDefinition] represents the variant case "scalar".
func (self *TypeDefinition) Scalar() *ScalarDefinition {
	return cm.Case[ScalarDefinition](self, 0)
}

// TypeDefinitionObject returns a [TypeDefinition] of case "object".
func TypeDefinitionObject(data ObjectDefinition) TypeDefinition {
	return cm.New[TypeDefinition](1, data)
}

// Object returns a non-nil *[ObjectDefinition] if [TypeDefinition] represents the variant case "object".
func (self *TypeDefinition) Object() *ObjectDefinition {
	return cm.Case[ObjectDefinition](self, 1)
}

// TypeDefinitionInterface returns a [TypeDefinition] of case "interface".
func TypeDefinitionInterface(data InterfaceDefinition) TypeDefinition {
	return cm.New[TypeDefinition](2, data)
}

// Interface returns a non-nil *[InterfaceDefinition] if [TypeDefinition] represents the variant case "interface".
func (self *TypeDefinition) Interface() *InterfaceDefinition {
	return cm.Case[InterfaceDefinition](self, 2)
}

// TypeDefinitionUnion returns a [TypeDefinition] of case "union".
func TypeDefinitionUnion(data UnionDefinition) TypeDefinition {
	return cm.New[TypeDefinition](3, data)
}

// Union returns a non-nil *[UnionDefinition] if [TypeDefinition] represents the variant case "union".
func (self *TypeDefinition) Union() *UnionDefinition {
	return cm.Case[UnionDefinition](self, 3)
}

// TypeDefinitionEnum returns a [TypeDefinition] of case "enum".
func TypeDefinitionEnum(data EnumDefinition) TypeDefinition {
	return cm.New[TypeDefinition](4, data)
}

// Enum returns a non-nil *[EnumDefinition] if [TypeDefinition] represents the variant case "enum".
func (self *TypeDefinition) Enum() *EnumDefinition {
	return cm.Case[EnumDefinition](self, 4)
}

// TypeDefinitionInputObject returns a [TypeDefinition] of case "input-object".
func TypeDefinitionInputObject(data InputObjectDefinition) TypeDefinition {
	return cm.New[TypeDefinition](5, data)
}

// InputObject returns a non-nil *[InputObjectDefinition] if [TypeDefinition] represents the variant case "input-object".
func (self *TypeDefinition) InputObject() *InputObjectDefinition {
	return cm.Case[InputObjectDefinition](self, 5)
}

var _TypeDefinitionStrings = [6]string{
	"scalar",
	"object",
	"interface",
	"union",
	"enum",
	"input-object",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v TypeDefinition) String() string {
	return _TypeDefinitionStrings[v.Tag()]
}

// Schema represents the record "grafbase:sdk/schema#schema".
//
//	record schema {
//		type-definitions: list<type-definition>,
//		field-definitions: list<field-definition>,
//		directives: list<directive>,
//		root-types: root-types,
//	}
type Schema struct {
	_ cm.HostLayout `json:"-"`
	// The IDs and this list have no relationship. They're not indices within this list.
	TypeDefinitions  cm.List[TypeDefinition]  `json:"type-definitions"`
	FieldDefinitions cm.List[FieldDefinition] `json:"field-definitions"`
	Directives       cm.List[Directive]       `json:"directives"`
	RootTypes        RootTypes                `json:"root-types"`
}

// ObjectDirectiveSite represents the record "grafbase:sdk/schema#object-directive-site".
//
// Site for a directive applied on a OBJECT location
//
//	record object-directive-site {
//		object-name: string,
//	}
type ObjectDirectiveSite struct {
	_          cm.HostLayout `json:"-"`
	ObjectName string        `json:"object-name"`
}

// FieldDefinitionDirectiveSite represents the record "grafbase:sdk/schema#field-definition-directive-site".
//
// Site for a directive applied on a FIELD_DEFINITION location
//
//	record field-definition-directive-site {
//		parent-type-name: string,
//		field-name: string,
//	}
type FieldDefinitionDirectiveSite struct {
	_              cm.HostLayout `json:"-"`
	ParentTypeName string        `json:"parent-type-name"`
	FieldName      string        `json:"field-name"`
}

// UnionDirectiveSite represents the record "grafbase:sdk/schema#union-directive-site".
//
// Site for a directive applied on a UNION location
//
//	record union-directive-site {
//		union-name: string,
//	}
type UnionDirectiveSite struct {
	_         cm.HostLayout `json:"-"`
	UnionName string        `json:"union-name"`
}

// InterfaceDirectiveSite represents the record "grafbase:sdk/schema#interface-directive-site".
//
// Site for a directive applied on a INTERFACE location
//
//	record interface-directive-site {
//		interface-name: string,
//	}
type InterfaceDirectiveSite struct {
	_             cm.HostLayout `json:"-"`
	InterfaceName string        `json:"interface-name"`
}

// EnumDirectiveSite represents the record "grafbase:sdk/schema#enum-directive-site".
//
// Site for a directive applied on a ENUM location
//
//	record enum-directive-site {
//		enum-name: string,
//	}
type EnumDirectiveSite struct {
	_        cm.HostLayout `json:"-"`
	EnumName string        `json:"enum-name"`
}

// ScalarDirectiveSite represents the record "grafbase:sdk/schema#scalar-directive-site".
//
// Site for a directive applied on a SCALAR location
//
//	record scalar-directive-site {
//		scalar-name: string,
//	}
type ScalarDirectiveSite struct {
	_          cm.HostLayout `json:"-"`
	ScalarName string        `json:"scalar-name"`
}

// DirectiveSite represents the variant "grafbase:sdk/schema#directive-site".
//
// Where and how the directive is applied
// Each variant matches a GraphQL directive location
//
//	variant directive-site {
//		scalar(scalar-directive-site),
//		object(object-directive-site),
//		field-definition(field-definition-directive-site),
//		%interface(interface-directive-site),
//		union(union-directive-site),
//		%enum(enum-directive-site),
//	}
type DirectiveSite cm.Variant[uint8, FieldDefinitionDirectiveSiteShape, FieldDefinitionDirectiveSite]

// DirectiveSiteScalar returns a [DirectiveSite] of case "scalar".
func DirectiveSiteScalar(data ScalarDirectiveSite) DirectiveSite {
	return cm.New[DirectiveSite](0, data)
}

// Scalar returns a non-nil *[ScalarDirectiveSite] if [DirectiveSite] represents the variant case "scalar".
func (self *DirectiveSite) Scalar() *ScalarDirectiveSite {
	return cm.Case[ScalarDirectiveSite](self, 0)
}

// DirectiveSiteObject returns a [DirectiveSite] of case "object".
func DirectiveSiteObject(data ObjectDirectiveSite) DirectiveSite {
	return cm.New[DirectiveSite](1, data)
}

// Object returns a non-nil *[ObjectDirectiveSite] if [DirectiveSite] represents the variant case "object".
func (self *DirectiveSite) Object() *ObjectDirectiveSite {
	return cm.Case[ObjectDirectiveSite](self, 1)
}

// DirectiveSiteFieldDefinition returns a [DirectiveSite] of case "field-definition".
func DirectiveSiteFieldDefinition(data FieldDefinitionDirectiveSite) DirectiveSite {
	return cm.New[DirectiveSite](2, data)
}

// FieldDefinition returns a non-nil *[FieldDefinitionDirectiveSite] if [DirectiveSite] represents the variant case "field-definition".
func (self *DirectiveSite) FieldDefinition() *FieldDefinitionDirectiveSite {
	return cm.Case[FieldDefinitionDirectiveSite](self, 2)
}

// DirectiveSiteInterface returns a [DirectiveSite] of case "interface".
func DirectiveSiteInterface(data InterfaceDirectiveSite) DirectiveSite {
	return cm.New[DirectiveSite](3, data)
}

// Interface returns a non-nil *[InterfaceDirectiveSite] if [DirectiveSite] represents the variant case "interface".
func (self *DirectiveSite) Interface() *InterfaceDirectiveSite {
	return cm.Case[InterfaceDirectiveSite](self, 3)
}

// DirectiveSiteUnion returns a [DirectiveSite] of case "union".
func DirectiveSiteUnion(data UnionDirectiveSite) DirectiveSite {
	return cm.New[DirectiveSite](4, data)
}

// Union returns a non-nil *[UnionDirectiveSite] if [DirectiveSite] represents the variant case "union".
func (self *DirectiveSite) Union() *UnionDirectiveSite {
	return cm.Case[UnionDirectiveSite](self, 4)
}

// DirectiveSiteEnum returns a [DirectiveSite] of case "enum".
func DirectiveSiteEnum(data EnumDirectiveSite) DirectiveSite {
	return cm.New[DirectiveSite](5, data)
}

// Enum returns a non-nil *[EnumDirectiveSite] if [DirectiveSite] represents the variant case "enum".
func (self *DirectiveSite) Enum() *EnumDirectiveSite {
	return cm.Case[EnumDirectiveSite](self, 5)
}

var _DirectiveSiteStrings = [6]string{
	"scalar",
	"object",
	"field-definition",
	"interface",
	"union",
	"enum",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v DirectiveSite) String() string {
	return _DirectiveSiteStrings[v.Tag()]
}
