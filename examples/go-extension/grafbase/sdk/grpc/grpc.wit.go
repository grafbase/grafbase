// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package grpc represents the imported interface "grafbase:sdk/grpc".
package grpc

import (
	"go.bytecodealliance.org/cm"
)

// GrpcClient represents the imported resource "grafbase:sdk/grpc#grpc-client".
//
// A client connected to a single gRPC service.
//
//	resource grpc-client
type GrpcClient cm.Resource

// ResourceDrop represents the imported resource-drop for resource "grpc-client".
//
// Drops a resource handle.
//
//go:nosplit
func (self GrpcClient) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_GrpcClientResourceDrop((uint32)(self0))
	return
}

// GrpcClientNew represents the imported static function "new".
//
// Construct a new grpc-client. This will fail only if the uri in client-configuration
// is invalid.
//
//	new: static func(configuration: grpc-client-configuration) -> result<grpc-client,
//	string>
//
//go:nosplit
func GrpcClientNew(configuration GrpcClientConfiguration) (result cm.Result[string, GrpcClient, string]) {
	configuration0, configuration1 := lower_GrpcClientConfiguration(configuration)
	wasmimport_GrpcClientNew((*uint8)(configuration0), (uint32)(configuration1), &result)
	return
}

// Streaming represents the imported method "streaming".
//
// Send a request to a method with server side streaming to the endpoint.
//
// Note: you can call bidirectional streaming methods using this function, but you
// will only be able to send one message.
//
// # Arguments
//
// - `message`: the encoded protocol buffers message to send to the endpoint.
// - `service`: the name of the service to invoke on the endpoint.
// - `method`: the name of the method to invoke on the service.
// - `metadata`: the metadata map of the request. See https://grpc.io/docs/what-is-grpc/core-concepts/#metadata.
// - `timeout`: the timeout for the request. If none, the default timeout will apply.
//
// # Result
//
// - ok: the response body from the service
// - err: the status code and message
//
// In both cases, the metadata map of the response is included.
//
//	streaming: func(message: list<u8>, service: string, method: string, metadata: metadata-map,
//	timeout: option<u64>) -> result<grpc-streaming-response, grpc-status>
//
//go:nosplit
func (self GrpcClient) Streaming(message cm.List[uint8], service string, method string, metadata MetadataMap, timeout cm.Option[uint64]) (result cm.Result[GrpcStatusShape, GrpcStreamingResponse, GrpcStatus]) {
	self0 := cm.Reinterpret[uint32](self)
	message0, message1 := cm.LowerList(message)
	service0, service1 := cm.LowerString(service)
	method0, method1 := cm.LowerString(method)
	metadata0, metadata1 := cm.LowerList(metadata)
	timeout0, timeout1 := lower_OptionU64(timeout)
	wasmimport_GrpcClientStreaming((uint32)(self0), (*uint8)(message0), (uint32)(message1), (*uint8)(service0), (uint32)(service1), (*uint8)(method0), (uint32)(method1), (*cm.Tuple[string, cm.List[uint8]])(metadata0), (uint32)(metadata1), (uint32)(timeout0), (uint64)(timeout1), &result)
	return
}

// Unary represents the imported method "unary".
//
// Send a unary (that is to say, no streaming) request to the endpoint.
//
// Note: you can still call client streaming methods using this function, but you
// will only one message will be sent.
//
// # Arguments
//
// - `message`: the encoded protocol buffers message to send to the endpoint.
// - `service`: the name of the service to invoke on the endpoint.
// - `method`: the name of the method to invoke on the service.
// - `metadata`: the metadata map of the request. See https://grpc.io/docs/what-is-grpc/core-concepts/#metadata.
// - `timeout`: the timeout for the request in milliseconds. If none, the default
// timeout will apply.
//
// # Result
//
// - ok: the response body from the service
// - err: the status code and message
//
// In both cases, the metadata map of the response is included.
//
//	unary: func(message: list<u8>, service: string, method: string, metadata: metadata-map,
//	timeout: option<u64>) -> result<grpc-unary-response, grpc-status>
//
//go:nosplit
func (self GrpcClient) Unary(message cm.List[uint8], service string, method string, metadata MetadataMap, timeout cm.Option[uint64]) (result cm.Result[GrpcStatusShape, GrpcUnaryResponse, GrpcStatus]) {
	self0 := cm.Reinterpret[uint32](self)
	message0, message1 := cm.LowerList(message)
	service0, service1 := cm.LowerString(service)
	method0, method1 := cm.LowerString(method)
	metadata0, metadata1 := cm.LowerList(metadata)
	timeout0, timeout1 := lower_OptionU64(timeout)
	wasmimport_GrpcClientUnary((uint32)(self0), (*uint8)(message0), (uint32)(message1), (*uint8)(service0), (uint32)(service1), (*uint8)(method0), (uint32)(method1), (*cm.Tuple[string, cm.List[uint8]])(metadata0), (uint32)(metadata1), (uint32)(timeout0), (uint64)(timeout1), &result)
	return
}

// MetadataMap represents the list "grafbase:sdk/grpc#metadata-map".
//
// Metadata associated with requests and responses. This is the gRPC analog of HTTP
// headers.
//
// https://grpc.io/docs/what-is-grpc/core-concepts/#metadata
//
//	type metadata-map = list<tuple<string, list<u8>>>
type MetadataMap cm.List[cm.Tuple[string, cm.List[uint8]]]

// GrpcClientConfiguration represents the record "grafbase:sdk/grpc#grpc-client-configuration".
//
// Configuration for create-client.
//
//	record grpc-client-configuration {
//		uri: string,
//	}
type GrpcClientConfiguration struct {
	_ cm.HostLayout `json:"-"`
	// The address of the gRPC endpoint.
	URI string `json:"uri"`
}

// GrpcStatusCode represents the enum "grafbase:sdk/grpc#grpc-status-code".
//
// Response status of gRPC requests.
//
// Reference: https://github.com/grpc/grpc/blob/master/doc/statuscodes.md#status-codes-and-their-use-in-grpc
//
//	enum grpc-status-code {
//		ok,
//		cancelled,
//		unknown,
//		invalid-argument,
//		deadline-exceeded,
//		not-found,
//		already-exists,
//		permission-denied,
//		resource-exhausted,
//		failed-precondition,
//		aborted,
//		out-of-range,
//		unimplemented,
//		internal,
//		unavailable,
//		data-loss,
//		unauthenticated
//	}
type GrpcStatusCode uint8

const (
	// 0. Not an error; returned on success.
	GrpcStatusCodeOK GrpcStatusCode = iota

	// 1. The operation was cancelled, typically by the caller.
	GrpcStatusCodeCancelled

	// 2. Unknown error. For example, this error may be returned when a Status value received
	// from another address space belongs to an error space that is not known in this
	// address space. Also errors raised by APIs that do not return enough error information
	// may be converted to this error.
	GrpcStatusCodeUnknown

	// 3. The client specified an invalid argument. Note that this differs from FAILED_PRECONDITION.
	// INVALID_ARGUMENT indicates arguments that are problematic regardless of the state
	// of the system (e.g., a malformed file name).
	GrpcStatusCodeInvalidArgument

	// 4. The deadline expired before the operation could complete. For operations that
	// change the state of the system, this error may be returned even if the operation
	// has completed successfully. For example, a successful response from a server could
	// have been delayed long
	GrpcStatusCodeDeadlineExceeded

	// 5. Some requested entity (e.g., file or directory) was not found. Note to server
	// developers: if a request is denied for an entire class of users, such as gradual
	// feature rollout or undocumented allowlist, NOT_FOUND may be used. If a request
	// is denied for some users within a class of users, such as user-based access control,
	// PERMISSION_DENIED must be used.
	GrpcStatusCodeNotFound

	// 6. The entity that a client attempted to create (e.g., file or directory) already
	// exists.
	GrpcStatusCodeAlreadyExists

	// 7. The caller does not have permission to execute the specified operation. PERMISSION_DENIED
	// must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED
	// instead for those errors). PERMISSION_DENIED must not be used if the caller can
	// not be identified (use UNAUTHENTICATED instead for those errors). This error code
	// does not imply the request is valid or the requested entity exists or satisfies
	// other pre-conditions.
	GrpcStatusCodePermissionDenied

	// 8. Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire
	// file system is out of space.
	GrpcStatusCodeResourceExhausted

	// 9. The operation was rejected because the system is not in a state required for
	// the operation's execution. For example, the directory to be deleted is non-empty,
	// an rmdir operation is applied to a non-directory, etc. Service implementors can
	// use the following guidelines to decide between FAILED_PRECONDITION, ABORTED, and
	// UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call.
	// (b) Use ABORTED if the client should retry at a higher level (e.g., when a client-specified
	// test-and-set fails, indicating the client should restart a read-modify-write sequence).
	// (c) Use FAILED_PRECONDITION if the client should not retry until the system state
	// has been explicitly fixed. E.g., if an "rmdir" fails because the directory is non-empty,
	// FAILED_PRECONDITION should be returned since the client should not retry unless
	// the files are deleted from the directory.
	GrpcStatusCodeFailedPrecondition

	// 10. The operation was aborted, typically due to a concurrency issue such as a sequencer
	// check failure or transaction abort. See the guidelines above for deciding between
	// FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.
	GrpcStatusCodeAborted

	// 11. The operation was attempted past the valid range. E.g., seeking or reading
	// past end-of-file. Unlike INVALID_ARGUMENT, this error indicates a problem that
	// may be fixed if the system state changes. For example, a 32-bit file system will
	// generate INVALID_ARGUMENT if asked to read at an offset that is not in the range
	// [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from an offset past
	// the current file size. There is a fair bit of overlap between FAILED_PRECONDITION
	// and OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error) when
	// it applies so that callers who are iterating through a space can easily look for
	// an OUT_OF_RANGE error to detect when they are done.
	GrpcStatusCodeOutOfRange

	// 12. The operation is not implemented or is not supported/enabled in this service.
	GrpcStatusCodeUnimplemented

	// 13. Internal errors. This means that some invariants expected by the underlying
	// system have been broken. This error code is reserved for serious errors.
	GrpcStatusCodeInternal

	// 14. The service is currently unavailable. This is most likely a transient condition,
	// which can be corrected by retrying with a backoff. Note that it is not always safe
	// to retry non-idempotent operations.
	GrpcStatusCodeUnavailable

	// 15. Unrecoverable data loss or corruption.
	GrpcStatusCodeDataLoss

	// 16. The request does not have valid authentication credentials for the operation.
	GrpcStatusCodeUnauthenticated
)

var _GrpcStatusCodeStrings = [17]string{
	"ok",
	"cancelled",
	"unknown",
	"invalid-argument",
	"deadline-exceeded",
	"not-found",
	"already-exists",
	"permission-denied",
	"resource-exhausted",
	"failed-precondition",
	"aborted",
	"out-of-range",
	"unimplemented",
	"internal",
	"unavailable",
	"data-loss",
	"unauthenticated",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e GrpcStatusCode) String() string {
	return _GrpcStatusCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e GrpcStatusCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *GrpcStatusCode) UnmarshalText(text []byte) error {
	return _GrpcStatusCodeUnmarshalCase(e, text)
}

var _GrpcStatusCodeUnmarshalCase = cm.CaseUnmarshaler[GrpcStatusCode](_GrpcStatusCodeStrings[:])

// GrpcStatus represents the record "grafbase:sdk/grpc#grpc-status".
//
// Response status for unsuccessful gRPC requests.
//
//	record grpc-status {
//		code: grpc-status-code,
//		message: string,
//		metadata: metadata-map,
//	}
type GrpcStatus struct {
	_ cm.HostLayout `json:"-"`
	// The status code of the response.
	Code GrpcStatusCode `json:"code"`

	// The status message of the response.
	Message string `json:"message"`

	// The metadata map of the unsuccessful response.
	Metadata MetadataMap `json:"metadata"`
}

// GrpcUnaryResponse represents the record "grafbase:sdk/grpc#grpc-unary-response".
//
// A response to a unary (no server-side streaming) request.
//
//	record grpc-unary-response {
//		metadata: metadata-map,
//		message: list<u8>,
//	}
type GrpcUnaryResponse struct {
	_ cm.HostLayout `json:"-"`
	// The metadata map of the response.
	Metadata MetadataMap `json:"metadata"`

	// The response message.
	Message cm.List[uint8] `json:"message"`
}

// GrpcStreamingResponse represents the imported resource "grafbase:sdk/grpc#grpc-streaming-response".
//
// A response to a request to a server-side streaming method.
//
//	resource grpc-streaming-response
type GrpcStreamingResponse cm.Resource

// ResourceDrop represents the imported resource-drop for resource "grpc-streaming-response".
//
// Drops a resource handle.
//
//go:nosplit
func (self GrpcStreamingResponse) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_GrpcStreamingResponseResourceDrop((uint32)(self0))
	return
}

// GetMetadata represents the imported method "get-metadata".
//
// The metadata map of the response.
//
//	get-metadata: func() -> metadata-map
//
//go:nosplit
func (self GrpcStreamingResponse) GetMetadata() (result MetadataMap) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_GrpcStreamingResponseGetMetadata((uint32)(self0), &result)
	return
}

// GetNextMessage represents the imported method "get-next-message".
//
// The get the next streaming response message.
//
//	get-next-message: func() -> result<option<list<u8>>, grpc-status>
//
//go:nosplit
func (self GrpcStreamingResponse) GetNextMessage() (result cm.Result[GrpcStatusShape, cm.Option[cm.List[uint8]], GrpcStatus]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_GrpcStreamingResponseGetNextMessage((uint32)(self0), &result)
	return
}
