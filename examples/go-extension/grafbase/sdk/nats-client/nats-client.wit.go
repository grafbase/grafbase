// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package natsclient represents the imported interface "grafbase:sdk/nats-client".
package natsclient

import (
	"go.bytecodealliance.org/cm"
)

// NatsAuth represents the variant "grafbase:sdk/nats-client#nats-auth".
//
//	variant nats-auth {
//		username-password(tuple<string, string>),
//		token(string),
//		credentials(string),
//	}
type NatsAuth cm.Variant[uint8, TupleStringStringShape, [2]string]

// NatsAuthUsernamePassword returns a [NatsAuth] of case "username-password".
//
// Username and password authentication
func NatsAuthUsernamePassword(data [2]string) NatsAuth {
	return cm.New[NatsAuth](0, data)
}

// UsernamePassword returns a non-nil *[[2]string] if [NatsAuth] represents the variant case "username-password".
func (self *NatsAuth) UsernamePassword() *[2]string {
	return cm.Case[[2]string](self, 0)
}

// NatsAuthToken returns a [NatsAuth] of case "token".
//
// Token authentication
func NatsAuthToken(data string) NatsAuth {
	return cm.New[NatsAuth](1, data)
}

// Token returns a non-nil *[string] if [NatsAuth] represents the variant case "token".
func (self *NatsAuth) Token() *string {
	return cm.Case[string](self, 1)
}

// NatsAuthCredentials returns a [NatsAuth] of case "credentials".
//
// Credentials authentication
func NatsAuthCredentials(data string) NatsAuth {
	return cm.New[NatsAuth](2, data)
}

// Credentials returns a non-nil *[string] if [NatsAuth] represents the variant case "credentials".
func (self *NatsAuth) Credentials() *string {
	return cm.Case[string](self, 2)
}

var _NatsAuthStrings = [3]string{
	"username-password",
	"token",
	"credentials",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v NatsAuth) String() string {
	return _NatsAuthStrings[v.Tag()]
}

// NatsMessage represents the record "grafbase:sdk/nats-client#nats-message".
//
// Represents a NATS message.
//
//	record nats-message {
//		subject: string,
//		payload: list<u8>,
//	}
type NatsMessage struct {
	_ cm.HostLayout `json:"-"`
	// The subject or channel name of the NATS message
	Subject string `json:"subject"`

	// The raw payload data of the message as bytes
	Payload cm.List[uint8] `json:"payload"`
}

// NatsStreamDeliverPolicy represents the variant "grafbase:sdk/nats-client#nats-stream-deliver-policy".
//
//	variant nats-stream-deliver-policy {
//		all,
//		last,
//		new,
//		by-start-sequence(u64),
//		by-start-time-ms(u64),
//		last-per-subject,
//	}
type NatsStreamDeliverPolicy cm.Variant[uint8, uint64, uint64]

// NatsStreamDeliverPolicyAll returns a [NatsStreamDeliverPolicy] of case "all".
//
// All causes the consumer to receive the oldest messages still present in the system.
// This is the default.
func NatsStreamDeliverPolicyAll() NatsStreamDeliverPolicy {
	var data struct{}
	return cm.New[NatsStreamDeliverPolicy](0, data)
}

// All returns true if [NatsStreamDeliverPolicy] represents the variant case "all".
func (self *NatsStreamDeliverPolicy) All() bool {
	return self.Tag() == 0
}

// NatsStreamDeliverPolicyLast returns a [NatsStreamDeliverPolicy] of case "last".
//
// Last will start the consumer with the last sequence received.
func NatsStreamDeliverPolicyLast() NatsStreamDeliverPolicy {
	var data struct{}
	return cm.New[NatsStreamDeliverPolicy](1, data)
}

// Last returns true if [NatsStreamDeliverPolicy] represents the variant case "last".
func (self *NatsStreamDeliverPolicy) Last() bool {
	return self.Tag() == 1
}

// NatsStreamDeliverPolicyNew returns a [NatsStreamDeliverPolicy] of case "new".
//
// New will only deliver new messages that are received by the JetStream server after
// the consumer is created.
func NatsStreamDeliverPolicyNew() NatsStreamDeliverPolicy {
	var data struct{}
	return cm.New[NatsStreamDeliverPolicy](2, data)
}

// New returns true if [NatsStreamDeliverPolicy] represents the variant case "new".
func (self *NatsStreamDeliverPolicy) New() bool {
	return self.Tag() == 2
}

// NatsStreamDeliverPolicyByStartSequence returns a [NatsStreamDeliverPolicy] of case "by-start-sequence".
//
// ByStartSeq will look for a defined starting sequence to the consumer’s configured
// opt_start_seq parameter.
func NatsStreamDeliverPolicyByStartSequence(data uint64) NatsStreamDeliverPolicy {
	return cm.New[NatsStreamDeliverPolicy](3, data)
}

// ByStartSequence returns a non-nil *[uint64] if [NatsStreamDeliverPolicy] represents the variant case "by-start-sequence".
func (self *NatsStreamDeliverPolicy) ByStartSequence() *uint64 {
	return cm.Case[uint64](self, 3)
}

// NatsStreamDeliverPolicyByStartTimeMs returns a [NatsStreamDeliverPolicy] of case "by-start-time-ms".
//
// ByStartTime will select the first message with a timestamp >= to the consumer’s
// configured opt_start_time parameter.
func NatsStreamDeliverPolicyByStartTimeMs(data uint64) NatsStreamDeliverPolicy {
	return cm.New[NatsStreamDeliverPolicy](4, data)
}

// ByStartTimeMs returns a non-nil *[uint64] if [NatsStreamDeliverPolicy] represents the variant case "by-start-time-ms".
func (self *NatsStreamDeliverPolicy) ByStartTimeMs() *uint64 {
	return cm.Case[uint64](self, 4)
}

// NatsStreamDeliverPolicyLastPerSubject returns a [NatsStreamDeliverPolicy] of case "last-per-subject".
//
// LastPerSubject will start the consumer with the last message for all subjects received.
func NatsStreamDeliverPolicyLastPerSubject() NatsStreamDeliverPolicy {
	var data struct{}
	return cm.New[NatsStreamDeliverPolicy](5, data)
}

// LastPerSubject returns true if [NatsStreamDeliverPolicy] represents the variant case "last-per-subject".
func (self *NatsStreamDeliverPolicy) LastPerSubject() bool {
	return self.Tag() == 5
}

var _NatsStreamDeliverPolicyStrings = [6]string{
	"all",
	"last",
	"new",
	"by-start-sequence",
	"by-start-time-ms",
	"last-per-subject",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v NatsStreamDeliverPolicy) String() string {
	return _NatsStreamDeliverPolicyStrings[v.Tag()]
}

// NatsStreamConfig represents the record "grafbase:sdk/nats-client#nats-stream-config".
//
//	record nats-stream-config {
//		stream-name: string,
//		consumer-name: string,
//		durable-name: option<string>,
//		description: option<string>,
//		deliver-policy: nats-stream-deliver-policy,
//		inactive-threshold-ms: u64,
//	}
type NatsStreamConfig struct {
	_ cm.HostLayout `json:"-"`
	// Name that identifies the stream
	StreamName string `json:"stream-name"`

	// Name to identify a specific consumer
	ConsumerName string `json:"consumer-name"`

	// Optional name to identify a durable subscription
	DurableName cm.Option[string] `json:"durable-name"`

	// Optional description for the stream configuration
	Description cm.Option[string] `json:"description"`

	// Policy that determines which messages to deliver
	DeliverPolicy NatsStreamDeliverPolicy `json:"deliver-policy"`

	// Threshold in milliseconds for considering a consumer inactive
	InactiveThresholdMs uint64 `json:"inactive-threshold-ms"`
}

// NatsClient represents the imported resource "grafbase:sdk/nats-client#nats-client".
//
// A NATS client
//
//	resource nats-client
type NatsClient cm.Resource

// ResourceDrop represents the imported resource-drop for resource "nats-client".
//
// Drops a resource handle.
//
//go:nosplit
func (self NatsClient) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_NatsClientResourceDrop((uint32)(self0))
	return
}

// NatsClientConnect represents the imported static function "connect".
//
// Creates a new NATS client.
//
//	connect: static func(servers: list<string>, auth: option<nats-auth>) -> result<nats-client,
//	string>
//
//go:nosplit
func NatsClientConnect(servers cm.List[string], auth cm.Option[NatsAuth]) (result cm.Result[string, NatsClient, string]) {
	servers0, servers1 := cm.LowerList(servers)
	auth0, auth1, auth2, auth3, auth4, auth5 := lower_OptionNatsAuth(auth)
	wasmimport_NatsClientConnect((*string)(servers0), (uint32)(servers1), (uint32)(auth0), (uint32)(auth1), (uint32)(auth2), (uint32)(auth3), (*uint8)(auth4), (uint32)(auth5), &result)
	return
}

// KeyValue represents the imported method "key-value".
//
// Creates a key-value store instance for a specific bucket
//
//	key-value: func(bucket: string) -> result<nats-key-value, string>
//
//go:nosplit
func (self NatsClient) KeyValue(bucket string) (result cm.Result[string, NatsKeyValue, string]) {
	self0 := cm.Reinterpret[uint32](self)
	bucket0, bucket1 := cm.LowerString(bucket)
	wasmimport_NatsClientKeyValue((uint32)(self0), (*uint8)(bucket0), (uint32)(bucket1), &result)
	return
}

// Publish represents the imported method "publish".
//
// Publishes a message to a subject.
//
//	publish: func(subject: string, message: list<u8>) -> result<_, string>
//
//go:nosplit
func (self NatsClient) Publish(subject string, message cm.List[uint8]) (result cm.Result[string, struct{}, string]) {
	self0 := cm.Reinterpret[uint32](self)
	subject0, subject1 := cm.LowerString(subject)
	message0, message1 := cm.LowerList(message)
	wasmimport_NatsClientPublish((uint32)(self0), (*uint8)(subject0), (uint32)(subject1), (*uint8)(message0), (uint32)(message1), &result)
	return
}

// Request represents the imported method "request".
//
// Sends a request to a subject and waits for a response
//
//	request: func(subject: string, message: list<u8>, timeout-ms: option<u64>) -> result<nats-message,
//	string>
//
//go:nosplit
func (self NatsClient) Request(subject string, message cm.List[uint8], timeoutMs cm.Option[uint64]) (result cm.Result[NatsMessageShape, NatsMessage, string]) {
	self0 := cm.Reinterpret[uint32](self)
	subject0, subject1 := cm.LowerString(subject)
	message0, message1 := cm.LowerList(message)
	timeoutMs0, timeoutMs1 := lower_OptionU64(timeoutMs)
	wasmimport_NatsClientRequest((uint32)(self0), (*uint8)(subject0), (uint32)(subject1), (*uint8)(message0), (uint32)(message1), (uint32)(timeoutMs0), (uint64)(timeoutMs1), &result)
	return
}

// Subscribe represents the imported method "subscribe".
//
// Subscribes to a subject.
//
//	subscribe: func(subject: string, stream-config: option<nats-stream-config>) ->
//	result<nats-subscriber, string>
//
//go:nosplit
func (self NatsClient) Subscribe(subject string, streamConfig cm.Option[NatsStreamConfig]) (result cm.Result[string, NatsSubscriber, string]) {
	params := wasmimport_NatsClientSubscribe_params{self: self, subject: subject, streamConfig: streamConfig}
	wasmimport_NatsClientSubscribe(&params, &result)
	return
}

// wasmimport_NatsClientSubscribe_params represents the flattened function params for [wasmimport_NatsClientSubscribe].
// See the Canonical ABI flattening rules for more information.
type wasmimport_NatsClientSubscribe_params struct {
	_            cm.HostLayout               `json:"-"`
	self         NatsClient                  `json:"self"`
	subject      string                      `json:"subject"`
	streamConfig cm.Option[NatsStreamConfig] `json:"stream-config"`
}

// NatsKeyValue represents the imported resource "grafbase:sdk/nats-client#nats-key-value".
//
// A NATS key-value store
//
//	resource nats-key-value
type NatsKeyValue cm.Resource

// ResourceDrop represents the imported resource-drop for resource "nats-key-value".
//
// Drops a resource handle.
//
//go:nosplit
func (self NatsKeyValue) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_NatsKeyValueResourceDrop((uint32)(self0))
	return
}

// Create represents the imported method "create".
//
// Creates a new key-value pair in the bucket
// Returns the sequence number upon success, or an error string if creation fails
// Will return an error if the key already exists
//
//	create: func(key: string, value: list<u8>) -> result<u64, string>
//
//go:nosplit
func (self NatsKeyValue) Create(key string, value cm.List[uint8]) (result cm.Result[string, uint64, string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerList(value)
	wasmimport_NatsKeyValueCreate((uint32)(self0), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

// Delete represents the imported method "delete".
//
// Deletes the specified key-value pair from the bucket
// Returns an error if the key doesn't exist or another error occurs
//
//	delete: func(key: string) -> result<_, string>
//
//go:nosplit
func (self NatsKeyValue) Delete(key string) (result cm.Result[string, struct{}, string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_NatsKeyValueDelete((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Get represents the imported method "get".
//
// Retrieves the value associated with the specified key
// Returns an error if the key doesn't exist or another error occurs
//
//	get: func(key: string) -> result<option<list<u8>>, string>
//
//go:nosplit
func (self NatsKeyValue) Get(key string) (result cm.Result[OptionListU8Shape, cm.Option[cm.List[uint8]], string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_NatsKeyValueGet((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// Put represents the imported method "put".
//
// Updates or creates a key-value pair in the bucket
// Returns the sequence number upon success, or an error string if the operation fails
// Will create the key if it doesn't exist or update it if it already exists
//
//	put: func(key: string, value: list<u8>) -> result<u64, string>
//
//go:nosplit
func (self NatsKeyValue) Put(key string, value cm.List[uint8]) (result cm.Result[string, uint64, string]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerList(value)
	wasmimport_NatsKeyValuePut((uint32)(self0), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

// NatsSubscriber represents the imported resource "grafbase:sdk/nats-client#nats-subscriber".
//
// A NATS subscriber resource for receiving messages from a subject
//
//	resource nats-subscriber
type NatsSubscriber cm.Resource

// ResourceDrop represents the imported resource-drop for resource "nats-subscriber".
//
// Drops a resource handle.
//
//go:nosplit
func (self NatsSubscriber) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_NatsSubscriberResourceDrop((uint32)(self0))
	return
}

// Next represents the imported method "next".
//
// Retrieves the next message from the subscription
//
//	next: func() -> result<option<nats-message>, string>
//
//go:nosplit
func (self NatsSubscriber) Next() (result cm.Result[OptionNatsMessageShape, cm.Option[NatsMessage], string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_NatsSubscriberNext((uint32)(self0), &result)
	return
}
