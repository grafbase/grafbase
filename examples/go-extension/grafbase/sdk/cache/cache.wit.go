// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package cache represents the imported interface "grafbase:sdk/cache".
package cache

import (
	"go.bytecodealliance.org/cm"
)

// Cache represents the imported resource "grafbase:sdk/cache#cache".
//
// A resource for caching data with optional expiration.
//
//	resource cache
type Cache cm.Resource

// ResourceDrop represents the imported resource-drop for resource "cache".
//
// Drops a resource handle.
//
//go:nosplit
func (self Cache) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_CacheResourceDrop((uint32)(self0))
	return
}

// CacheGet represents the imported static function "get".
//
// Retrieves a value from the cache by key.
// Returns None if the key does not exist or has expired.
//
//	get: static func(key: string) -> option<list<u8>>
//
//go:nosplit
func CacheGet(key string) (result cm.Option[cm.List[uint8]]) {
	key0, key1 := cm.LowerString(key)
	wasmimport_CacheGet((*uint8)(key0), (uint32)(key1), &result)
	return
}

// CacheSet represents the imported static function "set".
//
// Sets a value in the cache with the specified key.
// Optional ttl-ms parameter sets the time-to-live in milliseconds after which the
// value expires.
// If ttl-ms is None, the value will not expire automatically.
//
//	set: static func(key: string, value: list<u8>, ttl-ms: option<u64>)
//
//go:nosplit
func CacheSet(key string, value cm.List[uint8], ttlMs cm.Option[uint64]) {
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerList(value)
	ttlMs0, ttlMs1 := lower_OptionU64(ttlMs)
	wasmimport_CacheSet((*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), (uint32)(ttlMs0), (uint64)(ttlMs1))
	return
}
