// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package eventqueue represents the imported interface "grafbase:sdk/event-queue".
package eventqueue

import (
	"example.com/grafbase-go-extension/grafbase/sdk/headers"
	httpclient "example.com/grafbase-go-extension/grafbase/sdk/http-client"
	"go.bytecodealliance.org/cm"
)

// HTTPMethod represents the type alias "grafbase:sdk/event-queue#http-method".
//
// See [httpclient.HTTPMethod] for more information.
type HTTPMethod = httpclient.HTTPMethod

// Headers represents the imported type alias "grafbase:sdk/event-queue#headers".
//
// See [headers.Headers] for more information.
type Headers = headers.Headers

// ExecutedHTTPRequest represents the record "grafbase:sdk/event-queue#executed-http-request".
//
// Info about an executed HTTP request.
//
//	record executed-http-request {
//		method: http-method,
//		url: string,
//		status-code: u16,
//	}
type ExecutedHTTPRequest struct {
	_ cm.HostLayout `json:"-"`
	// The request method.
	Method HTTPMethod `json:"method"`

	// The request URL.
	URL string `json:"url"`

	// The response status code.
	StatusCode uint16 `json:"status-code"`
}

// SubgraphResponse represents the record "grafbase:sdk/event-queue#subgraph-response".
//
// Information on a response
//
//	record subgraph-response {
//		connection-time-ns: u64,
//		response-time-ns: u64,
//		status-code: u16,
//	}
type SubgraphResponse struct {
	_ cm.HostLayout `json:"-"`
	// The milliseconds it took to connect to the host.
	ConnectionTimeNs uint64 `json:"connection-time-ns"`

	// The milliseconds it took for the host to respond with data.
	ResponseTimeNs uint64 `json:"response-time-ns"`

	// The response status code
	StatusCode uint16 `json:"status-code"`
}

// SubgraphRequestExecutionKind represents the variant "grafbase:sdk/event-queue#subgraph-request-execution-kind".
//
// Subgraph response variant.
//
//	variant subgraph-request-execution-kind {
//		internal-server-error,
//		request-error,
//		rate-limited,
//		response(subgraph-response),
//	}
type SubgraphRequestExecutionKind cm.Variant[uint8, SubgraphResponse, SubgraphResponse]

// SubgraphRequestExecutionKindInternalServerError returns a [SubgraphRequestExecutionKind] of case "internal-server-error".
//
// Internal server error in the gateway.
func SubgraphRequestExecutionKindInternalServerError() SubgraphRequestExecutionKind {
	var data struct{}
	return cm.New[SubgraphRequestExecutionKind](0, data)
}

// InternalServerError returns true if [SubgraphRequestExecutionKind] represents the variant case "internal-server-error".
func (self *SubgraphRequestExecutionKind) InternalServerError() bool {
	return self.Tag() == 0
}

// SubgraphRequestExecutionKindRequestError returns a [SubgraphRequestExecutionKind] of case "request-error".
//
// HTTP request failed.
func SubgraphRequestExecutionKindRequestError() SubgraphRequestExecutionKind {
	var data struct{}
	return cm.New[SubgraphRequestExecutionKind](1, data)
}

// RequestError returns true if [SubgraphRequestExecutionKind] represents the variant case "request-error".
func (self *SubgraphRequestExecutionKind) RequestError() bool {
	return self.Tag() == 1
}

// SubgraphRequestExecutionKindRateLimited returns a [SubgraphRequestExecutionKind] of case "rate-limited".
//
// Request was rate-limited.
func SubgraphRequestExecutionKindRateLimited() SubgraphRequestExecutionKind {
	var data struct{}
	return cm.New[SubgraphRequestExecutionKind](2, data)
}

// RateLimited returns true if [SubgraphRequestExecutionKind] represents the variant case "rate-limited".
func (self *SubgraphRequestExecutionKind) RateLimited() bool {
	return self.Tag() == 2
}

// SubgraphRequestExecutionKindResponse returns a [SubgraphRequestExecutionKind] of case "response".
//
// A response was received.
func SubgraphRequestExecutionKindResponse(data SubgraphResponse) SubgraphRequestExecutionKind {
	return cm.New[SubgraphRequestExecutionKind](3, data)
}

// Response returns a non-nil *[SubgraphResponse] if [SubgraphRequestExecutionKind] represents the variant case "response".
func (self *SubgraphRequestExecutionKind) Response() *SubgraphResponse {
	return cm.Case[SubgraphResponse](self, 3)
}

var _SubgraphRequestExecutionKindStrings = [4]string{
	"internal-server-error",
	"request-error",
	"rate-limited",
	"response",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v SubgraphRequestExecutionKind) String() string {
	return _SubgraphRequestExecutionKindStrings[v.Tag()]
}

// FieldError represents the record "grafbase:sdk/event-queue#field-error".
//
// An error returned from a field.
//
//	record field-error {
//		count: u64,
//		data-is-null: bool,
//	}
type FieldError struct {
	_ cm.HostLayout `json:"-"`
	// The number of errors.
	Count uint64 `json:"count"`

	// The returned data is null.
	DataIsNull bool `json:"data-is-null"`
}

// RequestError represents the record "grafbase:sdk/event-queue#request-error".
//
// An error from a GraphQL request.
//
//	record request-error {
//		count: u64,
//	}
type RequestError struct {
	_ cm.HostLayout `json:"-"`
	// The number of errors.
	Count uint64 `json:"count"`
}

// GraphqlResponseStatus represents the variant "grafbase:sdk/event-queue#graphql-response-status".
//
// A status of a GraphQL operation.
//
//	variant graphql-response-status {
//		success,
//		field-error(field-error),
//		request-error(request-error),
//		refused-request,
//	}
type GraphqlResponseStatus cm.Variant[uint8, FieldErrorShape, FieldError]

// GraphqlResponseStatusSuccess returns a [GraphqlResponseStatus] of case "success".
//
// Request was successful.
func GraphqlResponseStatusSuccess() GraphqlResponseStatus {
	var data struct{}
	return cm.New[GraphqlResponseStatus](0, data)
}

// Success returns true if [GraphqlResponseStatus] represents the variant case "success".
func (self *GraphqlResponseStatus) Success() bool {
	return self.Tag() == 0
}

// GraphqlResponseStatusFieldError returns a [GraphqlResponseStatus] of case "field-error".
//
// A field returned an error.
func GraphqlResponseStatusFieldError(data FieldError) GraphqlResponseStatus {
	return cm.New[GraphqlResponseStatus](1, data)
}

// FieldError returns a non-nil *[FieldError] if [GraphqlResponseStatus] represents the variant case "field-error".
func (self *GraphqlResponseStatus) FieldError() *FieldError {
	return cm.Case[FieldError](self, 1)
}

// GraphqlResponseStatusRequestError returns a [GraphqlResponseStatus] of case "request-error".
//
// A request error.
func GraphqlResponseStatusRequestError(data RequestError) GraphqlResponseStatus {
	return cm.New[GraphqlResponseStatus](2, data)
}

// RequestError returns a non-nil *[RequestError] if [GraphqlResponseStatus] represents the variant case "request-error".
func (self *GraphqlResponseStatus) RequestError() *RequestError {
	return cm.Case[RequestError](self, 2)
}

// GraphqlResponseStatusRefusedRequest returns a [GraphqlResponseStatus] of case "refused-request".
//
// The request was refused.
func GraphqlResponseStatusRefusedRequest() GraphqlResponseStatus {
	var data struct{}
	return cm.New[GraphqlResponseStatus](3, data)
}

// RefusedRequest returns true if [GraphqlResponseStatus] represents the variant case "refused-request".
func (self *GraphqlResponseStatus) RefusedRequest() bool {
	return self.Tag() == 3
}

var _GraphqlResponseStatusStrings = [4]string{
	"success",
	"field-error",
	"request-error",
	"refused-request",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v GraphqlResponseStatus) String() string {
	return _GraphqlResponseStatusStrings[v.Tag()]
}

// ExecutedOperation represents the record "grafbase:sdk/event-queue#executed-operation".
//
// Info about an executed operation.
//
//	record executed-operation {
//		name: option<string>,
//		document: string,
//		prepare-duration-ns: u64,
//		cached-plan: bool,
//		duration-ns: u64,
//		status: graphql-response-status,
//	}
type ExecutedOperation struct {
	_ cm.HostLayout `json:"-"`
	// The name of the operation, if present.
	Name cm.Option[string] `json:"name"`

	// The operation document in sanitized form.
	Document string `json:"document"`

	// The time taken in preparing.
	PrepareDurationNs uint64 `json:"prepare-duration-ns"`

	// True, if the plan was taken from cache.
	CachedPlan bool `json:"cached-plan"`

	// Time in milliseconds spent executing the operation.
	DurationNs uint64 `json:"duration-ns"`

	// The status of the operation.
	Status GraphqlResponseStatus `json:"status"`
}

// CacheStatus represents the enum "grafbase:sdk/event-queue#cache-status".
//
// Cache status of a subgraph call.
//
//	enum cache-status {
//		hit,
//		partial-hit,
//		miss
//	}
type CacheStatus uint8

const (
	// All data fetched from cache.
	CacheStatusHit CacheStatus = iota

	// Some data fetched from cache.
	CacheStatusPartialHit

	// Cache miss
	CacheStatusMiss
)

var _CacheStatusStrings = [3]string{
	"hit",
	"partial-hit",
	"miss",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e CacheStatus) String() string {
	return _CacheStatusStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e CacheStatus) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *CacheStatus) UnmarshalText(text []byte) error {
	return _CacheStatusUnmarshalCase(e, text)
}

var _CacheStatusUnmarshalCase = cm.CaseUnmarshaler[CacheStatus](_CacheStatusStrings[:])

// ExecutedSubgraphRequest represents the imported record "grafbase:sdk/event-queue#executed-subgraph-request".
//
// Info about an executed subgraph request.
//
//	record executed-subgraph-request {
//		subgraph-name: string,
//		method: http-method,
//		url: string,
//		executions: list<subgraph-request-execution-kind>,
//		cache-status: cache-status,
//		total-duration-ns: u64,
//		has-errors: bool,
//		response-headers: headers,
//	}
type ExecutedSubgraphRequest struct {
	_ cm.HostLayout `json:"-"`
	// The name of the subgraph.
	SubgraphName string `json:"subgraph-name"`

	// The request method.
	Method HTTPMethod `json:"method"`

	// The subgraph URL.
	URL string `json:"url"`

	// The subgraph responses
	Executions cm.List[SubgraphRequestExecutionKind] `json:"executions"`

	// The cache status of the subgraph call.
	CacheStatus CacheStatus `json:"cache-status"`

	// The time in milliseconds taken for the whole operation.
	TotalDurationNs uint64 `json:"total-duration-ns"`

	// True, if the subgraph returned any errors.
	HasErrors bool `json:"has-errors"`

	// The subgraph response headers.
	ResponseHeaders Headers `json:"response-headers"`
}

// ExtensionEvent represents the record "grafbase:sdk/event-queue#extension-event".
//
//	record extension-event {
//		extension-name: string,
//		event-name: string,
//		data: list<u8>,
//	}
type ExtensionEvent struct {
	_             cm.HostLayout  `json:"-"`
	ExtensionName string         `json:"extension-name"`
	EventName     string         `json:"event-name"`
	Data          cm.List[uint8] `json:"data"`
}

// Event represents the imported variant "grafbase:sdk/event-queue#event".
//
// Represents different types of events that can be queued.
//
//	variant event {
//		operation(executed-operation),
//		subgraph(executed-subgraph-request),
//		http(executed-http-request),
//		extension(extension-event),
//	}
type Event cm.Variant[uint8, ExecutedOperationShape, ExecutedOperation]

// EventOperation returns a [Event] of case "operation".
//
// A GraphQL operation execution event.
func EventOperation(data ExecutedOperation) Event {
	return cm.New[Event](0, data)
}

// Operation returns a non-nil *[ExecutedOperation] if [Event] represents the variant case "operation".
func (self *Event) Operation() *ExecutedOperation {
	return cm.Case[ExecutedOperation](self, 0)
}

// EventSubgraph returns a [Event] of case "subgraph".
//
// A subgraph request execution event.
func EventSubgraph(data ExecutedSubgraphRequest) Event {
	return cm.New[Event](1, data)
}

// Subgraph returns a non-nil *[ExecutedSubgraphRequest] if [Event] represents the variant case "subgraph".
func (self *Event) Subgraph() *ExecutedSubgraphRequest {
	return cm.Case[ExecutedSubgraphRequest](self, 1)
}

// EventHTTP returns a [Event] of case "http".
//
// An HTTP request execution event.
func EventHTTP(data ExecutedHTTPRequest) Event {
	return cm.New[Event](2, data)
}

// HTTP returns a non-nil *[ExecutedHTTPRequest] if [Event] represents the variant case "http".
func (self *Event) HTTP() *ExecutedHTTPRequest {
	return cm.Case[ExecutedHTTPRequest](self, 2)
}

// EventExtension returns a [Event] of case "extension".
//
// Extension event data as raw bytes.
func EventExtension(data ExtensionEvent) Event {
	return cm.New[Event](3, data)
}

// Extension returns a non-nil *[ExtensionEvent] if [Event] represents the variant case "extension".
func (self *Event) Extension() *ExtensionEvent {
	return cm.Case[ExtensionEvent](self, 3)
}

var _EventStrings = [4]string{
	"operation",
	"subgraph",
	"http",
	"extension",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Event) String() string {
	return _EventStrings[v.Tag()]
}

// EventQueue represents the imported resource "grafbase:sdk/event-queue#event-queue".
//
//	resource event-queue
type EventQueue cm.Resource

// ResourceDrop represents the imported resource-drop for resource "event-queue".
//
// Drops a resource handle.
//
//go:nosplit
func (self EventQueue) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_EventQueueResourceDrop((uint32)(self0))
	return
}

// Pop represents the imported method "pop".
//
// Returns the oldest log entry from the request event queue.
//
//	pop: func() -> option<event>
//
//go:nosplit
func (self EventQueue) Pop() (result cm.Option[Event]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_EventQueuePop((uint32)(self0), &result)
	return
}
