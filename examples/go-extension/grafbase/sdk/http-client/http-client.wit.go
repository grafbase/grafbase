// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package httpclient represents the imported interface "grafbase:sdk/http-client".
package httpclient

import (
	"example.com/grafbase-go-extension/grafbase/sdk/headers"
	"go.bytecodealliance.org/cm"
)

// Headers represents the imported type alias "grafbase:sdk/http-client#headers".
//
// See [headers.Headers] for more information.
type Headers = headers.Headers

// HTTPClient represents the imported resource "grafbase:sdk/http-client#http-client".
//
// A HTTP client.
//
//	resource http-client
type HTTPClient cm.Resource

// ResourceDrop represents the imported resource-drop for resource "http-client".
//
// Drops a resource handle.
//
//go:nosplit
func (self HTTPClient) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_HTTPClientResourceDrop((uint32)(self0))
	return
}

// HTTPClientExecute represents the imported static function "execute".
//
// Executes a request and returns the response, yielding the current future until
// finished.
//
//	execute: static func(request: http-request) -> result<http-response, http-error>
//
//go:nosplit
func HTTPClientExecute(request HTTPRequest) (result cm.Result[HTTPResponseShape, HTTPResponse, HTTPError]) {
	request0, request1, request2, request3, request4, request5, request6, request7 := lower_HTTPRequest(request)
	wasmimport_HTTPClientExecute((uint32)(request0), (*uint8)(request1), (uint32)(request2), (uint32)(request3), (*uint8)(request4), (uint32)(request5), (uint32)(request6), (uint64)(request7), &result)
	return
}

// HTTPClientExecuteMany represents the imported static function "execute-many".
//
// Executes multiple requests in parallel, yielding the current future until all requests
// are done.
//
//	execute-many: static func(requests: list<http-request>) -> list<result<http-response,
//	http-error>>
//
//go:nosplit
func HTTPClientExecuteMany(requests cm.List[HTTPRequest]) (result cm.List[cm.Result[HTTPResponseShape, HTTPResponse, HTTPError]]) {
	requests0, requests1 := cm.LowerList(requests)
	wasmimport_HTTPClientExecuteMany((*HTTPRequest)(requests0), (uint32)(requests1), &result)
	return
}

// HTTPMethod represents the enum "grafbase:sdk/http-client#http-method".
//
// The HTTP method.
//
//	enum http-method {
//		get,
//		post,
//		put,
//		delete,
//		patch,
//		head,
//		options,
//		connect,
//		trace
//	}
type HTTPMethod uint8

const (
	// The GET method requests a representation of the specified resource. Requests using
	// GET should only retrieve data.
	HTTPMethodGet HTTPMethod = iota

	// The POST method is used to submit an entity to the specified resource, often causing
	// a change in state or side effects on the server.
	HTTPMethodPost

	// The PUT method replaces all current representations of the target resource with
	// the request payload.
	HTTPMethodPut

	// The DELETE method deletes the specified resource.
	HTTPMethodDelete

	// The PATCH method is used to apply partial modifications to a resource.
	HTTPMethodPatch

	// The HEAD method asks for a response identical to that of a GET request, but without
	// the response body.
	HTTPMethodHead

	// The OPTIONS method is used to describe the communication options for the target
	// resource.
	HTTPMethodOptions

	// The CONNECT method establishes a tunnel to the server identified by the target
	// resource.
	HTTPMethodConnect

	// The TRACE method performs a message loop-back test along the path to the target
	// resource.
	HTTPMethodTrace
)

var _HTTPMethodStrings = [9]string{
	"get",
	"post",
	"put",
	"delete",
	"patch",
	"head",
	"options",
	"connect",
	"trace",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e HTTPMethod) String() string {
	return _HTTPMethodStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e HTTPMethod) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *HTTPMethod) UnmarshalText(text []byte) error {
	return _HTTPMethodUnmarshalCase(e, text)
}

var _HTTPMethodUnmarshalCase = cm.CaseUnmarshaler[HTTPMethod](_HTTPMethodStrings[:])

// HTTPRequest represents the imported record "grafbase:sdk/http-client#http-request".
//
// A HTTP request.
//
//	record http-request {
//		method: http-method,
//		url: string,
//		headers: headers,
//		body: list<u8>,
//		timeout-ms: option<u64>,
//	}
type HTTPRequest struct {
	_ cm.HostLayout `json:"-"`
	// The HTTP method.
	Method HTTPMethod `json:"method"`

	// The URL to send the request to.
	URL string `json:"url"`

	// The headers to send with the request. Keys and values must be ASCII strings.
	Headers Headers `json:"headers"`

	// The body of the request. If the body is set, the Content-Type header must be set.
	Body cm.List[uint8] `json:"body"`

	// The timeout in milliseconds for the request. If not set, no timeout is used.
	TimeoutMs cm.Option[uint64] `json:"timeout-ms"`
}

// HTTPResponse represents the imported record "grafbase:sdk/http-client#http-response".
//
// An HTTP response.
//
//	record http-response {
//		status: u16,
//		headers: headers,
//		body: list<u8>,
//	}
type HTTPResponse struct {
	_ cm.HostLayout `json:"-"`
	// The HTTP status code.
	Status uint16 `json:"status"`

	// The headers of the response.
	Headers Headers `json:"headers"`

	// The body of the response.
	Body cm.List[uint8] `json:"body"`
}

// HTTPVersion represents the enum "grafbase:sdk/http-client#http-version".
//
// The HTTP version.
//
//	enum http-version {
//		http09,
//		http10,
//		http11,
//		http20,
//		http30
//	}
type HTTPVersion uint8

const (
	// The HTTP/0.9 version.
	HTTPVersionHttp09 HTTPVersion = iota

	// The HTTP/1.0 version.
	HTTPVersionHttp10

	// The HTTP/1.1 version.
	HTTPVersionHttp11

	// The HTTP/2.0 version.
	HTTPVersionHttp20

	// The HTTP/3.0 version.
	HTTPVersionHttp30
)

var _HTTPVersionStrings = [5]string{
	"http09",
	"http10",
	"http11",
	"http20",
	"http30",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e HTTPVersion) String() string {
	return _HTTPVersionStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e HTTPVersion) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *HTTPVersion) UnmarshalText(text []byte) error {
	return _HTTPVersionUnmarshalCase(e, text)
}

var _HTTPVersionUnmarshalCase = cm.CaseUnmarshaler[HTTPVersion](_HTTPVersionStrings[:])

// HTTPError represents the variant "grafbase:sdk/http-client#http-error".
//
// An HTTP error.
//
//	variant http-error {
//		timeout,
//		request(string),
//		connect(string),
//	}
type HTTPError cm.Variant[uint8, string, string]

// HTTPErrorTimeout returns a [HTTPError] of case "timeout".
//
// The request timed out.
func HTTPErrorTimeout() HTTPError {
	var data struct{}
	return cm.New[HTTPError](0, data)
}

// Timeout returns true if [HTTPError] represents the variant case "timeout".
func (self *HTTPError) Timeout() bool {
	return self.Tag() == 0
}

// HTTPErrorRequest returns a [HTTPError] of case "request".
//
// The request failed due to an error (invalid user data).
func HTTPErrorRequest(data string) HTTPError {
	return cm.New[HTTPError](1, data)
}

// Request returns a non-nil *[string] if [HTTPError] represents the variant case "request".
func (self *HTTPError) Request() *string {
	return cm.Case[string](self, 1)
}

// HTTPErrorConnect returns a [HTTPError] of case "connect".
//
// The request failed due to an error (server connection failed).
func HTTPErrorConnect(data string) HTTPError {
	return cm.New[HTTPError](2, data)
}

// Connect returns a non-nil *[string] if [HTTPError] represents the variant case "connect".
func (self *HTTPError) Connect() *string {
	return cm.Case[string](self, 2)
}

var _HTTPErrorStrings = [3]string{
	"timeout",
	"request",
	"connect",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v HTTPError) String() string {
	return _HTTPErrorStrings[v.Tag()]
}
