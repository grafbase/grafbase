// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package accesslog represents the imported interface "grafbase:sdk/access-log".
package accesslog

import (
	"go.bytecodealliance.org/cm"
)

// AccessLog represents the imported resource "grafbase:sdk/access-log#access-log".
//
// A sender for the system access log.
//
//	resource access-log
type AccessLog cm.Resource

// ResourceDrop represents the imported resource-drop for resource "access-log".
//
// Drops a resource handle.
//
//go:nosplit
func (self AccessLog) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AccessLogResourceDrop((uint32)(self0))
	return
}

// AccessLogSend represents the imported static function "send".
//
// Sends the data to the access log.
//
//	send: static func(data: list<u8>) -> result<_, log-error>
//
//go:nosplit
func AccessLogSend(data cm.List[uint8]) (result cm.Result[LogError, struct{}, LogError]) {
	data0, data1 := cm.LowerList(data)
	wasmimport_AccessLogSend((*uint8)(data0), (uint32)(data1), &result)
	return
}

// LogError represents the variant "grafbase:sdk/access-log#log-error".
//
// Error variant sent if failing to write to access log.
//
//	variant log-error {
//		channel-full(list<u8>),
//		channel-closed,
//	}
type LogError cm.Variant[uint8, cm.List[uint8], cm.List[uint8]]

// LogErrorChannelFull returns a [LogError] of case "channel-full".
//
// The log channel is over capacity. The data is returned to the caller.
func LogErrorChannelFull(data cm.List[uint8]) LogError {
	return cm.New[LogError](0, data)
}

// ChannelFull returns a non-nil *[cm.List[uint8]] if [LogError] represents the variant case "channel-full".
func (self *LogError) ChannelFull() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 0)
}

// LogErrorChannelClosed returns a [LogError] of case "channel-closed".
//
// The channel is closed.
func LogErrorChannelClosed() LogError {
	var data struct{}
	return cm.New[LogError](1, data)
}

// ChannelClosed returns true if [LogError] represents the variant case "channel-closed".
func (self *LogError) ChannelClosed() bool {
	return self.Tag() == 1
}

var _LogErrorStrings = [2]string{
	"channel-full",
	"channel-closed",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v LogError) String() string {
	return _LogErrorStrings[v.Tag()]
}
