// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package postgres represents the imported interface "grafbase:sdk/postgres".
package postgres

import (
	"go.bytecodealliance.org/cm"
)

// PgPoolOptions represents the record "grafbase:sdk/postgres#pg-pool-options".
//
// Configuration options for a Postgre connection pool.
//
//	record pg-pool-options {
//		max-connections: option<u32>,
//		min-connections: option<u32>,
//		idle-timeout-ms: option<u64>,
//		acquisition-timeout-ms: option<u64>,
//		max-lifetime-ms: option<u64>,
//	}
type PgPoolOptions struct {
	_ cm.HostLayout `json:"-"`
	// Maximum number of connections the pool can have open at once.
	// Default is 10.
	MaxConnections cm.Option[uint32] `json:"max-connections"`

	// Minimum number of idle connections to maintain in the pool.
	// Default is 0.
	MinConnections cm.Option[uint32] `json:"min-connections"`

	// Maximum time in milliseconds that a connection can remain idle before being closed.
	// Default is 10 minutes.
	IdleTimeoutMs cm.Option[uint64] `json:"idle-timeout-ms"`

	// Maximum time in milliseconds to wait to acquire a connection before timing out.
	// Default is 30 seconds.
	AcquisitionTimeoutMs cm.Option[uint64] `json:"acquisition-timeout-ms"`

	// Maximum lifetime in milliseconds of a connection before it is closed and replaced.
	// Default is 30 minutes.
	MaxLifetimeMs cm.Option[uint64] `json:"max-lifetime-ms"`
}

// PgType represents the enum "grafbase:sdk/postgres#pg-type".
//
// Postgres data types that can be used in parameters and results.
//
//	enum pg-type {
//		boolean,
//		int16,
//		int32,
//		int64,
//		float32,
//		float64,
//		%string,
//		bytes,
//		point,
//		interval,
//		cidr,
//		xml,
//		macaddr,
//		macaddr8,
//		bit,
//		varbit,
//		oid,
//		json,
//		jsonb,
//		money,
//		numeric,
//		decimal,
//		time,
//		timetz,
//		date,
//		datetime,
//		inet,
//		timestamp,
//		timestamptz,
//		uuid
//	}
type PgType uint8

const (
	// Boolean type
	PgTypeBoolean PgType = iota

	// 16-bit signed integer
	PgTypeInt16

	// 32-bit signed integer
	PgTypeInt32

	// 64-bit signed integer
	PgTypeInt64

	// 32-bit floating point number
	PgTypeFloat32

	// 64-bit floating point number
	PgTypeFloat64

	// Text or character string, or anything that can be bound as string
	PgTypeString

	// Binary data (bytea)
	PgTypeBytes

	// Geometric point on a plane
	PgTypePoint

	// Time interval
	PgTypeInterval

	// cidr
	PgTypeCidr

	// XML
	PgTypeXML

	// MAC address (6 bytes)
	PgTypeMacaddr

	// MAC address (8 bytes, EUI-64)
	PgTypeMacaddr8

	// Bit string
	PgTypeBit

	// Variable-length bit string
	PgTypeVarbit

	// Object identifier (OID), typically an unsigned 32-bit integer
	PgTypeOid

	// JSON data type (text representation)
	PgTypeJSON

	// Binary JSON data type (more efficient storage and processing)
	PgTypeJsonb

	// Money type
	PgTypeMoney

	// Numeric type
	PgTypeNumeric

	// Decimal type
	PgTypeDecimal

	// Time of day (no time zone)
	PgTypeTime

	// Time of day with time zone
	PgTypeTimetz

	// Calendar date (year, month, day)
	PgTypeDate

	// Timestamp (date and time)
	PgTypeDateTime

	// IP address
	PgTypeInet

	// Timestamp without time zone
	PgTypeTimestamp

	// Timestamp with time zone
	PgTypeTimestamptz

	// UUID type
	PgTypeUUID
)

var _PgTypeStrings = [30]string{
	"boolean",
	"int16",
	"int32",
	"int64",
	"float32",
	"float64",
	"string",
	"bytes",
	"point",
	"interval",
	"cidr",
	"xml",
	"macaddr",
	"macaddr8",
	"bit",
	"varbit",
	"oid",
	"json",
	"jsonb",
	"money",
	"numeric",
	"decimal",
	"time",
	"timetz",
	"date",
	"datetime",
	"inet",
	"timestamp",
	"timestamptz",
	"uuid",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e PgType) String() string {
	return _PgTypeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e PgType) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *PgType) UnmarshalText(text []byte) error {
	return _PgTypeUnmarshalCase(e, text)
}

var _PgTypeUnmarshalCase = cm.CaseUnmarshaler[PgType](_PgTypeStrings[:])

// PgValue represents the variant "grafbase:sdk/postgres#pg-value".
//
// Represents a Postgres value that can be used in query parameters.
//
//	variant pg-value {
//		null,
//		boolean(bool),
//		int16(s16),
//		int32(s32),
//		int64(s64),
//		float32(f32),
//		float64(f64),
//		%string(string),
//		bytes(list<u8>),
//		array(list<u64>),
//		point(tuple<f64, f64>),
//		interval(tuple<s32, s32, s64>),
//	}
type PgValue cm.Variant[uint8, TupleF64F64Shape, [2]float64]

// PgValueNull returns a [PgValue] of case "null".
//
// A NULL value.
func PgValueNull() PgValue {
	var data struct{}
	return cm.New[PgValue](0, data)
}

// Null returns true if [PgValue] represents the variant case "null".
func (self *PgValue) Null() bool {
	return self.Tag() == 0
}

// PgValueBoolean returns a [PgValue] of case "boolean".
//
// A boolean value.
func PgValueBoolean(data bool) PgValue {
	return cm.New[PgValue](1, data)
}

// Boolean returns a non-nil *[bool] if [PgValue] represents the variant case "boolean".
func (self *PgValue) Boolean() *bool {
	return cm.Case[bool](self, 1)
}

// PgValueInt16 returns a [PgValue] of case "int16".
//
// A 16-bit signed integer.
func PgValueInt16(data int16) PgValue {
	return cm.New[PgValue](2, data)
}

// Int16 returns a non-nil *[int16] if [PgValue] represents the variant case "int16".
func (self *PgValue) Int16() *int16 {
	return cm.Case[int16](self, 2)
}

// PgValueInt32 returns a [PgValue] of case "int32".
//
// A 32-bit signed integer.
func PgValueInt32(data int32) PgValue {
	return cm.New[PgValue](3, data)
}

// Int32 returns a non-nil *[int32] if [PgValue] represents the variant case "int32".
func (self *PgValue) Int32() *int32 {
	return cm.Case[int32](self, 3)
}

// PgValueInt64 returns a [PgValue] of case "int64".
//
// A 64-bit signed integer.
func PgValueInt64(data int64) PgValue {
	return cm.New[PgValue](4, data)
}

// Int64 returns a non-nil *[int64] if [PgValue] represents the variant case "int64".
func (self *PgValue) Int64() *int64 {
	return cm.Case[int64](self, 4)
}

// PgValueFloat32 returns a [PgValue] of case "float32".
//
// A 32-bit floating point number.
func PgValueFloat32(data float32) PgValue {
	return cm.New[PgValue](5, data)
}

// Float32 returns a non-nil *[float32] if [PgValue] represents the variant case "float32".
func (self *PgValue) Float32() *float32 {
	return cm.Case[float32](self, 5)
}

// PgValueFloat64 returns a [PgValue] of case "float64".
//
// A 64-bit floating point number.
func PgValueFloat64(data float64) PgValue {
	return cm.New[PgValue](6, data)
}

// Float64 returns a non-nil *[float64] if [PgValue] represents the variant case "float64".
func (self *PgValue) Float64() *float64 {
	return cm.Case[float64](self, 6)
}

// PgValueString_ returns a [PgValue] of case "string".
//
// A string value.
func PgValueString_(data string) PgValue {
	return cm.New[PgValue](7, data)
}

// String_ returns a non-nil *[string] if [PgValue] represents the variant case "string".
func (self *PgValue) String_() *string {
	return cm.Case[string](self, 7)
}

// PgValueBytes returns a [PgValue] of case "bytes".
//
// Binary data.
func PgValueBytes(data cm.List[uint8]) PgValue {
	return cm.New[PgValue](8, data)
}

// Bytes returns a non-nil *[cm.List[uint8]] if [PgValue] represents the variant case "bytes".
func (self *PgValue) Bytes() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 8)
}

// PgValueArray returns a [PgValue] of case "array".
//
// An array of PostgreSQL values. The list value represents a point
// in a pg-value-tree, that should always be sent together with a
// list of pg-values.
func PgValueArray(data cm.List[uint64]) PgValue {
	return cm.New[PgValue](9, data)
}

// Array returns a non-nil *[cm.List[uint64]] if [PgValue] represents the variant case "array".
func (self *PgValue) Array() *cm.List[uint64] {
	return cm.Case[cm.List[uint64]](self, 9)
}

// PgValuePoint returns a [PgValue] of case "point".
//
// A geometric point represented as (x, y).
func PgValuePoint(data [2]float64) PgValue {
	return cm.New[PgValue](10, data)
}

// Point returns a non-nil *[[2]float64] if [PgValue] represents the variant case "point".
func (self *PgValue) Point() *[2]float64 {
	return cm.Case[[2]float64](self, 10)
}

// PgValueInterval returns a [PgValue] of case "interval".
//
// A time interval in (months, days, microseconds).
func PgValueInterval(data cm.Tuple3[int32, int32, int64]) PgValue {
	return cm.New[PgValue](11, data)
}

// Interval returns a non-nil *[cm.Tuple3[int32, int32, int64]] if [PgValue] represents the variant case "interval".
func (self *PgValue) Interval() *cm.Tuple3[int32, int32, int64] {
	return cm.Case[cm.Tuple3[int32, int32, int64]](self, 11)
}

var _PgValueStrings = [12]string{
	"null",
	"boolean",
	"int16",
	"int32",
	"int64",
	"float32",
	"float64",
	"string",
	"bytes",
	"array",
	"point",
	"interval",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v PgValue) String() string {
	return _PgValueStrings[v.Tag()]
}

// PgBoundValue represents the record "grafbase:sdk/postgres#pg-bound-value".
//
// Represents a PostgreSQL value that has been bound to a parameter with explicit
// type information.
// This is used for cases where the type cannot be inferred from the Rust type alone,
// or when dealing with null values for specific types, particularly arrays.
//
//	record pg-bound-value {
//		value: pg-value,
//		%type: pg-type,
//		is-array: bool,
//	}
type PgBoundValue struct {
	_ cm.HostLayout `json:"-"`
	// The actual data value to be bound
	Value PgValue `json:"value"`

	// The PostgreSQL type that this value should be treated as
	Type PgType `json:"type"`

	// Whether this value should be treated as an array of the specified type
	IsArray bool `json:"is-array"`
}

// PgValueTree represents the list "grafbase:sdk/postgres#pg-value-tree".
//
// Represents a structure of all list values returned with a Postgres query.
// This is just due to WIT not supporting recursive types.
//
//	type pg-value-tree = list<pg-value>
type PgValueTree cm.List[PgValue]

// PgPool represents the imported resource "grafbase:sdk/postgres#pg-pool".
//
// A connection pool for PostgreSQL.
//
//	resource pg-pool
type PgPool cm.Resource

// ResourceDrop represents the imported resource-drop for resource "pg-pool".
//
// Drops a resource handle.
//
//go:nosplit
func (self PgPool) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgPoolResourceDrop((uint32)(self0))
	return
}

// PgPoolConnect represents the imported static function "connect".
//
// Creates a new connection pool with the specified URL and options.
//
// # Arguments
// * `name` - a unique name for the pool
// * `url` - The PostgreSQL connection URL
// * `options` - Configuration options for the connection pool
//
// # Returns
// * A new connection pool on success
// * Error if the pool could not be created
//
//	connect: static func(name: string, url: string, options: pg-pool-options) -> result<pg-pool,
//	string>
//
//go:nosplit
func PgPoolConnect(name string, url string, options PgPoolOptions) (result cm.Result[string, PgPool, string]) {
	name0, name1 := cm.LowerString(name)
	url0, url1 := cm.LowerString(url)
	options0, options1, options2, options3, options4, options5, options6, options7, options8, options9 := lower_PgPoolOptions(options)
	wasmimport_PgPoolConnect((*uint8)(name0), (uint32)(name1), (*uint8)(url0), (uint32)(url1), (uint32)(options0), (uint32)(options1), (uint32)(options2), (uint32)(options3), (uint32)(options4), (uint64)(options5), (uint32)(options6), (uint64)(options7), (uint32)(options8), (uint64)(options9), &result)
	return
}

// Acquire represents the imported method "acquire".
//
// Acquires a connection from the pool.
//
// # Returns
// * A connection from the pool on success
// * Error if a connection could not be acquired
//
//	acquire: func() -> result<pg-connection, string>
//
//go:nosplit
func (self PgPool) Acquire() (result cm.Result[string, PgConnection, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgPoolAcquire((uint32)(self0), &result)
	return
}

// BeginTransaction represents the imported method "begin-transaction".
//
// Begins a new transaction.
//
// # Returns
// * A new transaction on success
// * Error if the transaction could not be started
//
//	begin-transaction: func() -> result<pg-transaction, string>
//
//go:nosplit
func (self PgPool) BeginTransaction() (result cm.Result[string, PgTransaction, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgPoolBeginTransaction((uint32)(self0), &result)
	return
}

// PgConnection represents the imported resource "grafbase:sdk/postgres#pg-connection".
//
// A connection to a PostgreSQL database.
//
//	resource pg-connection
type PgConnection cm.Resource

// ResourceDrop represents the imported resource-drop for resource "pg-connection".
//
// Drops a resource handle.
//
//go:nosplit
func (self PgConnection) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgConnectionResourceDrop((uint32)(self0))
	return
}

// Execute represents the imported method "execute".
//
// Executes a query and returns the number of rows affected.
//
// # Arguments
// * `query` - The SQL query to execute
// * `params` - Parameters to bind to the query
//
// # Returns
// * Number of rows affected on success
// * Error if the query failed
//
//	execute: func(query: string, params: tuple<list<pg-bound-value>, pg-value-tree>)
//	-> result<u64, string>
//
//go:nosplit
func (self PgConnection) Execute(query string, params cm.Tuple[cm.List[PgBoundValue], PgValueTree]) (result cm.Result[string, uint64, string]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	params0, params1, params2, params3 := lower_TupleListPgBoundValuePgValueTree(params)
	wasmimport_PgConnectionExecute((uint32)(self0), (*uint8)(query0), (uint32)(query1), (*PgBoundValue)(params0), (uint32)(params1), (*PgValue)(params2), (uint32)(params3), &result)
	return
}

// Query represents the imported method "query".
//
// Executes a query and returns the resulting rows.
//
// # Arguments
// * `query` - The SQL query to execute
// * `params` - Parameters to bind to the query
//
// # Returns
// * List of rows returned by the query on success
// * Error if the query failed
//
//	query: func(query: string, params: tuple<list<pg-bound-value>, pg-value-tree>)
//	-> result<list<pg-row>, string>
//
//go:nosplit
func (self PgConnection) Query(query string, params cm.Tuple[cm.List[PgBoundValue], PgValueTree]) (result cm.Result[cm.List[PgRow], cm.List[PgRow], string]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	params0, params1, params2, params3 := lower_TupleListPgBoundValuePgValueTree(params)
	wasmimport_PgConnectionQuery((uint32)(self0), (*uint8)(query0), (uint32)(query1), (*PgBoundValue)(params0), (uint32)(params1), (*PgValue)(params2), (uint32)(params3), &result)
	return
}

// PgRow represents the imported resource "grafbase:sdk/postgres#pg-row".
//
// A row from a PostgreSQL query result.
//
//	resource pg-row
type PgRow cm.Resource

// ResourceDrop represents the imported resource-drop for resource "pg-row".
//
// Drops a resource handle.
//
//go:nosplit
func (self PgRow) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgRowResourceDrop((uint32)(self0))
	return
}

// AsBytes represents the imported method "as-bytes".
//
// Gets the bytes of a value at the specified column index.
//
// # Arguments
// * `index` - The zero-based index of the column
//
// # Returns
// * Bytes representing the value on success
// * Error if the index is out of bounds or the value cannot be retrieved
//
//	as-bytes: func(index: u64) -> result<option<list<u8>>, string>
//
//go:nosplit
func (self PgRow) AsBytes(index uint64) (result cm.Result[OptionListU8Shape, cm.Option[cm.List[uint8]], string]) {
	self0 := cm.Reinterpret[uint32](self)
	index0 := (uint64)(index)
	wasmimport_PgRowAsBytes((uint32)(self0), (uint64)(index0), &result)
	return
}

// Columns represents the imported method "columns".
//
// Returns the column names of the result set.
//
// # Returns
// * List of column names
//
//	columns: func() -> list<string>
//
//go:nosplit
func (self PgRow) Columns() (result cm.List[string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgRowColumns((uint32)(self0), &result)
	return
}

// Len represents the imported method "len".
//
// Returns the number of columns in the result row.
//
// # Returns
// * The number of columns in the row
//
//	len: func() -> u64
//
//go:nosplit
func (self PgRow) Len() (result uint64) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_PgRowLen((uint32)(self0))
	result = (uint64)((uint64)(result0))
	return
}

// PgTransaction represents the imported resource "grafbase:sdk/postgres#pg-transaction".
//
// A transaction within a PostgreSQL database.
//
//	resource pg-transaction
type PgTransaction cm.Resource

// ResourceDrop represents the imported resource-drop for resource "pg-transaction".
//
// Drops a resource handle.
//
//go:nosplit
func (self PgTransaction) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgTransactionResourceDrop((uint32)(self0))
	return
}

// Commit represents the imported method "commit".
//
// Commits the transaction.
//
// # Returns
// * Success if the transaction was committed
// * Error if the commit failed
//
//	commit: func() -> result<_, string>
//
//go:nosplit
func (self PgTransaction) Commit() (result cm.Result[string, struct{}, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgTransactionCommit((uint32)(self0), &result)
	return
}

// Execute represents the imported method "execute".
//
// Executes a query within the transaction and returns the number of rows affected.
//
// # Arguments
// * `query` - The SQL query to execute
// * `params` - Parameters to bind to the query
//
// # Returns
// * Number of rows affected on success
// * Error if the query failed
//
//	execute: func(query: string, params: tuple<list<pg-bound-value>, pg-value-tree>)
//	-> result<u64, string>
//
//go:nosplit
func (self PgTransaction) Execute(query string, params cm.Tuple[cm.List[PgBoundValue], PgValueTree]) (result cm.Result[string, uint64, string]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	params0, params1, params2, params3 := lower_TupleListPgBoundValuePgValueTree(params)
	wasmimport_PgTransactionExecute((uint32)(self0), (*uint8)(query0), (uint32)(query1), (*PgBoundValue)(params0), (uint32)(params1), (*PgValue)(params2), (uint32)(params3), &result)
	return
}

// Query represents the imported method "query".
//
// Executes a query within the transaction and returns the resulting rows.
//
// # Arguments
// * `query` - The SQL query to execute
// * `params` - Parameters to bind to the query
//
// # Returns
// * List of rows returned by the query on success
// * Error if the query failed
//
//	query: func(query: string, params: tuple<list<pg-bound-value>, pg-value-tree>)
//	-> result<list<pg-row>, string>
//
//go:nosplit
func (self PgTransaction) Query(query string, params cm.Tuple[cm.List[PgBoundValue], PgValueTree]) (result cm.Result[cm.List[PgRow], cm.List[PgRow], string]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	params0, params1, params2, params3 := lower_TupleListPgBoundValuePgValueTree(params)
	wasmimport_PgTransactionQuery((uint32)(self0), (*uint8)(query0), (uint32)(query1), (*PgBoundValue)(params0), (uint32)(params1), (*PgValue)(params2), (uint32)(params3), &result)
	return
}

// Rollback represents the imported method "rollback".
//
// Rolls back the transaction.
//
// # Returns
// * Success if the transaction was rolled back
// * Error if the rollback failed
//
//	rollback: func() -> result<_, string>
//
//go:nosplit
func (self PgTransaction) Rollback() (result cm.Result[string, struct{}, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_PgTransactionRollback((uint32)(self0), &result)
	return
}
