"""Directs the executor to return values as a Streaming response."""
directive @live on QUERY

"""Indicates that an input object is a oneOf input object"""
directive @oneOf on INPUT_OBJECT

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime

type Message {
  author: String!

  """when the model was created"""
  createdAt: DateTime!

  """Unique identifier"""
  id: ID!
  message: String!

  """when the model was updated"""
  updatedAt: DateTime!
}

input MessageByInput {
  id: ID
}

type MessageConnection {
  edges: [MessageEdge]

  """Information to aid in pagination"""
  pageInfo: PageInfo!
}

"""Input to create a Message"""
input MessageCreateInput {
  author: String!
  message: String!
}

type MessageCreatePayload {
  message: Message
}

type MessageDeletePayload {
  deletedId: ID!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

input MessageOrderByInput {
  createdAt: OrderByDirection
}

"""Input to update a Message"""
input MessageUpdateInput {
  author: String
  message: String
}

type MessageUpdatePayload {
  message: Message
}

type Mutation {
  """Create a Message"""
  messageCreate(input: MessageCreateInput!): MessageCreatePayload

  """Delete a Message by ID or unique field"""
  messageDelete(by: MessageByInput!): MessageDeletePayload

  """Update a Message"""
  messageUpdate(by: MessageByInput!, input: MessageUpdateInput!): MessageUpdatePayload
}

enum OrderByDirection {
  ASC
  DESC
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  """Query a single Message by an ID or a unique field"""
  message(
    """The field and value by which to query the Message"""
    by: MessageByInput!
  ): Message

  """Paginated query to fetch the whole list of `Message`."""
  messageCollection(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput): MessageConnection
}
